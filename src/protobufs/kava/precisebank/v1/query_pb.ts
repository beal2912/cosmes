// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file kava/precisebank/v1/query.proto (package kava.precisebank.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * QueryTotalFractionalBalancesRequest defines the request type for Query/TotalFractionalBalances method.
 *
 * @generated from message kava.precisebank.v1.QueryTotalFractionalBalancesRequest
 */
export class QueryTotalFractionalBalancesRequest extends Message<QueryTotalFractionalBalancesRequest> {
  constructor(data?: PartialMessage<QueryTotalFractionalBalancesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.precisebank.v1.QueryTotalFractionalBalancesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTotalFractionalBalancesRequest {
    return new QueryTotalFractionalBalancesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTotalFractionalBalancesRequest {
    return new QueryTotalFractionalBalancesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTotalFractionalBalancesRequest {
    return new QueryTotalFractionalBalancesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTotalFractionalBalancesRequest | PlainMessage<QueryTotalFractionalBalancesRequest> | undefined, b: QueryTotalFractionalBalancesRequest | PlainMessage<QueryTotalFractionalBalancesRequest> | undefined): boolean {
    return proto3.util.equals(QueryTotalFractionalBalancesRequest, a, b);
  }
}

/**
 * QueryTotalFractionalBalancesResponse defines the response type for Query/TotalFractionalBalances method.
 *
 * @generated from message kava.precisebank.v1.QueryTotalFractionalBalancesResponse
 */
export class QueryTotalFractionalBalancesResponse extends Message<QueryTotalFractionalBalancesResponse> {
  /**
   * total is the total sum of all fractional balances managed by the precisebank
   * module.
   *
   * @generated from field: cosmos.base.v1beta1.Coin total = 1;
   */
  total?: Coin;

  constructor(data?: PartialMessage<QueryTotalFractionalBalancesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.precisebank.v1.QueryTotalFractionalBalancesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTotalFractionalBalancesResponse {
    return new QueryTotalFractionalBalancesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTotalFractionalBalancesResponse {
    return new QueryTotalFractionalBalancesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTotalFractionalBalancesResponse {
    return new QueryTotalFractionalBalancesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTotalFractionalBalancesResponse | PlainMessage<QueryTotalFractionalBalancesResponse> | undefined, b: QueryTotalFractionalBalancesResponse | PlainMessage<QueryTotalFractionalBalancesResponse> | undefined): boolean {
    return proto3.util.equals(QueryTotalFractionalBalancesResponse, a, b);
  }
}

/**
 * QueryRemainderRequest defines the request type for Query/Remainder method.
 *
 * @generated from message kava.precisebank.v1.QueryRemainderRequest
 */
export class QueryRemainderRequest extends Message<QueryRemainderRequest> {
  constructor(data?: PartialMessage<QueryRemainderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.precisebank.v1.QueryRemainderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRemainderRequest {
    return new QueryRemainderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRemainderRequest {
    return new QueryRemainderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRemainderRequest {
    return new QueryRemainderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRemainderRequest | PlainMessage<QueryRemainderRequest> | undefined, b: QueryRemainderRequest | PlainMessage<QueryRemainderRequest> | undefined): boolean {
    return proto3.util.equals(QueryRemainderRequest, a, b);
  }
}

/**
 * QueryRemainderResponse defines the response type for Query/Remainder method.
 *
 * @generated from message kava.precisebank.v1.QueryRemainderResponse
 */
export class QueryRemainderResponse extends Message<QueryRemainderResponse> {
  /**
   * remainder is the amount backed by the reserve, but not yet owned by any
   * account, i.e. not in circulation.
   *
   * @generated from field: cosmos.base.v1beta1.Coin remainder = 1;
   */
  remainder?: Coin;

  constructor(data?: PartialMessage<QueryRemainderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.precisebank.v1.QueryRemainderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "remainder", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRemainderResponse {
    return new QueryRemainderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRemainderResponse {
    return new QueryRemainderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRemainderResponse {
    return new QueryRemainderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRemainderResponse | PlainMessage<QueryRemainderResponse> | undefined, b: QueryRemainderResponse | PlainMessage<QueryRemainderResponse> | undefined): boolean {
    return proto3.util.equals(QueryRemainderResponse, a, b);
  }
}

/**
 * QueryFractionalBalanceRequest defines the request type for Query/FractionalBalance method.
 *
 * @generated from message kava.precisebank.v1.QueryFractionalBalanceRequest
 */
export class QueryFractionalBalanceRequest extends Message<QueryFractionalBalanceRequest> {
  /**
   * address is the account address to query  fractional balance for.
   *
   * @generated from field: string address = 1;
   */
  address = "";

  constructor(data?: PartialMessage<QueryFractionalBalanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.precisebank.v1.QueryFractionalBalanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFractionalBalanceRequest {
    return new QueryFractionalBalanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFractionalBalanceRequest {
    return new QueryFractionalBalanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFractionalBalanceRequest {
    return new QueryFractionalBalanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryFractionalBalanceRequest | PlainMessage<QueryFractionalBalanceRequest> | undefined, b: QueryFractionalBalanceRequest | PlainMessage<QueryFractionalBalanceRequest> | undefined): boolean {
    return proto3.util.equals(QueryFractionalBalanceRequest, a, b);
  }
}

/**
 * QueryFractionalBalanceResponse defines the response type for Query/FractionalBalance method.
 *
 * @generated from message kava.precisebank.v1.QueryFractionalBalanceResponse
 */
export class QueryFractionalBalanceResponse extends Message<QueryFractionalBalanceResponse> {
  /**
   * fractional_balance is the fractional balance of the address.
   *
   * @generated from field: cosmos.base.v1beta1.Coin fractional_balance = 1;
   */
  fractionalBalance?: Coin;

  constructor(data?: PartialMessage<QueryFractionalBalanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.precisebank.v1.QueryFractionalBalanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fractional_balance", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFractionalBalanceResponse {
    return new QueryFractionalBalanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFractionalBalanceResponse {
    return new QueryFractionalBalanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFractionalBalanceResponse {
    return new QueryFractionalBalanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryFractionalBalanceResponse | PlainMessage<QueryFractionalBalanceResponse> | undefined, b: QueryFractionalBalanceResponse | PlainMessage<QueryFractionalBalanceResponse> | undefined): boolean {
    return proto3.util.equals(QueryFractionalBalanceResponse, a, b);
  }
}

