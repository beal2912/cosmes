// Copyright Tharsis Labs Ltd.(Evmos)
// SPDX-License-Identifier:ENCL-1.0(https://github.com/evmos/evmos/blob/main/LICENSE)

// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file evmos/incentives/v1/incentives.proto (package evmos.incentives.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { DecCoin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * Incentive defines an instance that organizes distribution conditions for a
 * given smart contract
 *
 * @generated from message evmos.incentives.v1.Incentive
 */
export class Incentive extends Message<Incentive> {
  /**
   * contract address of the smart contract to be incentivized
   *
   * @generated from field: string contract = 1;
   */
  contract = "";

  /**
   * allocations is a slice of denoms and percentages of rewards to be allocated
   *
   * @generated from field: repeated cosmos.base.v1beta1.DecCoin allocations = 2;
   */
  allocations: DecCoin[] = [];

  /**
   * epochs defines the number of remaining epochs for the incentive
   *
   * @generated from field: uint32 epochs = 3;
   */
  epochs = 0;

  /**
   * start_time of the incentive distribution
   *
   * @generated from field: google.protobuf.Timestamp start_time = 4;
   */
  startTime?: Timestamp;

  /**
   * total_gas is the cumulative gas spent by all gas meters of the incentive during the epoch
   *
   * @generated from field: uint64 total_gas = 5;
   */
  totalGas = protoInt64.zero;

  constructor(data?: PartialMessage<Incentive>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.incentives.v1.Incentive";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "allocations", kind: "message", T: DecCoin, repeated: true },
    { no: 3, name: "epochs", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "start_time", kind: "message", T: Timestamp },
    { no: 5, name: "total_gas", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Incentive {
    return new Incentive().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Incentive {
    return new Incentive().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Incentive {
    return new Incentive().fromJsonString(jsonString, options);
  }

  static equals(a: Incentive | PlainMessage<Incentive> | undefined, b: Incentive | PlainMessage<Incentive> | undefined): boolean {
    return proto3.util.equals(Incentive, a, b);
  }
}

/**
 * GasMeter tracks the cumulative gas spent per participant in one epoch
 *
 * @generated from message evmos.incentives.v1.GasMeter
 */
export class GasMeter extends Message<GasMeter> {
  /**
   * contract is the hex address of the incentivized smart contract
   *
   * @generated from field: string contract = 1;
   */
  contract = "";

  /**
   * participant address that interacts with the incentive
   *
   * @generated from field: string participant = 2;
   */
  participant = "";

  /**
   * cumulative_gas spent during the epoch
   *
   * @generated from field: uint64 cumulative_gas = 3;
   */
  cumulativeGas = protoInt64.zero;

  constructor(data?: PartialMessage<GasMeter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.incentives.v1.GasMeter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "participant", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "cumulative_gas", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GasMeter {
    return new GasMeter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GasMeter {
    return new GasMeter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GasMeter {
    return new GasMeter().fromJsonString(jsonString, options);
  }

  static equals(a: GasMeter | PlainMessage<GasMeter> | undefined, b: GasMeter | PlainMessage<GasMeter> | undefined): boolean {
    return proto3.util.equals(GasMeter, a, b);
  }
}

/**
 * RegisterIncentiveProposal is a gov Content type to register an incentive
 *
 * @generated from message evmos.incentives.v1.RegisterIncentiveProposal
 */
export class RegisterIncentiveProposal extends Message<RegisterIncentiveProposal> {
  /**
   * title of the proposal
   *
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * description of the proposal
   *
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * contract address to be registered
   *
   * @generated from field: string contract = 3;
   */
  contract = "";

  /**
   * allocations defines the denoms and percentage of rewards to be allocated
   *
   * @generated from field: repeated cosmos.base.v1beta1.DecCoin allocations = 4;
   */
  allocations: DecCoin[] = [];

  /**
   * epochs is the number of remaining epochs for the incentive
   *
   * @generated from field: uint32 epochs = 5;
   */
  epochs = 0;

  constructor(data?: PartialMessage<RegisterIncentiveProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.incentives.v1.RegisterIncentiveProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "allocations", kind: "message", T: DecCoin, repeated: true },
    { no: 5, name: "epochs", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterIncentiveProposal {
    return new RegisterIncentiveProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterIncentiveProposal {
    return new RegisterIncentiveProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterIncentiveProposal {
    return new RegisterIncentiveProposal().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterIncentiveProposal | PlainMessage<RegisterIncentiveProposal> | undefined, b: RegisterIncentiveProposal | PlainMessage<RegisterIncentiveProposal> | undefined): boolean {
    return proto3.util.equals(RegisterIncentiveProposal, a, b);
  }
}

/**
 * CancelIncentiveProposal is a gov Content type to cancel an incentive
 *
 * @generated from message evmos.incentives.v1.CancelIncentiveProposal
 */
export class CancelIncentiveProposal extends Message<CancelIncentiveProposal> {
  /**
   * title of the proposal
   *
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * description of the proposal
   *
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * contract address of the incentivized smart contract
   *
   * @generated from field: string contract = 3;
   */
  contract = "";

  constructor(data?: PartialMessage<CancelIncentiveProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.incentives.v1.CancelIncentiveProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CancelIncentiveProposal {
    return new CancelIncentiveProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CancelIncentiveProposal {
    return new CancelIncentiveProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CancelIncentiveProposal {
    return new CancelIncentiveProposal().fromJsonString(jsonString, options);
  }

  static equals(a: CancelIncentiveProposal | PlainMessage<CancelIncentiveProposal> | undefined, b: CancelIncentiveProposal | PlainMessage<CancelIncentiveProposal> | undefined): boolean {
    return proto3.util.equals(CancelIncentiveProposal, a, b);
  }
}

