// Copyright Tharsis Labs Ltd.(Evmos)
// SPDX-License-Identifier:ENCL-1.0(https://github.com/evmos/evmos/blob/main/LICENSE)

// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file evmos/incentives/v1/genesis.proto (package evmos.incentives.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { GasMeter, Incentive } from "./incentives_pb.js";

/**
 * GenesisState defines the module's genesis state.
 *
 * @generated from message evmos.incentives.v1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * params are the incentives module parameters
   *
   * @generated from field: evmos.incentives.v1.Params params = 1;
   */
  params?: Params;

  /**
   * incentives is a slice of active incentives
   *
   * @generated from field: repeated evmos.incentives.v1.Incentive incentives = 2;
   */
  incentives: Incentive[] = [];

  /**
   * gas_meters is a slice of active Gasmeters
   *
   * @generated from field: repeated evmos.incentives.v1.GasMeter gas_meters = 3;
   */
  gasMeters: GasMeter[] = [];

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.incentives.v1.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
    { no: 2, name: "incentives", kind: "message", T: Incentive, repeated: true },
    { no: 3, name: "gas_meters", kind: "message", T: GasMeter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

/**
 * Params defines the incentives module params
 *
 * @generated from message evmos.incentives.v1.Params
 */
export class Params extends Message<Params> {
  /**
   * enable_incentives is the parameter to enable incentives
   *
   * @generated from field: bool enable_incentives = 1;
   */
  enableIncentives = false;

  /**
   * allocation_limit is the maximum percentage an incentive can allocate per denomination
   *
   * @generated from field: string allocation_limit = 2;
   */
  allocationLimit = "";

  /**
   * incentives_epoch_identifier for the epochs module hooks
   *
   * @generated from field: string incentives_epoch_identifier = 3;
   */
  incentivesEpochIdentifier = "";

  /**
   * reward_scaler is the scaling factor for capping rewards
   *
   * @generated from field: string reward_scaler = 4;
   */
  rewardScaler = "";

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.incentives.v1.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "enable_incentives", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "allocation_limit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "incentives_epoch_identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "reward_scaler", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}

