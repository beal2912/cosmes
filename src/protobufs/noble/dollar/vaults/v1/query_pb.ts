// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file noble/dollar/vaults/v1/query.proto (package noble.dollar.vaults.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { PausedType, PositionEntry, PositionRewards } from "./vaults_pb.js";

/**
 * @generated from message noble.dollar.vaults.v1.QueryPositionsByProvider
 */
export class QueryPositionsByProvider extends Message<QueryPositionsByProvider> {
  /**
   * @generated from field: string provider = 1;
   */
  provider = "";

  constructor(data?: PartialMessage<QueryPositionsByProvider>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.vaults.v1.QueryPositionsByProvider";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPositionsByProvider {
    return new QueryPositionsByProvider().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPositionsByProvider {
    return new QueryPositionsByProvider().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPositionsByProvider {
    return new QueryPositionsByProvider().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPositionsByProvider | PlainMessage<QueryPositionsByProvider> | undefined, b: QueryPositionsByProvider | PlainMessage<QueryPositionsByProvider> | undefined): boolean {
    return proto3.util.equals(QueryPositionsByProvider, a, b);
  }
}

/**
 * @generated from message noble.dollar.vaults.v1.QueryPositionsByProviderResponse
 */
export class QueryPositionsByProviderResponse extends Message<QueryPositionsByProviderResponse> {
  /**
   * @generated from field: repeated noble.dollar.vaults.v1.PositionEntry positions = 1;
   */
  positions: PositionEntry[] = [];

  constructor(data?: PartialMessage<QueryPositionsByProviderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.vaults.v1.QueryPositionsByProviderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "positions", kind: "message", T: PositionEntry, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPositionsByProviderResponse {
    return new QueryPositionsByProviderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPositionsByProviderResponse {
    return new QueryPositionsByProviderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPositionsByProviderResponse {
    return new QueryPositionsByProviderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPositionsByProviderResponse | PlainMessage<QueryPositionsByProviderResponse> | undefined, b: QueryPositionsByProviderResponse | PlainMessage<QueryPositionsByProviderResponse> | undefined): boolean {
    return proto3.util.equals(QueryPositionsByProviderResponse, a, b);
  }
}

/**
 * @generated from message noble.dollar.vaults.v1.QueryPaused
 */
export class QueryPaused extends Message<QueryPaused> {
  constructor(data?: PartialMessage<QueryPaused>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.vaults.v1.QueryPaused";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPaused {
    return new QueryPaused().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPaused {
    return new QueryPaused().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPaused {
    return new QueryPaused().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPaused | PlainMessage<QueryPaused> | undefined, b: QueryPaused | PlainMessage<QueryPaused> | undefined): boolean {
    return proto3.util.equals(QueryPaused, a, b);
  }
}

/**
 * @generated from message noble.dollar.vaults.v1.QueryPausedResponse
 */
export class QueryPausedResponse extends Message<QueryPausedResponse> {
  /**
   * @generated from field: noble.dollar.vaults.v1.PausedType paused = 1;
   */
  paused = PausedType.NONE;

  constructor(data?: PartialMessage<QueryPausedResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.vaults.v1.QueryPausedResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "paused", kind: "enum", T: proto3.getEnumType(PausedType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPausedResponse {
    return new QueryPausedResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPausedResponse {
    return new QueryPausedResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPausedResponse {
    return new QueryPausedResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPausedResponse | PlainMessage<QueryPausedResponse> | undefined, b: QueryPausedResponse | PlainMessage<QueryPausedResponse> | undefined): boolean {
    return proto3.util.equals(QueryPausedResponse, a, b);
  }
}

/**
 * @generated from message noble.dollar.vaults.v1.QueryPendingRewards
 */
export class QueryPendingRewards extends Message<QueryPendingRewards> {
  constructor(data?: PartialMessage<QueryPendingRewards>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.vaults.v1.QueryPendingRewards";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPendingRewards {
    return new QueryPendingRewards().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPendingRewards {
    return new QueryPendingRewards().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPendingRewards {
    return new QueryPendingRewards().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPendingRewards | PlainMessage<QueryPendingRewards> | undefined, b: QueryPendingRewards | PlainMessage<QueryPendingRewards> | undefined): boolean {
    return proto3.util.equals(QueryPendingRewards, a, b);
  }
}

/**
 * @generated from message noble.dollar.vaults.v1.QueryPendingRewardsResponse
 */
export class QueryPendingRewardsResponse extends Message<QueryPendingRewardsResponse> {
  /**
   * @generated from field: string pending_rewards = 1;
   */
  pendingRewards = "";

  constructor(data?: PartialMessage<QueryPendingRewardsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.vaults.v1.QueryPendingRewardsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pending_rewards", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPendingRewardsResponse {
    return new QueryPendingRewardsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPendingRewardsResponse {
    return new QueryPendingRewardsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPendingRewardsResponse {
    return new QueryPendingRewardsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPendingRewardsResponse | PlainMessage<QueryPendingRewardsResponse> | undefined, b: QueryPendingRewardsResponse | PlainMessage<QueryPendingRewardsResponse> | undefined): boolean {
    return proto3.util.equals(QueryPendingRewardsResponse, a, b);
  }
}

/**
 * @generated from message noble.dollar.vaults.v1.QueryPendingRewardsByProvider
 */
export class QueryPendingRewardsByProvider extends Message<QueryPendingRewardsByProvider> {
  /**
   * @generated from field: string provider = 1;
   */
  provider = "";

  constructor(data?: PartialMessage<QueryPendingRewardsByProvider>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.vaults.v1.QueryPendingRewardsByProvider";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPendingRewardsByProvider {
    return new QueryPendingRewardsByProvider().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPendingRewardsByProvider {
    return new QueryPendingRewardsByProvider().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPendingRewardsByProvider {
    return new QueryPendingRewardsByProvider().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPendingRewardsByProvider | PlainMessage<QueryPendingRewardsByProvider> | undefined, b: QueryPendingRewardsByProvider | PlainMessage<QueryPendingRewardsByProvider> | undefined): boolean {
    return proto3.util.equals(QueryPendingRewardsByProvider, a, b);
  }
}

/**
 * @generated from message noble.dollar.vaults.v1.QueryPendingRewardsByProviderResponse
 */
export class QueryPendingRewardsByProviderResponse extends Message<QueryPendingRewardsByProviderResponse> {
  /**
   * @generated from field: string pending_rewards = 1;
   */
  pendingRewards = "";

  /**
   * @generated from field: repeated noble.dollar.vaults.v1.PositionRewards positions_rewards = 2;
   */
  positionsRewards: PositionRewards[] = [];

  constructor(data?: PartialMessage<QueryPendingRewardsByProviderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.vaults.v1.QueryPendingRewardsByProviderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pending_rewards", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "positions_rewards", kind: "message", T: PositionRewards, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPendingRewardsByProviderResponse {
    return new QueryPendingRewardsByProviderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPendingRewardsByProviderResponse {
    return new QueryPendingRewardsByProviderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPendingRewardsByProviderResponse {
    return new QueryPendingRewardsByProviderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPendingRewardsByProviderResponse | PlainMessage<QueryPendingRewardsByProviderResponse> | undefined, b: QueryPendingRewardsByProviderResponse | PlainMessage<QueryPendingRewardsByProviderResponse> | undefined): boolean {
    return proto3.util.equals(QueryPendingRewardsByProviderResponse, a, b);
  }
}

/**
 * @generated from message noble.dollar.vaults.v1.QueryStats
 */
export class QueryStats extends Message<QueryStats> {
  constructor(data?: PartialMessage<QueryStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.vaults.v1.QueryStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryStats {
    return new QueryStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryStats {
    return new QueryStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryStats {
    return new QueryStats().fromJsonString(jsonString, options);
  }

  static equals(a: QueryStats | PlainMessage<QueryStats> | undefined, b: QueryStats | PlainMessage<QueryStats> | undefined): boolean {
    return proto3.util.equals(QueryStats, a, b);
  }
}

/**
 * @generated from message noble.dollar.vaults.v1.QueryStatsResponse
 */
export class QueryStatsResponse extends Message<QueryStatsResponse> {
  /**
   * @generated from field: string flexible_total_principal = 1;
   */
  flexibleTotalPrincipal = "";

  /**
   * @generated from field: uint64 flexible_total_users = 2;
   */
  flexibleTotalUsers = protoInt64.zero;

  /**
   * @generated from field: string flexible_total_distributed_rewards_principal = 3;
   */
  flexibleTotalDistributedRewardsPrincipal = "";

  /**
   * @generated from field: string staked_total_principal = 4;
   */
  stakedTotalPrincipal = "";

  /**
   * @generated from field: uint64 staked_total_users = 5;
   */
  stakedTotalUsers = protoInt64.zero;

  constructor(data?: PartialMessage<QueryStatsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.vaults.v1.QueryStatsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "flexible_total_principal", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "flexible_total_users", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "flexible_total_distributed_rewards_principal", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "staked_total_principal", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "staked_total_users", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryStatsResponse {
    return new QueryStatsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryStatsResponse {
    return new QueryStatsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryStatsResponse {
    return new QueryStatsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryStatsResponse | PlainMessage<QueryStatsResponse> | undefined, b: QueryStatsResponse | PlainMessage<QueryStatsResponse> | undefined): boolean {
    return proto3.util.equals(QueryStatsResponse, a, b);
  }
}

