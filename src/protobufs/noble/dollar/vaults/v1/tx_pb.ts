// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file noble/dollar/vaults/v1/tx.proto (package noble.dollar.vaults.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { PausedType, VaultType } from "./vaults_pb.js";

/**
 * MsgLock is a message holders of the Noble Dollar can use to lock their $USDN into a Vault to earn rewards.
 *
 * @generated from message noble.dollar.vaults.v1.MsgLock
 */
export class MsgLock extends Message<MsgLock> {
  /**
   * @generated from field: string signer = 1;
   */
  signer = "";

  /**
   * @generated from field: noble.dollar.vaults.v1.VaultType vault = 2;
   */
  vault = VaultType.UNSPECIFIED;

  /**
   * @generated from field: string amount = 3;
   */
  amount = "";

  constructor(data?: PartialMessage<MsgLock>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.vaults.v1.MsgLock";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "vault", kind: "enum", T: proto3.getEnumType(VaultType) },
    { no: 3, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgLock {
    return new MsgLock().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgLock {
    return new MsgLock().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgLock {
    return new MsgLock().fromJsonString(jsonString, options);
  }

  static equals(a: MsgLock | PlainMessage<MsgLock> | undefined, b: MsgLock | PlainMessage<MsgLock> | undefined): boolean {
    return proto3.util.equals(MsgLock, a, b);
  }
}

/**
 * MsgLockResponse is the response of the Lock message.
 *
 * @generated from message noble.dollar.vaults.v1.MsgLockResponse
 */
export class MsgLockResponse extends Message<MsgLockResponse> {
  constructor(data?: PartialMessage<MsgLockResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.vaults.v1.MsgLockResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgLockResponse {
    return new MsgLockResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgLockResponse {
    return new MsgLockResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgLockResponse {
    return new MsgLockResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgLockResponse | PlainMessage<MsgLockResponse> | undefined, b: MsgLockResponse | PlainMessage<MsgLockResponse> | undefined): boolean {
    return proto3.util.equals(MsgLockResponse, a, b);
  }
}

/**
 * MsgUnlock is a message that allows holders of the Noble Dollar to unlock their $USDN from a Vault, releasing their funds and claiming any available rewards.
 *
 * @generated from message noble.dollar.vaults.v1.MsgUnlock
 */
export class MsgUnlock extends Message<MsgUnlock> {
  /**
   * @generated from field: string signer = 1;
   */
  signer = "";

  /**
   * @generated from field: noble.dollar.vaults.v1.VaultType vault = 2;
   */
  vault = VaultType.UNSPECIFIED;

  /**
   * @generated from field: string amount = 3;
   */
  amount = "";

  constructor(data?: PartialMessage<MsgUnlock>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.vaults.v1.MsgUnlock";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "vault", kind: "enum", T: proto3.getEnumType(VaultType) },
    { no: 3, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUnlock {
    return new MsgUnlock().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUnlock {
    return new MsgUnlock().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUnlock {
    return new MsgUnlock().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUnlock | PlainMessage<MsgUnlock> | undefined, b: MsgUnlock | PlainMessage<MsgUnlock> | undefined): boolean {
    return proto3.util.equals(MsgUnlock, a, b);
  }
}

/**
 * MsgLockResponse is the response of the Unlock message.
 *
 * @generated from message noble.dollar.vaults.v1.MsgUnlockResponse
 */
export class MsgUnlockResponse extends Message<MsgUnlockResponse> {
  constructor(data?: PartialMessage<MsgUnlockResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.vaults.v1.MsgUnlockResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUnlockResponse {
    return new MsgUnlockResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUnlockResponse {
    return new MsgUnlockResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUnlockResponse {
    return new MsgUnlockResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUnlockResponse | PlainMessage<MsgUnlockResponse> | undefined, b: MsgUnlockResponse | PlainMessage<MsgUnlockResponse> | undefined): boolean {
    return proto3.util.equals(MsgUnlockResponse, a, b);
  }
}

/**
 * MsgSetPausedState allows the authority to configure the Noble Dollar Vault paused state, enabling or disabling Lock and Unlock actions.
 *
 * @generated from message noble.dollar.vaults.v1.MsgSetPausedState
 */
export class MsgSetPausedState extends Message<MsgSetPausedState> {
  /**
   * @generated from field: string signer = 1;
   */
  signer = "";

  /**
   * @generated from field: noble.dollar.vaults.v1.PausedType paused = 2;
   */
  paused = PausedType.NONE;

  constructor(data?: PartialMessage<MsgSetPausedState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.vaults.v1.MsgSetPausedState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "paused", kind: "enum", T: proto3.getEnumType(PausedType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetPausedState {
    return new MsgSetPausedState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetPausedState {
    return new MsgSetPausedState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetPausedState {
    return new MsgSetPausedState().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetPausedState | PlainMessage<MsgSetPausedState> | undefined, b: MsgSetPausedState | PlainMessage<MsgSetPausedState> | undefined): boolean {
    return proto3.util.equals(MsgSetPausedState, a, b);
  }
}

/**
 * MsgSetPausedStateResponse is the response of the SetPausedState message.
 *
 * @generated from message noble.dollar.vaults.v1.MsgSetPausedStateResponse
 */
export class MsgSetPausedStateResponse extends Message<MsgSetPausedStateResponse> {
  constructor(data?: PartialMessage<MsgSetPausedStateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.vaults.v1.MsgSetPausedStateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetPausedStateResponse {
    return new MsgSetPausedStateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetPausedStateResponse {
    return new MsgSetPausedStateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetPausedStateResponse {
    return new MsgSetPausedStateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetPausedStateResponse | PlainMessage<MsgSetPausedStateResponse> | undefined, b: MsgSetPausedStateResponse | PlainMessage<MsgSetPausedStateResponse> | undefined): boolean {
    return proto3.util.equals(MsgSetPausedStateResponse, a, b);
  }
}

