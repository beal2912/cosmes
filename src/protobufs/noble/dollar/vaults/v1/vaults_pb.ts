// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file noble/dollar/vaults/v1/vaults.proto (package noble.dollar.vaults.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * buf:lint:ignore ENUM_VALUE_PREFIX
 *
 * @generated from enum noble.dollar.vaults.v1.VaultType
 */
export enum VaultType {
  /**
   * buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
   *
   * @generated from enum value: UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: STAKED = 1;
   */
  STAKED = 1,

  /**
   * @generated from enum value: FLEXIBLE = 2;
   */
  FLEXIBLE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(VaultType)
proto3.util.setEnumType(VaultType, "noble.dollar.vaults.v1.VaultType", [
  { no: 0, name: "UNSPECIFIED" },
  { no: 1, name: "STAKED" },
  { no: 2, name: "FLEXIBLE" },
]);

/**
 * buf:lint:ignore ENUM_VALUE_PREFIX
 *
 * @generated from enum noble.dollar.vaults.v1.PausedType
 */
export enum PausedType {
  /**
   * buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
   *
   * @generated from enum value: NONE = 0;
   */
  NONE = 0,

  /**
   * @generated from enum value: LOCK = 1;
   */
  LOCK = 1,

  /**
   * @generated from enum value: UNLOCK = 2;
   */
  UNLOCK = 2,

  /**
   * @generated from enum value: ALL = 3;
   */
  ALL = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(PausedType)
proto3.util.setEnumType(PausedType, "noble.dollar.vaults.v1.PausedType", [
  { no: 0, name: "NONE" },
  { no: 1, name: "LOCK" },
  { no: 2, name: "UNLOCK" },
  { no: 3, name: "ALL" },
]);

/**
 * @generated from message noble.dollar.vaults.v1.Reward
 */
export class Reward extends Message<Reward> {
  /**
   * @generated from field: int64 index = 1;
   */
  index = protoInt64.zero;

  /**
   * @generated from field: string total = 2;
   */
  total = "";

  /**
   * @generated from field: string rewards = 3;
   */
  rewards = "";

  constructor(data?: PartialMessage<Reward>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.vaults.v1.Reward";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "index", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "total", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "rewards", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Reward {
    return new Reward().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Reward {
    return new Reward().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Reward {
    return new Reward().fromJsonString(jsonString, options);
  }

  static equals(a: Reward | PlainMessage<Reward> | undefined, b: Reward | PlainMessage<Reward> | undefined): boolean {
    return proto3.util.equals(Reward, a, b);
  }
}

/**
 * @generated from message noble.dollar.vaults.v1.Position
 */
export class Position extends Message<Position> {
  /**
   * @generated from field: string principal = 1;
   */
  principal = "";

  /**
   * @generated from field: int64 index = 2;
   */
  index = protoInt64.zero;

  /**
   * @generated from field: string amount = 3;
   */
  amount = "";

  /**
   * @generated from field: google.protobuf.Timestamp time = 4;
   */
  time?: Timestamp;

  constructor(data?: PartialMessage<Position>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.vaults.v1.Position";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "principal", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "index", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Position {
    return new Position().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Position {
    return new Position().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Position {
    return new Position().fromJsonString(jsonString, options);
  }

  static equals(a: Position | PlainMessage<Position> | undefined, b: Position | PlainMessage<Position> | undefined): boolean {
    return proto3.util.equals(Position, a, b);
  }
}

/**
 * @generated from message noble.dollar.vaults.v1.PositionRewards
 */
export class PositionRewards extends Message<PositionRewards> {
  /**
   * @generated from field: string amount = 1;
   */
  amount = "";

  /**
   * @generated from field: string pending_rewards = 2;
   */
  pendingRewards = "";

  constructor(data?: PartialMessage<PositionRewards>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.vaults.v1.PositionRewards";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pending_rewards", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PositionRewards {
    return new PositionRewards().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PositionRewards {
    return new PositionRewards().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PositionRewards {
    return new PositionRewards().fromJsonString(jsonString, options);
  }

  static equals(a: PositionRewards | PlainMessage<PositionRewards> | undefined, b: PositionRewards | PlainMessage<PositionRewards> | undefined): boolean {
    return proto3.util.equals(PositionRewards, a, b);
  }
}

/**
 * @generated from message noble.dollar.vaults.v1.PositionEntry
 */
export class PositionEntry extends Message<PositionEntry> {
  /**
   * @generated from field: bytes address = 1;
   */
  address = new Uint8Array(0);

  /**
   * @generated from field: noble.dollar.vaults.v1.VaultType vault = 2;
   */
  vault = VaultType.UNSPECIFIED;

  /**
   * @generated from field: string principal = 3;
   */
  principal = "";

  /**
   * @generated from field: int64 index = 4;
   */
  index = protoInt64.zero;

  /**
   * @generated from field: string amount = 5;
   */
  amount = "";

  /**
   * @generated from field: google.protobuf.Timestamp time = 6;
   */
  time?: Timestamp;

  constructor(data?: PartialMessage<PositionEntry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.vaults.v1.PositionEntry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "vault", kind: "enum", T: proto3.getEnumType(VaultType) },
    { no: 3, name: "principal", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "index", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PositionEntry {
    return new PositionEntry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PositionEntry {
    return new PositionEntry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PositionEntry {
    return new PositionEntry().fromJsonString(jsonString, options);
  }

  static equals(a: PositionEntry | PlainMessage<PositionEntry> | undefined, b: PositionEntry | PlainMessage<PositionEntry> | undefined): boolean {
    return proto3.util.equals(PositionEntry, a, b);
  }
}

/**
 * @generated from message noble.dollar.vaults.v1.Stats
 */
export class Stats extends Message<Stats> {
  /**
   * @generated from field: string flexible_total_principal = 1;
   */
  flexibleTotalPrincipal = "";

  /**
   * @generated from field: uint64 flexible_total_users = 2;
   */
  flexibleTotalUsers = protoInt64.zero;

  /**
   * @generated from field: string flexible_total_distributed_rewards_principal = 3;
   */
  flexibleTotalDistributedRewardsPrincipal = "";

  /**
   * @generated from field: string staked_total_principal = 4;
   */
  stakedTotalPrincipal = "";

  /**
   * @generated from field: uint64 staked_total_users = 5;
   */
  stakedTotalUsers = protoInt64.zero;

  constructor(data?: PartialMessage<Stats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.vaults.v1.Stats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "flexible_total_principal", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "flexible_total_users", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "flexible_total_distributed_rewards_principal", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "staked_total_principal", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "staked_total_users", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Stats {
    return new Stats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Stats {
    return new Stats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Stats {
    return new Stats().fromJsonString(jsonString, options);
  }

  static equals(a: Stats | PlainMessage<Stats> | undefined, b: Stats | PlainMessage<Stats> | undefined): boolean {
    return proto3.util.equals(Stats, a, b);
  }
}

