// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file noble/dollar/vaults/v1/events.proto (package noble.dollar.vaults.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * PositionLocked is an event emitted when a user locks $USDN into a Vault.
 *
 * @generated from message noble.dollar.vaults.v1.PositionLocked
 */
export class PositionLocked extends Message<PositionLocked> {
  /**
   * @generated from field: string account = 1;
   */
  account = "";

  /**
   * @generated from field: string vault_type = 2;
   */
  vaultType = "";

  /**
   * @generated from field: int64 index = 3;
   */
  index = protoInt64.zero;

  /**
   * @generated from field: string amount = 4;
   */
  amount = "";

  /**
   * @generated from field: string principal = 5;
   */
  principal = "";

  constructor(data?: PartialMessage<PositionLocked>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.vaults.v1.PositionLocked";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "vault_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "index", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "principal", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PositionLocked {
    return new PositionLocked().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PositionLocked {
    return new PositionLocked().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PositionLocked {
    return new PositionLocked().fromJsonString(jsonString, options);
  }

  static equals(a: PositionLocked | PlainMessage<PositionLocked> | undefined, b: PositionLocked | PlainMessage<PositionLocked> | undefined): boolean {
    return proto3.util.equals(PositionLocked, a, b);
  }
}

/**
 * PositionUnlocked is an event emitted when a user unlocks their $USDN from a Vault.
 *
 * @generated from message noble.dollar.vaults.v1.PositionUnlocked
 */
export class PositionUnlocked extends Message<PositionUnlocked> {
  /**
   * @generated from field: string account = 1;
   */
  account = "";

  /**
   * @generated from field: string vault_type = 2;
   */
  vaultType = "";

  /**
   * @generated from field: int64 index = 3;
   */
  index = protoInt64.zero;

  /**
   * @generated from field: string amount = 4;
   */
  amount = "";

  /**
   * @generated from field: string principal = 5;
   */
  principal = "";

  constructor(data?: PartialMessage<PositionUnlocked>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.vaults.v1.PositionUnlocked";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "vault_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "index", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "principal", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PositionUnlocked {
    return new PositionUnlocked().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PositionUnlocked {
    return new PositionUnlocked().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PositionUnlocked {
    return new PositionUnlocked().fromJsonString(jsonString, options);
  }

  static equals(a: PositionUnlocked | PlainMessage<PositionUnlocked> | undefined, b: PositionUnlocked | PlainMessage<PositionUnlocked> | undefined): boolean {
    return proto3.util.equals(PositionUnlocked, a, b);
  }
}

/**
 * PausedStateUpdated is an event emitted when the module pause
 * state is changed.
 *
 * @generated from message noble.dollar.vaults.v1.PausedStateUpdated
 */
export class PausedStateUpdated extends Message<PausedStateUpdated> {
  /**
   * @generated from field: string paused = 1;
   */
  paused = "";

  constructor(data?: PartialMessage<PausedStateUpdated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.vaults.v1.PausedStateUpdated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "paused", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PausedStateUpdated {
    return new PausedStateUpdated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PausedStateUpdated {
    return new PausedStateUpdated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PausedStateUpdated {
    return new PausedStateUpdated().fromJsonString(jsonString, options);
  }

  static equals(a: PausedStateUpdated | PlainMessage<PausedStateUpdated> | undefined, b: PausedStateUpdated | PlainMessage<PausedStateUpdated> | undefined): boolean {
    return proto3.util.equals(PausedStateUpdated, a, b);
  }
}

/**
 * RewardClaimed is an event emitted whenever a user claim their rewards.
 *
 * @generated from message noble.dollar.vaults.v1.RewardClaimed
 */
export class RewardClaimed extends Message<RewardClaimed> {
  /**
   * @generated from field: string account = 1;
   */
  account = "";

  /**
   * @generated from field: string amount = 2;
   */
  amount = "";

  constructor(data?: PartialMessage<RewardClaimed>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.vaults.v1.RewardClaimed";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RewardClaimed {
    return new RewardClaimed().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RewardClaimed {
    return new RewardClaimed().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RewardClaimed {
    return new RewardClaimed().fromJsonString(jsonString, options);
  }

  static equals(a: RewardClaimed | PlainMessage<RewardClaimed> | undefined, b: RewardClaimed | PlainMessage<RewardClaimed> | undefined): boolean {
    return proto3.util.equals(RewardClaimed, a, b);
  }
}

