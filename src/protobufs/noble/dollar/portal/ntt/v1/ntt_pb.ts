// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file noble/dollar/portal/ntt/v1/ntt.proto (package noble.dollar.portal.ntt.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * NativeTokenTransfer is the type that stores information about a native token transfer.
 *
 * The wire format of the payload is as follows:
 *   - NativeTokenTransferPrefix - 4 bytes
 *   - numDecimals - 1 byte
 *   - amount - 8 bytes
 *   - sourceToken - 32 bytes
 *   - to - 32 bytes
 *   - toChain - 2 bytes
 *   - additionalPayloadLength - 2 bytes, optional
 *   - additionalPayload - `additionalPayloadLength` bytes
 *
 * https://github.com/wormhole-foundation/native-token-transfers/blob/67df54701e0f4b3793b6c621719911804c9875a3/evm/src/libraries/TransceiverStructs.sol#L97-L119
 *
 * @generated from message noble.dollar.portal.ntt.v1.NativeTokenTransfer
 */
export class NativeTokenTransfer extends Message<NativeTokenTransfer> {
  /**
   * @generated from field: uint64 amount = 1;
   */
  amount = protoInt64.zero;

  /**
   * @generated from field: bytes source_token = 2;
   */
  sourceToken = new Uint8Array(0);

  /**
   * @generated from field: bytes to = 3;
   */
  to = new Uint8Array(0);

  /**
   * @generated from field: uint32 to_chain = 4;
   */
  toChain = 0;

  /**
   * @generated from field: bytes additional_payload = 5;
   */
  additionalPayload = new Uint8Array(0);

  constructor(data?: PartialMessage<NativeTokenTransfer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.portal.ntt.v1.NativeTokenTransfer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "source_token", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "to", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "to_chain", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "additional_payload", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NativeTokenTransfer {
    return new NativeTokenTransfer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NativeTokenTransfer {
    return new NativeTokenTransfer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NativeTokenTransfer {
    return new NativeTokenTransfer().fromJsonString(jsonString, options);
  }

  static equals(a: NativeTokenTransfer | PlainMessage<NativeTokenTransfer> | undefined, b: NativeTokenTransfer | PlainMessage<NativeTokenTransfer> | undefined): boolean {
    return proto3.util.equals(NativeTokenTransfer, a, b);
  }
}

