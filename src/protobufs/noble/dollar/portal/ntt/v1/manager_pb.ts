// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file noble/dollar/portal/ntt/v1/manager.proto (package noble.dollar.portal.ntt.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * ManagerMessage is the type that stores information about a manager message.
 *
 * The wire format of the message is as follows:
 *   - id - 32 bytes
 *   - sender - 32 bytes
 *   - payloadLength - 2 bytes
 *   - payload - `payloadLength` bytes
 *
 * https://github.com/wormhole-foundation/native-token-transfers/blob/67df54701e0f4b3793b6c621719911804c9875a3/evm/src/libraries/TransceiverStructs.sol#L41-L56
 *
 * @generated from message noble.dollar.portal.ntt.v1.ManagerMessage
 */
export class ManagerMessage extends Message<ManagerMessage> {
  /**
   * @generated from field: bytes id = 1;
   */
  id = new Uint8Array(0);

  /**
   * @generated from field: bytes sender = 2;
   */
  sender = new Uint8Array(0);

  /**
   * @generated from field: bytes payload = 3;
   */
  payload = new Uint8Array(0);

  constructor(data?: PartialMessage<ManagerMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.portal.ntt.v1.ManagerMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "sender", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "payload", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ManagerMessage {
    return new ManagerMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ManagerMessage {
    return new ManagerMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ManagerMessage {
    return new ManagerMessage().fromJsonString(jsonString, options);
  }

  static equals(a: ManagerMessage | PlainMessage<ManagerMessage> | undefined, b: ManagerMessage | PlainMessage<ManagerMessage> | undefined): boolean {
    return proto3.util.equals(ManagerMessage, a, b);
  }
}

