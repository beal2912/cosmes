// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file noble/dollar/portal/v1/genesis.proto (package noble.dollar.portal.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { BridgingPath, Peer } from "./portal_pb.js";

/**
 * GenesisState defines the genesis state of the Noble Dollar Portal submodule.
 *
 * @generated from message noble.dollar.portal.v1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * owner is the account that controls the Noble Dollar Portal.
   *
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * paused contains the genesis paused state of the Noble Dollar Portal.
   *
   * @generated from field: bool paused = 2;
   */
  paused = false;

  /**
   * peers contains the genesis peers of the Noble Dollar Portal.
   *
   * @generated from field: map<uint32, noble.dollar.portal.v1.Peer> peers = 3;
   */
  peers: { [key: number]: Peer } = {};

  /**
   * bridging_paths contains the genesis supported bridging paths of the Noble Dollar Portal.
   *
   * @generated from field: repeated noble.dollar.portal.v1.BridgingPath bridging_paths = 4;
   */
  bridgingPaths: BridgingPath[] = [];

  /**
   * nonce contains the next available nonce used for transfers out of the Noble Dollar Portal.
   *
   * @generated from field: uint32 nonce = 5;
   */
  nonce = 0;

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.portal.v1.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "paused", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "peers", kind: "map", K: 13 /* ScalarType.UINT32 */, V: {kind: "message", T: Peer} },
    { no: 4, name: "bridging_paths", kind: "message", T: BridgingPath, repeated: true },
    { no: 5, name: "nonce", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

