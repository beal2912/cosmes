// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file noble/dollar/portal/v1/tx.proto (package noble.dollar.portal.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * MsgDeliver is the entrypoint for delivering Noble Dollar Portal messages.
 * This is the public message to enable permissionless manual relaying, and
 * MsgDeliverInjection is an internal message used only by validators.
 *
 * @generated from message noble.dollar.portal.v1.MsgDeliver
 */
export class MsgDeliver extends Message<MsgDeliver> {
  /**
   * @generated from field: string signer = 1;
   */
  signer = "";

  /**
   * @generated from field: bytes vaa = 2;
   */
  vaa = new Uint8Array(0);

  constructor(data?: PartialMessage<MsgDeliver>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.portal.v1.MsgDeliver";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "vaa", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDeliver {
    return new MsgDeliver().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDeliver {
    return new MsgDeliver().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDeliver {
    return new MsgDeliver().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDeliver | PlainMessage<MsgDeliver> | undefined, b: MsgDeliver | PlainMessage<MsgDeliver> | undefined): boolean {
    return proto3.util.equals(MsgDeliver, a, b);
  }
}

/**
 * MsgDeliverResponse is the response of the Deliver message.
 *
 * @generated from message noble.dollar.portal.v1.MsgDeliverResponse
 */
export class MsgDeliverResponse extends Message<MsgDeliverResponse> {
  constructor(data?: PartialMessage<MsgDeliverResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.portal.v1.MsgDeliverResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDeliverResponse {
    return new MsgDeliverResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDeliverResponse {
    return new MsgDeliverResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDeliverResponse {
    return new MsgDeliverResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDeliverResponse | PlainMessage<MsgDeliverResponse> | undefined, b: MsgDeliverResponse | PlainMessage<MsgDeliverResponse> | undefined): boolean {
    return proto3.util.equals(MsgDeliverResponse, a, b);
  }
}

/**
 * MsgTransfer is the entrypoint for transferring the Noble Dollar cross-chain.
 *
 * @generated from message noble.dollar.portal.v1.MsgTransfer
 */
export class MsgTransfer extends Message<MsgTransfer> {
  /**
   * @generated from field: string signer = 1;
   */
  signer = "";

  /**
   * @generated from field: string amount = 2;
   */
  amount = "";

  /**
   * @generated from field: uint32 destination_chain_id = 3;
   */
  destinationChainId = 0;

  /**
   * @generated from field: bytes destination_token = 4;
   */
  destinationToken = new Uint8Array(0);

  /**
   * @generated from field: bytes recipient = 5;
   */
  recipient = new Uint8Array(0);

  constructor(data?: PartialMessage<MsgTransfer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.portal.v1.MsgTransfer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "destination_chain_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "destination_token", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "recipient", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgTransfer {
    return new MsgTransfer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgTransfer {
    return new MsgTransfer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgTransfer {
    return new MsgTransfer().fromJsonString(jsonString, options);
  }

  static equals(a: MsgTransfer | PlainMessage<MsgTransfer> | undefined, b: MsgTransfer | PlainMessage<MsgTransfer> | undefined): boolean {
    return proto3.util.equals(MsgTransfer, a, b);
  }
}

/**
 * MsgTransferResponse is the response of the Transfer message.
 *
 * @generated from message noble.dollar.portal.v1.MsgTransferResponse
 */
export class MsgTransferResponse extends Message<MsgTransferResponse> {
  constructor(data?: PartialMessage<MsgTransferResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.portal.v1.MsgTransferResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgTransferResponse {
    return new MsgTransferResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgTransferResponse {
    return new MsgTransferResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgTransferResponse {
    return new MsgTransferResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgTransferResponse | PlainMessage<MsgTransferResponse> | undefined, b: MsgTransferResponse | PlainMessage<MsgTransferResponse> | undefined): boolean {
    return proto3.util.equals(MsgTransferResponse, a, b);
  }
}

/**
 * MsgSetPausedState allows the authority to configure the Noble Dollar Portal paused state.
 *
 * @generated from message noble.dollar.portal.v1.MsgSetPausedState
 */
export class MsgSetPausedState extends Message<MsgSetPausedState> {
  /**
   * @generated from field: string signer = 1;
   */
  signer = "";

  /**
   * @generated from field: bool paused = 2;
   */
  paused = false;

  constructor(data?: PartialMessage<MsgSetPausedState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.portal.v1.MsgSetPausedState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "paused", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetPausedState {
    return new MsgSetPausedState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetPausedState {
    return new MsgSetPausedState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetPausedState {
    return new MsgSetPausedState().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetPausedState | PlainMessage<MsgSetPausedState> | undefined, b: MsgSetPausedState | PlainMessage<MsgSetPausedState> | undefined): boolean {
    return proto3.util.equals(MsgSetPausedState, a, b);
  }
}

/**
 * MsgSetPausedStateResponse is the response of the SetPausedState message.
 *
 * @generated from message noble.dollar.portal.v1.MsgSetPausedStateResponse
 */
export class MsgSetPausedStateResponse extends Message<MsgSetPausedStateResponse> {
  constructor(data?: PartialMessage<MsgSetPausedStateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.portal.v1.MsgSetPausedStateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetPausedStateResponse {
    return new MsgSetPausedStateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetPausedStateResponse {
    return new MsgSetPausedStateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetPausedStateResponse {
    return new MsgSetPausedStateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetPausedStateResponse | PlainMessage<MsgSetPausedStateResponse> | undefined, b: MsgSetPausedStateResponse | PlainMessage<MsgSetPausedStateResponse> | undefined): boolean {
    return proto3.util.equals(MsgSetPausedStateResponse, a, b);
  }
}

/**
 * MsgSetPeer allows the Noble Dollar Portal owner to set external peers.
 *
 * @generated from message noble.dollar.portal.v1.MsgSetPeer
 */
export class MsgSetPeer extends Message<MsgSetPeer> {
  /**
   * @generated from field: string signer = 1;
   */
  signer = "";

  /**
   * @generated from field: uint32 chain = 2;
   */
  chain = 0;

  /**
   * @generated from field: bytes transceiver = 3;
   */
  transceiver = new Uint8Array(0);

  /**
   * @generated from field: bytes manager = 4;
   */
  manager = new Uint8Array(0);

  constructor(data?: PartialMessage<MsgSetPeer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.portal.v1.MsgSetPeer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "chain", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "transceiver", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "manager", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetPeer {
    return new MsgSetPeer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetPeer {
    return new MsgSetPeer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetPeer {
    return new MsgSetPeer().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetPeer | PlainMessage<MsgSetPeer> | undefined, b: MsgSetPeer | PlainMessage<MsgSetPeer> | undefined): boolean {
    return proto3.util.equals(MsgSetPeer, a, b);
  }
}

/**
 * MsgSetPeerResponse is the response of the SetPeer message.
 *
 * @generated from message noble.dollar.portal.v1.MsgSetPeerResponse
 */
export class MsgSetPeerResponse extends Message<MsgSetPeerResponse> {
  constructor(data?: PartialMessage<MsgSetPeerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.portal.v1.MsgSetPeerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetPeerResponse {
    return new MsgSetPeerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetPeerResponse {
    return new MsgSetPeerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetPeerResponse {
    return new MsgSetPeerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetPeerResponse | PlainMessage<MsgSetPeerResponse> | undefined, b: MsgSetPeerResponse | PlainMessage<MsgSetPeerResponse> | undefined): boolean {
    return proto3.util.equals(MsgSetPeerResponse, a, b);
  }
}

/**
 * MsgSetBridgingPath allows the Noble Dollar Portal owner to set supported bridging paths.
 *
 * @generated from message noble.dollar.portal.v1.MsgSetBridgingPath
 */
export class MsgSetBridgingPath extends Message<MsgSetBridgingPath> {
  /**
   * @generated from field: string signer = 1;
   */
  signer = "";

  /**
   * @generated from field: uint32 destination_chain_id = 2;
   */
  destinationChainId = 0;

  /**
   * @generated from field: bytes destination_token = 3;
   */
  destinationToken = new Uint8Array(0);

  /**
   * @generated from field: bool supported = 4;
   */
  supported = false;

  constructor(data?: PartialMessage<MsgSetBridgingPath>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.portal.v1.MsgSetBridgingPath";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "destination_chain_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "destination_token", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "supported", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetBridgingPath {
    return new MsgSetBridgingPath().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetBridgingPath {
    return new MsgSetBridgingPath().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetBridgingPath {
    return new MsgSetBridgingPath().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetBridgingPath | PlainMessage<MsgSetBridgingPath> | undefined, b: MsgSetBridgingPath | PlainMessage<MsgSetBridgingPath> | undefined): boolean {
    return proto3.util.equals(MsgSetBridgingPath, a, b);
  }
}

/**
 * MsgSetBridgingPathResponse is the response of the SetBridgingPath message.
 *
 * @generated from message noble.dollar.portal.v1.MsgSetBridgingPathResponse
 */
export class MsgSetBridgingPathResponse extends Message<MsgSetBridgingPathResponse> {
  constructor(data?: PartialMessage<MsgSetBridgingPathResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.portal.v1.MsgSetBridgingPathResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetBridgingPathResponse {
    return new MsgSetBridgingPathResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetBridgingPathResponse {
    return new MsgSetBridgingPathResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetBridgingPathResponse {
    return new MsgSetBridgingPathResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetBridgingPathResponse | PlainMessage<MsgSetBridgingPathResponse> | undefined, b: MsgSetBridgingPathResponse | PlainMessage<MsgSetBridgingPathResponse> | undefined): boolean {
    return proto3.util.equals(MsgSetBridgingPathResponse, a, b);
  }
}

/**
 * MsgTransferOwnership allows the Noble Dollar Portal ownership to be transferred.
 *
 * @generated from message noble.dollar.portal.v1.MsgTransferOwnership
 */
export class MsgTransferOwnership extends Message<MsgTransferOwnership> {
  /**
   * @generated from field: string signer = 1;
   */
  signer = "";

  /**
   * @generated from field: string new_owner = 2;
   */
  newOwner = "";

  constructor(data?: PartialMessage<MsgTransferOwnership>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.portal.v1.MsgTransferOwnership";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "new_owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgTransferOwnership {
    return new MsgTransferOwnership().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgTransferOwnership {
    return new MsgTransferOwnership().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgTransferOwnership {
    return new MsgTransferOwnership().fromJsonString(jsonString, options);
  }

  static equals(a: MsgTransferOwnership | PlainMessage<MsgTransferOwnership> | undefined, b: MsgTransferOwnership | PlainMessage<MsgTransferOwnership> | undefined): boolean {
    return proto3.util.equals(MsgTransferOwnership, a, b);
  }
}

/**
 * MsgTransferOwnershipResponse is the response of the TransferOwnership message.
 *
 * @generated from message noble.dollar.portal.v1.MsgTransferOwnershipResponse
 */
export class MsgTransferOwnershipResponse extends Message<MsgTransferOwnershipResponse> {
  constructor(data?: PartialMessage<MsgTransferOwnershipResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.portal.v1.MsgTransferOwnershipResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgTransferOwnershipResponse {
    return new MsgTransferOwnershipResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgTransferOwnershipResponse {
    return new MsgTransferOwnershipResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgTransferOwnershipResponse {
    return new MsgTransferOwnershipResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgTransferOwnershipResponse | PlainMessage<MsgTransferOwnershipResponse> | undefined, b: MsgTransferOwnershipResponse | PlainMessage<MsgTransferOwnershipResponse> | undefined): boolean {
    return proto3.util.equals(MsgTransferOwnershipResponse, a, b);
  }
}

