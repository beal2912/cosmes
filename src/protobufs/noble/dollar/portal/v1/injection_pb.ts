// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file noble/dollar/portal/v1/injection.proto (package noble.dollar.portal.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * MsgDeliverInjection is an internal message type used for delivering Noble
 * Dollar Portal messages. It is specifically used to insert VAA's into the top
 * of a block via ABCI++.
 *
 * @generated from message noble.dollar.portal.v1.MsgDeliverInjection
 */
export class MsgDeliverInjection extends Message<MsgDeliverInjection> {
  /**
   * @generated from field: bytes vaa = 1;
   */
  vaa = new Uint8Array(0);

  constructor(data?: PartialMessage<MsgDeliverInjection>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.portal.v1.MsgDeliverInjection";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vaa", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDeliverInjection {
    return new MsgDeliverInjection().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDeliverInjection {
    return new MsgDeliverInjection().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDeliverInjection {
    return new MsgDeliverInjection().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDeliverInjection | PlainMessage<MsgDeliverInjection> | undefined, b: MsgDeliverInjection | PlainMessage<MsgDeliverInjection> | undefined): boolean {
    return proto3.util.equals(MsgDeliverInjection, a, b);
  }
}

