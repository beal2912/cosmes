// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file noble/dollar/portal/v1/events.proto (package noble.dollar.portal.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * Delivered is the event emitted when a vaa is successfully delivered.
 *
 * @generated from message noble.dollar.portal.v1.Delivered
 */
export class Delivered extends Message<Delivered> {
  /**
   * @generated from field: bytes vaa = 1;
   */
  vaa = new Uint8Array(0);

  constructor(data?: PartialMessage<Delivered>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.portal.v1.Delivered";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vaa", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Delivered {
    return new Delivered().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Delivered {
    return new Delivered().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Delivered {
    return new Delivered().fromJsonString(jsonString, options);
  }

  static equals(a: Delivered | PlainMessage<Delivered> | undefined, b: Delivered | PlainMessage<Delivered> | undefined): boolean {
    return proto3.util.equals(Delivered, a, b);
  }
}

/**
 * MTokenReceived is the event emitted when M tokens are received on Noble.
 *
 * https://github.com/m0-foundation/m-portal/blob/682481178808005a160e41d5318242c1abc2f88f/src/Portal.sol#L382-L382
 *
 * @generated from message noble.dollar.portal.v1.MTokenReceived
 */
export class MTokenReceived extends Message<MTokenReceived> {
  /**
   * @generated from field: uint32 source_chain_id = 1;
   */
  sourceChainId = 0;

  /**
   * @generated from field: bytes destination_token = 2;
   */
  destinationToken = new Uint8Array(0);

  /**
   * @generated from field: bytes sender = 3;
   */
  sender = new Uint8Array(0);

  /**
   * @generated from field: string recipient = 4;
   */
  recipient = "";

  /**
   * @generated from field: string amount = 5;
   */
  amount = "";

  /**
   * @generated from field: int64 index = 6;
   */
  index = protoInt64.zero;

  /**
   * @generated from field: bytes message_id = 7;
   */
  messageId = new Uint8Array(0);

  constructor(data?: PartialMessage<MTokenReceived>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.portal.v1.MTokenReceived";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "source_chain_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "destination_token", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "sender", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "recipient", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "index", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "message_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MTokenReceived {
    return new MTokenReceived().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MTokenReceived {
    return new MTokenReceived().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MTokenReceived {
    return new MTokenReceived().fromJsonString(jsonString, options);
  }

  static equals(a: MTokenReceived | PlainMessage<MTokenReceived> | undefined, b: MTokenReceived | PlainMessage<MTokenReceived> | undefined): boolean {
    return proto3.util.equals(MTokenReceived, a, b);
  }
}

/**
 * TransferRedeemed is an event emitted when a transfer has been redeemed.
 *
 * https://github.com/m0-foundation/m-portal/blob/682481178808005a160e41d5318242c1abc2f88f/src/Portal.sol#L384-L385
 *
 * @generated from message noble.dollar.portal.v1.TransferRedeemed
 */
export class TransferRedeemed extends Message<TransferRedeemed> {
  /**
   * @generated from field: bytes digest = 1;
   */
  digest = new Uint8Array(0);

  constructor(data?: PartialMessage<TransferRedeemed>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.portal.v1.TransferRedeemed";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "digest", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransferRedeemed {
    return new TransferRedeemed().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransferRedeemed {
    return new TransferRedeemed().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransferRedeemed {
    return new TransferRedeemed().fromJsonString(jsonString, options);
  }

  static equals(a: TransferRedeemed | PlainMessage<TransferRedeemed> | undefined, b: TransferRedeemed | PlainMessage<TransferRedeemed> | undefined): boolean {
    return proto3.util.equals(TransferRedeemed, a, b);
  }
}

/**
 * USDNTokenSent is an event emitted after transferring USDN tokens via Wormhole.
 *
 * https://github.com/m0-foundation/m-portal/blob/682481178808005a160e41d5318242c1abc2f88f/src/Portal.sol#L240-L249
 *
 * @generated from message noble.dollar.portal.v1.USDNTokenSent
 */
export class USDNTokenSent extends Message<USDNTokenSent> {
  /**
   * @generated from field: string source_token = 1;
   */
  sourceToken = "";

  /**
   * @generated from field: uint32 destination_chain_id = 2;
   */
  destinationChainId = 0;

  /**
   * @generated from field: bytes destination_token = 3;
   */
  destinationToken = new Uint8Array(0);

  /**
   * @generated from field: string sender = 4;
   */
  sender = "";

  /**
   * @generated from field: bytes recipient = 5;
   */
  recipient = new Uint8Array(0);

  /**
   * @generated from field: string amount = 6;
   */
  amount = "";

  /**
   * @generated from field: int64 index = 7;
   */
  index = protoInt64.zero;

  /**
   * @generated from field: bytes message_id = 8;
   */
  messageId = new Uint8Array(0);

  constructor(data?: PartialMessage<USDNTokenSent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.portal.v1.USDNTokenSent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "source_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "destination_chain_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "destination_token", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "recipient", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "index", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "message_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): USDNTokenSent {
    return new USDNTokenSent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): USDNTokenSent {
    return new USDNTokenSent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): USDNTokenSent {
    return new USDNTokenSent().fromJsonString(jsonString, options);
  }

  static equals(a: USDNTokenSent | PlainMessage<USDNTokenSent> | undefined, b: USDNTokenSent | PlainMessage<USDNTokenSent> | undefined): boolean {
    return proto3.util.equals(USDNTokenSent, a, b);
  }
}

/**
 * PeerUpdated is an event emitted whenever a peer is updated.
 *
 * @generated from message noble.dollar.portal.v1.PeerUpdated
 */
export class PeerUpdated extends Message<PeerUpdated> {
  /**
   * @generated from field: uint32 chain = 1;
   */
  chain = 0;

  /**
   * @generated from field: bytes old_transceiver = 2;
   */
  oldTransceiver = new Uint8Array(0);

  /**
   * @generated from field: bytes new_transceiver = 3;
   */
  newTransceiver = new Uint8Array(0);

  /**
   * @generated from field: bytes old_manager = 4;
   */
  oldManager = new Uint8Array(0);

  /**
   * @generated from field: bytes new_manager = 5;
   */
  newManager = new Uint8Array(0);

  constructor(data?: PartialMessage<PeerUpdated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.portal.v1.PeerUpdated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chain", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "old_transceiver", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "new_transceiver", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "old_manager", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "new_manager", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PeerUpdated {
    return new PeerUpdated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PeerUpdated {
    return new PeerUpdated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PeerUpdated {
    return new PeerUpdated().fromJsonString(jsonString, options);
  }

  static equals(a: PeerUpdated | PlainMessage<PeerUpdated> | undefined, b: PeerUpdated | PlainMessage<PeerUpdated> | undefined): boolean {
    return proto3.util.equals(PeerUpdated, a, b);
  }
}

/**
 * BridgingPathSet is an event emitted whenever a supported bridging path is set.
 *
 * @generated from message noble.dollar.portal.v1.BridgingPathSet
 */
export class BridgingPathSet extends Message<BridgingPathSet> {
  /**
   * @generated from field: uint32 destination_chain_id = 1;
   */
  destinationChainId = 0;

  /**
   * @generated from field: bytes destination_token = 2;
   */
  destinationToken = new Uint8Array(0);

  /**
   * @generated from field: bool supported = 3;
   */
  supported = false;

  constructor(data?: PartialMessage<BridgingPathSet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.portal.v1.BridgingPathSet";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "destination_chain_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "destination_token", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "supported", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BridgingPathSet {
    return new BridgingPathSet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BridgingPathSet {
    return new BridgingPathSet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BridgingPathSet {
    return new BridgingPathSet().fromJsonString(jsonString, options);
  }

  static equals(a: BridgingPathSet | PlainMessage<BridgingPathSet> | undefined, b: BridgingPathSet | PlainMessage<BridgingPathSet> | undefined): boolean {
    return proto3.util.equals(BridgingPathSet, a, b);
  }
}

/**
 * OwnershipTransferred is an event emitted whenever an ownership transfer occurs.
 *
 * @generated from message noble.dollar.portal.v1.OwnershipTransferred
 */
export class OwnershipTransferred extends Message<OwnershipTransferred> {
  /**
   * @generated from field: string previous_owner = 1;
   */
  previousOwner = "";

  /**
   * @generated from field: string new_owner = 2;
   */
  newOwner = "";

  constructor(data?: PartialMessage<OwnershipTransferred>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.portal.v1.OwnershipTransferred";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "previous_owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "new_owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OwnershipTransferred {
    return new OwnershipTransferred().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OwnershipTransferred {
    return new OwnershipTransferred().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OwnershipTransferred {
    return new OwnershipTransferred().fromJsonString(jsonString, options);
  }

  static equals(a: OwnershipTransferred | PlainMessage<OwnershipTransferred> | undefined, b: OwnershipTransferred | PlainMessage<OwnershipTransferred> | undefined): boolean {
    return proto3.util.equals(OwnershipTransferred, a, b);
  }
}

/**
 * Paused is an event emitted when the portal pause
 * state is changed to paused.
 *
 * @generated from message noble.dollar.portal.v1.Paused
 */
export class Paused extends Message<Paused> {
  constructor(data?: PartialMessage<Paused>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.portal.v1.Paused";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Paused {
    return new Paused().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Paused {
    return new Paused().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Paused {
    return new Paused().fromJsonString(jsonString, options);
  }

  static equals(a: Paused | PlainMessage<Paused> | undefined, b: Paused | PlainMessage<Paused> | undefined): boolean {
    return proto3.util.equals(Paused, a, b);
  }
}

/**
 * Unpaused is an event emitted when the portal pause
 * state is changed to unpaused.
 *
 * @generated from message noble.dollar.portal.v1.Unpaused
 */
export class Unpaused extends Message<Unpaused> {
  constructor(data?: PartialMessage<Unpaused>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.portal.v1.Unpaused";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Unpaused {
    return new Unpaused().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Unpaused {
    return new Unpaused().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Unpaused {
    return new Unpaused().fromJsonString(jsonString, options);
  }

  static equals(a: Unpaused | PlainMessage<Unpaused> | undefined, b: Unpaused | PlainMessage<Unpaused> | undefined): boolean {
    return proto3.util.equals(Unpaused, a, b);
  }
}

