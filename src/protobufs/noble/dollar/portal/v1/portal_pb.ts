// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file noble/dollar/portal/v1/portal.proto (package noble.dollar.portal.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Peer is the type that stores information about a peer.
 *
 * @generated from message noble.dollar.portal.v1.Peer
 */
export class Peer extends Message<Peer> {
  /**
   * @generated from field: bytes transceiver = 1;
   */
  transceiver = new Uint8Array(0);

  /**
   * @generated from field: bytes manager = 2;
   */
  manager = new Uint8Array(0);

  constructor(data?: PartialMessage<Peer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.portal.v1.Peer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transceiver", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "manager", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Peer {
    return new Peer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Peer {
    return new Peer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Peer {
    return new Peer().fromJsonString(jsonString, options);
  }

  static equals(a: Peer | PlainMessage<Peer> | undefined, b: Peer | PlainMessage<Peer> | undefined): boolean {
    return proto3.util.equals(Peer, a, b);
  }
}

/**
 * BridgingPath is the type that stores information about a supported bridging path.
 *
 * @generated from message noble.dollar.portal.v1.BridgingPath
 */
export class BridgingPath extends Message<BridgingPath> {
  /**
   * @generated from field: uint32 destination_chain_id = 1;
   */
  destinationChainId = 0;

  /**
   * @generated from field: bytes destination_token = 2;
   */
  destinationToken = new Uint8Array(0);

  constructor(data?: PartialMessage<BridgingPath>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.portal.v1.BridgingPath";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "destination_chain_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "destination_token", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BridgingPath {
    return new BridgingPath().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BridgingPath {
    return new BridgingPath().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BridgingPath {
    return new BridgingPath().fromJsonString(jsonString, options);
  }

  static equals(a: BridgingPath | PlainMessage<BridgingPath> | undefined, b: BridgingPath | PlainMessage<BridgingPath> | undefined): boolean {
    return proto3.util.equals(BridgingPath, a, b);
  }
}

