// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file noble/dollar/v1/dollar.proto (package noble.dollar.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message noble.dollar.v1.Stats
 */
export class Stats extends Message<Stats> {
  /**
   * @generated from field: uint64 total_holders = 1;
   */
  totalHolders = protoInt64.zero;

  /**
   * @generated from field: string total_principal = 2;
   */
  totalPrincipal = "";

  /**
   * @generated from field: string total_yield_accrued = 3;
   */
  totalYieldAccrued = "";

  constructor(data?: PartialMessage<Stats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.v1.Stats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total_holders", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "total_principal", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "total_yield_accrued", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Stats {
    return new Stats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Stats {
    return new Stats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Stats {
    return new Stats().fromJsonString(jsonString, options);
  }

  static equals(a: Stats | PlainMessage<Stats> | undefined, b: Stats | PlainMessage<Stats> | undefined): boolean {
    return proto3.util.equals(Stats, a, b);
  }
}

