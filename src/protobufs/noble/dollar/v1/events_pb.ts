// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file noble/dollar/v1/events.proto (package noble.dollar.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * Paused is an event emitted when the module pause
 * state is changed to paused.
 *
 * @generated from message noble.dollar.v1.Paused
 */
export class Paused extends Message<Paused> {
  constructor(data?: PartialMessage<Paused>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.v1.Paused";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Paused {
    return new Paused().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Paused {
    return new Paused().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Paused {
    return new Paused().fromJsonString(jsonString, options);
  }

  static equals(a: Paused | PlainMessage<Paused> | undefined, b: Paused | PlainMessage<Paused> | undefined): boolean {
    return proto3.util.equals(Paused, a, b);
  }
}

/**
 * Unpaused is an event emitted when the module pause
 * state is changed to unpaused.
 *
 * @generated from message noble.dollar.v1.Unpaused
 */
export class Unpaused extends Message<Unpaused> {
  constructor(data?: PartialMessage<Unpaused>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.v1.Unpaused";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Unpaused {
    return new Unpaused().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Unpaused {
    return new Unpaused().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Unpaused {
    return new Unpaused().fromJsonString(jsonString, options);
  }

  static equals(a: Unpaused | PlainMessage<Unpaused> | undefined, b: Unpaused | PlainMessage<Unpaused> | undefined): boolean {
    return proto3.util.equals(Unpaused, a, b);
  }
}

/**
 * YieldClaimed is an event emitted whenever a user claims
 * accrued yield.
 *
 * @generated from message noble.dollar.v1.YieldClaimed
 */
export class YieldClaimed extends Message<YieldClaimed> {
  /**
   * @generated from field: string account = 1;
   */
  account = "";

  /**
   * @generated from field: string amount = 2;
   */
  amount = "";

  constructor(data?: PartialMessage<YieldClaimed>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.v1.YieldClaimed";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): YieldClaimed {
    return new YieldClaimed().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): YieldClaimed {
    return new YieldClaimed().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): YieldClaimed {
    return new YieldClaimed().fromJsonString(jsonString, options);
  }

  static equals(a: YieldClaimed | PlainMessage<YieldClaimed> | undefined, b: YieldClaimed | PlainMessage<YieldClaimed> | undefined): boolean {
    return proto3.util.equals(YieldClaimed, a, b);
  }
}

/**
 * IndexUpdated is an event emitted when the index is updated.
 *
 * @generated from message noble.dollar.v1.IndexUpdated
 */
export class IndexUpdated extends Message<IndexUpdated> {
  /**
   * @generated from field: int64 old_index = 1;
   */
  oldIndex = protoInt64.zero;

  /**
   * @generated from field: int64 new_index = 2;
   */
  newIndex = protoInt64.zero;

  /**
   * @generated from field: string total_principal = 3;
   */
  totalPrincipal = "";

  /**
   * @generated from field: string yield_accrued = 4;
   */
  yieldAccrued = "";

  constructor(data?: PartialMessage<IndexUpdated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.v1.IndexUpdated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "old_index", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "new_index", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "total_principal", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "yield_accrued", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IndexUpdated {
    return new IndexUpdated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IndexUpdated {
    return new IndexUpdated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IndexUpdated {
    return new IndexUpdated().fromJsonString(jsonString, options);
  }

  static equals(a: IndexUpdated | PlainMessage<IndexUpdated> | undefined, b: IndexUpdated | PlainMessage<IndexUpdated> | undefined): boolean {
    return proto3.util.equals(IndexUpdated, a, b);
  }
}

