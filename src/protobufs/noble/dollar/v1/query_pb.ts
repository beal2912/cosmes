// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file noble/dollar/v1/query.proto (package noble.dollar.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message noble.dollar.v1.QueryIndex
 */
export class QueryIndex extends Message<QueryIndex> {
  constructor(data?: PartialMessage<QueryIndex>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.v1.QueryIndex";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryIndex {
    return new QueryIndex().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryIndex {
    return new QueryIndex().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryIndex {
    return new QueryIndex().fromJsonString(jsonString, options);
  }

  static equals(a: QueryIndex | PlainMessage<QueryIndex> | undefined, b: QueryIndex | PlainMessage<QueryIndex> | undefined): boolean {
    return proto3.util.equals(QueryIndex, a, b);
  }
}

/**
 * @generated from message noble.dollar.v1.QueryIndexResponse
 */
export class QueryIndexResponse extends Message<QueryIndexResponse> {
  /**
   * @generated from field: string index = 1;
   */
  index = "";

  constructor(data?: PartialMessage<QueryIndexResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.v1.QueryIndexResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "index", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryIndexResponse {
    return new QueryIndexResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryIndexResponse {
    return new QueryIndexResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryIndexResponse {
    return new QueryIndexResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryIndexResponse | PlainMessage<QueryIndexResponse> | undefined, b: QueryIndexResponse | PlainMessage<QueryIndexResponse> | undefined): boolean {
    return proto3.util.equals(QueryIndexResponse, a, b);
  }
}

/**
 * @generated from message noble.dollar.v1.QueryPaused
 */
export class QueryPaused extends Message<QueryPaused> {
  constructor(data?: PartialMessage<QueryPaused>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.v1.QueryPaused";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPaused {
    return new QueryPaused().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPaused {
    return new QueryPaused().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPaused {
    return new QueryPaused().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPaused | PlainMessage<QueryPaused> | undefined, b: QueryPaused | PlainMessage<QueryPaused> | undefined): boolean {
    return proto3.util.equals(QueryPaused, a, b);
  }
}

/**
 * @generated from message noble.dollar.v1.QueryPausedResponse
 */
export class QueryPausedResponse extends Message<QueryPausedResponse> {
  /**
   * @generated from field: bool paused = 1;
   */
  paused = false;

  constructor(data?: PartialMessage<QueryPausedResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.v1.QueryPausedResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "paused", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPausedResponse {
    return new QueryPausedResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPausedResponse {
    return new QueryPausedResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPausedResponse {
    return new QueryPausedResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPausedResponse | PlainMessage<QueryPausedResponse> | undefined, b: QueryPausedResponse | PlainMessage<QueryPausedResponse> | undefined): boolean {
    return proto3.util.equals(QueryPausedResponse, a, b);
  }
}

/**
 * @generated from message noble.dollar.v1.QueryPrincipal
 */
export class QueryPrincipal extends Message<QueryPrincipal> {
  /**
   * @generated from field: string account = 1;
   */
  account = "";

  constructor(data?: PartialMessage<QueryPrincipal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.v1.QueryPrincipal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPrincipal {
    return new QueryPrincipal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPrincipal {
    return new QueryPrincipal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPrincipal {
    return new QueryPrincipal().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPrincipal | PlainMessage<QueryPrincipal> | undefined, b: QueryPrincipal | PlainMessage<QueryPrincipal> | undefined): boolean {
    return proto3.util.equals(QueryPrincipal, a, b);
  }
}

/**
 * @generated from message noble.dollar.v1.QueryPrincipalResponse
 */
export class QueryPrincipalResponse extends Message<QueryPrincipalResponse> {
  /**
   * @generated from field: string principal = 1;
   */
  principal = "";

  constructor(data?: PartialMessage<QueryPrincipalResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.v1.QueryPrincipalResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "principal", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPrincipalResponse {
    return new QueryPrincipalResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPrincipalResponse {
    return new QueryPrincipalResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPrincipalResponse {
    return new QueryPrincipalResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPrincipalResponse | PlainMessage<QueryPrincipalResponse> | undefined, b: QueryPrincipalResponse | PlainMessage<QueryPrincipalResponse> | undefined): boolean {
    return proto3.util.equals(QueryPrincipalResponse, a, b);
  }
}

/**
 * @generated from message noble.dollar.v1.QueryYield
 */
export class QueryYield extends Message<QueryYield> {
  /**
   * @generated from field: string account = 1;
   */
  account = "";

  constructor(data?: PartialMessage<QueryYield>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.v1.QueryYield";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryYield {
    return new QueryYield().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryYield {
    return new QueryYield().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryYield {
    return new QueryYield().fromJsonString(jsonString, options);
  }

  static equals(a: QueryYield | PlainMessage<QueryYield> | undefined, b: QueryYield | PlainMessage<QueryYield> | undefined): boolean {
    return proto3.util.equals(QueryYield, a, b);
  }
}

/**
 * @generated from message noble.dollar.v1.QueryYieldResponse
 */
export class QueryYieldResponse extends Message<QueryYieldResponse> {
  /**
   * @generated from field: string claimable_amount = 1;
   */
  claimableAmount = "";

  constructor(data?: PartialMessage<QueryYieldResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.v1.QueryYieldResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "claimable_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryYieldResponse {
    return new QueryYieldResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryYieldResponse {
    return new QueryYieldResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryYieldResponse {
    return new QueryYieldResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryYieldResponse | PlainMessage<QueryYieldResponse> | undefined, b: QueryYieldResponse | PlainMessage<QueryYieldResponse> | undefined): boolean {
    return proto3.util.equals(QueryYieldResponse, a, b);
  }
}

/**
 * @generated from message noble.dollar.v1.QueryStats
 */
export class QueryStats extends Message<QueryStats> {
  constructor(data?: PartialMessage<QueryStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.v1.QueryStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryStats {
    return new QueryStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryStats {
    return new QueryStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryStats {
    return new QueryStats().fromJsonString(jsonString, options);
  }

  static equals(a: QueryStats | PlainMessage<QueryStats> | undefined, b: QueryStats | PlainMessage<QueryStats> | undefined): boolean {
    return proto3.util.equals(QueryStats, a, b);
  }
}

/**
 * @generated from message noble.dollar.v1.QueryStatsResponse
 */
export class QueryStatsResponse extends Message<QueryStatsResponse> {
  /**
   * @generated from field: uint64 total_holders = 1;
   */
  totalHolders = protoInt64.zero;

  /**
   * @generated from field: string total_principal = 2;
   */
  totalPrincipal = "";

  /**
   * @generated from field: string total_yield_accrued = 3;
   */
  totalYieldAccrued = "";

  constructor(data?: PartialMessage<QueryStatsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.v1.QueryStatsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total_holders", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "total_principal", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "total_yield_accrued", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryStatsResponse {
    return new QueryStatsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryStatsResponse {
    return new QueryStatsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryStatsResponse {
    return new QueryStatsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryStatsResponse | PlainMessage<QueryStatsResponse> | undefined, b: QueryStatsResponse | PlainMessage<QueryStatsResponse> | undefined): boolean {
    return proto3.util.equals(QueryStatsResponse, a, b);
  }
}

