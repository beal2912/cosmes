// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file noble/dollar/v2/tx.proto (package noble.dollar.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Provider } from "./dollar_pb.js";

/**
 * MsgSetYieldRecipient allows the authority to set a yield recipient for an external chain.
 *
 * @generated from message noble.dollar.v2.MsgSetYieldRecipient
 */
export class MsgSetYieldRecipient extends Message<MsgSetYieldRecipient> {
  /**
   * @generated from field: string signer = 1;
   */
  signer = "";

  /**
   * @generated from field: noble.dollar.v2.Provider provider = 2;
   */
  provider = Provider.IBC;

  /**
   * @generated from field: string identifier = 3;
   */
  identifier = "";

  /**
   * @generated from field: string recipient = 4;
   */
  recipient = "";

  constructor(data?: PartialMessage<MsgSetYieldRecipient>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.v2.MsgSetYieldRecipient";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "provider", kind: "enum", T: proto3.getEnumType(Provider) },
    { no: 3, name: "identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "recipient", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetYieldRecipient {
    return new MsgSetYieldRecipient().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetYieldRecipient {
    return new MsgSetYieldRecipient().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetYieldRecipient {
    return new MsgSetYieldRecipient().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetYieldRecipient | PlainMessage<MsgSetYieldRecipient> | undefined, b: MsgSetYieldRecipient | PlainMessage<MsgSetYieldRecipient> | undefined): boolean {
    return proto3.util.equals(MsgSetYieldRecipient, a, b);
  }
}

/**
 * MsgSetYieldRecipientResponse is the response of the SetYieldRecipient message.
 *
 * @generated from message noble.dollar.v2.MsgSetYieldRecipientResponse
 */
export class MsgSetYieldRecipientResponse extends Message<MsgSetYieldRecipientResponse> {
  constructor(data?: PartialMessage<MsgSetYieldRecipientResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.v2.MsgSetYieldRecipientResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetYieldRecipientResponse {
    return new MsgSetYieldRecipientResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetYieldRecipientResponse {
    return new MsgSetYieldRecipientResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetYieldRecipientResponse {
    return new MsgSetYieldRecipientResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetYieldRecipientResponse | PlainMessage<MsgSetYieldRecipientResponse> | undefined, b: MsgSetYieldRecipientResponse | PlainMessage<MsgSetYieldRecipientResponse> | undefined): boolean {
    return proto3.util.equals(MsgSetYieldRecipientResponse, a, b);
  }
}

