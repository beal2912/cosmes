// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file noble/dollar/v2/query.proto (package noble.dollar.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Provider } from "./dollar_pb.js";

/**
 * @generated from message noble.dollar.v2.QueryStats
 */
export class QueryStats extends Message<QueryStats> {
  constructor(data?: PartialMessage<QueryStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.v2.QueryStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryStats {
    return new QueryStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryStats {
    return new QueryStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryStats {
    return new QueryStats().fromJsonString(jsonString, options);
  }

  static equals(a: QueryStats | PlainMessage<QueryStats> | undefined, b: QueryStats | PlainMessage<QueryStats> | undefined): boolean {
    return proto3.util.equals(QueryStats, a, b);
  }
}

/**
 * @generated from message noble.dollar.v2.QueryStatsResponse
 */
export class QueryStatsResponse extends Message<QueryStatsResponse> {
  /**
   * @generated from field: uint64 total_holders = 1;
   */
  totalHolders = protoInt64.zero;

  /**
   * @generated from field: string total_principal = 2;
   */
  totalPrincipal = "";

  /**
   * @generated from field: string total_yield_accrued = 3;
   */
  totalYieldAccrued = "";

  /**
   * @generated from field: map<string, noble.dollar.v2.QueryStatsResponse.ExternalYield> total_external_yield = 4;
   */
  totalExternalYield: { [key: string]: QueryStatsResponse_ExternalYield } = {};

  constructor(data?: PartialMessage<QueryStatsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.v2.QueryStatsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total_holders", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "total_principal", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "total_yield_accrued", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "total_external_yield", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: QueryStatsResponse_ExternalYield} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryStatsResponse {
    return new QueryStatsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryStatsResponse {
    return new QueryStatsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryStatsResponse {
    return new QueryStatsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryStatsResponse | PlainMessage<QueryStatsResponse> | undefined, b: QueryStatsResponse | PlainMessage<QueryStatsResponse> | undefined): boolean {
    return proto3.util.equals(QueryStatsResponse, a, b);
  }
}

/**
 * @generated from message noble.dollar.v2.QueryStatsResponse.ExternalYield
 */
export class QueryStatsResponse_ExternalYield extends Message<QueryStatsResponse_ExternalYield> {
  /**
   * @generated from field: string chain_id = 1;
   */
  chainId = "";

  /**
   * @generated from field: string amount = 2;
   */
  amount = "";

  constructor(data?: PartialMessage<QueryStatsResponse_ExternalYield>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.v2.QueryStatsResponse.ExternalYield";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryStatsResponse_ExternalYield {
    return new QueryStatsResponse_ExternalYield().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryStatsResponse_ExternalYield {
    return new QueryStatsResponse_ExternalYield().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryStatsResponse_ExternalYield {
    return new QueryStatsResponse_ExternalYield().fromJsonString(jsonString, options);
  }

  static equals(a: QueryStatsResponse_ExternalYield | PlainMessage<QueryStatsResponse_ExternalYield> | undefined, b: QueryStatsResponse_ExternalYield | PlainMessage<QueryStatsResponse_ExternalYield> | undefined): boolean {
    return proto3.util.equals(QueryStatsResponse_ExternalYield, a, b);
  }
}

/**
 * @generated from message noble.dollar.v2.QueryYieldRecipients
 */
export class QueryYieldRecipients extends Message<QueryYieldRecipients> {
  constructor(data?: PartialMessage<QueryYieldRecipients>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.v2.QueryYieldRecipients";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryYieldRecipients {
    return new QueryYieldRecipients().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryYieldRecipients {
    return new QueryYieldRecipients().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryYieldRecipients {
    return new QueryYieldRecipients().fromJsonString(jsonString, options);
  }

  static equals(a: QueryYieldRecipients | PlainMessage<QueryYieldRecipients> | undefined, b: QueryYieldRecipients | PlainMessage<QueryYieldRecipients> | undefined): boolean {
    return proto3.util.equals(QueryYieldRecipients, a, b);
  }
}

/**
 * @generated from message noble.dollar.v2.QueryYieldRecipientsResponse
 */
export class QueryYieldRecipientsResponse extends Message<QueryYieldRecipientsResponse> {
  /**
   * @generated from field: map<string, string> yield_recipients = 1;
   */
  yieldRecipients: { [key: string]: string } = {};

  constructor(data?: PartialMessage<QueryYieldRecipientsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.v2.QueryYieldRecipientsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "yield_recipients", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryYieldRecipientsResponse {
    return new QueryYieldRecipientsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryYieldRecipientsResponse {
    return new QueryYieldRecipientsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryYieldRecipientsResponse {
    return new QueryYieldRecipientsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryYieldRecipientsResponse | PlainMessage<QueryYieldRecipientsResponse> | undefined, b: QueryYieldRecipientsResponse | PlainMessage<QueryYieldRecipientsResponse> | undefined): boolean {
    return proto3.util.equals(QueryYieldRecipientsResponse, a, b);
  }
}

/**
 * @generated from message noble.dollar.v2.QueryYieldRecipient
 */
export class QueryYieldRecipient extends Message<QueryYieldRecipient> {
  /**
   * @generated from field: noble.dollar.v2.Provider provider = 1;
   */
  provider = Provider.IBC;

  /**
   * @generated from field: string identifier = 2;
   */
  identifier = "";

  constructor(data?: PartialMessage<QueryYieldRecipient>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.v2.QueryYieldRecipient";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider", kind: "enum", T: proto3.getEnumType(Provider) },
    { no: 2, name: "identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryYieldRecipient {
    return new QueryYieldRecipient().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryYieldRecipient {
    return new QueryYieldRecipient().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryYieldRecipient {
    return new QueryYieldRecipient().fromJsonString(jsonString, options);
  }

  static equals(a: QueryYieldRecipient | PlainMessage<QueryYieldRecipient> | undefined, b: QueryYieldRecipient | PlainMessage<QueryYieldRecipient> | undefined): boolean {
    return proto3.util.equals(QueryYieldRecipient, a, b);
  }
}

/**
 * @generated from message noble.dollar.v2.QueryYieldRecipientResponse
 */
export class QueryYieldRecipientResponse extends Message<QueryYieldRecipientResponse> {
  /**
   * @generated from field: string yield_recipient = 1;
   */
  yieldRecipient = "";

  constructor(data?: PartialMessage<QueryYieldRecipientResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.v2.QueryYieldRecipientResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "yield_recipient", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryYieldRecipientResponse {
    return new QueryYieldRecipientResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryYieldRecipientResponse {
    return new QueryYieldRecipientResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryYieldRecipientResponse {
    return new QueryYieldRecipientResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryYieldRecipientResponse | PlainMessage<QueryYieldRecipientResponse> | undefined, b: QueryYieldRecipientResponse | PlainMessage<QueryYieldRecipientResponse> | undefined): boolean {
    return proto3.util.equals(QueryYieldRecipientResponse, a, b);
  }
}

/**
 * @generated from message noble.dollar.v2.QueryRetryAmounts
 */
export class QueryRetryAmounts extends Message<QueryRetryAmounts> {
  constructor(data?: PartialMessage<QueryRetryAmounts>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.v2.QueryRetryAmounts";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRetryAmounts {
    return new QueryRetryAmounts().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRetryAmounts {
    return new QueryRetryAmounts().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRetryAmounts {
    return new QueryRetryAmounts().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRetryAmounts | PlainMessage<QueryRetryAmounts> | undefined, b: QueryRetryAmounts | PlainMessage<QueryRetryAmounts> | undefined): boolean {
    return proto3.util.equals(QueryRetryAmounts, a, b);
  }
}

/**
 * @generated from message noble.dollar.v2.QueryRetryAmountsResponse
 */
export class QueryRetryAmountsResponse extends Message<QueryRetryAmountsResponse> {
  /**
   * @generated from field: map<string, string> retry_amounts = 1;
   */
  retryAmounts: { [key: string]: string } = {};

  constructor(data?: PartialMessage<QueryRetryAmountsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.v2.QueryRetryAmountsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "retry_amounts", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRetryAmountsResponse {
    return new QueryRetryAmountsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRetryAmountsResponse {
    return new QueryRetryAmountsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRetryAmountsResponse {
    return new QueryRetryAmountsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRetryAmountsResponse | PlainMessage<QueryRetryAmountsResponse> | undefined, b: QueryRetryAmountsResponse | PlainMessage<QueryRetryAmountsResponse> | undefined): boolean {
    return proto3.util.equals(QueryRetryAmountsResponse, a, b);
  }
}

/**
 * @generated from message noble.dollar.v2.QueryRetryAmount
 */
export class QueryRetryAmount extends Message<QueryRetryAmount> {
  /**
   * @generated from field: noble.dollar.v2.Provider provider = 1;
   */
  provider = Provider.IBC;

  /**
   * @generated from field: string identifier = 2;
   */
  identifier = "";

  constructor(data?: PartialMessage<QueryRetryAmount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.v2.QueryRetryAmount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider", kind: "enum", T: proto3.getEnumType(Provider) },
    { no: 2, name: "identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRetryAmount {
    return new QueryRetryAmount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRetryAmount {
    return new QueryRetryAmount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRetryAmount {
    return new QueryRetryAmount().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRetryAmount | PlainMessage<QueryRetryAmount> | undefined, b: QueryRetryAmount | PlainMessage<QueryRetryAmount> | undefined): boolean {
    return proto3.util.equals(QueryRetryAmount, a, b);
  }
}

/**
 * @generated from message noble.dollar.v2.QueryRetryAmountResponse
 */
export class QueryRetryAmountResponse extends Message<QueryRetryAmountResponse> {
  /**
   * @generated from field: string retry_amount = 1;
   */
  retryAmount = "";

  constructor(data?: PartialMessage<QueryRetryAmountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.dollar.v2.QueryRetryAmountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "retry_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRetryAmountResponse {
    return new QueryRetryAmountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRetryAmountResponse {
    return new QueryRetryAmountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRetryAmountResponse {
    return new QueryRetryAmountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRetryAmountResponse | PlainMessage<QueryRetryAmountResponse> | undefined, b: QueryRetryAmountResponse | PlainMessage<QueryRetryAmountResponse> | undefined): boolean {
    return proto3.util.equals(QueryRetryAmountResponse, a, b);
  }
}

