// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file noble/swap/stableswap/v1/query.proto (package noble.swap.stableswap.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Coin } from "../../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * @generated from message noble.swap.stableswap.v1.QueryPositionsByProvider
 */
export class QueryPositionsByProvider extends Message<QueryPositionsByProvider> {
  /**
   * @generated from field: string provider = 1;
   */
  provider = "";

  constructor(data?: PartialMessage<QueryPositionsByProvider>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.swap.stableswap.v1.QueryPositionsByProvider";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPositionsByProvider {
    return new QueryPositionsByProvider().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPositionsByProvider {
    return new QueryPositionsByProvider().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPositionsByProvider {
    return new QueryPositionsByProvider().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPositionsByProvider | PlainMessage<QueryPositionsByProvider> | undefined, b: QueryPositionsByProvider | PlainMessage<QueryPositionsByProvider> | undefined): boolean {
    return proto3.util.equals(QueryPositionsByProvider, a, b);
  }
}

/**
 * @generated from message noble.swap.stableswap.v1.QueryPositionsByProviderResponse
 */
export class QueryPositionsByProviderResponse extends Message<QueryPositionsByProviderResponse> {
  /**
   * @generated from field: repeated noble.swap.stableswap.v1.QueryBondedPositionResponseEntry bonded_positions = 1;
   */
  bondedPositions: QueryBondedPositionResponseEntry[] = [];

  /**
   * @generated from field: repeated noble.swap.stableswap.v1.QueryUnbondingPositionResponseEntry unbonding_positions = 2;
   */
  unbondingPositions: QueryUnbondingPositionResponseEntry[] = [];

  /**
   * @generated from field: repeated noble.swap.stableswap.v1.QueryRewardsResponseEntry rewards = 3;
   */
  rewards: QueryRewardsResponseEntry[] = [];

  constructor(data?: PartialMessage<QueryPositionsByProviderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.swap.stableswap.v1.QueryPositionsByProviderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bonded_positions", kind: "message", T: QueryBondedPositionResponseEntry, repeated: true },
    { no: 2, name: "unbonding_positions", kind: "message", T: QueryUnbondingPositionResponseEntry, repeated: true },
    { no: 3, name: "rewards", kind: "message", T: QueryRewardsResponseEntry, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPositionsByProviderResponse {
    return new QueryPositionsByProviderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPositionsByProviderResponse {
    return new QueryPositionsByProviderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPositionsByProviderResponse {
    return new QueryPositionsByProviderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPositionsByProviderResponse | PlainMessage<QueryPositionsByProviderResponse> | undefined, b: QueryPositionsByProviderResponse | PlainMessage<QueryPositionsByProviderResponse> | undefined): boolean {
    return proto3.util.equals(QueryPositionsByProviderResponse, a, b);
  }
}

/**
 * @generated from message noble.swap.stableswap.v1.QueryBondedPositionsByProvider
 */
export class QueryBondedPositionsByProvider extends Message<QueryBondedPositionsByProvider> {
  /**
   * @generated from field: string provider = 1;
   */
  provider = "";

  constructor(data?: PartialMessage<QueryBondedPositionsByProvider>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.swap.stableswap.v1.QueryBondedPositionsByProvider";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBondedPositionsByProvider {
    return new QueryBondedPositionsByProvider().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBondedPositionsByProvider {
    return new QueryBondedPositionsByProvider().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBondedPositionsByProvider {
    return new QueryBondedPositionsByProvider().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBondedPositionsByProvider | PlainMessage<QueryBondedPositionsByProvider> | undefined, b: QueryBondedPositionsByProvider | PlainMessage<QueryBondedPositionsByProvider> | undefined): boolean {
    return proto3.util.equals(QueryBondedPositionsByProvider, a, b);
  }
}

/**
 * @generated from message noble.swap.stableswap.v1.QueryBondedPositionsByProviderResponse
 */
export class QueryBondedPositionsByProviderResponse extends Message<QueryBondedPositionsByProviderResponse> {
  /**
   * @generated from field: repeated noble.swap.stableswap.v1.QueryBondedPositionResponseEntry bonded_positions = 1;
   */
  bondedPositions: QueryBondedPositionResponseEntry[] = [];

  constructor(data?: PartialMessage<QueryBondedPositionsByProviderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.swap.stableswap.v1.QueryBondedPositionsByProviderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bonded_positions", kind: "message", T: QueryBondedPositionResponseEntry, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBondedPositionsByProviderResponse {
    return new QueryBondedPositionsByProviderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBondedPositionsByProviderResponse {
    return new QueryBondedPositionsByProviderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBondedPositionsByProviderResponse {
    return new QueryBondedPositionsByProviderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBondedPositionsByProviderResponse | PlainMessage<QueryBondedPositionsByProviderResponse> | undefined, b: QueryBondedPositionsByProviderResponse | PlainMessage<QueryBondedPositionsByProviderResponse> | undefined): boolean {
    return proto3.util.equals(QueryBondedPositionsByProviderResponse, a, b);
  }
}

/**
 * @generated from message noble.swap.stableswap.v1.QueryUnbondingPositionsByProvider
 */
export class QueryUnbondingPositionsByProvider extends Message<QueryUnbondingPositionsByProvider> {
  /**
   * @generated from field: string provider = 1;
   */
  provider = "";

  constructor(data?: PartialMessage<QueryUnbondingPositionsByProvider>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.swap.stableswap.v1.QueryUnbondingPositionsByProvider";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryUnbondingPositionsByProvider {
    return new QueryUnbondingPositionsByProvider().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryUnbondingPositionsByProvider {
    return new QueryUnbondingPositionsByProvider().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryUnbondingPositionsByProvider {
    return new QueryUnbondingPositionsByProvider().fromJsonString(jsonString, options);
  }

  static equals(a: QueryUnbondingPositionsByProvider | PlainMessage<QueryUnbondingPositionsByProvider> | undefined, b: QueryUnbondingPositionsByProvider | PlainMessage<QueryUnbondingPositionsByProvider> | undefined): boolean {
    return proto3.util.equals(QueryUnbondingPositionsByProvider, a, b);
  }
}

/**
 * @generated from message noble.swap.stableswap.v1.QueryUnbondingPositionsByProviderResponse
 */
export class QueryUnbondingPositionsByProviderResponse extends Message<QueryUnbondingPositionsByProviderResponse> {
  /**
   * @generated from field: repeated noble.swap.stableswap.v1.QueryUnbondingPositionResponseEntry unbonding_positions = 1;
   */
  unbondingPositions: QueryUnbondingPositionResponseEntry[] = [];

  constructor(data?: PartialMessage<QueryUnbondingPositionsByProviderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.swap.stableswap.v1.QueryUnbondingPositionsByProviderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "unbonding_positions", kind: "message", T: QueryUnbondingPositionResponseEntry, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryUnbondingPositionsByProviderResponse {
    return new QueryUnbondingPositionsByProviderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryUnbondingPositionsByProviderResponse {
    return new QueryUnbondingPositionsByProviderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryUnbondingPositionsByProviderResponse {
    return new QueryUnbondingPositionsByProviderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryUnbondingPositionsByProviderResponse | PlainMessage<QueryUnbondingPositionsByProviderResponse> | undefined, b: QueryUnbondingPositionsByProviderResponse | PlainMessage<QueryUnbondingPositionsByProviderResponse> | undefined): boolean {
    return proto3.util.equals(QueryUnbondingPositionsByProviderResponse, a, b);
  }
}

/**
 * @generated from message noble.swap.stableswap.v1.QueryRewardsByProvider
 */
export class QueryRewardsByProvider extends Message<QueryRewardsByProvider> {
  /**
   * @generated from field: string provider = 1;
   */
  provider = "";

  constructor(data?: PartialMessage<QueryRewardsByProvider>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.swap.stableswap.v1.QueryRewardsByProvider";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRewardsByProvider {
    return new QueryRewardsByProvider().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRewardsByProvider {
    return new QueryRewardsByProvider().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRewardsByProvider {
    return new QueryRewardsByProvider().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRewardsByProvider | PlainMessage<QueryRewardsByProvider> | undefined, b: QueryRewardsByProvider | PlainMessage<QueryRewardsByProvider> | undefined): boolean {
    return proto3.util.equals(QueryRewardsByProvider, a, b);
  }
}

/**
 * @generated from message noble.swap.stableswap.v1.QueryRewardsByProviderResponse
 */
export class QueryRewardsByProviderResponse extends Message<QueryRewardsByProviderResponse> {
  /**
   * @generated from field: repeated noble.swap.stableswap.v1.QueryRewardsResponseEntry rewards = 1;
   */
  rewards: QueryRewardsResponseEntry[] = [];

  constructor(data?: PartialMessage<QueryRewardsByProviderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.swap.stableswap.v1.QueryRewardsByProviderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rewards", kind: "message", T: QueryRewardsResponseEntry, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRewardsByProviderResponse {
    return new QueryRewardsByProviderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRewardsByProviderResponse {
    return new QueryRewardsByProviderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRewardsByProviderResponse {
    return new QueryRewardsByProviderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRewardsByProviderResponse | PlainMessage<QueryRewardsByProviderResponse> | undefined, b: QueryRewardsByProviderResponse | PlainMessage<QueryRewardsByProviderResponse> | undefined): boolean {
    return proto3.util.equals(QueryRewardsByProviderResponse, a, b);
  }
}

/**
 * @generated from message noble.swap.stableswap.v1.QueryBondedPositionResponseEntry
 */
export class QueryBondedPositionResponseEntry extends Message<QueryBondedPositionResponseEntry> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: string shares = 2;
   */
  shares = "";

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 3;
   */
  timestamp?: Timestamp;

  constructor(data?: PartialMessage<QueryBondedPositionResponseEntry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.swap.stableswap.v1.QueryBondedPositionResponseEntry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "shares", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "timestamp", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBondedPositionResponseEntry {
    return new QueryBondedPositionResponseEntry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBondedPositionResponseEntry {
    return new QueryBondedPositionResponseEntry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBondedPositionResponseEntry {
    return new QueryBondedPositionResponseEntry().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBondedPositionResponseEntry | PlainMessage<QueryBondedPositionResponseEntry> | undefined, b: QueryBondedPositionResponseEntry | PlainMessage<QueryBondedPositionResponseEntry> | undefined): boolean {
    return proto3.util.equals(QueryBondedPositionResponseEntry, a, b);
  }
}

/**
 * @generated from message noble.swap.stableswap.v1.QueryUnbondingPositionResponseEntry
 */
export class QueryUnbondingPositionResponseEntry extends Message<QueryUnbondingPositionResponseEntry> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: string unbonding_shares = 2;
   */
  unbondingShares = "";

  /**
   * @generated from field: google.protobuf.Timestamp end_time = 3;
   */
  endTime?: Timestamp;

  constructor(data?: PartialMessage<QueryUnbondingPositionResponseEntry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.swap.stableswap.v1.QueryUnbondingPositionResponseEntry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "unbonding_shares", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "end_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryUnbondingPositionResponseEntry {
    return new QueryUnbondingPositionResponseEntry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryUnbondingPositionResponseEntry {
    return new QueryUnbondingPositionResponseEntry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryUnbondingPositionResponseEntry {
    return new QueryUnbondingPositionResponseEntry().fromJsonString(jsonString, options);
  }

  static equals(a: QueryUnbondingPositionResponseEntry | PlainMessage<QueryUnbondingPositionResponseEntry> | undefined, b: QueryUnbondingPositionResponseEntry | PlainMessage<QueryUnbondingPositionResponseEntry> | undefined): boolean {
    return proto3.util.equals(QueryUnbondingPositionResponseEntry, a, b);
  }
}

/**
 * @generated from message noble.swap.stableswap.v1.QueryRewardsResponseEntry
 */
export class QueryRewardsResponseEntry extends Message<QueryRewardsResponseEntry> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 2;
   */
  amount: Coin[] = [];

  constructor(data?: PartialMessage<QueryRewardsResponseEntry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.swap.stableswap.v1.QueryRewardsResponseEntry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "amount", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRewardsResponseEntry {
    return new QueryRewardsResponseEntry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRewardsResponseEntry {
    return new QueryRewardsResponseEntry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRewardsResponseEntry {
    return new QueryRewardsResponseEntry().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRewardsResponseEntry | PlainMessage<QueryRewardsResponseEntry> | undefined, b: QueryRewardsResponseEntry | PlainMessage<QueryRewardsResponseEntry> | undefined): boolean {
    return proto3.util.equals(QueryRewardsResponseEntry, a, b);
  }
}

