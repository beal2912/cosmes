// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file noble/swap/stableswap/v1/tx.proto (package noble.swap.stableswap.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Coin } from "../../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * @generated from message noble.swap.stableswap.v1.MsgCreatePool
 */
export class MsgCreatePool extends Message<MsgCreatePool> {
  /**
   * The address of the authority creating the pool.
   *
   * @generated from field: string signer = 1;
   */
  signer = "";

  /**
   * The asset pair that will be part of the pool.
   *
   * @generated from field: string pair = 2;
   */
  pair = "";

  /**
   * The protocol fee percentage.
   *
   * @generated from field: int64 protocol_fee_percentage = 3;
   */
  protocolFeePercentage = protoInt64.zero;

  /**
   * The rewards fee value.
   *
   * @generated from field: int64 rewards_fee = 4;
   */
  rewardsFee = protoInt64.zero;

  /**
   * The initial A parameter for the pool.
   *
   * @generated from field: int64 initial_a = 5;
   */
  initialA = protoInt64.zero;

  /**
   * The future A parameter for pool rebalancing.
   *
   * @generated from field: int64 future_a = 6;
   */
  futureA = protoInt64.zero;

  /**
   * The time to reach the future A parameter.
   *
   * @generated from field: int64 future_a_time = 7;
   */
  futureATime = protoInt64.zero;

  /**
   * The coins rate multipliers.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin rate_multipliers = 8;
   */
  rateMultipliers: Coin[] = [];

  constructor(data?: PartialMessage<MsgCreatePool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.swap.stableswap.v1.MsgCreatePool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pair", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "protocol_fee_percentage", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "rewards_fee", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "initial_a", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "future_a", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "future_a_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "rate_multipliers", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreatePool {
    return new MsgCreatePool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreatePool {
    return new MsgCreatePool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreatePool {
    return new MsgCreatePool().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreatePool | PlainMessage<MsgCreatePool> | undefined, b: MsgCreatePool | PlainMessage<MsgCreatePool> | undefined): boolean {
    return proto3.util.equals(MsgCreatePool, a, b);
  }
}

/**
 * @generated from message noble.swap.stableswap.v1.MsgCreatePoolResponse
 */
export class MsgCreatePoolResponse extends Message<MsgCreatePoolResponse> {
  constructor(data?: PartialMessage<MsgCreatePoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.swap.stableswap.v1.MsgCreatePoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreatePoolResponse {
    return new MsgCreatePoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreatePoolResponse {
    return new MsgCreatePoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreatePoolResponse {
    return new MsgCreatePoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreatePoolResponse | PlainMessage<MsgCreatePoolResponse> | undefined, b: MsgCreatePoolResponse | PlainMessage<MsgCreatePoolResponse> | undefined): boolean {
    return proto3.util.equals(MsgCreatePoolResponse, a, b);
  }
}

/**
 * @generated from message noble.swap.stableswap.v1.MsgUpdatePool
 */
export class MsgUpdatePool extends Message<MsgUpdatePool> {
  /**
   * Address of the authority updating the pool.
   *
   * @generated from field: string signer = 1;
   */
  signer = "";

  /**
   * ID of the pool being updated.
   *
   * @generated from field: uint64 pool_id = 2;
   */
  poolId = protoInt64.zero;

  /**
   * The new protocol fee percentage.
   *
   * @generated from field: int64 protocol_fee_percentage = 3;
   */
  protocolFeePercentage = protoInt64.zero;

  /**
   * The new rewards fee value.
   *
   * @generated from field: int64 rewards_fee = 4;
   */
  rewardsFee = protoInt64.zero;

  /**
   * The new initial A parameter.
   *
   * @generated from field: int64 initial_a = 5;
   */
  initialA = protoInt64.zero;

  /**
   * The new future A parameter.
   *
   * @generated from field: int64 future_a = 6;
   */
  futureA = protoInt64.zero;

  /**
   * The time to reach the future A parameter.
   *
   * @generated from field: int64 future_a_time = 7;
   */
  futureATime = protoInt64.zero;

  /**
   * The coins rate multipliers.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin rate_multipliers = 8;
   */
  rateMultipliers: Coin[] = [];

  constructor(data?: PartialMessage<MsgUpdatePool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.swap.stableswap.v1.MsgUpdatePool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "protocol_fee_percentage", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "rewards_fee", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "initial_a", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "future_a", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "future_a_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "rate_multipliers", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdatePool {
    return new MsgUpdatePool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdatePool {
    return new MsgUpdatePool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdatePool {
    return new MsgUpdatePool().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdatePool | PlainMessage<MsgUpdatePool> | undefined, b: MsgUpdatePool | PlainMessage<MsgUpdatePool> | undefined): boolean {
    return proto3.util.equals(MsgUpdatePool, a, b);
  }
}

/**
 * @generated from message noble.swap.stableswap.v1.MsgUpdatePoolResponse
 */
export class MsgUpdatePoolResponse extends Message<MsgUpdatePoolResponse> {
  constructor(data?: PartialMessage<MsgUpdatePoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.swap.stableswap.v1.MsgUpdatePoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdatePoolResponse {
    return new MsgUpdatePoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdatePoolResponse {
    return new MsgUpdatePoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdatePoolResponse {
    return new MsgUpdatePoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdatePoolResponse | PlainMessage<MsgUpdatePoolResponse> | undefined, b: MsgUpdatePoolResponse | PlainMessage<MsgUpdatePoolResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdatePoolResponse, a, b);
  }
}

/**
 * @generated from message noble.swap.stableswap.v1.MsgAddLiquidity
 */
export class MsgAddLiquidity extends Message<MsgAddLiquidity> {
  /**
   * The address of the user adding liquidity.
   *
   * @generated from field: string signer = 1;
   */
  signer = "";

  /**
   * The ID of the pool to which liquidity is being added.
   *
   * @generated from field: uint64 pool_id = 2;
   */
  poolId = protoInt64.zero;

  /**
   * The coins amount to add to the pool.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 3;
   */
  amount: Coin[] = [];

  /**
   * Maximum acceptable slippage percentage.
   *
   * @generated from field: int64 slippage_percentage = 4;
   */
  slippagePercentage = protoInt64.zero;

  constructor(data?: PartialMessage<MsgAddLiquidity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.swap.stableswap.v1.MsgAddLiquidity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "amount", kind: "message", T: Coin, repeated: true },
    { no: 4, name: "slippage_percentage", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgAddLiquidity {
    return new MsgAddLiquidity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgAddLiquidity {
    return new MsgAddLiquidity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgAddLiquidity {
    return new MsgAddLiquidity().fromJsonString(jsonString, options);
  }

  static equals(a: MsgAddLiquidity | PlainMessage<MsgAddLiquidity> | undefined, b: MsgAddLiquidity | PlainMessage<MsgAddLiquidity> | undefined): boolean {
    return proto3.util.equals(MsgAddLiquidity, a, b);
  }
}

/**
 * @generated from message noble.swap.stableswap.v1.MsgAddLiquidityResponse
 */
export class MsgAddLiquidityResponse extends Message<MsgAddLiquidityResponse> {
  /**
   * The amount of liquidity pool shares minted for the user.
   *
   * @generated from field: int64 minted_shares = 1;
   */
  mintedShares = protoInt64.zero;

  constructor(data?: PartialMessage<MsgAddLiquidityResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.swap.stableswap.v1.MsgAddLiquidityResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "minted_shares", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgAddLiquidityResponse {
    return new MsgAddLiquidityResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgAddLiquidityResponse {
    return new MsgAddLiquidityResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgAddLiquidityResponse {
    return new MsgAddLiquidityResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgAddLiquidityResponse | PlainMessage<MsgAddLiquidityResponse> | undefined, b: MsgAddLiquidityResponse | PlainMessage<MsgAddLiquidityResponse> | undefined): boolean {
    return proto3.util.equals(MsgAddLiquidityResponse, a, b);
  }
}

/**
 * @generated from message noble.swap.stableswap.v1.MsgRemoveLiquidity
 */
export class MsgRemoveLiquidity extends Message<MsgRemoveLiquidity> {
  /**
   * The address of the user removing liquidity.
   *
   * @generated from field: string signer = 1;
   */
  signer = "";

  /**
   * The ID of the pool from which liquidity is being removed.
   *
   * @generated from field: uint64 pool_id = 2;
   */
  poolId = protoInt64.zero;

  /**
   * The percentage of liquidity to remove.
   *
   * @generated from field: string percentage = 3;
   */
  percentage = "";

  constructor(data?: PartialMessage<MsgRemoveLiquidity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.swap.stableswap.v1.MsgRemoveLiquidity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "percentage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRemoveLiquidity {
    return new MsgRemoveLiquidity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRemoveLiquidity {
    return new MsgRemoveLiquidity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRemoveLiquidity {
    return new MsgRemoveLiquidity().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRemoveLiquidity | PlainMessage<MsgRemoveLiquidity> | undefined, b: MsgRemoveLiquidity | PlainMessage<MsgRemoveLiquidity> | undefined): boolean {
    return proto3.util.equals(MsgRemoveLiquidity, a, b);
  }
}

/**
 * @generated from message noble.swap.stableswap.v1.MsgRemoveLiquidityResponse
 */
export class MsgRemoveLiquidityResponse extends Message<MsgRemoveLiquidityResponse> {
  /**
   * The amount of shares that are unbonding.
   *
   * @generated from field: string unbonding_shares = 1;
   */
  unbondingShares = "";

  constructor(data?: PartialMessage<MsgRemoveLiquidityResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.swap.stableswap.v1.MsgRemoveLiquidityResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "unbonding_shares", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRemoveLiquidityResponse {
    return new MsgRemoveLiquidityResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRemoveLiquidityResponse {
    return new MsgRemoveLiquidityResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRemoveLiquidityResponse {
    return new MsgRemoveLiquidityResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRemoveLiquidityResponse | PlainMessage<MsgRemoveLiquidityResponse> | undefined, b: MsgRemoveLiquidityResponse | PlainMessage<MsgRemoveLiquidityResponse> | undefined): boolean {
    return proto3.util.equals(MsgRemoveLiquidityResponse, a, b);
  }
}

