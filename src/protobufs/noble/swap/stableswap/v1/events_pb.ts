// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file noble/swap/stableswap/v1/events.proto (package noble.swap.stableswap.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Coin } from "../../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * @generated from message noble.swap.stableswap.v1.PoolCreated
 */
export class PoolCreated extends Message<PoolCreated> {
  /**
   * ID of the newly created pool.
   *
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * Algorithm of the pool.
   *
   * @generated from field: string algorithm = 2;
   */
  algorithm = "";

  /**
   * Pair asset denom in the pool.
   *
   * @generated from field: string pair = 3;
   */
  pair = "";

  /**
   * Protocol fee percentage for the pool.
   *
   * @generated from field: int64 protocol_fee_percentage = 4;
   */
  protocolFeePercentage = protoInt64.zero;

  /**
   * Rewards fee for the pool.
   *
   * @generated from field: int64 rewards_fee = 5;
   */
  rewardsFee = protoInt64.zero;

  /**
   * Initial amplification coefficient.
   *
   * @generated from field: int64 initial_a = 6;
   */
  initialA = protoInt64.zero;

  /**
   * Initial amplification coefficient.
   *
   * @generated from field: int64 initial_a_time = 7;
   */
  initialATime = protoInt64.zero;

  /**
   * Future amplification coefficient.
   *
   * @generated from field: int64 future_a = 8;
   */
  futureA = protoInt64.zero;

  /**
   * Time when the amplification change will take full effect.
   *
   * @generated from field: int64 future_a_time = 9;
   */
  futureATime = protoInt64.zero;

  /**
   * Rate multipliers applied to the coins.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin rate_multipliers = 10;
   */
  rateMultipliers: Coin[] = [];

  constructor(data?: PartialMessage<PoolCreated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.swap.stableswap.v1.PoolCreated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "algorithm", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pair", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "protocol_fee_percentage", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "rewards_fee", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "initial_a", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "initial_a_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "future_a", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "future_a_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "rate_multipliers", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolCreated {
    return new PoolCreated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolCreated {
    return new PoolCreated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolCreated {
    return new PoolCreated().fromJsonString(jsonString, options);
  }

  static equals(a: PoolCreated | PlainMessage<PoolCreated> | undefined, b: PoolCreated | PlainMessage<PoolCreated> | undefined): boolean {
    return proto3.util.equals(PoolCreated, a, b);
  }
}

/**
 * @generated from message noble.swap.stableswap.v1.PoolUpdated
 */
export class PoolUpdated extends Message<PoolUpdated> {
  /**
   * ID of the updated pool.
   *
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * Protocol fee percentage for the pool.
   *
   * @generated from field: int64 protocol_fee_percentage = 2;
   */
  protocolFeePercentage = protoInt64.zero;

  /**
   * Rewards fee for the pool.
   *
   * @generated from field: int64 rewards_fee = 3;
   */
  rewardsFee = protoInt64.zero;

  /**
   * Future amplification coefficient.
   *
   * @generated from field: int64 future_a = 4;
   */
  futureA = protoInt64.zero;

  /**
   * Time when the amplification change will take full effect.
   *
   * @generated from field: int64 future_a_time = 5;
   */
  futureATime = protoInt64.zero;

  /**
   * Rate multipliers applied to the coins.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin rate_multipliers = 6;
   */
  rateMultipliers: Coin[] = [];

  constructor(data?: PartialMessage<PoolUpdated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.swap.stableswap.v1.PoolUpdated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "protocol_fee_percentage", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "rewards_fee", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "future_a", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "future_a_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "rate_multipliers", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolUpdated {
    return new PoolUpdated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolUpdated {
    return new PoolUpdated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolUpdated {
    return new PoolUpdated().fromJsonString(jsonString, options);
  }

  static equals(a: PoolUpdated | PlainMessage<PoolUpdated> | undefined, b: PoolUpdated | PlainMessage<PoolUpdated> | undefined): boolean {
    return proto3.util.equals(PoolUpdated, a, b);
  }
}

/**
 * @generated from message noble.swap.stableswap.v1.LiquidityAdded
 */
export class LiquidityAdded extends Message<LiquidityAdded> {
  /**
   * Address of the liquidity provider.
   *
   * @generated from field: string provider = 1;
   */
  provider = "";

  /**
   * ID of the pool.
   *
   * @generated from field: uint64 pool_id = 2;
   */
  poolId = protoInt64.zero;

  /**
   * Liquidity amount being added.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 3;
   */
  amount: Coin[] = [];

  /**
   * Shares issued for the added liquidity.
   *
   * @generated from field: string shares = 4;
   */
  shares = "";

  constructor(data?: PartialMessage<LiquidityAdded>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.swap.stableswap.v1.LiquidityAdded";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "amount", kind: "message", T: Coin, repeated: true },
    { no: 4, name: "shares", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LiquidityAdded {
    return new LiquidityAdded().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LiquidityAdded {
    return new LiquidityAdded().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LiquidityAdded {
    return new LiquidityAdded().fromJsonString(jsonString, options);
  }

  static equals(a: LiquidityAdded | PlainMessage<LiquidityAdded> | undefined, b: LiquidityAdded | PlainMessage<LiquidityAdded> | undefined): boolean {
    return proto3.util.equals(LiquidityAdded, a, b);
  }
}

/**
 * @generated from message noble.swap.stableswap.v1.LiquidityRemoved
 */
export class LiquidityRemoved extends Message<LiquidityRemoved> {
  /**
   * Provider address of the liquidity
   *
   * @generated from field: string provider = 1;
   */
  provider = "";

  /**
   * ID of the pool.
   *
   * @generated from field: uint64 pool_id = 2;
   */
  poolId = protoInt64.zero;

  /**
   * Liquidity amount being removed.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 3;
   */
  amount: Coin[] = [];

  /**
   * Shares burned for the removed liquidity.
   *
   * @generated from field: string shares = 4;
   */
  shares = "";

  /**
   * Time when the removed liquidity will be unlocked.
   *
   * @generated from field: google.protobuf.Timestamp unlock_time = 5;
   */
  unlockTime?: Timestamp;

  constructor(data?: PartialMessage<LiquidityRemoved>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.swap.stableswap.v1.LiquidityRemoved";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "amount", kind: "message", T: Coin, repeated: true },
    { no: 4, name: "shares", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "unlock_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LiquidityRemoved {
    return new LiquidityRemoved().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LiquidityRemoved {
    return new LiquidityRemoved().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LiquidityRemoved {
    return new LiquidityRemoved().fromJsonString(jsonString, options);
  }

  static equals(a: LiquidityRemoved | PlainMessage<LiquidityRemoved> | undefined, b: LiquidityRemoved | PlainMessage<LiquidityRemoved> | undefined): boolean {
    return proto3.util.equals(LiquidityRemoved, a, b);
  }
}

