// @generated by protoc-gen-cosmes v0.0.1 with parameter "target=ts"
// @generated from file noble/swap/stableswap/v1/query.proto (package noble.swap.stableswap.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { QueryBondedPositionsByProvider, QueryBondedPositionsByProviderResponse, QueryPositionsByProvider, QueryPositionsByProviderResponse, QueryRewardsByProvider, QueryRewardsByProviderResponse, QueryUnbondingPositionsByProvider, QueryUnbondingPositionsByProviderResponse } from "./query_pb.js";

const TYPE_NAME = "noble.swap.stableswap.v1.Query";

/**
 * Retrieves all the positions by a specific provider, including bonded/unbonded positions and rewards.
 *
 * @generated from rpc noble.swap.stableswap.v1.Query.PositionsByProvider
 */
export const QueryPositionsByProviderService = {
  typeName: TYPE_NAME,
  method: "PositionsByProvider",
  Request: QueryPositionsByProvider,
  Response: QueryPositionsByProviderResponse,
} as const;

/**
 * Retrieves all the bonded positions by a specific provider.
 *
 * @generated from rpc noble.swap.stableswap.v1.Query.BondedPositionsByProvider
 */
export const QueryBondedPositionsByProviderService = {
  typeName: TYPE_NAME,
  method: "BondedPositionsByProvider",
  Request: QueryBondedPositionsByProvider,
  Response: QueryBondedPositionsByProviderResponse,
} as const;

/**
 * Retrieves all the unbonding positions by a specific provider.
 *
 * @generated from rpc noble.swap.stableswap.v1.Query.UnbondingPositionsByProvider
 */
export const QueryUnbondingPositionsByProviderService = {
  typeName: TYPE_NAME,
  method: "UnbondingPositionsByProvider",
  Request: QueryUnbondingPositionsByProvider,
  Response: QueryUnbondingPositionsByProviderResponse,
} as const;

/**
 * Retrieves all the rewards by a specific provider.
 *
 * @generated from rpc noble.swap.stableswap.v1.Query.RewardsByProvider
 */
export const QueryRewardsByProviderService = {
  typeName: TYPE_NAME,
  method: "RewardsByProvider",
  Request: QueryRewardsByProvider,
  Response: QueryRewardsByProviderResponse,
} as const;

