// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file noble/swap/stableswap/v1/pool.proto (package noble.swap.stableswap.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Coin } from "../../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * @generated from message noble.swap.stableswap.v1.Pool
 */
export class Pool extends Message<Pool> {
  /**
   * Protocol fee percentage for the pool.
   *
   * @generated from field: int64 protocol_fee_percentage = 1;
   */
  protocolFeePercentage = protoInt64.zero;

  /**
   * Rewards fee for the pool.
   *
   * @generated from field: int64 rewards_fee = 2;
   */
  rewardsFee = protoInt64.zero;

  /**
   * Initial amplification coefficient.
   *
   * @generated from field: int64 initial_a = 3;
   */
  initialA = protoInt64.zero;

  /**
   * Future amplification coefficient.
   *
   * @generated from field: int64 future_a = 4;
   */
  futureA = protoInt64.zero;

  /**
   * Time when the amplification starts taking effect.
   *
   * @generated from field: int64 initial_a_time = 5;
   */
  initialATime = protoInt64.zero;

  /**
   * Time when the amplification change will take full effect.
   *
   * @generated from field: int64 future_a_time = 6;
   */
  futureATime = protoInt64.zero;

  /**
   * Rate multipliers applied to the coins.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin rate_multipliers = 7;
   */
  rateMultipliers: Coin[] = [];

  /**
   * Total shares issued within the Pool.
   *
   * @generated from field: string total_shares = 8;
   */
  totalShares = "";

  /**
   * Time when the first liquidity was added to start tracking rewards.
   *
   * @generated from field: google.protobuf.Timestamp initial_rewards_time = 9;
   */
  initialRewardsTime?: Timestamp;

  constructor(data?: PartialMessage<Pool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.swap.stableswap.v1.Pool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "protocol_fee_percentage", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "rewards_fee", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "initial_a", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "future_a", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "initial_a_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "future_a_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "rate_multipliers", kind: "message", T: Coin, repeated: true },
    { no: 8, name: "total_shares", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "initial_rewards_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pool {
    return new Pool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pool {
    return new Pool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pool {
    return new Pool().fromJsonString(jsonString, options);
  }

  static equals(a: Pool | PlainMessage<Pool> | undefined, b: Pool | PlainMessage<Pool> | undefined): boolean {
    return proto3.util.equals(Pool, a, b);
  }
}

