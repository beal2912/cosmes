// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file noble/swap/stableswap/v1/position.proto (package noble.swap.stableswap.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { Coin } from "../../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * @generated from message noble.swap.stableswap.v1.BondedPosition
 */
export class BondedPosition extends Message<BondedPosition> {
  /**
   * Balance of bonded shares.
   *
   * @generated from field: string balance = 1;
   */
  balance = "";

  /**
   * Time when the liquidity was added.
   *
   * @generated from field: google.protobuf.Timestamp timestamp = 2;
   */
  timestamp?: Timestamp;

  /**
   * Time when the rewards were collected.
   *
   * @generated from field: google.protobuf.Timestamp rewards_period_start = 3;
   */
  rewardsPeriodStart?: Timestamp;

  constructor(data?: PartialMessage<BondedPosition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.swap.stableswap.v1.BondedPosition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "balance", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "message", T: Timestamp },
    { no: 3, name: "rewards_period_start", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BondedPosition {
    return new BondedPosition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BondedPosition {
    return new BondedPosition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BondedPosition {
    return new BondedPosition().fromJsonString(jsonString, options);
  }

  static equals(a: BondedPosition | PlainMessage<BondedPosition> | undefined, b: BondedPosition | PlainMessage<BondedPosition> | undefined): boolean {
    return proto3.util.equals(BondedPosition, a, b);
  }
}

/**
 * @generated from message noble.swap.stableswap.v1.UnbondingPosition
 */
export class UnbondingPosition extends Message<UnbondingPosition> {
  /**
   * Amount of shares removed.
   *
   * @generated from field: string shares = 1;
   */
  shares = "";

  /**
   * Liquidity amount being removed.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 2;
   */
  amount: Coin[] = [];

  /**
   * Time when the removed liquidity will be unlocked.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 3;
   */
  endTime?: Timestamp;

  constructor(data?: PartialMessage<UnbondingPosition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.swap.stableswap.v1.UnbondingPosition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "shares", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "message", T: Coin, repeated: true },
    { no: 3, name: "end_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnbondingPosition {
    return new UnbondingPosition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnbondingPosition {
    return new UnbondingPosition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnbondingPosition {
    return new UnbondingPosition().fromJsonString(jsonString, options);
  }

  static equals(a: UnbondingPosition | PlainMessage<UnbondingPosition> | undefined, b: UnbondingPosition | PlainMessage<UnbondingPosition> | undefined): boolean {
    return proto3.util.equals(UnbondingPosition, a, b);
  }
}

