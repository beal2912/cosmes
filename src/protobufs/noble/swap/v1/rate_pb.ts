// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file noble/swap/v1/rate.proto (package noble.swap.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Algorithm } from "./algorithm_pb.js";

/**
 * @generated from message noble.swap.v1.Rate
 */
export class Rate extends Message<Rate> {
  /**
   * Denomination of the base currency.
   *
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * Denomination of the counter currency.
   *
   * @generated from field: string vs = 2;
   */
  vs = "";

  /**
   * Exchange rate between the base and counter currency.
   *
   * @generated from field: string price = 3;
   */
  price = "";

  /**
   * Algorithm of the underlying Pool used for the calculation.
   *
   * @generated from field: noble.swap.v1.Algorithm algorithm = 4;
   */
  algorithm = Algorithm.UNSPECIFIED;

  constructor(data?: PartialMessage<Rate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.swap.v1.Rate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "vs", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "algorithm", kind: "enum", T: proto3.getEnumType(Algorithm) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Rate {
    return new Rate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Rate {
    return new Rate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Rate {
    return new Rate().fromJsonString(jsonString, options);
  }

  static equals(a: Rate | PlainMessage<Rate> | undefined, b: Rate | PlainMessage<Rate> | undefined): boolean {
    return proto3.util.equals(Rate, a, b);
  }
}

