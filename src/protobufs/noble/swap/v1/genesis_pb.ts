// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file noble/swap/v1/genesis.proto (package noble.swap.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Pool } from "./pool_pb.js";
import { GenesisState as GenesisState$1 } from "../stableswap/v1/genesis_pb.js";

/**
 * GenesisState defines the Swap genesis state.
 *
 * @generated from message noble.swap.v1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * @generated from field: uint64 next_pool_id = 1;
   */
  nextPoolId = protoInt64.zero;

  /**
   * @generated from field: map<uint64, noble.swap.v1.Pool> pools = 2;
   */
  pools: { [key: string]: Pool } = {};

  /**
   * @generated from field: map<uint64, bool> paused = 3;
   */
  paused: { [key: string]: boolean } = {};

  /**
   * @generated from field: noble.swap.stableswap.v1.GenesisState stableswap_state = 4;
   */
  stableswapState?: GenesisState$1;

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.swap.v1.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "next_pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "pools", kind: "map", K: 4 /* ScalarType.UINT64 */, V: {kind: "message", T: Pool} },
    { no: 3, name: "paused", kind: "map", K: 4 /* ScalarType.UINT64 */, V: {kind: "scalar", T: 8 /* ScalarType.BOOL */} },
    { no: 4, name: "stableswap_state", kind: "message", T: GenesisState$1 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

