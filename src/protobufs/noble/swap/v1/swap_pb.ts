// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file noble/swap/v1/swap.proto (package noble.swap.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * @generated from message noble.swap.v1.Route
 */
export class Route extends Message<Route> {
  /**
   * ID of the Pool.
   *
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * Destination denom after the Swap in the Pool.
   *
   * @generated from field: string denom_to = 2;
   */
  denomTo = "";

  constructor(data?: PartialMessage<Route>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.swap.v1.Route";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "denom_to", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Route {
    return new Route().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Route {
    return new Route().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Route {
    return new Route().fromJsonString(jsonString, options);
  }

  static equals(a: Route | PlainMessage<Route> | undefined, b: Route | PlainMessage<Route> | undefined): boolean {
    return proto3.util.equals(Route, a, b);
  }
}

/**
 * @generated from message noble.swap.v1.Swap
 */
export class Swap extends Message<Swap> {
  /**
   * ID of the pool used in the swap.
   *
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * The input coin for the swap.
   *
   * @generated from field: cosmos.base.v1beta1.Coin in = 2;
   */
  in?: Coin;

  /**
   * The output coin after the swap.
   *
   * @generated from field: cosmos.base.v1beta1.Coin out = 3;
   */
  out?: Coin;

  /**
   * Any fees incurred during the swap.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin fees = 4;
   */
  fees: Coin[] = [];

  constructor(data?: PartialMessage<Swap>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.swap.v1.Swap";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "in", kind: "message", T: Coin },
    { no: 3, name: "out", kind: "message", T: Coin },
    { no: 4, name: "fees", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Swap {
    return new Swap().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Swap {
    return new Swap().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Swap {
    return new Swap().fromJsonString(jsonString, options);
  }

  static equals(a: Swap | PlainMessage<Swap> | undefined, b: Swap | PlainMessage<Swap> | undefined): boolean {
    return proto3.util.equals(Swap, a, b);
  }
}

