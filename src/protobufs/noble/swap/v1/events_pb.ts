// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file noble/swap/v1/events.proto (package noble.swap.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
import { Route } from "./swap_pb.js";

/**
 * @generated from message noble.swap.v1.PoolsPaused
 */
export class PoolsPaused extends Message<PoolsPaused> {
  /**
   * IDs of the pools paused.
   *
   * @generated from field: repeated uint64 pool_ids = 1;
   */
  poolIds: bigint[] = [];

  constructor(data?: PartialMessage<PoolsPaused>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.swap.v1.PoolsPaused";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_ids", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolsPaused {
    return new PoolsPaused().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolsPaused {
    return new PoolsPaused().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolsPaused {
    return new PoolsPaused().fromJsonString(jsonString, options);
  }

  static equals(a: PoolsPaused | PlainMessage<PoolsPaused> | undefined, b: PoolsPaused | PlainMessage<PoolsPaused> | undefined): boolean {
    return proto3.util.equals(PoolsPaused, a, b);
  }
}

/**
 * @generated from message noble.swap.v1.PoolsUnpaused
 */
export class PoolsUnpaused extends Message<PoolsUnpaused> {
  /**
   * IDs of the pools unpaused.
   *
   * @generated from field: repeated uint64 pool_ids = 1;
   */
  poolIds: bigint[] = [];

  constructor(data?: PartialMessage<PoolsUnpaused>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.swap.v1.PoolsUnpaused";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_ids", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolsUnpaused {
    return new PoolsUnpaused().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolsUnpaused {
    return new PoolsUnpaused().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolsUnpaused {
    return new PoolsUnpaused().fromJsonString(jsonString, options);
  }

  static equals(a: PoolsUnpaused | PlainMessage<PoolsUnpaused> | undefined, b: PoolsUnpaused | PlainMessage<PoolsUnpaused> | undefined): boolean {
    return proto3.util.equals(PoolsUnpaused, a, b);
  }
}

/**
 * @generated from message noble.swap.v1.Swapped
 */
export class Swapped extends Message<Swapped> {
  /**
   * Address of the user initiating the swap.
   *
   * @generated from field: string signer = 1;
   */
  signer = "";

  /**
   * Coin input by the user.
   *
   * @generated from field: cosmos.base.v1beta1.Coin input = 2;
   */
  input?: Coin;

  /**
   * Final output coin from the swap.
   *
   * @generated from field: cosmos.base.v1beta1.Coin output = 3;
   */
  output?: Coin;

  /**
   * Routing outing of the swap.
   *
   * @generated from field: repeated noble.swap.v1.Route routes = 4;
   */
  routes: Route[] = [];

  /**
   * Amount of fees incurred during the swap.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin fees = 5;
   */
  fees: Coin[] = [];

  constructor(data?: PartialMessage<Swapped>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.swap.v1.Swapped";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "input", kind: "message", T: Coin },
    { no: 3, name: "output", kind: "message", T: Coin },
    { no: 4, name: "routes", kind: "message", T: Route, repeated: true },
    { no: 5, name: "fees", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Swapped {
    return new Swapped().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Swapped {
    return new Swapped().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Swapped {
    return new Swapped().fromJsonString(jsonString, options);
  }

  static equals(a: Swapped | PlainMessage<Swapped> | undefined, b: Swapped | PlainMessage<Swapped> | undefined): boolean {
    return proto3.util.equals(Swapped, a, b);
  }
}

/**
 * @generated from message noble.swap.v1.WithdrawnProtocolFees
 */
export class WithdrawnProtocolFees extends Message<WithdrawnProtocolFees> {
  /**
   * Address to which the fees are transferred
   *
   * @generated from field: string to = 1;
   */
  to = "";

  /**
   * Amount of rewards withdrawn.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin rewards = 2;
   */
  rewards: Coin[] = [];

  constructor(data?: PartialMessage<WithdrawnProtocolFees>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.swap.v1.WithdrawnProtocolFees";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "to", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "rewards", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WithdrawnProtocolFees {
    return new WithdrawnProtocolFees().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WithdrawnProtocolFees {
    return new WithdrawnProtocolFees().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WithdrawnProtocolFees {
    return new WithdrawnProtocolFees().fromJsonString(jsonString, options);
  }

  static equals(a: WithdrawnProtocolFees | PlainMessage<WithdrawnProtocolFees> | undefined, b: WithdrawnProtocolFees | PlainMessage<WithdrawnProtocolFees> | undefined): boolean {
    return proto3.util.equals(WithdrawnProtocolFees, a, b);
  }
}

/**
 * @generated from message noble.swap.v1.WithdrawnRewards
 */
export class WithdrawnRewards extends Message<WithdrawnRewards> {
  /**
   * Address of the user withdrawing rewards.
   *
   * @generated from field: string signer = 1;
   */
  signer = "";

  /**
   * Amount of rewards withdrawn.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin rewards = 2;
   */
  rewards: Coin[] = [];

  constructor(data?: PartialMessage<WithdrawnRewards>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.swap.v1.WithdrawnRewards";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "rewards", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WithdrawnRewards {
    return new WithdrawnRewards().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WithdrawnRewards {
    return new WithdrawnRewards().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WithdrawnRewards {
    return new WithdrawnRewards().fromJsonString(jsonString, options);
  }

  static equals(a: WithdrawnRewards | PlainMessage<WithdrawnRewards> | undefined, b: WithdrawnRewards | PlainMessage<WithdrawnRewards> | undefined): boolean {
    return proto3.util.equals(WithdrawnRewards, a, b);
  }
}

