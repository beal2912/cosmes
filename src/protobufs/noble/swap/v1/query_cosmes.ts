// @generated by protoc-gen-cosmes v0.0.1 with parameter "target=ts"
// @generated from file noble/swap/v1/query.proto (package noble.swap.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { QueryPaused, QueryPausedResponse, QueryPool, QueryPoolResponse, QueryPools, QueryPoolsResponse, QueryRate, QueryRateResponse, QueryRates, QueryRatesResponse, QuerySimulateSwap } from "./query_pb.js";
import { MsgSwapResponse } from "./tx_pb.js";

const TYPE_NAME = "noble.swap.v1.Query";

/**
 * Retrieves a list of the currently paused Pools.
 *
 * @generated from rpc noble.swap.v1.Query.Paused
 */
export const QueryPausedService = {
  typeName: TYPE_NAME,
  method: "Paused",
  Request: QueryPaused,
  Response: QueryPausedResponse,
} as const;

/**
 * Retrieves the details of all Pools.
 *
 * @generated from rpc noble.swap.v1.Query.Pools
 */
export const QueryPoolsService = {
  typeName: TYPE_NAME,
  method: "Pools",
  Request: QueryPools,
  Response: QueryPoolsResponse,
} as const;

/**
 * Retrieves details of a specific Pool.
 *
 * @generated from rpc noble.swap.v1.Query.Pool
 */
export const QueryPoolService = {
  typeName: TYPE_NAME,
  method: "Pool",
  Request: QueryPool,
  Response: QueryPoolResponse,
} as const;

/**
 * Simulates a token swap simulation.
 *
 * @generated from rpc noble.swap.v1.Query.SimulateSwap
 */
export const QuerySimulateSwapService = {
  typeName: TYPE_NAME,
  method: "SimulateSwap",
  Request: QuerySimulateSwap,
  Response: MsgSwapResponse,
} as const;

/**
 * Retrieves exchange rates for all tokens, with the optionality of filtering by algorithm.
 *
 * @generated from rpc noble.swap.v1.Query.Rates
 */
export const QueryRatesService = {
  typeName: TYPE_NAME,
  method: "Rates",
  Request: QueryRates,
  Response: QueryRatesResponse,
} as const;

/**
 * Retrieves exchange rates for a specific token, with the optionality of filtering by algorithm.
 *
 * @generated from rpc noble.swap.v1.Query.Rate
 */
export const QueryRateService = {
  typeName: TYPE_NAME,
  method: "Rate",
  Request: QueryRate,
  Response: QueryRateResponse,
} as const;

