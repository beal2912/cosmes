// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file noble/swap/v1/pool.proto (package noble.swap.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Algorithm } from "./algorithm_pb.js";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * @generated from message noble.swap.v1.Pool
 */
export class Pool extends Message<Pool> {
  /**
   * ID of the Pool.
   *
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * Address of the Pool.
   *
   * @generated from field: string address = 2;
   */
  address = "";

  /**
   * Algorithm of the pool.
   *
   * @generated from field: noble.swap.v1.Algorithm algorithm = 3;
   */
  algorithm = Algorithm.UNSPECIFIED;

  /**
   * Pair asset denom in the pool.
   *
   * @generated from field: string pair = 4;
   */
  pair = "";

  constructor(data?: PartialMessage<Pool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.swap.v1.Pool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "algorithm", kind: "enum", T: proto3.getEnumType(Algorithm) },
    { no: 4, name: "pair", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pool {
    return new Pool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pool {
    return new Pool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pool {
    return new Pool().fromJsonString(jsonString, options);
  }

  static equals(a: Pool | PlainMessage<Pool> | undefined, b: Pool | PlainMessage<Pool> | undefined): boolean {
    return proto3.util.equals(Pool, a, b);
  }
}

/**
 * @generated from message noble.swap.v1.PoolDetails
 */
export class PoolDetails extends Message<PoolDetails> {
  /**
   * ID of the Pool.
   *
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * Address of the Pool.
   *
   * @generated from field: string address = 2;
   */
  address = "";

  /**
   * Algorithm of the pool.
   *
   * @generated from field: noble.swap.v1.Algorithm algorithm = 3;
   */
  algorithm = Algorithm.UNSPECIFIED;

  /**
   * Pair asset denom in the pool.
   *
   * @generated from field: string pair = 4;
   */
  pair = "";

  /**
   * Details of the Underlying Pool with the specific custom attributes.
   *
   * @generated from field: google.protobuf.Any details = 5;
   */
  details?: Any;

  /**
   * Amount of liquidity in the Pool.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin liquidity = 6;
   */
  liquidity: Coin[] = [];

  /**
   * Amount of protocol fees currently collected.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin protocol_fees = 7;
   */
  protocolFees: Coin[] = [];

  /**
   * Amount of rewards fees currently collected.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin reward_fees = 8;
   */
  rewardFees: Coin[] = [];

  constructor(data?: PartialMessage<PoolDetails>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.swap.v1.PoolDetails";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "algorithm", kind: "enum", T: proto3.getEnumType(Algorithm) },
    { no: 4, name: "pair", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "details", kind: "message", T: Any },
    { no: 6, name: "liquidity", kind: "message", T: Coin, repeated: true },
    { no: 7, name: "protocol_fees", kind: "message", T: Coin, repeated: true },
    { no: 8, name: "reward_fees", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolDetails {
    return new PoolDetails().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolDetails {
    return new PoolDetails().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolDetails {
    return new PoolDetails().fromJsonString(jsonString, options);
  }

  static equals(a: PoolDetails | PlainMessage<PoolDetails> | undefined, b: PoolDetails | PlainMessage<PoolDetails> | undefined): boolean {
    return proto3.util.equals(PoolDetails, a, b);
  }
}

