// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file noble/swap/module/v1/module.proto (package noble.swap.module.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * Module is the config object of the Noble Swap module.
 *
 * @generated from message noble.swap.module.v1.Module
 */
export class Module extends Message<Module> {
  /**
   * authority defines the custom module authority.
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * base_denom defines the base denom that is used as the standard pairing denomination for all liquidity pools.
   *
   * @generated from field: string base_denom = 2;
   */
  baseDenom = "";

  /**
   * base_minimum_deposit specifies the minimum amount of the base token required for depositing into liquidity pools.
   *
   * @generated from field: int64 base_minimum_deposit = 3;
   */
  baseMinimumDeposit = protoInt64.zero;

  /**
   * max_add_liquidity_slippage_percentage specifies the maximum slippage a user may encounter when adding liquidity.
   *
   * @generated from field: int64 max_add_liquidity_slippage_percentage = 4;
   */
  maxAddLiquiditySlippagePercentage = protoInt64.zero;

  /**
   * stableswap contains the custom attributes and configurations required for the StableSwap module.
   *
   * @generated from field: noble.swap.module.v1.StableSwap stableswap = 5;
   */
  stableswap?: StableSwap;

  constructor(data?: PartialMessage<Module>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.swap.module.v1.Module";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "base_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "base_minimum_deposit", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "max_add_liquidity_slippage_percentage", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "stableswap", kind: "message", T: StableSwap },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Module {
    return new Module().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Module {
    return new Module().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Module {
    return new Module().fromJsonString(jsonString, options);
  }

  static equals(a: Module | PlainMessage<Module> | undefined, b: Module | PlainMessage<Module> | undefined): boolean {
    return proto3.util.equals(Module, a, b);
  }
}

/**
 * @generated from message noble.swap.module.v1.StableSwap
 */
export class StableSwap extends Message<StableSwap> {
  /**
   * unbonding_block_delta defines the number of blocks between unbonding BeginBlocker executions.
   *
   * @generated from field: int64 unbonding_block_delta = 1;
   */
  unbondingBlockDelta = protoInt64.zero;

  constructor(data?: PartialMessage<StableSwap>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.swap.module.v1.StableSwap";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "unbonding_block_delta", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StableSwap {
    return new StableSwap().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StableSwap {
    return new StableSwap().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StableSwap {
    return new StableSwap().fromJsonString(jsonString, options);
  }

  static equals(a: StableSwap | PlainMessage<StableSwap> | undefined, b: StableSwap | PlainMessage<StableSwap> | undefined): boolean {
    return proto3.util.equals(StableSwap, a, b);
  }
}

