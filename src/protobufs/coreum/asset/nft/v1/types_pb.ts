// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file coreum/asset/nft/v1/types.proto (package coreum.asset.nft.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * DataEditor defines possible data editors.
 *
 * @generated from enum coreum.asset.nft.v1.DataEditor
 */
export enum DataEditor {
  /**
   * @generated from enum value: admin = 0;
   */
  admin = 0,

  /**
   * @generated from enum value: owner = 1;
   */
  owner = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(DataEditor)
proto3.util.setEnumType(DataEditor, "coreum.asset.nft.v1.DataEditor", [
  { no: 0, name: "admin" },
  { no: 1, name: "owner" },
]);

/**
 * DataBytes represents the immutable data.
 *
 * @generated from message coreum.asset.nft.v1.DataBytes
 */
export class DataBytes extends Message<DataBytes> {
  /**
   * @generated from field: bytes Data = 1;
   */
  Data = new Uint8Array(0);

  constructor(data?: PartialMessage<DataBytes>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.DataBytes";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataBytes {
    return new DataBytes().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataBytes {
    return new DataBytes().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataBytes {
    return new DataBytes().fromJsonString(jsonString, options);
  }

  static equals(a: DataBytes | PlainMessage<DataBytes> | undefined, b: DataBytes | PlainMessage<DataBytes> | undefined): boolean {
    return proto3.util.equals(DataBytes, a, b);
  }
}

/**
 * DataDynamicItem contains the updatable data and modification types.
 *
 * @generated from message coreum.asset.nft.v1.DataDynamicItem
 */
export class DataDynamicItem extends Message<DataDynamicItem> {
  /**
   * contains the set of the data editors, if empty no one can update.
   *
   * @generated from field: repeated coreum.asset.nft.v1.DataEditor editors = 1;
   */
  editors: DataEditor[] = [];

  /**
   * @generated from field: bytes data = 2;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<DataDynamicItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.DataDynamicItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "editors", kind: "enum", T: proto3.getEnumType(DataEditor), repeated: true },
    { no: 2, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataDynamicItem {
    return new DataDynamicItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataDynamicItem {
    return new DataDynamicItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataDynamicItem {
    return new DataDynamicItem().fromJsonString(jsonString, options);
  }

  static equals(a: DataDynamicItem | PlainMessage<DataDynamicItem> | undefined, b: DataDynamicItem | PlainMessage<DataDynamicItem> | undefined): boolean {
    return proto3.util.equals(DataDynamicItem, a, b);
  }
}

/**
 * DataDynamicIndexed contains the data and it's index in the DataDynamic.
 *
 * @generated from message coreum.asset.nft.v1.DataDynamicIndexedItem
 */
export class DataDynamicIndexedItem extends Message<DataDynamicIndexedItem> {
  /**
   * @generated from field: uint32 index = 1;
   */
  index = 0;

  /**
   * @generated from field: bytes data = 2;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<DataDynamicIndexedItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.DataDynamicIndexedItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataDynamicIndexedItem {
    return new DataDynamicIndexedItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataDynamicIndexedItem {
    return new DataDynamicIndexedItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataDynamicIndexedItem {
    return new DataDynamicIndexedItem().fromJsonString(jsonString, options);
  }

  static equals(a: DataDynamicIndexedItem | PlainMessage<DataDynamicIndexedItem> | undefined, b: DataDynamicIndexedItem | PlainMessage<DataDynamicIndexedItem> | undefined): boolean {
    return proto3.util.equals(DataDynamicIndexedItem, a, b);
  }
}

/**
 * DataDynamic is dynamic data which contains the list of the items allowed to be modified base on their modification types.
 *
 * @generated from message coreum.asset.nft.v1.DataDynamic
 */
export class DataDynamic extends Message<DataDynamic> {
  /**
   * @generated from field: repeated coreum.asset.nft.v1.DataDynamicItem items = 1;
   */
  items: DataDynamicItem[] = [];

  constructor(data?: PartialMessage<DataDynamic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.nft.v1.DataDynamic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: DataDynamicItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataDynamic {
    return new DataDynamic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataDynamic {
    return new DataDynamic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataDynamic {
    return new DataDynamic().fromJsonString(jsonString, options);
  }

  static equals(a: DataDynamic | PlainMessage<DataDynamic> | undefined, b: DataDynamic | PlainMessage<DataDynamic> | undefined): boolean {
    return proto3.util.equals(DataDynamic, a, b);
  }
}

