// @generated by protoc-gen-cosmes v0.0.1 with parameter "target=ts"
// @generated from file coreum/asset/ft/v1/tx.proto (package coreum.asset.ft.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { EmptyResponse, MsgBurn, MsgClawback, MsgClearAdmin, MsgFreeze, MsgGloballyFreeze, MsgGloballyUnfreeze, MsgIssue, MsgMint, MsgSetFrozen, MsgSetWhitelistedLimit, MsgTransferAdmin, MsgUnfreeze, MsgUpdateDEXUnifiedRefAmount, MsgUpdateDEXWhitelistedDenoms, MsgUpdateParams } from "./tx_pb.js";

const TYPE_NAME = "coreum.asset.ft.v1.Msg";

/**
 * Issue defines a method to issue a new fungible token.
 *
 * @generated from rpc coreum.asset.ft.v1.Msg.Issue
 */
export const MsgIssueService = {
  typeName: TYPE_NAME,
  method: "Issue",
  Request: MsgIssue,
  Response: EmptyResponse,
} as const;

/**
 * Mint mints new fungible tokens.
 *
 * @generated from rpc coreum.asset.ft.v1.Msg.Mint
 */
export const MsgMintService = {
  typeName: TYPE_NAME,
  method: "Mint",
  Request: MsgMint,
  Response: EmptyResponse,
} as const;

/**
 * Burn burns the specified fungible tokens from senders balance if the sender has enough balance.
 *
 * @generated from rpc coreum.asset.ft.v1.Msg.Burn
 */
export const MsgBurnService = {
  typeName: TYPE_NAME,
  method: "Burn",
  Request: MsgBurn,
  Response: EmptyResponse,
} as const;

/**
 * Freeze freezes a part of the fungible tokens in an
 * account, only if the freezable feature is enabled on that token.
 *
 * @generated from rpc coreum.asset.ft.v1.Msg.Freeze
 */
export const MsgFreezeService = {
  typeName: TYPE_NAME,
  method: "Freeze",
  Request: MsgFreeze,
  Response: EmptyResponse,
} as const;

/**
 * Unfreeze unfreezes a part of the frozen fungible tokens in an
 * account, only if there are such frozen tokens on that account.
 *
 * @generated from rpc coreum.asset.ft.v1.Msg.Unfreeze
 */
export const MsgUnfreezeService = {
  typeName: TYPE_NAME,
  method: "Unfreeze",
  Request: MsgUnfreeze,
  Response: EmptyResponse,
} as const;

/**
 * SetFrozen sets the absolute value of frozen amount.
 *
 * @generated from rpc coreum.asset.ft.v1.Msg.SetFrozen
 */
export const MsgSetFrozenService = {
  typeName: TYPE_NAME,
  method: "SetFrozen",
  Request: MsgSetFrozen,
  Response: EmptyResponse,
} as const;

/**
 * GloballyFreeze freezes fungible token so no operations are allowed with it before unfrozen.
 * This operation is idempotent so global freeze of already frozen token does nothing.
 *
 * @generated from rpc coreum.asset.ft.v1.Msg.GloballyFreeze
 */
export const MsgGloballyFreezeService = {
  typeName: TYPE_NAME,
  method: "GloballyFreeze",
  Request: MsgGloballyFreeze,
  Response: EmptyResponse,
} as const;

/**
 * GloballyUnfreeze unfreezes fungible token and unblocks basic operations on it.
 * This operation is idempotent so global unfreezing of non-frozen token does nothing.
 *
 * @generated from rpc coreum.asset.ft.v1.Msg.GloballyUnfreeze
 */
export const MsgGloballyUnfreezeService = {
  typeName: TYPE_NAME,
  method: "GloballyUnfreeze",
  Request: MsgGloballyUnfreeze,
  Response: EmptyResponse,
} as const;

/**
 * Clawback confiscates a part of fungible tokens from an account
 * to the admin, only if the clawback feature is enabled on that token.
 *
 * @generated from rpc coreum.asset.ft.v1.Msg.Clawback
 */
export const MsgClawbackService = {
  typeName: TYPE_NAME,
  method: "Clawback",
  Request: MsgClawback,
  Response: EmptyResponse,
} as const;

/**
 * SetWhitelistedLimit sets the limit of how many tokens a specific account may hold.
 *
 * @generated from rpc coreum.asset.ft.v1.Msg.SetWhitelistedLimit
 */
export const MsgSetWhitelistedLimitService = {
  typeName: TYPE_NAME,
  method: "SetWhitelistedLimit",
  Request: MsgSetWhitelistedLimit,
  Response: EmptyResponse,
} as const;

/**
 * TransferAdmin changes admin of a fungible token.
 *
 * @generated from rpc coreum.asset.ft.v1.Msg.TransferAdmin
 */
export const MsgTransferAdminService = {
  typeName: TYPE_NAME,
  method: "TransferAdmin",
  Request: MsgTransferAdmin,
  Response: EmptyResponse,
} as const;

/**
 * ClearAdmin removes admin of a fungible token.
 *
 * @generated from rpc coreum.asset.ft.v1.Msg.ClearAdmin
 */
export const MsgClearAdminService = {
  typeName: TYPE_NAME,
  method: "ClearAdmin",
  Request: MsgClearAdmin,
  Response: EmptyResponse,
} as const;

/**
 * UpdateParams is a governance operation to modify the parameters of the module.
 * NOTE: all parameters must be provided.
 *
 * @generated from rpc coreum.asset.ft.v1.Msg.UpdateParams
 */
export const MsgUpdateParamsService = {
  typeName: TYPE_NAME,
  method: "UpdateParams",
  Request: MsgUpdateParams,
  Response: EmptyResponse,
} as const;

/**
 * UpdateDEXUnifiedRefAmount updates DEX unified ref amount.
 *
 * @generated from rpc coreum.asset.ft.v1.Msg.UpdateDEXUnifiedRefAmount
 */
export const MsgUpdateDEXUnifiedRefAmountService = {
  typeName: TYPE_NAME,
  method: "UpdateDEXUnifiedRefAmount",
  Request: MsgUpdateDEXUnifiedRefAmount,
  Response: EmptyResponse,
} as const;

/**
 * UpdateDEXWhitelistedDenoms updates DEX whitelisted denoms.
 *
 * @generated from rpc coreum.asset.ft.v1.Msg.UpdateDEXWhitelistedDenoms
 */
export const MsgUpdateDEXWhitelistedDenomsService = {
  typeName: TYPE_NAME,
  method: "UpdateDEXWhitelistedDenoms",
  Request: MsgUpdateDEXWhitelistedDenoms,
  Response: EmptyResponse,
} as const;

