// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file coreum/asset/ft/v1/event.proto (package coreum.asset.ft.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { DEXSettings, Feature } from "./token_pb.js";

/**
 * EventIssued is emitted on MsgIssue.
 *
 * @generated from message coreum.asset.ft.v1.EventIssued
 */
export class EventIssued extends Message<EventIssued> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * @generated from field: string issuer = 2;
   */
  issuer = "";

  /**
   * @generated from field: string symbol = 3;
   */
  symbol = "";

  /**
   * @generated from field: string subunit = 4;
   */
  subunit = "";

  /**
   * @generated from field: uint32 precision = 5;
   */
  precision = 0;

  /**
   * @generated from field: string initial_amount = 6;
   */
  initialAmount = "";

  /**
   * @generated from field: string description = 7;
   */
  description = "";

  /**
   * @generated from field: repeated coreum.asset.ft.v1.Feature features = 8;
   */
  features: Feature[] = [];

  /**
   * @generated from field: string burn_rate = 9;
   */
  burnRate = "";

  /**
   * @generated from field: string send_commission_rate = 10;
   */
  sendCommissionRate = "";

  /**
   * @generated from field: string uri = 11;
   */
  uri = "";

  /**
   * @generated from field: string uri_hash = 12;
   */
  uriHash = "";

  /**
   * @generated from field: string admin = 13;
   */
  admin = "";

  /**
   * @generated from field: coreum.asset.ft.v1.DEXSettings dex_settings = 14;
   */
  dexSettings?: DEXSettings;

  constructor(data?: PartialMessage<EventIssued>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.ft.v1.EventIssued";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "issuer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "subunit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "precision", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 6, name: "initial_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "features", kind: "enum", T: proto3.getEnumType(Feature), repeated: true },
    { no: 9, name: "burn_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "send_commission_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "uri_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "dex_settings", kind: "message", T: DEXSettings },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventIssued {
    return new EventIssued().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventIssued {
    return new EventIssued().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventIssued {
    return new EventIssued().fromJsonString(jsonString, options);
  }

  static equals(a: EventIssued | PlainMessage<EventIssued> | undefined, b: EventIssued | PlainMessage<EventIssued> | undefined): boolean {
    return proto3.util.equals(EventIssued, a, b);
  }
}

/**
 * @generated from message coreum.asset.ft.v1.EventFrozenAmountChanged
 */
export class EventFrozenAmountChanged extends Message<EventFrozenAmountChanged> {
  /**
   * @generated from field: string account = 1;
   */
  account = "";

  /**
   * @generated from field: string denom = 2;
   */
  denom = "";

  /**
   * @generated from field: string previous_amount = 3;
   */
  previousAmount = "";

  /**
   * @generated from field: string current_amount = 4;
   */
  currentAmount = "";

  constructor(data?: PartialMessage<EventFrozenAmountChanged>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.ft.v1.EventFrozenAmountChanged";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "previous_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "current_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventFrozenAmountChanged {
    return new EventFrozenAmountChanged().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventFrozenAmountChanged {
    return new EventFrozenAmountChanged().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventFrozenAmountChanged {
    return new EventFrozenAmountChanged().fromJsonString(jsonString, options);
  }

  static equals(a: EventFrozenAmountChanged | PlainMessage<EventFrozenAmountChanged> | undefined, b: EventFrozenAmountChanged | PlainMessage<EventFrozenAmountChanged> | undefined): boolean {
    return proto3.util.equals(EventFrozenAmountChanged, a, b);
  }
}

/**
 * @generated from message coreum.asset.ft.v1.EventAmountClawedBack
 */
export class EventAmountClawedBack extends Message<EventAmountClawedBack> {
  /**
   * @generated from field: string account = 1;
   */
  account = "";

  /**
   * @generated from field: string denom = 2;
   */
  denom = "";

  /**
   * @generated from field: string amount = 3;
   */
  amount = "";

  constructor(data?: PartialMessage<EventAmountClawedBack>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.ft.v1.EventAmountClawedBack";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventAmountClawedBack {
    return new EventAmountClawedBack().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventAmountClawedBack {
    return new EventAmountClawedBack().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventAmountClawedBack {
    return new EventAmountClawedBack().fromJsonString(jsonString, options);
  }

  static equals(a: EventAmountClawedBack | PlainMessage<EventAmountClawedBack> | undefined, b: EventAmountClawedBack | PlainMessage<EventAmountClawedBack> | undefined): boolean {
    return proto3.util.equals(EventAmountClawedBack, a, b);
  }
}

/**
 * @generated from message coreum.asset.ft.v1.EventWhitelistedAmountChanged
 */
export class EventWhitelistedAmountChanged extends Message<EventWhitelistedAmountChanged> {
  /**
   * @generated from field: string account = 1;
   */
  account = "";

  /**
   * @generated from field: string denom = 2;
   */
  denom = "";

  /**
   * @generated from field: string previous_amount = 3;
   */
  previousAmount = "";

  /**
   * @generated from field: string current_amount = 4;
   */
  currentAmount = "";

  constructor(data?: PartialMessage<EventWhitelistedAmountChanged>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.ft.v1.EventWhitelistedAmountChanged";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "previous_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "current_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventWhitelistedAmountChanged {
    return new EventWhitelistedAmountChanged().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventWhitelistedAmountChanged {
    return new EventWhitelistedAmountChanged().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventWhitelistedAmountChanged {
    return new EventWhitelistedAmountChanged().fromJsonString(jsonString, options);
  }

  static equals(a: EventWhitelistedAmountChanged | PlainMessage<EventWhitelistedAmountChanged> | undefined, b: EventWhitelistedAmountChanged | PlainMessage<EventWhitelistedAmountChanged> | undefined): boolean {
    return proto3.util.equals(EventWhitelistedAmountChanged, a, b);
  }
}

/**
 * @generated from message coreum.asset.ft.v1.EventDEXLockedAmountChanged
 */
export class EventDEXLockedAmountChanged extends Message<EventDEXLockedAmountChanged> {
  /**
   * @generated from field: string account = 1;
   */
  account = "";

  /**
   * @generated from field: string denom = 2;
   */
  denom = "";

  /**
   * @generated from field: string previous_amount = 3;
   */
  previousAmount = "";

  /**
   * @generated from field: string current_amount = 4;
   */
  currentAmount = "";

  constructor(data?: PartialMessage<EventDEXLockedAmountChanged>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.ft.v1.EventDEXLockedAmountChanged";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "previous_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "current_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventDEXLockedAmountChanged {
    return new EventDEXLockedAmountChanged().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventDEXLockedAmountChanged {
    return new EventDEXLockedAmountChanged().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventDEXLockedAmountChanged {
    return new EventDEXLockedAmountChanged().fromJsonString(jsonString, options);
  }

  static equals(a: EventDEXLockedAmountChanged | PlainMessage<EventDEXLockedAmountChanged> | undefined, b: EventDEXLockedAmountChanged | PlainMessage<EventDEXLockedAmountChanged> | undefined): boolean {
    return proto3.util.equals(EventDEXLockedAmountChanged, a, b);
  }
}

/**
 * @generated from message coreum.asset.ft.v1.EventDEXExpectedToReceiveAmountChanged
 */
export class EventDEXExpectedToReceiveAmountChanged extends Message<EventDEXExpectedToReceiveAmountChanged> {
  /**
   * @generated from field: string account = 1;
   */
  account = "";

  /**
   * @generated from field: string denom = 2;
   */
  denom = "";

  /**
   * @generated from field: string previous_amount = 3;
   */
  previousAmount = "";

  /**
   * @generated from field: string current_amount = 4;
   */
  currentAmount = "";

  constructor(data?: PartialMessage<EventDEXExpectedToReceiveAmountChanged>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.ft.v1.EventDEXExpectedToReceiveAmountChanged";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "previous_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "current_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventDEXExpectedToReceiveAmountChanged {
    return new EventDEXExpectedToReceiveAmountChanged().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventDEXExpectedToReceiveAmountChanged {
    return new EventDEXExpectedToReceiveAmountChanged().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventDEXExpectedToReceiveAmountChanged {
    return new EventDEXExpectedToReceiveAmountChanged().fromJsonString(jsonString, options);
  }

  static equals(a: EventDEXExpectedToReceiveAmountChanged | PlainMessage<EventDEXExpectedToReceiveAmountChanged> | undefined, b: EventDEXExpectedToReceiveAmountChanged | PlainMessage<EventDEXExpectedToReceiveAmountChanged> | undefined): boolean {
    return proto3.util.equals(EventDEXExpectedToReceiveAmountChanged, a, b);
  }
}

/**
 * @generated from message coreum.asset.ft.v1.EventAdminTransferred
 */
export class EventAdminTransferred extends Message<EventAdminTransferred> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * @generated from field: string previous_admin = 2;
   */
  previousAdmin = "";

  /**
   * @generated from field: string current_admin = 3;
   */
  currentAdmin = "";

  constructor(data?: PartialMessage<EventAdminTransferred>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.ft.v1.EventAdminTransferred";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "previous_admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "current_admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventAdminTransferred {
    return new EventAdminTransferred().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventAdminTransferred {
    return new EventAdminTransferred().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventAdminTransferred {
    return new EventAdminTransferred().fromJsonString(jsonString, options);
  }

  static equals(a: EventAdminTransferred | PlainMessage<EventAdminTransferred> | undefined, b: EventAdminTransferred | PlainMessage<EventAdminTransferred> | undefined): boolean {
    return proto3.util.equals(EventAdminTransferred, a, b);
  }
}

/**
 * @generated from message coreum.asset.ft.v1.EventAdminCleared
 */
export class EventAdminCleared extends Message<EventAdminCleared> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * @generated from field: string previous_admin = 2;
   */
  previousAdmin = "";

  constructor(data?: PartialMessage<EventAdminCleared>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.ft.v1.EventAdminCleared";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "previous_admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventAdminCleared {
    return new EventAdminCleared().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventAdminCleared {
    return new EventAdminCleared().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventAdminCleared {
    return new EventAdminCleared().fromJsonString(jsonString, options);
  }

  static equals(a: EventAdminCleared | PlainMessage<EventAdminCleared> | undefined, b: EventAdminCleared | PlainMessage<EventAdminCleared> | undefined): boolean {
    return proto3.util.equals(EventAdminCleared, a, b);
  }
}

/**
 * @generated from message coreum.asset.ft.v1.EventDEXSettingsChanged
 */
export class EventDEXSettingsChanged extends Message<EventDEXSettingsChanged> {
  /**
   * @generated from field: coreum.asset.ft.v1.DEXSettings previous_settings = 1;
   */
  previousSettings?: DEXSettings;

  /**
   * @generated from field: coreum.asset.ft.v1.DEXSettings new_settings = 2;
   */
  newSettings?: DEXSettings;

  constructor(data?: PartialMessage<EventDEXSettingsChanged>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.asset.ft.v1.EventDEXSettingsChanged";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "previous_settings", kind: "message", T: DEXSettings },
    { no: 2, name: "new_settings", kind: "message", T: DEXSettings },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventDEXSettingsChanged {
    return new EventDEXSettingsChanged().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventDEXSettingsChanged {
    return new EventDEXSettingsChanged().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventDEXSettingsChanged {
    return new EventDEXSettingsChanged().fromJsonString(jsonString, options);
  }

  static equals(a: EventDEXSettingsChanged | PlainMessage<EventDEXSettingsChanged> | undefined, b: EventDEXSettingsChanged | PlainMessage<EventDEXSettingsChanged> | undefined): boolean {
    return proto3.util.equals(EventDEXSettingsChanged, a, b);
  }
}

