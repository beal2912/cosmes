// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file coreum/deterministicgas/v1/event.proto (package coreum.deterministicgas.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * EventGas is emitted by deterministic gas module to report gas information.
 *
 * @generated from message coreum.deterministicgas.v1.EventGas
 */
export class EventGas extends Message<EventGas> {
  /**
   * @generated from field: string msgURL = 1;
   */
  msgURL = "";

  /**
   * @generated from field: uint64 realGas = 2;
   */
  realGas = protoInt64.zero;

  /**
   * @generated from field: uint64 deterministicGas = 3;
   */
  deterministicGas = protoInt64.zero;

  constructor(data?: PartialMessage<EventGas>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.deterministicgas.v1.EventGas";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "msgURL", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "realGas", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "deterministicGas", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventGas {
    return new EventGas().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventGas {
    return new EventGas().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventGas {
    return new EventGas().fromJsonString(jsonString, options);
  }

  static equals(a: EventGas | PlainMessage<EventGas> | undefined, b: EventGas | PlainMessage<EventGas> | undefined): boolean {
    return proto3.util.equals(EventGas, a, b);
  }
}

