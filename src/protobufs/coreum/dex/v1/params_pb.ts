// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file coreum/dex/v1/params.proto (package coreum.dex.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * Params keeps gov manageable parameters.
 *
 * @generated from message coreum.dex.v1.Params
 */
export class Params extends Message<Params> {
  /**
   * default_unified_ref_amount is the default approximate amount you need to buy 1USD, used to for tokens without custom value
   *
   * @generated from field: string default_unified_ref_amount = 1;
   */
  defaultUnifiedRefAmount = "";

  /**
   * price_tick_exponent is the exponent used in price tick calculation formula
   *
   * @generated from field: int32 price_tick_exponent = 2;
   */
  priceTickExponent = 0;

  /**
   * quantity_step_exponent is the exponent used in quantity step calculation formula
   *
   * @generated from field: int32 quantity_step_exponent = 5;
   */
  quantityStepExponent = 0;

  /**
   * max_orders_per_denom is the maximum number of orders per denom the user can have
   *
   * @generated from field: uint64 max_orders_per_denom = 3;
   */
  maxOrdersPerDenom = protoInt64.zero;

  /**
   * order_reserve is the reserve required to save the order in the order book
   *
   * @generated from field: cosmos.base.v1beta1.Coin order_reserve = 4;
   */
  orderReserve?: Coin;

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.dex.v1.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "default_unified_ref_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "price_tick_exponent", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "quantity_step_exponent", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "max_orders_per_denom", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "order_reserve", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}

