// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file coreum/dex/v1/order.proto (package coreum.dex.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * Side is order side.
 *
 * @generated from enum coreum.dex.v1.Side
 */
export enum Side {
  /**
   * SIDE_UNSPECIFIED reserves the default value, to protect against unexpected settings.
   *
   * @generated from enum value: SIDE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * SIDE_BUY means that the order is to buy base_denom quantity with the price.
   *
   * @generated from enum value: SIDE_BUY = 1;
   */
  BUY = 1,

  /**
   * SIDE_SELL means that the order is to sell base_denom quantity with the price.
   *
   * @generated from enum value: SIDE_SELL = 2;
   */
  SELL = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Side)
proto3.util.setEnumType(Side, "coreum.dex.v1.Side", [
  { no: 0, name: "SIDE_UNSPECIFIED" },
  { no: 1, name: "SIDE_BUY" },
  { no: 2, name: "SIDE_SELL" },
]);

/**
 * Type is order type.
 *
 * @generated from enum coreum.dex.v1.OrderType
 */
export enum OrderType {
  /**
   * order_type_unspecified reserves the default value, to protect against unexpected settings.
   *
   * @generated from enum value: ORDER_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * order_type_limit means that the order is limit order.
   *
   * @generated from enum value: ORDER_TYPE_LIMIT = 1;
   */
  LIMIT = 1,

  /**
   * limit order_type_market that the order is market order.
   *
   * @generated from enum value: ORDER_TYPE_MARKET = 2;
   */
  MARKET = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(OrderType)
proto3.util.setEnumType(OrderType, "coreum.dex.v1.OrderType", [
  { no: 0, name: "ORDER_TYPE_UNSPECIFIED" },
  { no: 1, name: "ORDER_TYPE_LIMIT" },
  { no: 2, name: "ORDER_TYPE_MARKET" },
]);

/**
 * TimeInForce is order time in force.
 *
 * @generated from enum coreum.dex.v1.TimeInForce
 */
export enum TimeInForce {
  /**
   * time_in_force_unspecified reserves the default value, to protect against unexpected settings.
   *
   * @generated from enum value: TIME_IN_FORCE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * time_in_force_gtc means that the order remains active until it is fully executed or manually canceled.
   *
   * @generated from enum value: TIME_IN_FORCE_GTC = 1;
   */
  GTC = 1,

  /**
   * time_in_force_ioc  means that order must be executed immediately, either in full or partially. Any portion of the
   *  order that cannot be filled immediately is canceled.
   *
   * @generated from enum value: TIME_IN_FORCE_IOC = 2;
   */
  IOC = 2,

  /**
   * time_in_force_fok means that order must be fully executed or canceled.
   *
   * @generated from enum value: TIME_IN_FORCE_FOK = 3;
   */
  FOK = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(TimeInForce)
proto3.util.setEnumType(TimeInForce, "coreum.dex.v1.TimeInForce", [
  { no: 0, name: "TIME_IN_FORCE_UNSPECIFIED" },
  { no: 1, name: "TIME_IN_FORCE_GTC" },
  { no: 2, name: "TIME_IN_FORCE_IOC" },
  { no: 3, name: "TIME_IN_FORCE_FOK" },
]);

/**
 * GoodTil is a good til order settings.
 *
 * @generated from message coreum.dex.v1.GoodTil
 */
export class GoodTil extends Message<GoodTil> {
  /**
   * good_til_block_height means that order remains active until a specific blockchain block height is reached.
   *
   * @generated from field: uint64 good_til_block_height = 1;
   */
  goodTilBlockHeight = protoInt64.zero;

  /**
   * good_til_block_time means that order remains active until a specific blockchain block time is reached.
   *
   * @generated from field: google.protobuf.Timestamp good_til_block_time = 2;
   */
  goodTilBlockTime?: Timestamp;

  constructor(data?: PartialMessage<GoodTil>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.dex.v1.GoodTil";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "good_til_block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "good_til_block_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GoodTil {
    return new GoodTil().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GoodTil {
    return new GoodTil().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GoodTil {
    return new GoodTil().fromJsonString(jsonString, options);
  }

  static equals(a: GoodTil | PlainMessage<GoodTil> | undefined, b: GoodTil | PlainMessage<GoodTil> | undefined): boolean {
    return proto3.util.equals(GoodTil, a, b);
  }
}

/**
 * CancelGoodTil is a cancel good til message for the delay router.
 *
 * @generated from message coreum.dex.v1.CancelGoodTil
 */
export class CancelGoodTil extends Message<CancelGoodTil> {
  /**
   * creator is order creator address.
   *
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * order_sequence is order sequence.
   *
   * @generated from field: uint64 order_sequence = 2;
   */
  orderSequence = protoInt64.zero;

  constructor(data?: PartialMessage<CancelGoodTil>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.dex.v1.CancelGoodTil";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "order_sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CancelGoodTil {
    return new CancelGoodTil().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CancelGoodTil {
    return new CancelGoodTil().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CancelGoodTil {
    return new CancelGoodTil().fromJsonString(jsonString, options);
  }

  static equals(a: CancelGoodTil | PlainMessage<CancelGoodTil> | undefined, b: CancelGoodTil | PlainMessage<CancelGoodTil> | undefined): boolean {
    return proto3.util.equals(CancelGoodTil, a, b);
  }
}

/**
 * Order represents a DEX order, encapsulating both limit and market orders. It contains comprehensive information about
 * the order's state.
 *
 * @generated from message coreum.dex.v1.Order
 */
export class Order extends Message<Order> {
  /**
   * creator is order creator address.
   *
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * type is order type.
   *
   * @generated from field: coreum.dex.v1.OrderType type = 2;
   */
  type = OrderType.UNSPECIFIED;

  /**
   * id is unique order ID.
   *
   * @generated from field: string id = 3;
   */
  id = "";

  /**
   * sequence is unique order sequence generated at the time of the order placement.
   *
   * @generated from field: uint64 sequence = 4;
   */
  sequence = protoInt64.zero;

  /**
   * base_denom is base order denom.
   *
   * @generated from field: string base_denom = 5;
   */
  baseDenom = "";

  /**
   * quote_denom is quote order denom
   *
   * @generated from field: string quote_denom = 6;
   */
  quoteDenom = "";

  /**
   * price is value of one unit of the base_denom expressed in terms of the quote_denom.
   *
   * @generated from field: string price = 7;
   */
  price = "";

  /**
   * quantity is amount of the base base_denom being traded.
   *
   * @generated from field: string quantity = 8;
   */
  quantity = "";

  /**
   * side is order side.
   *
   * @generated from field: coreum.dex.v1.Side side = 9;
   */
  side = Side.UNSPECIFIED;

  /**
   * remaining_base_quantity - is remaining quantity of base denom which user wants to sell or buy.
   *
   * @generated from field: string remaining_base_quantity = 10;
   */
  remainingBaseQuantity = "";

  /**
   * remaining_spendable_balance - is balance up to which user wants to spend to execute the order.
   *
   * @generated from field: string remaining_spendable_balance = 11;
   */
  remainingSpendableBalance = "";

  /**
   * good_til is order good til
   *
   * @generated from field: coreum.dex.v1.GoodTil good_til = 12;
   */
  goodTil?: GoodTil;

  /**
   * time_in_force is order time in force
   *
   * @generated from field: coreum.dex.v1.TimeInForce time_in_force = 13;
   */
  timeInForce = TimeInForce.UNSPECIFIED;

  /**
   * reserve is the reserve required to save the order in the order book
   *
   * @generated from field: cosmos.base.v1beta1.Coin reserve = 14;
   */
  reserve?: Coin;

  constructor(data?: PartialMessage<Order>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.dex.v1.Order";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(OrderType) },
    { no: 3, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "base_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "quote_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "quantity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "side", kind: "enum", T: proto3.getEnumType(Side) },
    { no: 10, name: "remaining_base_quantity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "remaining_spendable_balance", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "good_til", kind: "message", T: GoodTil },
    { no: 13, name: "time_in_force", kind: "enum", T: proto3.getEnumType(TimeInForce) },
    { no: 14, name: "reserve", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Order {
    return new Order().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Order {
    return new Order().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Order {
    return new Order().fromJsonString(jsonString, options);
  }

  static equals(a: Order | PlainMessage<Order> | undefined, b: Order | PlainMessage<Order> | undefined): boolean {
    return proto3.util.equals(Order, a, b);
  }
}

/**
 * OrderData represents the order information for the store missing in the order book record.
 *
 * @generated from message coreum.dex.v1.OrderData
 */
export class OrderData extends Message<OrderData> {
  /**
   * order ID provided by the creator.
   *
   * @generated from field: string order_id = 1;
   */
  orderId = "";

  /**
   * order_book_id is order book ID.
   *
   * @generated from field: uint32 order_book_id = 2;
   */
  orderBookId = 0;

  /**
   * price is value of one unit of the base_denom expressed in terms of the quote_denom.
   *
   * @generated from field: string price = 3;
   */
  price = "";

  /**
   * quantity is amount of the base base_denom being traded.
   *
   * @generated from field: string quantity = 4;
   */
  quantity = "";

  /**
   * side is order side.
   *
   * @generated from field: coreum.dex.v1.Side side = 5;
   */
  side = Side.UNSPECIFIED;

  /**
   * good_til is order good til
   *
   * @generated from field: coreum.dex.v1.GoodTil good_til = 6;
   */
  goodTil?: GoodTil;

  /**
   * reserve is the reserve required to save the order in the order book
   *
   * @generated from field: cosmos.base.v1beta1.Coin reserve = 7;
   */
  reserve?: Coin;

  constructor(data?: PartialMessage<OrderData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.dex.v1.OrderData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "order_book_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "quantity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "side", kind: "enum", T: proto3.getEnumType(Side) },
    { no: 6, name: "good_til", kind: "message", T: GoodTil },
    { no: 7, name: "reserve", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrderData {
    return new OrderData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrderData {
    return new OrderData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrderData {
    return new OrderData().fromJsonString(jsonString, options);
  }

  static equals(a: OrderData | PlainMessage<OrderData> | undefined, b: OrderData | PlainMessage<OrderData> | undefined): boolean {
    return proto3.util.equals(OrderData, a, b);
  }
}

/**
 * OrderBookData is a order book data used by order for the store.
 *
 * @generated from message coreum.dex.v1.OrderBookData
 */
export class OrderBookData extends Message<OrderBookData> {
  /**
   * base_denom is base order book denom.
   *
   * @generated from field: string base_denom = 1;
   */
  baseDenom = "";

  /**
   * quote_denom is quote order book denom
   *
   * @generated from field: string quote_denom = 2;
   */
  quoteDenom = "";

  constructor(data?: PartialMessage<OrderBookData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.dex.v1.OrderBookData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "base_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "quote_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrderBookData {
    return new OrderBookData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrderBookData {
    return new OrderBookData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrderBookData {
    return new OrderBookData().fromJsonString(jsonString, options);
  }

  static equals(a: OrderBookData | PlainMessage<OrderBookData> | undefined, b: OrderBookData | PlainMessage<OrderBookData> | undefined): boolean {
    return proto3.util.equals(OrderBookData, a, b);
  }
}

/**
 * OrderBookRecordData is a single order book record used for the store.
 *
 * @generated from message coreum.dex.v1.OrderBookRecordData
 */
export class OrderBookRecordData extends Message<OrderBookRecordData> {
  /**
   * order ID provided by the creator.
   *
   * @generated from field: string order_id = 1;
   */
  orderId = "";

  /**
   * account_number is account number which corresponds the order creator.
   *
   * @generated from field: uint64 account_number = 2;
   */
  accountNumber = protoInt64.zero;

  /**
   * remaining_base_quantity - is remaining quantity of base denom which user wants to sell or buy.
   *
   * @generated from field: string remaining_base_quantity = 3;
   */
  remainingBaseQuantity = "";

  /**
   * remaining_spendable_balance - is balance up to which user wants to spend to execute the order.
   *
   * @generated from field: string remaining_spendable_balance = 4;
   */
  remainingSpendableBalance = "";

  constructor(data?: PartialMessage<OrderBookRecordData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.dex.v1.OrderBookRecordData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "account_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "remaining_base_quantity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "remaining_spendable_balance", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrderBookRecordData {
    return new OrderBookRecordData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrderBookRecordData {
    return new OrderBookRecordData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrderBookRecordData {
    return new OrderBookRecordData().fromJsonString(jsonString, options);
  }

  static equals(a: OrderBookRecordData | PlainMessage<OrderBookRecordData> | undefined, b: OrderBookRecordData | PlainMessage<OrderBookRecordData> | undefined): boolean {
    return proto3.util.equals(OrderBookRecordData, a, b);
  }
}

