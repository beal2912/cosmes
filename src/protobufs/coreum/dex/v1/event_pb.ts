// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file coreum/dex/v1/event.proto (package coreum.dex.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * EventOrderPlaced is emitted when a new order is placed and new sequence is generated for it.
 *
 * @generated from message coreum.dex.v1.EventOrderPlaced
 */
export class EventOrderPlaced extends Message<EventOrderPlaced> {
  /**
   * creator is order creator address.
   *
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * id is unique order ID.
   *
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * sequence is unique order sequence.
   *
   * @generated from field: uint64 sequence = 3;
   */
  sequence = protoInt64.zero;

  constructor(data?: PartialMessage<EventOrderPlaced>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.dex.v1.EventOrderPlaced";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventOrderPlaced {
    return new EventOrderPlaced().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventOrderPlaced {
    return new EventOrderPlaced().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventOrderPlaced {
    return new EventOrderPlaced().fromJsonString(jsonString, options);
  }

  static equals(a: EventOrderPlaced | PlainMessage<EventOrderPlaced> | undefined, b: EventOrderPlaced | PlainMessage<EventOrderPlaced> | undefined): boolean {
    return proto3.util.equals(EventOrderPlaced, a, b);
  }
}

/**
 * EventOrderReduced is emitted when the order is reduced during the matching.
 *
 * @generated from message coreum.dex.v1.EventOrderReduced
 */
export class EventOrderReduced extends Message<EventOrderReduced> {
  /**
   * creator is order creator address.
   *
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * id is unique order ID.
   *
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * sequence is unique order sequence.
   *
   * @generated from field: uint64 sequence = 3;
   */
  sequence = protoInt64.zero;

  /**
   * sent_coin is coin sent during matching.
   *
   * @generated from field: string sent_coin = 4;
   */
  sentCoin = "";

  /**
   * received_coin is coin received during matching.
   *
   * @generated from field: string received_coin = 5;
   */
  receivedCoin = "";

  constructor(data?: PartialMessage<EventOrderReduced>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.dex.v1.EventOrderReduced";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sent_coin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "received_coin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventOrderReduced {
    return new EventOrderReduced().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventOrderReduced {
    return new EventOrderReduced().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventOrderReduced {
    return new EventOrderReduced().fromJsonString(jsonString, options);
  }

  static equals(a: EventOrderReduced | PlainMessage<EventOrderReduced> | undefined, b: EventOrderReduced | PlainMessage<EventOrderReduced> | undefined): boolean {
    return proto3.util.equals(EventOrderReduced, a, b);
  }
}

/**
 * EventOrderCreated is emitted when the limit order is saved to the order book.
 *
 * @generated from message coreum.dex.v1.EventOrderCreated
 */
export class EventOrderCreated extends Message<EventOrderCreated> {
  /**
   * creator is order creator address.
   *
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * id is unique order ID.
   *
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * sequence is unique order sequence.
   *
   * @generated from field: uint64 sequence = 3;
   */
  sequence = protoInt64.zero;

  /**
   * remaining_base_quantity - is remaining quantity of base denom which user wants to sell or buy.
   *
   * @generated from field: string remaining_base_quantity = 4;
   */
  remainingBaseQuantity = "";

  /**
   * remaining_spendable_balance - is balance up to which user wants to spend to execute the order.
   *
   * @generated from field: string remaining_spendable_balance = 5;
   */
  remainingSpendableBalance = "";

  constructor(data?: PartialMessage<EventOrderCreated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.dex.v1.EventOrderCreated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "remaining_base_quantity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "remaining_spendable_balance", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventOrderCreated {
    return new EventOrderCreated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventOrderCreated {
    return new EventOrderCreated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventOrderCreated {
    return new EventOrderCreated().fromJsonString(jsonString, options);
  }

  static equals(a: EventOrderCreated | PlainMessage<EventOrderCreated> | undefined, b: EventOrderCreated | PlainMessage<EventOrderCreated> | undefined): boolean {
    return proto3.util.equals(EventOrderCreated, a, b);
  }
}

/**
 * EventOrderClosed is emitted when the order is closed during matching or manually, and removed from the order book.
 *
 * @generated from message coreum.dex.v1.EventOrderClosed
 */
export class EventOrderClosed extends Message<EventOrderClosed> {
  /**
   * creator is order creator address.
   *
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * id is unique order ID.
   *
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * sequence is unique order sequence.
   *
   * @generated from field: uint64 sequence = 3;
   */
  sequence = protoInt64.zero;

  /**
   * remaining_base_quantity - is remaining quantity of base denom which user wants to sell or buy.
   *
   * @generated from field: string remaining_base_quantity = 4;
   */
  remainingBaseQuantity = "";

  /**
   * remaining_spendable_balance - is balance up to which user wants to spend to execute the order.
   *
   * @generated from field: string remaining_spendable_balance = 5;
   */
  remainingSpendableBalance = "";

  constructor(data?: PartialMessage<EventOrderClosed>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "coreum.dex.v1.EventOrderClosed";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "remaining_base_quantity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "remaining_spendable_balance", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventOrderClosed {
    return new EventOrderClosed().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventOrderClosed {
    return new EventOrderClosed().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventOrderClosed {
    return new EventOrderClosed().fromJsonString(jsonString, options);
  }

  static equals(a: EventOrderClosed | PlainMessage<EventOrderClosed> | undefined, b: EventOrderClosed | PlainMessage<EventOrderClosed> | undefined): boolean {
    return proto3.util.equals(EventOrderClosed, a, b);
  }
}

