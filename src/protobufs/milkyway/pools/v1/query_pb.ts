// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file milkyway/pools/v1/query.proto (package milkyway.pools.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Pool } from "./models_pb.js";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination_pb.js";

/**
 * QueryPoolByIdRequest is the request type for the Query/PoolById RPC method.
 *
 * @generated from message milkyway.pools.v1.QueryPoolByIdRequest
 */
export class QueryPoolByIdRequest extends Message<QueryPoolByIdRequest> {
  /**
   * PoolID is the ID of the pool to query
   *
   * @generated from field: uint32 pool_id = 1;
   */
  poolId = 0;

  constructor(data?: PartialMessage<QueryPoolByIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.pools.v1.QueryPoolByIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolByIdRequest {
    return new QueryPoolByIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolByIdRequest {
    return new QueryPoolByIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolByIdRequest {
    return new QueryPoolByIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolByIdRequest | PlainMessage<QueryPoolByIdRequest> | undefined, b: QueryPoolByIdRequest | PlainMessage<QueryPoolByIdRequest> | undefined): boolean {
    return proto3.util.equals(QueryPoolByIdRequest, a, b);
  }
}

/**
 * QueryPoolByDenomRequest is the request type for the Query/PollByDenom RPC
 * method.
 *
 * @generated from message milkyway.pools.v1.QueryPoolByDenomRequest
 */
export class QueryPoolByDenomRequest extends Message<QueryPoolByDenomRequest> {
  /**
   * Denom is the denom for which the pool is to be queried
   *
   * @generated from field: string denom = 1;
   */
  denom = "";

  constructor(data?: PartialMessage<QueryPoolByDenomRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.pools.v1.QueryPoolByDenomRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolByDenomRequest {
    return new QueryPoolByDenomRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolByDenomRequest {
    return new QueryPoolByDenomRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolByDenomRequest {
    return new QueryPoolByDenomRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolByDenomRequest | PlainMessage<QueryPoolByDenomRequest> | undefined, b: QueryPoolByDenomRequest | PlainMessage<QueryPoolByDenomRequest> | undefined): boolean {
    return proto3.util.equals(QueryPoolByDenomRequest, a, b);
  }
}

/**
 * QueryPoolResponse is the response type for the Query/PoolById and
 * Query/PoolByDenom RPC methods.
 *
 * @generated from message milkyway.pools.v1.QueryPoolResponse
 */
export class QueryPoolResponse extends Message<QueryPoolResponse> {
  /**
   * Pool is the queried pool
   *
   * @generated from field: milkyway.pools.v1.Pool pool = 1;
   */
  pool?: Pool;

  constructor(data?: PartialMessage<QueryPoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.pools.v1.QueryPoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool", kind: "message", T: Pool },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolResponse {
    return new QueryPoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolResponse {
    return new QueryPoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolResponse {
    return new QueryPoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolResponse | PlainMessage<QueryPoolResponse> | undefined, b: QueryPoolResponse | PlainMessage<QueryPoolResponse> | undefined): boolean {
    return proto3.util.equals(QueryPoolResponse, a, b);
  }
}

/**
 * QueryPoolsRequest is the request type for the Query/Pools RPC method.
 *
 * @generated from message milkyway.pools.v1.QueryPoolsRequest
 */
export class QueryPoolsRequest extends Message<QueryPoolsRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryPoolsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.pools.v1.QueryPoolsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolsRequest {
    return new QueryPoolsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolsRequest {
    return new QueryPoolsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolsRequest {
    return new QueryPoolsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolsRequest | PlainMessage<QueryPoolsRequest> | undefined, b: QueryPoolsRequest | PlainMessage<QueryPoolsRequest> | undefined): boolean {
    return proto3.util.equals(QueryPoolsRequest, a, b);
  }
}

/**
 * QueryPoolsResponse is the response type for the Query/Pools RPC method.
 *
 * @generated from message milkyway.pools.v1.QueryPoolsResponse
 */
export class QueryPoolsResponse extends Message<QueryPoolsResponse> {
  /**
   * Pools is the list of pool
   *
   * @generated from field: repeated milkyway.pools.v1.Pool pools = 1;
   */
  pools: Pool[] = [];

  /**
   * Pagination defines the pagination response
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryPoolsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.pools.v1.QueryPoolsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pools", kind: "message", T: Pool, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolsResponse {
    return new QueryPoolsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolsResponse {
    return new QueryPoolsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolsResponse {
    return new QueryPoolsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolsResponse | PlainMessage<QueryPoolsResponse> | undefined, b: QueryPoolsResponse | PlainMessage<QueryPoolsResponse> | undefined): boolean {
    return proto3.util.equals(QueryPoolsResponse, a, b);
  }
}

