// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file milkyway/pools/v1/models.proto (package milkyway.pools.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Pool defines the structure of a restaking pool
 *
 * @generated from message milkyway.pools.v1.Pool
 */
export class Pool extends Message<Pool> {
  /**
   * ID is the auto-generated unique identifier for the pool
   *
   * @generated from field: uint32 id = 1;
   */
  id = 0;

  /**
   * Denom represents the denomination of the tokens that are staked in the pool
   *
   * @generated from field: string denom = 2;
   */
  denom = "";

  /**
   * Address represents the address of the account that is associated with this
   * pool. This will be used to store tokens that users delegate to this pool.
   *
   * @generated from field: string address = 3;
   */
  address = "";

  /**
   * Tokens define the delegated tokens.
   *
   * @generated from field: string tokens = 4;
   */
  tokens = "";

  /**
   * DelegatorShares defines total shares issued to a pool's delegators.
   *
   * @generated from field: string delegator_shares = 5;
   */
  delegatorShares = "";

  constructor(data?: PartialMessage<Pool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.pools.v1.Pool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "tokens", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "delegator_shares", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pool {
    return new Pool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pool {
    return new Pool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pool {
    return new Pool().fromJsonString(jsonString, options);
  }

  static equals(a: Pool | PlainMessage<Pool> | undefined, b: Pool | PlainMessage<Pool> | undefined): boolean {
    return proto3.util.equals(Pool, a, b);
  }
}

