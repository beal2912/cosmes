// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file milkyway/liquidvesting/v1/query.proto (package milkyway.liquidvesting.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination_pb.js";
import { Params } from "./params_pb.js";

/**
 * QueryUserInsuranceFundRequest is the request type for the
 * Query/UserInsuranceFund RPC method.
 *
 * @generated from message milkyway.liquidvesting.v1.QueryUserInsuranceFundRequest
 */
export class QueryUserInsuranceFundRequest extends Message<QueryUserInsuranceFundRequest> {
  /**
   * user_address is the address of the user to query.
   *
   * @generated from field: string user_address = 1;
   */
  userAddress = "";

  constructor(data?: PartialMessage<QueryUserInsuranceFundRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.liquidvesting.v1.QueryUserInsuranceFundRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryUserInsuranceFundRequest {
    return new QueryUserInsuranceFundRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryUserInsuranceFundRequest {
    return new QueryUserInsuranceFundRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryUserInsuranceFundRequest {
    return new QueryUserInsuranceFundRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryUserInsuranceFundRequest | PlainMessage<QueryUserInsuranceFundRequest> | undefined, b: QueryUserInsuranceFundRequest | PlainMessage<QueryUserInsuranceFundRequest> | undefined): boolean {
    return proto3.util.equals(QueryUserInsuranceFundRequest, a, b);
  }
}

/**
 * QueryUserInsuranceFundResponse is the response type for the
 * Query/UserInsuranceFund RPC method.
 *
 * @generated from message milkyway.liquidvesting.v1.QueryUserInsuranceFundResponse
 */
export class QueryUserInsuranceFundResponse extends Message<QueryUserInsuranceFundResponse> {
  /**
   * balance is the amount of tokens that is in the user's insurance fund.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin balance = 1;
   */
  balance: Coin[] = [];

  /**
   * used is the amount of tokens is being used to cover the user's
   * restaked assets.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin used = 2;
   */
  used: Coin[] = [];

  constructor(data?: PartialMessage<QueryUserInsuranceFundResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.liquidvesting.v1.QueryUserInsuranceFundResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "balance", kind: "message", T: Coin, repeated: true },
    { no: 2, name: "used", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryUserInsuranceFundResponse {
    return new QueryUserInsuranceFundResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryUserInsuranceFundResponse {
    return new QueryUserInsuranceFundResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryUserInsuranceFundResponse {
    return new QueryUserInsuranceFundResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryUserInsuranceFundResponse | PlainMessage<QueryUserInsuranceFundResponse> | undefined, b: QueryUserInsuranceFundResponse | PlainMessage<QueryUserInsuranceFundResponse> | undefined): boolean {
    return proto3.util.equals(QueryUserInsuranceFundResponse, a, b);
  }
}

/**
 * QueryUserInsuranceFundsRequest is the request type for the
 * Query/UserInsuranceFunds RPC method.
 *
 * @generated from message milkyway.liquidvesting.v1.QueryUserInsuranceFundsRequest
 */
export class QueryUserInsuranceFundsRequest extends Message<QueryUserInsuranceFundsRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryUserInsuranceFundsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.liquidvesting.v1.QueryUserInsuranceFundsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryUserInsuranceFundsRequest {
    return new QueryUserInsuranceFundsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryUserInsuranceFundsRequest {
    return new QueryUserInsuranceFundsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryUserInsuranceFundsRequest {
    return new QueryUserInsuranceFundsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryUserInsuranceFundsRequest | PlainMessage<QueryUserInsuranceFundsRequest> | undefined, b: QueryUserInsuranceFundsRequest | PlainMessage<QueryUserInsuranceFundsRequest> | undefined): boolean {
    return proto3.util.equals(QueryUserInsuranceFundsRequest, a, b);
  }
}

/**
 * UserInsuranceFundData is the structure that contains the information about
 * a user's insurance fund.
 *
 * @generated from message milkyway.liquidvesting.v1.UserInsuranceFundData
 */
export class UserInsuranceFundData extends Message<UserInsuranceFundData> {
  /**
   * user_address is the address of who owns the insurance fund.
   *
   * @generated from field: string user_address = 1;
   */
  userAddress = "";

  /**
   * balance is the amount of tokens that is in the user's insurance fund.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin balance = 2;
   */
  balance: Coin[] = [];

  /**
   * used is the amount of tokens that is to cover the user's
   * restaked assets.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin used = 3;
   */
  used: Coin[] = [];

  constructor(data?: PartialMessage<UserInsuranceFundData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.liquidvesting.v1.UserInsuranceFundData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "balance", kind: "message", T: Coin, repeated: true },
    { no: 3, name: "used", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserInsuranceFundData {
    return new UserInsuranceFundData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserInsuranceFundData {
    return new UserInsuranceFundData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserInsuranceFundData {
    return new UserInsuranceFundData().fromJsonString(jsonString, options);
  }

  static equals(a: UserInsuranceFundData | PlainMessage<UserInsuranceFundData> | undefined, b: UserInsuranceFundData | PlainMessage<UserInsuranceFundData> | undefined): boolean {
    return proto3.util.equals(UserInsuranceFundData, a, b);
  }
}

/**
 * QueryUserInsuranceFundsResponse is the response type for the
 * Query/UserInsuranceFunds RPC method.
 *
 * @generated from message milkyway.liquidvesting.v1.QueryUserInsuranceFundsResponse
 */
export class QueryUserInsuranceFundsResponse extends Message<QueryUserInsuranceFundsResponse> {
  /**
   * insurance_funds is the list of users insurance funds.
   *
   * @generated from field: repeated milkyway.liquidvesting.v1.UserInsuranceFundData insurance_funds = 1;
   */
  insuranceFunds: UserInsuranceFundData[] = [];

  /**
   * Pagination defines the pagination response
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryUserInsuranceFundsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.liquidvesting.v1.QueryUserInsuranceFundsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "insurance_funds", kind: "message", T: UserInsuranceFundData, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryUserInsuranceFundsResponse {
    return new QueryUserInsuranceFundsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryUserInsuranceFundsResponse {
    return new QueryUserInsuranceFundsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryUserInsuranceFundsResponse {
    return new QueryUserInsuranceFundsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryUserInsuranceFundsResponse | PlainMessage<QueryUserInsuranceFundsResponse> | undefined, b: QueryUserInsuranceFundsResponse | PlainMessage<QueryUserInsuranceFundsResponse> | undefined): boolean {
    return proto3.util.equals(QueryUserInsuranceFundsResponse, a, b);
  }
}

/**
 * QueryUserRestakableAssetsRequest is the request type for the
 * Query/UserRestakableAssets RPC method.
 *
 * @generated from message milkyway.liquidvesting.v1.QueryUserRestakableAssetsRequest
 */
export class QueryUserRestakableAssetsRequest extends Message<QueryUserRestakableAssetsRequest> {
  /**
   * user_address is the address of the user to query.
   *
   * @generated from field: string user_address = 1;
   */
  userAddress = "";

  constructor(data?: PartialMessage<QueryUserRestakableAssetsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.liquidvesting.v1.QueryUserRestakableAssetsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryUserRestakableAssetsRequest {
    return new QueryUserRestakableAssetsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryUserRestakableAssetsRequest {
    return new QueryUserRestakableAssetsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryUserRestakableAssetsRequest {
    return new QueryUserRestakableAssetsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryUserRestakableAssetsRequest | PlainMessage<QueryUserRestakableAssetsRequest> | undefined, b: QueryUserRestakableAssetsRequest | PlainMessage<QueryUserRestakableAssetsRequest> | undefined): boolean {
    return proto3.util.equals(QueryUserRestakableAssetsRequest, a, b);
  }
}

/**
 * QueryUserRestakableAssetsResponse is the response type for the
 * Query/UserRestakableAssets RPC method.
 *
 * @generated from message milkyway.liquidvesting.v1.QueryUserRestakableAssetsResponse
 */
export class QueryUserRestakableAssetsResponse extends Message<QueryUserRestakableAssetsResponse> {
  /**
   * amount is the amount of tokens that the user can restake.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 1;
   */
  amount: Coin[] = [];

  constructor(data?: PartialMessage<QueryUserRestakableAssetsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.liquidvesting.v1.QueryUserRestakableAssetsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryUserRestakableAssetsResponse {
    return new QueryUserRestakableAssetsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryUserRestakableAssetsResponse {
    return new QueryUserRestakableAssetsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryUserRestakableAssetsResponse {
    return new QueryUserRestakableAssetsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryUserRestakableAssetsResponse | PlainMessage<QueryUserRestakableAssetsResponse> | undefined, b: QueryUserRestakableAssetsResponse | PlainMessage<QueryUserRestakableAssetsResponse> | undefined): boolean {
    return proto3.util.equals(QueryUserRestakableAssetsResponse, a, b);
  }
}

/**
 * QueryInsuranceFundRequest is the request type for the
 * Query/InsuranceFund RPC method.
 *
 * @generated from message milkyway.liquidvesting.v1.QueryInsuranceFundRequest
 */
export class QueryInsuranceFundRequest extends Message<QueryInsuranceFundRequest> {
  constructor(data?: PartialMessage<QueryInsuranceFundRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.liquidvesting.v1.QueryInsuranceFundRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryInsuranceFundRequest {
    return new QueryInsuranceFundRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryInsuranceFundRequest {
    return new QueryInsuranceFundRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryInsuranceFundRequest {
    return new QueryInsuranceFundRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryInsuranceFundRequest | PlainMessage<QueryInsuranceFundRequest> | undefined, b: QueryInsuranceFundRequest | PlainMessage<QueryInsuranceFundRequest> | undefined): boolean {
    return proto3.util.equals(QueryInsuranceFundRequest, a, b);
  }
}

/**
 * QueryInsuranceFundResponse is the response type for the
 * Query/InsuranceFund RPC method.
 *
 * @generated from message milkyway.liquidvesting.v1.QueryInsuranceFundResponse
 */
export class QueryInsuranceFundResponse extends Message<QueryInsuranceFundResponse> {
  /**
   * amount is the amount of tokens that are in the insurance fund.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 1;
   */
  amount: Coin[] = [];

  constructor(data?: PartialMessage<QueryInsuranceFundResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.liquidvesting.v1.QueryInsuranceFundResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryInsuranceFundResponse {
    return new QueryInsuranceFundResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryInsuranceFundResponse {
    return new QueryInsuranceFundResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryInsuranceFundResponse {
    return new QueryInsuranceFundResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryInsuranceFundResponse | PlainMessage<QueryInsuranceFundResponse> | undefined, b: QueryInsuranceFundResponse | PlainMessage<QueryInsuranceFundResponse> | undefined): boolean {
    return proto3.util.equals(QueryInsuranceFundResponse, a, b);
  }
}

/**
 * QueryParamsRequest is the request type for the Query/Params RPC method.
 *
 * @generated from message milkyway.liquidvesting.v1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.liquidvesting.v1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 *
 * @generated from message milkyway.liquidvesting.v1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * @generated from field: milkyway.liquidvesting.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.liquidvesting.v1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

