// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file milkyway/liquidvesting/v1/models.proto (package milkyway.liquidvesting.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * UserInsuranceFund defines a user's insurance fund.
 *
 * @generated from message milkyway.liquidvesting.v1.UserInsuranceFund
 */
export class UserInsuranceFund extends Message<UserInsuranceFund> {
  /**
   * Amount of coins deposited into the user's insurance fund.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin balance = 1;
   */
  balance: Coin[] = [];

  constructor(data?: PartialMessage<UserInsuranceFund>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.liquidvesting.v1.UserInsuranceFund";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "balance", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserInsuranceFund {
    return new UserInsuranceFund().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserInsuranceFund {
    return new UserInsuranceFund().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserInsuranceFund {
    return new UserInsuranceFund().fromJsonString(jsonString, options);
  }

  static equals(a: UserInsuranceFund | PlainMessage<UserInsuranceFund> | undefined, b: UserInsuranceFund | PlainMessage<UserInsuranceFund> | undefined): boolean {
    return proto3.util.equals(UserInsuranceFund, a, b);
  }
}

/**
 * BurnCoins is a struct that contains the information about the coins to burn
 * once the unbonding period of the locked representation tokens ends.
 *
 * @generated from message milkyway.liquidvesting.v1.BurnCoins
 */
export class BurnCoins extends Message<BurnCoins> {
  /**
   * Address of who has delegated the coins.
   *
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress = "";

  /**
   * CompletionTime is the unix time for unbonding completion.
   *
   * @generated from field: google.protobuf.Timestamp completion_time = 2;
   */
  completionTime?: Timestamp;

  /**
   * Amount of coins to be burned from the delegator address.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 3;
   */
  amount: Coin[] = [];

  constructor(data?: PartialMessage<BurnCoins>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.liquidvesting.v1.BurnCoins";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "completion_time", kind: "message", T: Timestamp },
    { no: 3, name: "amount", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BurnCoins {
    return new BurnCoins().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BurnCoins {
    return new BurnCoins().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BurnCoins {
    return new BurnCoins().fromJsonString(jsonString, options);
  }

  static equals(a: BurnCoins | PlainMessage<BurnCoins> | undefined, b: BurnCoins | PlainMessage<BurnCoins> | undefined): boolean {
    return proto3.util.equals(BurnCoins, a, b);
  }
}

/**
 * BurnCoinsList represents a list of BurnCoins.
 *
 * @generated from message milkyway.liquidvesting.v1.BurnCoinsList
 */
export class BurnCoinsList extends Message<BurnCoinsList> {
  /**
   * @generated from field: repeated milkyway.liquidvesting.v1.BurnCoins data = 1;
   */
  data: BurnCoins[] = [];

  constructor(data?: PartialMessage<BurnCoinsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.liquidvesting.v1.BurnCoinsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: BurnCoins, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BurnCoinsList {
    return new BurnCoinsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BurnCoinsList {
    return new BurnCoinsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BurnCoinsList {
    return new BurnCoinsList().fromJsonString(jsonString, options);
  }

  static equals(a: BurnCoinsList | PlainMessage<BurnCoinsList> | undefined, b: BurnCoinsList | PlainMessage<BurnCoinsList> | undefined): boolean {
    return proto3.util.equals(BurnCoinsList, a, b);
  }
}

/**
 * UserInsuranceFundEntry represents an entry containing the data of a user
 * insurance fund.
 *
 * @generated from message milkyway.liquidvesting.v1.UserInsuranceFundEntry
 */
export class UserInsuranceFundEntry extends Message<UserInsuranceFundEntry> {
  /**
   * Address of who owns the insurance fund.
   *
   * @generated from field: string user_address = 1;
   */
  userAddress = "";

  /**
   * Amount of coins deposited into the user's insurance fund.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin balance = 2;
   */
  balance: Coin[] = [];

  constructor(data?: PartialMessage<UserInsuranceFundEntry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.liquidvesting.v1.UserInsuranceFundEntry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "balance", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserInsuranceFundEntry {
    return new UserInsuranceFundEntry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserInsuranceFundEntry {
    return new UserInsuranceFundEntry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserInsuranceFundEntry {
    return new UserInsuranceFundEntry().fromJsonString(jsonString, options);
  }

  static equals(a: UserInsuranceFundEntry | PlainMessage<UserInsuranceFundEntry> | undefined, b: UserInsuranceFundEntry | PlainMessage<UserInsuranceFundEntry> | undefined): boolean {
    return proto3.util.equals(UserInsuranceFundEntry, a, b);
  }
}

