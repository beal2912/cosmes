// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file milkyway/liquidvesting/v1/messages.proto (package milkyway.liquidvesting.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
import { Params } from "./params_pb.js";

/**
 * MsgMintLockedRepresentation defines the message structure for the
 * MintLockedRepresentation gRPC service method. It allows an authorized
 * account to mint a user's staked locked tokens representation that can be
 * used in the liquid vesting module.
 *
 * @generated from message milkyway.liquidvesting.v1.MsgMintLockedRepresentation
 */
export class MsgMintLockedRepresentation extends Message<MsgMintLockedRepresentation> {
  /**
   * User that want to trigger the tokens mint.
   *
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * User that will receive the minted tokens.
   *
   * @generated from field: string receiver = 2;
   */
  receiver = "";

  /**
   * The amount of tokens that will be minted
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 3;
   */
  amount: Coin[] = [];

  constructor(data?: PartialMessage<MsgMintLockedRepresentation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.liquidvesting.v1.MsgMintLockedRepresentation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "receiver", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgMintLockedRepresentation {
    return new MsgMintLockedRepresentation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgMintLockedRepresentation {
    return new MsgMintLockedRepresentation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgMintLockedRepresentation {
    return new MsgMintLockedRepresentation().fromJsonString(jsonString, options);
  }

  static equals(a: MsgMintLockedRepresentation | PlainMessage<MsgMintLockedRepresentation> | undefined, b: MsgMintLockedRepresentation | PlainMessage<MsgMintLockedRepresentation> | undefined): boolean {
    return proto3.util.equals(MsgMintLockedRepresentation, a, b);
  }
}

/**
 * MsgMintLockedRepresentationResponse is the return value of
 * MsgMintLockedRepresentation.
 *
 * @generated from message milkyway.liquidvesting.v1.MsgMintLockedRepresentationResponse
 */
export class MsgMintLockedRepresentationResponse extends Message<MsgMintLockedRepresentationResponse> {
  constructor(data?: PartialMessage<MsgMintLockedRepresentationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.liquidvesting.v1.MsgMintLockedRepresentationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgMintLockedRepresentationResponse {
    return new MsgMintLockedRepresentationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgMintLockedRepresentationResponse {
    return new MsgMintLockedRepresentationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgMintLockedRepresentationResponse {
    return new MsgMintLockedRepresentationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgMintLockedRepresentationResponse | PlainMessage<MsgMintLockedRepresentationResponse> | undefined, b: MsgMintLockedRepresentationResponse | PlainMessage<MsgMintLockedRepresentationResponse> | undefined): boolean {
    return proto3.util.equals(MsgMintLockedRepresentationResponse, a, b);
  }
}

/**
 * MsgBurnLockedRepresentation defines the message structure for the
 * BurnLockedRepresentation gRPC service method. It allows an authorized
 * account to burn a user's staked locked tokens representation.
 *
 * @generated from message milkyway.liquidvesting.v1.MsgBurnLockedRepresentation
 */
export class MsgBurnLockedRepresentation extends Message<MsgBurnLockedRepresentation> {
  /**
   * User that want to trigger the tokens burn.
   *
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * User from which we want to burn the tokens.
   *
   * @generated from field: string user = 2;
   */
  user = "";

  /**
   * The amount of tokens that will be burned from the user's balance.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 3;
   */
  amount: Coin[] = [];

  constructor(data?: PartialMessage<MsgBurnLockedRepresentation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.liquidvesting.v1.MsgBurnLockedRepresentation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgBurnLockedRepresentation {
    return new MsgBurnLockedRepresentation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgBurnLockedRepresentation {
    return new MsgBurnLockedRepresentation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgBurnLockedRepresentation {
    return new MsgBurnLockedRepresentation().fromJsonString(jsonString, options);
  }

  static equals(a: MsgBurnLockedRepresentation | PlainMessage<MsgBurnLockedRepresentation> | undefined, b: MsgBurnLockedRepresentation | PlainMessage<MsgBurnLockedRepresentation> | undefined): boolean {
    return proto3.util.equals(MsgBurnLockedRepresentation, a, b);
  }
}

/**
 * MsgBurnLockedRepresentationResponse is the return value of
 * MsgBurnLockedRepresentation.
 *
 * @generated from message milkyway.liquidvesting.v1.MsgBurnLockedRepresentationResponse
 */
export class MsgBurnLockedRepresentationResponse extends Message<MsgBurnLockedRepresentationResponse> {
  constructor(data?: PartialMessage<MsgBurnLockedRepresentationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.liquidvesting.v1.MsgBurnLockedRepresentationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgBurnLockedRepresentationResponse {
    return new MsgBurnLockedRepresentationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgBurnLockedRepresentationResponse {
    return new MsgBurnLockedRepresentationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgBurnLockedRepresentationResponse {
    return new MsgBurnLockedRepresentationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgBurnLockedRepresentationResponse | PlainMessage<MsgBurnLockedRepresentationResponse> | undefined, b: MsgBurnLockedRepresentationResponse | PlainMessage<MsgBurnLockedRepresentationResponse> | undefined): boolean {
    return proto3.util.equals(MsgBurnLockedRepresentationResponse, a, b);
  }
}

/**
 * MsgWithdrawInsuranceFund defines the message structure for the
 * WithdrawInsuranceFund gRPC service method.
 *
 * @generated from message milkyway.liquidvesting.v1.MsgWithdrawInsuranceFund
 */
export class MsgWithdrawInsuranceFund extends Message<MsgWithdrawInsuranceFund> {
  /**
   * User that want to withdraw the tokens.
   *
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * The amount of tokens that will be withdrawn from the user's insurance fund.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 2;
   */
  amount: Coin[] = [];

  constructor(data?: PartialMessage<MsgWithdrawInsuranceFund>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.liquidvesting.v1.MsgWithdrawInsuranceFund";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgWithdrawInsuranceFund {
    return new MsgWithdrawInsuranceFund().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgWithdrawInsuranceFund {
    return new MsgWithdrawInsuranceFund().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgWithdrawInsuranceFund {
    return new MsgWithdrawInsuranceFund().fromJsonString(jsonString, options);
  }

  static equals(a: MsgWithdrawInsuranceFund | PlainMessage<MsgWithdrawInsuranceFund> | undefined, b: MsgWithdrawInsuranceFund | PlainMessage<MsgWithdrawInsuranceFund> | undefined): boolean {
    return proto3.util.equals(MsgWithdrawInsuranceFund, a, b);
  }
}

/**
 * MsgWithdrawInsuranceFundResponse is the return value of MsgWithdrawInsuranceFund.
 *
 * @generated from message milkyway.liquidvesting.v1.MsgWithdrawInsuranceFundResponse
 */
export class MsgWithdrawInsuranceFundResponse extends Message<MsgWithdrawInsuranceFundResponse> {
  constructor(data?: PartialMessage<MsgWithdrawInsuranceFundResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.liquidvesting.v1.MsgWithdrawInsuranceFundResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgWithdrawInsuranceFundResponse {
    return new MsgWithdrawInsuranceFundResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgWithdrawInsuranceFundResponse {
    return new MsgWithdrawInsuranceFundResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgWithdrawInsuranceFundResponse {
    return new MsgWithdrawInsuranceFundResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgWithdrawInsuranceFundResponse | PlainMessage<MsgWithdrawInsuranceFundResponse> | undefined, b: MsgWithdrawInsuranceFundResponse | PlainMessage<MsgWithdrawInsuranceFundResponse> | undefined): boolean {
    return proto3.util.equals(MsgWithdrawInsuranceFundResponse, a, b);
  }
}

/**
 * MsgUpdateParams defines the message structure for the UpdateParams gRPC
 * service method. It allows the authority to update the module parameters.
 *
 * @generated from message milkyway.liquidvesting.v1.MsgUpdateParams
 */
export class MsgUpdateParams extends Message<MsgUpdateParams> {
  /**
   * Authority is the address that controls the module (defaults to x/gov unless
   * overwritten).
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * Params define the parameters to update.
   *
   * NOTE: All parameters must be supplied.
   *
   * @generated from field: milkyway.liquidvesting.v1.Params params = 2;
   */
  params?: Params;

  constructor(data?: PartialMessage<MsgUpdateParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.liquidvesting.v1.MsgUpdateParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined, b: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParams, a, b);
  }
}

/**
 * MsgUpdateParamsResponse is the return value of MsgUpdateParams.
 *
 * @generated from message milkyway.liquidvesting.v1.MsgUpdateParamsResponse
 */
export class MsgUpdateParamsResponse extends Message<MsgUpdateParamsResponse> {
  constructor(data?: PartialMessage<MsgUpdateParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.liquidvesting.v1.MsgUpdateParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined, b: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParamsResponse, a, b);
  }
}

