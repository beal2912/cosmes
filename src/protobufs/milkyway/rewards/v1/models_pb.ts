// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file milkyway/rewards/v1/models.proto (package milkyway.rewards.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Coin, DecCoin } from "../../../cosmos/base/v1beta1/coin_pb.js";
import { DelegationType } from "../../restaking/v1/models_pb.js";

/**
 * RewardsPlan represents a rewards allocation plan.
 *
 * @generated from message milkyway.rewards.v1.RewardsPlan
 */
export class RewardsPlan extends Message<RewardsPlan> {
  /**
   * ID is the unique identifier of the plan.
   *
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * Description is the description of the plan.
   *
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * ServiceID is the service ID which the plan is related to.
   *
   * @generated from field: uint32 service_id = 3;
   */
  serviceId = 0;

  /**
   * AmountPerDay is the amount of rewards to be distributed, per day.
   * The rewards amount for every block will be calculated based on this.
   *
   * @generated from field: cosmos.base.v1beta1.Coin amount_per_day = 11;
   */
  amountPerDay?: Coin;

  /**
   * StartTime is the starting time of the plan.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 5;
   */
  startTime?: Timestamp;

  /**
   * EndTime is the ending time of the plan.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 6;
   */
  endTime?: Timestamp;

  /**
   * RewardsPool is the address where rewards to be distributed are stored.
   * If the rewards pool doesn't have enough funds to be distributed, then
   * the rewards allocation for this plan will be skipped.
   *
   * @generated from field: string rewards_pool = 7;
   */
  rewardsPool = "";

  /**
   * PoolsDistribution is the rewards distribution parameters for pools.
   *
   * @generated from field: milkyway.rewards.v1.Distribution pools_distribution = 8;
   */
  poolsDistribution?: Distribution;

  /**
   * OperatorsDistribution is the rewards distribution parameters for operators.
   *
   * @generated from field: milkyway.rewards.v1.Distribution operators_distribution = 9;
   */
  operatorsDistribution?: Distribution;

  /**
   * UsersDistribution is the rewards distribution parameters for users.
   *
   * @generated from field: milkyway.rewards.v1.UsersDistribution users_distribution = 10;
   */
  usersDistribution?: UsersDistribution;

  constructor(data?: PartialMessage<RewardsPlan>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.RewardsPlan";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "service_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 11, name: "amount_per_day", kind: "message", T: Coin },
    { no: 5, name: "start_time", kind: "message", T: Timestamp },
    { no: 6, name: "end_time", kind: "message", T: Timestamp },
    { no: 7, name: "rewards_pool", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "pools_distribution", kind: "message", T: Distribution },
    { no: 9, name: "operators_distribution", kind: "message", T: Distribution },
    { no: 10, name: "users_distribution", kind: "message", T: UsersDistribution },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RewardsPlan {
    return new RewardsPlan().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RewardsPlan {
    return new RewardsPlan().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RewardsPlan {
    return new RewardsPlan().fromJsonString(jsonString, options);
  }

  static equals(a: RewardsPlan | PlainMessage<RewardsPlan> | undefined, b: RewardsPlan | PlainMessage<RewardsPlan> | undefined): boolean {
    return proto3.util.equals(RewardsPlan, a, b);
  }
}

/**
 * Distribution represents distribution parameters for restaking
 * pools/operators.
 *
 * @generated from message milkyway.rewards.v1.Distribution
 */
export class Distribution extends Message<Distribution> {
  /**
   * DelegationType is the type of delegation target which this distribution
   * parameters are for. It can be one of DELEGATION_TYPE_POOL and
   * DELEGATION_TYPE_OPERATOR.
   *
   * @generated from field: milkyway.restaking.v1.DelegationType delegation_type = 1;
   */
  delegationType = DelegationType.UNSPECIFIED;

  /**
   * Weight is the rewards distribution weight among other types of delegation
   * targets.
   *
   * @generated from field: uint32 weight = 2;
   */
  weight = 0;

  /**
   * Type is one of basic/weighted/egalitarian distributions.
   *
   * @generated from field: google.protobuf.Any type = 3;
   */
  type?: Any;

  constructor(data?: PartialMessage<Distribution>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.Distribution";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegation_type", kind: "enum", T: proto3.getEnumType(DelegationType) },
    { no: 2, name: "weight", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "type", kind: "message", T: Any },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Distribution {
    return new Distribution().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Distribution {
    return new Distribution().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Distribution {
    return new Distribution().fromJsonString(jsonString, options);
  }

  static equals(a: Distribution | PlainMessage<Distribution> | undefined, b: Distribution | PlainMessage<Distribution> | undefined): boolean {
    return proto3.util.equals(Distribution, a, b);
  }
}

/**
 * DistributionTypeBasic represents the simplest form of distribution.
 * Rewards are allocated to entities based on their delegation values.
 * For example, if there are three operators with delegation values of
 * $1000, $1500, and $2000, their rewards will be distributed in a
 * 2:3:4 ratio.
 *
 * @generated from message milkyway.rewards.v1.DistributionTypeBasic
 */
export class DistributionTypeBasic extends Message<DistributionTypeBasic> {
  constructor(data?: PartialMessage<DistributionTypeBasic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.DistributionTypeBasic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DistributionTypeBasic {
    return new DistributionTypeBasic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DistributionTypeBasic {
    return new DistributionTypeBasic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DistributionTypeBasic {
    return new DistributionTypeBasic().fromJsonString(jsonString, options);
  }

  static equals(a: DistributionTypeBasic | PlainMessage<DistributionTypeBasic> | undefined, b: DistributionTypeBasic | PlainMessage<DistributionTypeBasic> | undefined): boolean {
    return proto3.util.equals(DistributionTypeBasic, a, b);
  }
}

/**
 * DistributionTypeWeighted is a type of distribution where the reward
 * weights for each entity are explicitly defined. Only the specified
 * delegation targets will receive rewards.
 *
 * @generated from message milkyway.rewards.v1.DistributionTypeWeighted
 */
export class DistributionTypeWeighted extends Message<DistributionTypeWeighted> {
  /**
   * @generated from field: repeated milkyway.rewards.v1.DistributionWeight weights = 1;
   */
  weights: DistributionWeight[] = [];

  constructor(data?: PartialMessage<DistributionTypeWeighted>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.DistributionTypeWeighted";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "weights", kind: "message", T: DistributionWeight, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DistributionTypeWeighted {
    return new DistributionTypeWeighted().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DistributionTypeWeighted {
    return new DistributionTypeWeighted().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DistributionTypeWeighted {
    return new DistributionTypeWeighted().fromJsonString(jsonString, options);
  }

  static equals(a: DistributionTypeWeighted | PlainMessage<DistributionTypeWeighted> | undefined, b: DistributionTypeWeighted | PlainMessage<DistributionTypeWeighted> | undefined): boolean {
    return proto3.util.equals(DistributionTypeWeighted, a, b);
  }
}

/**
 * DistributionWeight defines a delegation target and its assigned weight.
 *
 * @generated from message milkyway.rewards.v1.DistributionWeight
 */
export class DistributionWeight extends Message<DistributionWeight> {
  /**
   * @generated from field: uint32 delegation_target_id = 1;
   */
  delegationTargetId = 0;

  /**
   * @generated from field: uint32 weight = 2;
   */
  weight = 0;

  constructor(data?: PartialMessage<DistributionWeight>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.DistributionWeight";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegation_target_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "weight", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DistributionWeight {
    return new DistributionWeight().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DistributionWeight {
    return new DistributionWeight().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DistributionWeight {
    return new DistributionWeight().fromJsonString(jsonString, options);
  }

  static equals(a: DistributionWeight | PlainMessage<DistributionWeight> | undefined, b: DistributionWeight | PlainMessage<DistributionWeight> | undefined): boolean {
    return proto3.util.equals(DistributionWeight, a, b);
  }
}

/**
 * DistributionTypeEgalitarian is a distribution method where all entities
 * receive an equal share of rewards(a.k.a. egalitarian method).
 *
 * @generated from message milkyway.rewards.v1.DistributionTypeEgalitarian
 */
export class DistributionTypeEgalitarian extends Message<DistributionTypeEgalitarian> {
  constructor(data?: PartialMessage<DistributionTypeEgalitarian>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.DistributionTypeEgalitarian";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DistributionTypeEgalitarian {
    return new DistributionTypeEgalitarian().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DistributionTypeEgalitarian {
    return new DistributionTypeEgalitarian().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DistributionTypeEgalitarian {
    return new DistributionTypeEgalitarian().fromJsonString(jsonString, options);
  }

  static equals(a: DistributionTypeEgalitarian | PlainMessage<DistributionTypeEgalitarian> | undefined, b: DistributionTypeEgalitarian | PlainMessage<DistributionTypeEgalitarian> | undefined): boolean {
    return proto3.util.equals(DistributionTypeEgalitarian, a, b);
  }
}

/**
 * Distribution represents distribution parameters for delegators who directly
 * staked their tokens to the service.
 *
 * @generated from message milkyway.rewards.v1.UsersDistribution
 */
export class UsersDistribution extends Message<UsersDistribution> {
  /**
   * Weight is the rewards distribution weight among other types of delegation
   * targets.
   *
   * @generated from field: uint32 weight = 1;
   */
  weight = 0;

  /**
   * Type defines the rewards distribution method. Currently only the basic
   * distribution is allowed.
   *
   * @generated from field: google.protobuf.Any type = 2;
   */
  type?: Any;

  constructor(data?: PartialMessage<UsersDistribution>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.UsersDistribution";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "weight", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "type", kind: "message", T: Any },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UsersDistribution {
    return new UsersDistribution().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UsersDistribution {
    return new UsersDistribution().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UsersDistribution {
    return new UsersDistribution().fromJsonString(jsonString, options);
  }

  static equals(a: UsersDistribution | PlainMessage<UsersDistribution> | undefined, b: UsersDistribution | PlainMessage<UsersDistribution> | undefined): boolean {
    return proto3.util.equals(UsersDistribution, a, b);
  }
}

/**
 * UsersDistributionTypeBasic represents the simplest form of distribution.
 * Rewards are allocated to entities based on their delegation values.
 * For example, if there are three users with delegation values of
 * $1000, $1500, and $2000, their rewards will be distributed in a
 * 2:3:4 ratio.
 *
 * @generated from message milkyway.rewards.v1.UsersDistributionTypeBasic
 */
export class UsersDistributionTypeBasic extends Message<UsersDistributionTypeBasic> {
  constructor(data?: PartialMessage<UsersDistributionTypeBasic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.UsersDistributionTypeBasic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UsersDistributionTypeBasic {
    return new UsersDistributionTypeBasic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UsersDistributionTypeBasic {
    return new UsersDistributionTypeBasic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UsersDistributionTypeBasic {
    return new UsersDistributionTypeBasic().fromJsonString(jsonString, options);
  }

  static equals(a: UsersDistributionTypeBasic | PlainMessage<UsersDistributionTypeBasic> | undefined, b: UsersDistributionTypeBasic | PlainMessage<UsersDistributionTypeBasic> | undefined): boolean {
    return proto3.util.equals(UsersDistributionTypeBasic, a, b);
  }
}

/**
 * HistoricalRewards represents historical rewards for a delegation target.
 * Height is implicit within the store key.
 * Cumulative reward ratio is the sum from the zeroeth period
 * until this period of rewards / tokens, per the spec.
 * The reference count indicates the number of objects
 * which might need to reference this historical entry at any point.
 * ReferenceCount =
 *    number of outstanding delegations which ended the associated period (and
 *    might need to read that record)
 *  + number of slashes which ended the associated period (and might need to
 *  read that record)
 *  + one per validator for the zeroeth period, set on initialization
 *
 * @generated from message milkyway.rewards.v1.HistoricalRewards
 */
export class HistoricalRewards extends Message<HistoricalRewards> {
  /**
   * @generated from field: repeated milkyway.rewards.v1.ServicePool cumulative_reward_ratios = 1;
   */
  cumulativeRewardRatios: ServicePool[] = [];

  /**
   * @generated from field: uint32 reference_count = 2;
   */
  referenceCount = 0;

  constructor(data?: PartialMessage<HistoricalRewards>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.HistoricalRewards";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cumulative_reward_ratios", kind: "message", T: ServicePool, repeated: true },
    { no: 2, name: "reference_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HistoricalRewards {
    return new HistoricalRewards().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HistoricalRewards {
    return new HistoricalRewards().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HistoricalRewards {
    return new HistoricalRewards().fromJsonString(jsonString, options);
  }

  static equals(a: HistoricalRewards | PlainMessage<HistoricalRewards> | undefined, b: HistoricalRewards | PlainMessage<HistoricalRewards> | undefined): boolean {
    return proto3.util.equals(HistoricalRewards, a, b);
  }
}

/**
 * CurrentRewards represents current rewards and current
 * period for a delegation target kept as a running counter and incremented
 * each block as long as the delegation target's tokens remain constant.
 *
 * @generated from message milkyway.rewards.v1.CurrentRewards
 */
export class CurrentRewards extends Message<CurrentRewards> {
  /**
   * @generated from field: repeated milkyway.rewards.v1.ServicePool rewards = 1;
   */
  rewards: ServicePool[] = [];

  /**
   * @generated from field: uint64 period = 2;
   */
  period = protoInt64.zero;

  constructor(data?: PartialMessage<CurrentRewards>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.CurrentRewards";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rewards", kind: "message", T: ServicePool, repeated: true },
    { no: 2, name: "period", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CurrentRewards {
    return new CurrentRewards().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CurrentRewards {
    return new CurrentRewards().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CurrentRewards {
    return new CurrentRewards().fromJsonString(jsonString, options);
  }

  static equals(a: CurrentRewards | PlainMessage<CurrentRewards> | undefined, b: CurrentRewards | PlainMessage<CurrentRewards> | undefined): boolean {
    return proto3.util.equals(CurrentRewards, a, b);
  }
}

/**
 * OutstandingRewards represents outstanding (un-withdrawn) rewards
 * for a delegation target inexpensive to track, allows simple sanity checks.
 *
 * @generated from message milkyway.rewards.v1.OutstandingRewards
 */
export class OutstandingRewards extends Message<OutstandingRewards> {
  /**
   * @generated from field: repeated milkyway.rewards.v1.DecPool rewards = 1;
   */
  rewards: DecPool[] = [];

  constructor(data?: PartialMessage<OutstandingRewards>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.OutstandingRewards";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rewards", kind: "message", T: DecPool, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OutstandingRewards {
    return new OutstandingRewards().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OutstandingRewards {
    return new OutstandingRewards().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OutstandingRewards {
    return new OutstandingRewards().fromJsonString(jsonString, options);
  }

  static equals(a: OutstandingRewards | PlainMessage<OutstandingRewards> | undefined, b: OutstandingRewards | PlainMessage<OutstandingRewards> | undefined): boolean {
    return proto3.util.equals(OutstandingRewards, a, b);
  }
}

/**
 * AccumulatedCommission represents accumulated commission
 * for a delegation target kept as a running counter, can be withdrawn at any
 * time.
 *
 * @generated from message milkyway.rewards.v1.AccumulatedCommission
 */
export class AccumulatedCommission extends Message<AccumulatedCommission> {
  /**
   * @generated from field: repeated milkyway.rewards.v1.DecPool commissions = 1;
   */
  commissions: DecPool[] = [];

  constructor(data?: PartialMessage<AccumulatedCommission>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.AccumulatedCommission";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "commissions", kind: "message", T: DecPool, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccumulatedCommission {
    return new AccumulatedCommission().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccumulatedCommission {
    return new AccumulatedCommission().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccumulatedCommission {
    return new AccumulatedCommission().fromJsonString(jsonString, options);
  }

  static equals(a: AccumulatedCommission | PlainMessage<AccumulatedCommission> | undefined, b: AccumulatedCommission | PlainMessage<AccumulatedCommission> | undefined): boolean {
    return proto3.util.equals(AccumulatedCommission, a, b);
  }
}

/**
 * DelegatorStartingInfo represents the starting info for a delegator reward
 * period. It tracks the previous delegation target period, the delegation's
 * amount of staking token, and the creation height (to check later on if any
 * slashes have occurred). NOTE: Even though validators are slashed to whole
 * staking tokens, the delegators within the validator may be left with less
 * than a full token, thus sdk.Dec is used.
 *
 * @generated from message milkyway.rewards.v1.DelegatorStartingInfo
 */
export class DelegatorStartingInfo extends Message<DelegatorStartingInfo> {
  /**
   * @generated from field: uint64 previous_period = 1;
   */
  previousPeriod = protoInt64.zero;

  /**
   * @generated from field: repeated cosmos.base.v1beta1.DecCoin stakes = 2;
   */
  stakes: DecCoin[] = [];

  /**
   * @generated from field: uint64 height = 3;
   */
  height = protoInt64.zero;

  constructor(data?: PartialMessage<DelegatorStartingInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.DelegatorStartingInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "previous_period", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "stakes", kind: "message", T: DecCoin, repeated: true },
    { no: 3, name: "height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DelegatorStartingInfo {
    return new DelegatorStartingInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DelegatorStartingInfo {
    return new DelegatorStartingInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DelegatorStartingInfo {
    return new DelegatorStartingInfo().fromJsonString(jsonString, options);
  }

  static equals(a: DelegatorStartingInfo | PlainMessage<DelegatorStartingInfo> | undefined, b: DelegatorStartingInfo | PlainMessage<DelegatorStartingInfo> | undefined): boolean {
    return proto3.util.equals(DelegatorStartingInfo, a, b);
  }
}

/**
 * DelegationDelegatorReward represents the properties of a delegator's
 * delegation reward. The delegator address implicit in the within the
 * query request.
 *
 * @generated from message milkyway.rewards.v1.DelegationDelegatorReward
 */
export class DelegationDelegatorReward extends Message<DelegationDelegatorReward> {
  /**
   * @generated from field: milkyway.restaking.v1.DelegationType delegation_type = 1;
   */
  delegationType = DelegationType.UNSPECIFIED;

  /**
   * @generated from field: uint32 delegation_target_id = 2;
   */
  delegationTargetId = 0;

  /**
   * @generated from field: repeated milkyway.rewards.v1.DecPool reward = 3;
   */
  reward: DecPool[] = [];

  constructor(data?: PartialMessage<DelegationDelegatorReward>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.DelegationDelegatorReward";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegation_type", kind: "enum", T: proto3.getEnumType(DelegationType) },
    { no: 2, name: "delegation_target_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "reward", kind: "message", T: DecPool, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DelegationDelegatorReward {
    return new DelegationDelegatorReward().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DelegationDelegatorReward {
    return new DelegationDelegatorReward().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DelegationDelegatorReward {
    return new DelegationDelegatorReward().fromJsonString(jsonString, options);
  }

  static equals(a: DelegationDelegatorReward | PlainMessage<DelegationDelegatorReward> | undefined, b: DelegationDelegatorReward | PlainMessage<DelegationDelegatorReward> | undefined): boolean {
    return proto3.util.equals(DelegationDelegatorReward, a, b);
  }
}

/**
 * PoolServiceTotalDelegatorShares represents the total delegator shares for a
 * pool-service pair.
 *
 * @generated from message milkyway.rewards.v1.PoolServiceTotalDelegatorShares
 */
export class PoolServiceTotalDelegatorShares extends Message<PoolServiceTotalDelegatorShares> {
  /**
   * @generated from field: uint32 pool_id = 1;
   */
  poolId = 0;

  /**
   * @generated from field: uint32 service_id = 2;
   */
  serviceId = 0;

  /**
   * @generated from field: repeated cosmos.base.v1beta1.DecCoin shares = 3;
   */
  shares: DecCoin[] = [];

  constructor(data?: PartialMessage<PoolServiceTotalDelegatorShares>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.PoolServiceTotalDelegatorShares";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "service_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "shares", kind: "message", T: DecCoin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolServiceTotalDelegatorShares {
    return new PoolServiceTotalDelegatorShares().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolServiceTotalDelegatorShares {
    return new PoolServiceTotalDelegatorShares().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolServiceTotalDelegatorShares {
    return new PoolServiceTotalDelegatorShares().fromJsonString(jsonString, options);
  }

  static equals(a: PoolServiceTotalDelegatorShares | PlainMessage<PoolServiceTotalDelegatorShares> | undefined, b: PoolServiceTotalDelegatorShares | PlainMessage<PoolServiceTotalDelegatorShares> | undefined): boolean {
    return proto3.util.equals(PoolServiceTotalDelegatorShares, a, b);
  }
}

/**
 * Pool is a Coins wrapper with denom which represents the rewards pool for the
 * given denom. It is used to represent the rewards associated with the denom.
 *
 * @generated from message milkyway.rewards.v1.Pool
 */
export class Pool extends Message<Pool> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin coins = 2;
   */
  coins: Coin[] = [];

  constructor(data?: PartialMessage<Pool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.Pool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "coins", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pool {
    return new Pool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pool {
    return new Pool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pool {
    return new Pool().fromJsonString(jsonString, options);
  }

  static equals(a: Pool | PlainMessage<Pool> | undefined, b: Pool | PlainMessage<Pool> | undefined): boolean {
    return proto3.util.equals(Pool, a, b);
  }
}

/**
 * DecPool is a DecCoins wrapper with denom which represents the rewards pool
 * for the given denom. It is used to represent the rewards associated with the
 * denom.
 *
 * @generated from message milkyway.rewards.v1.DecPool
 */
export class DecPool extends Message<DecPool> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * @generated from field: repeated cosmos.base.v1beta1.DecCoin dec_coins = 2;
   */
  decCoins: DecCoin[] = [];

  constructor(data?: PartialMessage<DecPool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.DecPool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "dec_coins", kind: "message", T: DecCoin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DecPool {
    return new DecPool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DecPool {
    return new DecPool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DecPool {
    return new DecPool().fromJsonString(jsonString, options);
  }

  static equals(a: DecPool | PlainMessage<DecPool> | undefined, b: DecPool | PlainMessage<DecPool> | undefined): boolean {
    return proto3.util.equals(DecPool, a, b);
  }
}

/**
 * ServicePool represents the rewards pool for a service.
 *
 * @generated from message milkyway.rewards.v1.ServicePool
 */
export class ServicePool extends Message<ServicePool> {
  /**
   * @generated from field: uint32 service_id = 1;
   */
  serviceId = 0;

  /**
   * @generated from field: repeated milkyway.rewards.v1.DecPool dec_pools = 2;
   */
  decPools: DecPool[] = [];

  constructor(data?: PartialMessage<ServicePool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.ServicePool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "dec_pools", kind: "message", T: DecPool, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServicePool {
    return new ServicePool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServicePool {
    return new ServicePool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServicePool {
    return new ServicePool().fromJsonString(jsonString, options);
  }

  static equals(a: ServicePool | PlainMessage<ServicePool> | undefined, b: ServicePool | PlainMessage<ServicePool> | undefined): boolean {
    return proto3.util.equals(ServicePool, a, b);
  }
}

