// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file milkyway/rewards/v1/query.proto (package milkyway.rewards.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination_pb.js";
import { AccumulatedCommission, DecPool, DelegationDelegatorReward, OutstandingRewards, RewardsPlan } from "./models_pb.js";
import { DecCoin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * QueryParamsRequest is the request type for the Query/Params RPC method.
 *
 * @generated from message milkyway.rewards.v1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 *
 * @generated from message milkyway.rewards.v1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * @generated from field: milkyway.rewards.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * QueryRewardsPlansRequest is the request type for the Query/RewardsPlans RPC
 * method.
 *
 * @generated from message milkyway.rewards.v1.QueryRewardsPlansRequest
 */
export class QueryRewardsPlansRequest extends Message<QueryRewardsPlansRequest> {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryRewardsPlansRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.QueryRewardsPlansRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRewardsPlansRequest {
    return new QueryRewardsPlansRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRewardsPlansRequest {
    return new QueryRewardsPlansRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRewardsPlansRequest {
    return new QueryRewardsPlansRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRewardsPlansRequest | PlainMessage<QueryRewardsPlansRequest> | undefined, b: QueryRewardsPlansRequest | PlainMessage<QueryRewardsPlansRequest> | undefined): boolean {
    return proto3.util.equals(QueryRewardsPlansRequest, a, b);
  }
}

/**
 * QueryRewardsPlansResponse is the response type for the Query/RewardsPlans
 * RPC method.
 *
 * @generated from message milkyway.rewards.v1.QueryRewardsPlansResponse
 */
export class QueryRewardsPlansResponse extends Message<QueryRewardsPlansResponse> {
  /**
   * @generated from field: repeated milkyway.rewards.v1.RewardsPlan rewards_plans = 1;
   */
  rewardsPlans: RewardsPlan[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryRewardsPlansResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.QueryRewardsPlansResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rewards_plans", kind: "message", T: RewardsPlan, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRewardsPlansResponse {
    return new QueryRewardsPlansResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRewardsPlansResponse {
    return new QueryRewardsPlansResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRewardsPlansResponse {
    return new QueryRewardsPlansResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRewardsPlansResponse | PlainMessage<QueryRewardsPlansResponse> | undefined, b: QueryRewardsPlansResponse | PlainMessage<QueryRewardsPlansResponse> | undefined): boolean {
    return proto3.util.equals(QueryRewardsPlansResponse, a, b);
  }
}

/**
 * QueryRewardsPlanRequest is the request type for the Query/RewardsPlan RPC
 * method.
 *
 * @generated from message milkyway.rewards.v1.QueryRewardsPlanRequest
 */
export class QueryRewardsPlanRequest extends Message<QueryRewardsPlanRequest> {
  /**
   * @generated from field: uint64 plan_id = 1;
   */
  planId = protoInt64.zero;

  constructor(data?: PartialMessage<QueryRewardsPlanRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.QueryRewardsPlanRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "plan_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRewardsPlanRequest {
    return new QueryRewardsPlanRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRewardsPlanRequest {
    return new QueryRewardsPlanRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRewardsPlanRequest {
    return new QueryRewardsPlanRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRewardsPlanRequest | PlainMessage<QueryRewardsPlanRequest> | undefined, b: QueryRewardsPlanRequest | PlainMessage<QueryRewardsPlanRequest> | undefined): boolean {
    return proto3.util.equals(QueryRewardsPlanRequest, a, b);
  }
}

/**
 * QueryRewardsPlanResponse is the response type for the Query/RewardsPlan RPC
 * method.
 *
 * @generated from message milkyway.rewards.v1.QueryRewardsPlanResponse
 */
export class QueryRewardsPlanResponse extends Message<QueryRewardsPlanResponse> {
  /**
   * @generated from field: milkyway.rewards.v1.RewardsPlan rewards_plan = 2;
   */
  rewardsPlan?: RewardsPlan;

  constructor(data?: PartialMessage<QueryRewardsPlanResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.QueryRewardsPlanResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "rewards_plan", kind: "message", T: RewardsPlan },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRewardsPlanResponse {
    return new QueryRewardsPlanResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRewardsPlanResponse {
    return new QueryRewardsPlanResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRewardsPlanResponse {
    return new QueryRewardsPlanResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRewardsPlanResponse | PlainMessage<QueryRewardsPlanResponse> | undefined, b: QueryRewardsPlanResponse | PlainMessage<QueryRewardsPlanResponse> | undefined): boolean {
    return proto3.util.equals(QueryRewardsPlanResponse, a, b);
  }
}

/**
 * QueryPoolOutstandingRewardsRequest is the request type for the
 * Query/PoolOutstandingRewards RPC method.
 *
 * @generated from message milkyway.rewards.v1.QueryPoolOutstandingRewardsRequest
 */
export class QueryPoolOutstandingRewardsRequest extends Message<QueryPoolOutstandingRewardsRequest> {
  /**
   * pool_id defines the pool ID to query for.
   *
   * @generated from field: uint32 pool_id = 1;
   */
  poolId = 0;

  constructor(data?: PartialMessage<QueryPoolOutstandingRewardsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.QueryPoolOutstandingRewardsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolOutstandingRewardsRequest {
    return new QueryPoolOutstandingRewardsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolOutstandingRewardsRequest {
    return new QueryPoolOutstandingRewardsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolOutstandingRewardsRequest {
    return new QueryPoolOutstandingRewardsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolOutstandingRewardsRequest | PlainMessage<QueryPoolOutstandingRewardsRequest> | undefined, b: QueryPoolOutstandingRewardsRequest | PlainMessage<QueryPoolOutstandingRewardsRequest> | undefined): boolean {
    return proto3.util.equals(QueryPoolOutstandingRewardsRequest, a, b);
  }
}

/**
 * QueryPoolOutstandingRewardsResponse is the response type for the
 * Query/PoolOutstandingRewards RPC method.
 *
 * @generated from message milkyway.rewards.v1.QueryPoolOutstandingRewardsResponse
 */
export class QueryPoolOutstandingRewardsResponse extends Message<QueryPoolOutstandingRewardsResponse> {
  /**
   * @generated from field: milkyway.rewards.v1.OutstandingRewards rewards = 1;
   */
  rewards?: OutstandingRewards;

  constructor(data?: PartialMessage<QueryPoolOutstandingRewardsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.QueryPoolOutstandingRewardsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rewards", kind: "message", T: OutstandingRewards },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolOutstandingRewardsResponse {
    return new QueryPoolOutstandingRewardsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolOutstandingRewardsResponse {
    return new QueryPoolOutstandingRewardsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolOutstandingRewardsResponse {
    return new QueryPoolOutstandingRewardsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolOutstandingRewardsResponse | PlainMessage<QueryPoolOutstandingRewardsResponse> | undefined, b: QueryPoolOutstandingRewardsResponse | PlainMessage<QueryPoolOutstandingRewardsResponse> | undefined): boolean {
    return proto3.util.equals(QueryPoolOutstandingRewardsResponse, a, b);
  }
}

/**
 * QueryOperatorOutstandingRewardsRequest is the request type for the
 * Query/OperatorOutstandingRewards RPC method.
 *
 * @generated from message milkyway.rewards.v1.QueryOperatorOutstandingRewardsRequest
 */
export class QueryOperatorOutstandingRewardsRequest extends Message<QueryOperatorOutstandingRewardsRequest> {
  /**
   * operator_id defines the operator ID to query for.
   *
   * @generated from field: uint32 operator_id = 1;
   */
  operatorId = 0;

  constructor(data?: PartialMessage<QueryOperatorOutstandingRewardsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.QueryOperatorOutstandingRewardsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "operator_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOperatorOutstandingRewardsRequest {
    return new QueryOperatorOutstandingRewardsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOperatorOutstandingRewardsRequest {
    return new QueryOperatorOutstandingRewardsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOperatorOutstandingRewardsRequest {
    return new QueryOperatorOutstandingRewardsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOperatorOutstandingRewardsRequest | PlainMessage<QueryOperatorOutstandingRewardsRequest> | undefined, b: QueryOperatorOutstandingRewardsRequest | PlainMessage<QueryOperatorOutstandingRewardsRequest> | undefined): boolean {
    return proto3.util.equals(QueryOperatorOutstandingRewardsRequest, a, b);
  }
}

/**
 * QueryOperatorOutstandingRewardsResponse is the response type for the
 * Query/OperatorOutstandingRewards RPC method.
 *
 * @generated from message milkyway.rewards.v1.QueryOperatorOutstandingRewardsResponse
 */
export class QueryOperatorOutstandingRewardsResponse extends Message<QueryOperatorOutstandingRewardsResponse> {
  /**
   * @generated from field: milkyway.rewards.v1.OutstandingRewards rewards = 1;
   */
  rewards?: OutstandingRewards;

  constructor(data?: PartialMessage<QueryOperatorOutstandingRewardsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.QueryOperatorOutstandingRewardsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rewards", kind: "message", T: OutstandingRewards },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOperatorOutstandingRewardsResponse {
    return new QueryOperatorOutstandingRewardsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOperatorOutstandingRewardsResponse {
    return new QueryOperatorOutstandingRewardsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOperatorOutstandingRewardsResponse {
    return new QueryOperatorOutstandingRewardsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOperatorOutstandingRewardsResponse | PlainMessage<QueryOperatorOutstandingRewardsResponse> | undefined, b: QueryOperatorOutstandingRewardsResponse | PlainMessage<QueryOperatorOutstandingRewardsResponse> | undefined): boolean {
    return proto3.util.equals(QueryOperatorOutstandingRewardsResponse, a, b);
  }
}

/**
 * QueryServiceOutstandingRewardsRequest is the request type for the
 * Query/ServiceOutstandingRewards RPC method.
 *
 * @generated from message milkyway.rewards.v1.QueryServiceOutstandingRewardsRequest
 */
export class QueryServiceOutstandingRewardsRequest extends Message<QueryServiceOutstandingRewardsRequest> {
  /**
   * service_id defines the service ID to query for.
   *
   * @generated from field: uint32 service_id = 1;
   */
  serviceId = 0;

  constructor(data?: PartialMessage<QueryServiceOutstandingRewardsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.QueryServiceOutstandingRewardsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryServiceOutstandingRewardsRequest {
    return new QueryServiceOutstandingRewardsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryServiceOutstandingRewardsRequest {
    return new QueryServiceOutstandingRewardsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryServiceOutstandingRewardsRequest {
    return new QueryServiceOutstandingRewardsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryServiceOutstandingRewardsRequest | PlainMessage<QueryServiceOutstandingRewardsRequest> | undefined, b: QueryServiceOutstandingRewardsRequest | PlainMessage<QueryServiceOutstandingRewardsRequest> | undefined): boolean {
    return proto3.util.equals(QueryServiceOutstandingRewardsRequest, a, b);
  }
}

/**
 * QueryServiceOutstandingRewardsResponse is the response type for the
 * Query/ServiceOutstandingRewards RPC method.
 *
 * @generated from message milkyway.rewards.v1.QueryServiceOutstandingRewardsResponse
 */
export class QueryServiceOutstandingRewardsResponse extends Message<QueryServiceOutstandingRewardsResponse> {
  /**
   * @generated from field: milkyway.rewards.v1.OutstandingRewards rewards = 1;
   */
  rewards?: OutstandingRewards;

  constructor(data?: PartialMessage<QueryServiceOutstandingRewardsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.QueryServiceOutstandingRewardsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rewards", kind: "message", T: OutstandingRewards },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryServiceOutstandingRewardsResponse {
    return new QueryServiceOutstandingRewardsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryServiceOutstandingRewardsResponse {
    return new QueryServiceOutstandingRewardsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryServiceOutstandingRewardsResponse {
    return new QueryServiceOutstandingRewardsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryServiceOutstandingRewardsResponse | PlainMessage<QueryServiceOutstandingRewardsResponse> | undefined, b: QueryServiceOutstandingRewardsResponse | PlainMessage<QueryServiceOutstandingRewardsResponse> | undefined): boolean {
    return proto3.util.equals(QueryServiceOutstandingRewardsResponse, a, b);
  }
}

/**
 * QueryOperatorCommissionRequest is the request type for the
 * Query/OperatorCommission RPC method
 *
 * @generated from message milkyway.rewards.v1.QueryOperatorCommissionRequest
 */
export class QueryOperatorCommissionRequest extends Message<QueryOperatorCommissionRequest> {
  /**
   * operator_id defines the validator address to query for.
   *
   * @generated from field: uint32 operator_id = 1;
   */
  operatorId = 0;

  constructor(data?: PartialMessage<QueryOperatorCommissionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.QueryOperatorCommissionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "operator_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOperatorCommissionRequest {
    return new QueryOperatorCommissionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOperatorCommissionRequest {
    return new QueryOperatorCommissionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOperatorCommissionRequest {
    return new QueryOperatorCommissionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOperatorCommissionRequest | PlainMessage<QueryOperatorCommissionRequest> | undefined, b: QueryOperatorCommissionRequest | PlainMessage<QueryOperatorCommissionRequest> | undefined): boolean {
    return proto3.util.equals(QueryOperatorCommissionRequest, a, b);
  }
}

/**
 * QueryOperatorCommissionResponse is the response type for the
 * Query/OperatorCommission RPC method
 *
 * @generated from message milkyway.rewards.v1.QueryOperatorCommissionResponse
 */
export class QueryOperatorCommissionResponse extends Message<QueryOperatorCommissionResponse> {
  /**
   * commission defines the commission the operator received.
   *
   * @generated from field: milkyway.rewards.v1.AccumulatedCommission commission = 1;
   */
  commission?: AccumulatedCommission;

  constructor(data?: PartialMessage<QueryOperatorCommissionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.QueryOperatorCommissionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "commission", kind: "message", T: AccumulatedCommission },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOperatorCommissionResponse {
    return new QueryOperatorCommissionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOperatorCommissionResponse {
    return new QueryOperatorCommissionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOperatorCommissionResponse {
    return new QueryOperatorCommissionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOperatorCommissionResponse | PlainMessage<QueryOperatorCommissionResponse> | undefined, b: QueryOperatorCommissionResponse | PlainMessage<QueryOperatorCommissionResponse> | undefined): boolean {
    return proto3.util.equals(QueryOperatorCommissionResponse, a, b);
  }
}

/**
 * QueryPoolServiceTotalDelegatorSharesRequest is the request type for the
 * Query/PoolServiceTotalDelegatorShares RPC method.
 *
 * @generated from message milkyway.rewards.v1.QueryPoolServiceTotalDelegatorSharesRequest
 */
export class QueryPoolServiceTotalDelegatorSharesRequest extends Message<QueryPoolServiceTotalDelegatorSharesRequest> {
  /**
   * pool_id defines the pool ID to query for.
   *
   * @generated from field: uint32 pool_id = 1;
   */
  poolId = 0;

  /**
   * service_id defines the service ID to query for.
   *
   * @generated from field: uint32 service_id = 2;
   */
  serviceId = 0;

  constructor(data?: PartialMessage<QueryPoolServiceTotalDelegatorSharesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.QueryPoolServiceTotalDelegatorSharesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "service_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolServiceTotalDelegatorSharesRequest {
    return new QueryPoolServiceTotalDelegatorSharesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolServiceTotalDelegatorSharesRequest {
    return new QueryPoolServiceTotalDelegatorSharesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolServiceTotalDelegatorSharesRequest {
    return new QueryPoolServiceTotalDelegatorSharesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolServiceTotalDelegatorSharesRequest | PlainMessage<QueryPoolServiceTotalDelegatorSharesRequest> | undefined, b: QueryPoolServiceTotalDelegatorSharesRequest | PlainMessage<QueryPoolServiceTotalDelegatorSharesRequest> | undefined): boolean {
    return proto3.util.equals(QueryPoolServiceTotalDelegatorSharesRequest, a, b);
  }
}

/**
 * QueryPoolServiceTotalDelegatorSharesResponse is the response type for the
 * Query/PoolServiceTotalDelegatorShares RPC method.
 *
 * @generated from message milkyway.rewards.v1.QueryPoolServiceTotalDelegatorSharesResponse
 */
export class QueryPoolServiceTotalDelegatorSharesResponse extends Message<QueryPoolServiceTotalDelegatorSharesResponse> {
  /**
   * total_delegator_shares defines the total delegator shares for a
   * pool-service pair.
   *
   * @generated from field: repeated cosmos.base.v1beta1.DecCoin shares = 1;
   */
  shares: DecCoin[] = [];

  constructor(data?: PartialMessage<QueryPoolServiceTotalDelegatorSharesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.QueryPoolServiceTotalDelegatorSharesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "shares", kind: "message", T: DecCoin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolServiceTotalDelegatorSharesResponse {
    return new QueryPoolServiceTotalDelegatorSharesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolServiceTotalDelegatorSharesResponse {
    return new QueryPoolServiceTotalDelegatorSharesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolServiceTotalDelegatorSharesResponse {
    return new QueryPoolServiceTotalDelegatorSharesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolServiceTotalDelegatorSharesResponse | PlainMessage<QueryPoolServiceTotalDelegatorSharesResponse> | undefined, b: QueryPoolServiceTotalDelegatorSharesResponse | PlainMessage<QueryPoolServiceTotalDelegatorSharesResponse> | undefined): boolean {
    return proto3.util.equals(QueryPoolServiceTotalDelegatorSharesResponse, a, b);
  }
}

/**
 * QueryPoolDelegationRewardsRequest is the request type for the
 * Query/PoolDelegationRewards RPC method.
 *
 * @generated from message milkyway.rewards.v1.QueryPoolDelegationRewardsRequest
 */
export class QueryPoolDelegationRewardsRequest extends Message<QueryPoolDelegationRewardsRequest> {
  /**
   * delegator_address defines the delegator address to query for.
   *
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress = "";

  /**
   * pool_id defines the pool ID to query for.
   *
   * @generated from field: uint32 pool_id = 2;
   */
  poolId = 0;

  constructor(data?: PartialMessage<QueryPoolDelegationRewardsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.QueryPoolDelegationRewardsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pool_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolDelegationRewardsRequest {
    return new QueryPoolDelegationRewardsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolDelegationRewardsRequest {
    return new QueryPoolDelegationRewardsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolDelegationRewardsRequest {
    return new QueryPoolDelegationRewardsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolDelegationRewardsRequest | PlainMessage<QueryPoolDelegationRewardsRequest> | undefined, b: QueryPoolDelegationRewardsRequest | PlainMessage<QueryPoolDelegationRewardsRequest> | undefined): boolean {
    return proto3.util.equals(QueryPoolDelegationRewardsRequest, a, b);
  }
}

/**
 * QueryPoolDelegationRewardsResponse is the response type for the
 * Query/PoolDelegationRewards RPC method.
 *
 * @generated from message milkyway.rewards.v1.QueryPoolDelegationRewardsResponse
 */
export class QueryPoolDelegationRewardsResponse extends Message<QueryPoolDelegationRewardsResponse> {
  /**
   * rewards defines the rewards accrued by a delegation.
   *
   * @generated from field: repeated milkyway.rewards.v1.DecPool rewards = 1;
   */
  rewards: DecPool[] = [];

  constructor(data?: PartialMessage<QueryPoolDelegationRewardsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.QueryPoolDelegationRewardsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rewards", kind: "message", T: DecPool, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolDelegationRewardsResponse {
    return new QueryPoolDelegationRewardsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolDelegationRewardsResponse {
    return new QueryPoolDelegationRewardsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolDelegationRewardsResponse {
    return new QueryPoolDelegationRewardsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolDelegationRewardsResponse | PlainMessage<QueryPoolDelegationRewardsResponse> | undefined, b: QueryPoolDelegationRewardsResponse | PlainMessage<QueryPoolDelegationRewardsResponse> | undefined): boolean {
    return proto3.util.equals(QueryPoolDelegationRewardsResponse, a, b);
  }
}

/**
 * QueryOperatorDelegationRewardsRequest is the request type for the
 * Query/OperatorDelegationRewards RPC method.
 *
 * @generated from message milkyway.rewards.v1.QueryOperatorDelegationRewardsRequest
 */
export class QueryOperatorDelegationRewardsRequest extends Message<QueryOperatorDelegationRewardsRequest> {
  /**
   * delegator_address defines the delegator address to query for.
   *
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress = "";

  /**
   * operator_id defines the operator ID to query for.
   *
   * @generated from field: uint32 operator_id = 2;
   */
  operatorId = 0;

  constructor(data?: PartialMessage<QueryOperatorDelegationRewardsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.QueryOperatorDelegationRewardsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "operator_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOperatorDelegationRewardsRequest {
    return new QueryOperatorDelegationRewardsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOperatorDelegationRewardsRequest {
    return new QueryOperatorDelegationRewardsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOperatorDelegationRewardsRequest {
    return new QueryOperatorDelegationRewardsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOperatorDelegationRewardsRequest | PlainMessage<QueryOperatorDelegationRewardsRequest> | undefined, b: QueryOperatorDelegationRewardsRequest | PlainMessage<QueryOperatorDelegationRewardsRequest> | undefined): boolean {
    return proto3.util.equals(QueryOperatorDelegationRewardsRequest, a, b);
  }
}

/**
 * QueryOperatorDelegationRewardsResponse is the response type for the
 * Query/OperatorDelegationRewards RPC method.
 *
 * @generated from message milkyway.rewards.v1.QueryOperatorDelegationRewardsResponse
 */
export class QueryOperatorDelegationRewardsResponse extends Message<QueryOperatorDelegationRewardsResponse> {
  /**
   * rewards defines the rewards accrued by a delegation.
   *
   * @generated from field: repeated milkyway.rewards.v1.DecPool rewards = 1;
   */
  rewards: DecPool[] = [];

  constructor(data?: PartialMessage<QueryOperatorDelegationRewardsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.QueryOperatorDelegationRewardsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rewards", kind: "message", T: DecPool, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOperatorDelegationRewardsResponse {
    return new QueryOperatorDelegationRewardsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOperatorDelegationRewardsResponse {
    return new QueryOperatorDelegationRewardsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOperatorDelegationRewardsResponse {
    return new QueryOperatorDelegationRewardsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOperatorDelegationRewardsResponse | PlainMessage<QueryOperatorDelegationRewardsResponse> | undefined, b: QueryOperatorDelegationRewardsResponse | PlainMessage<QueryOperatorDelegationRewardsResponse> | undefined): boolean {
    return proto3.util.equals(QueryOperatorDelegationRewardsResponse, a, b);
  }
}

/**
 * QueryServiceDelegationRewardsRequest is the request type for the
 * Query/ServiceDelegationRewards RPC method.
 *
 * @generated from message milkyway.rewards.v1.QueryServiceDelegationRewardsRequest
 */
export class QueryServiceDelegationRewardsRequest extends Message<QueryServiceDelegationRewardsRequest> {
  /**
   * delegator_address defines the delegator address to query for.
   *
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress = "";

  /**
   * service_id defines the service ID to query for.
   *
   * @generated from field: uint32 service_id = 2;
   */
  serviceId = 0;

  constructor(data?: PartialMessage<QueryServiceDelegationRewardsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.QueryServiceDelegationRewardsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "service_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryServiceDelegationRewardsRequest {
    return new QueryServiceDelegationRewardsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryServiceDelegationRewardsRequest {
    return new QueryServiceDelegationRewardsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryServiceDelegationRewardsRequest {
    return new QueryServiceDelegationRewardsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryServiceDelegationRewardsRequest | PlainMessage<QueryServiceDelegationRewardsRequest> | undefined, b: QueryServiceDelegationRewardsRequest | PlainMessage<QueryServiceDelegationRewardsRequest> | undefined): boolean {
    return proto3.util.equals(QueryServiceDelegationRewardsRequest, a, b);
  }
}

/**
 * QueryServiceDelegationRewardsResponse is the response type for the
 * Query/ServiceDelegationRewards RPC method.
 *
 * @generated from message milkyway.rewards.v1.QueryServiceDelegationRewardsResponse
 */
export class QueryServiceDelegationRewardsResponse extends Message<QueryServiceDelegationRewardsResponse> {
  /**
   * rewards defines the rewards accrued by a delegation.
   *
   * @generated from field: repeated milkyway.rewards.v1.DecPool rewards = 1;
   */
  rewards: DecPool[] = [];

  constructor(data?: PartialMessage<QueryServiceDelegationRewardsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.QueryServiceDelegationRewardsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rewards", kind: "message", T: DecPool, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryServiceDelegationRewardsResponse {
    return new QueryServiceDelegationRewardsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryServiceDelegationRewardsResponse {
    return new QueryServiceDelegationRewardsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryServiceDelegationRewardsResponse {
    return new QueryServiceDelegationRewardsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryServiceDelegationRewardsResponse | PlainMessage<QueryServiceDelegationRewardsResponse> | undefined, b: QueryServiceDelegationRewardsResponse | PlainMessage<QueryServiceDelegationRewardsResponse> | undefined): boolean {
    return proto3.util.equals(QueryServiceDelegationRewardsResponse, a, b);
  }
}

/**
 * QueryDelegatorTotalRewardsRequest is the request type for the
 * Query/DelegatorTotalRewards RPC method.
 *
 * @generated from message milkyway.rewards.v1.QueryDelegatorTotalRewardsRequest
 */
export class QueryDelegatorTotalRewardsRequest extends Message<QueryDelegatorTotalRewardsRequest> {
  /**
   * delegator_address defines the delegator address to query for.
   *
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress = "";

  constructor(data?: PartialMessage<QueryDelegatorTotalRewardsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.QueryDelegatorTotalRewardsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDelegatorTotalRewardsRequest {
    return new QueryDelegatorTotalRewardsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDelegatorTotalRewardsRequest {
    return new QueryDelegatorTotalRewardsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDelegatorTotalRewardsRequest {
    return new QueryDelegatorTotalRewardsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDelegatorTotalRewardsRequest | PlainMessage<QueryDelegatorTotalRewardsRequest> | undefined, b: QueryDelegatorTotalRewardsRequest | PlainMessage<QueryDelegatorTotalRewardsRequest> | undefined): boolean {
    return proto3.util.equals(QueryDelegatorTotalRewardsRequest, a, b);
  }
}

/**
 * QueryDelegatorTotalRewardsResponse is the response type for the
 * Query/DelegatorTotalRewards RPC method.
 *
 * @generated from message milkyway.rewards.v1.QueryDelegatorTotalRewardsResponse
 */
export class QueryDelegatorTotalRewardsResponse extends Message<QueryDelegatorTotalRewardsResponse> {
  /**
   * rewards defines all the rewards accrued by a delegator.
   *
   * @generated from field: repeated milkyway.rewards.v1.DelegationDelegatorReward rewards = 1;
   */
  rewards: DelegationDelegatorReward[] = [];

  /**
   * total defines the sum of all the rewards.
   *
   * @generated from field: repeated milkyway.rewards.v1.DecPool total = 2;
   */
  total: DecPool[] = [];

  constructor(data?: PartialMessage<QueryDelegatorTotalRewardsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.QueryDelegatorTotalRewardsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rewards", kind: "message", T: DelegationDelegatorReward, repeated: true },
    { no: 2, name: "total", kind: "message", T: DecPool, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDelegatorTotalRewardsResponse {
    return new QueryDelegatorTotalRewardsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDelegatorTotalRewardsResponse {
    return new QueryDelegatorTotalRewardsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDelegatorTotalRewardsResponse {
    return new QueryDelegatorTotalRewardsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDelegatorTotalRewardsResponse | PlainMessage<QueryDelegatorTotalRewardsResponse> | undefined, b: QueryDelegatorTotalRewardsResponse | PlainMessage<QueryDelegatorTotalRewardsResponse> | undefined): boolean {
    return proto3.util.equals(QueryDelegatorTotalRewardsResponse, a, b);
  }
}

/**
 * QueryDelegatorWithdrawAddressRequest is the request type for the
 * Query/DelegatorWithdrawAddress RPC method.
 *
 * @generated from message milkyway.rewards.v1.QueryDelegatorWithdrawAddressRequest
 */
export class QueryDelegatorWithdrawAddressRequest extends Message<QueryDelegatorWithdrawAddressRequest> {
  /**
   * delegator_address defines the delegator address to query for.
   *
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress = "";

  constructor(data?: PartialMessage<QueryDelegatorWithdrawAddressRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.QueryDelegatorWithdrawAddressRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDelegatorWithdrawAddressRequest {
    return new QueryDelegatorWithdrawAddressRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDelegatorWithdrawAddressRequest {
    return new QueryDelegatorWithdrawAddressRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDelegatorWithdrawAddressRequest {
    return new QueryDelegatorWithdrawAddressRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDelegatorWithdrawAddressRequest | PlainMessage<QueryDelegatorWithdrawAddressRequest> | undefined, b: QueryDelegatorWithdrawAddressRequest | PlainMessage<QueryDelegatorWithdrawAddressRequest> | undefined): boolean {
    return proto3.util.equals(QueryDelegatorWithdrawAddressRequest, a, b);
  }
}

/**
 * QueryDelegatorWithdrawAddressResponse is the response type for the
 * Query/DelegatorWithdrawAddress RPC method.
 *
 * @generated from message milkyway.rewards.v1.QueryDelegatorWithdrawAddressResponse
 */
export class QueryDelegatorWithdrawAddressResponse extends Message<QueryDelegatorWithdrawAddressResponse> {
  /**
   * withdraw_address defines the delegator address to query for.
   *
   * @generated from field: string withdraw_address = 1;
   */
  withdrawAddress = "";

  constructor(data?: PartialMessage<QueryDelegatorWithdrawAddressResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.QueryDelegatorWithdrawAddressResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "withdraw_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDelegatorWithdrawAddressResponse {
    return new QueryDelegatorWithdrawAddressResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDelegatorWithdrawAddressResponse {
    return new QueryDelegatorWithdrawAddressResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDelegatorWithdrawAddressResponse {
    return new QueryDelegatorWithdrawAddressResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDelegatorWithdrawAddressResponse | PlainMessage<QueryDelegatorWithdrawAddressResponse> | undefined, b: QueryDelegatorWithdrawAddressResponse | PlainMessage<QueryDelegatorWithdrawAddressResponse> | undefined): boolean {
    return proto3.util.equals(QueryDelegatorWithdrawAddressResponse, a, b);
  }
}

