// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file milkyway/rewards/v1/genesis.proto (package milkyway.rewards.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { AccumulatedCommission, CurrentRewards, DecPool, DelegatorStartingInfo, HistoricalRewards, PoolServiceTotalDelegatorShares, RewardsPlan } from "./models_pb.js";
import { Params } from "./params_pb.js";

/**
 * DelegatorWithdrawInfo is the address for where delegation rewards are
 * withdrawn to by default this struct is only used at genesis to feed in
 * default withdraw addresses.
 *
 * @generated from message milkyway.rewards.v1.DelegatorWithdrawInfo
 */
export class DelegatorWithdrawInfo extends Message<DelegatorWithdrawInfo> {
  /**
   * delegator_address is the address of the delegator.
   *
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress = "";

  /**
   * withdraw_address is the address to withdraw the delegation rewards to.
   *
   * @generated from field: string withdraw_address = 2;
   */
  withdrawAddress = "";

  constructor(data?: PartialMessage<DelegatorWithdrawInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.DelegatorWithdrawInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "withdraw_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DelegatorWithdrawInfo {
    return new DelegatorWithdrawInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DelegatorWithdrawInfo {
    return new DelegatorWithdrawInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DelegatorWithdrawInfo {
    return new DelegatorWithdrawInfo().fromJsonString(jsonString, options);
  }

  static equals(a: DelegatorWithdrawInfo | PlainMessage<DelegatorWithdrawInfo> | undefined, b: DelegatorWithdrawInfo | PlainMessage<DelegatorWithdrawInfo> | undefined): boolean {
    return proto3.util.equals(DelegatorWithdrawInfo, a, b);
  }
}

/**
 * OutstandingRewardsRecord is used for import/export via genesis json.
 *
 * @generated from message milkyway.rewards.v1.OutstandingRewardsRecord
 */
export class OutstandingRewardsRecord extends Message<OutstandingRewardsRecord> {
  /**
   * delegation_target_id is the ID of the delegation target.
   *
   * @generated from field: uint32 delegation_target_id = 1;
   */
  delegationTargetId = 0;

  /**
   * outstanding_rewards represents the outstanding rewards of the delegation
   * target.
   *
   * @generated from field: repeated milkyway.rewards.v1.DecPool outstanding_rewards = 2;
   */
  outstandingRewards: DecPool[] = [];

  constructor(data?: PartialMessage<OutstandingRewardsRecord>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.OutstandingRewardsRecord";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegation_target_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "outstanding_rewards", kind: "message", T: DecPool, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OutstandingRewardsRecord {
    return new OutstandingRewardsRecord().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OutstandingRewardsRecord {
    return new OutstandingRewardsRecord().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OutstandingRewardsRecord {
    return new OutstandingRewardsRecord().fromJsonString(jsonString, options);
  }

  static equals(a: OutstandingRewardsRecord | PlainMessage<OutstandingRewardsRecord> | undefined, b: OutstandingRewardsRecord | PlainMessage<OutstandingRewardsRecord> | undefined): boolean {
    return proto3.util.equals(OutstandingRewardsRecord, a, b);
  }
}

/**
 * HistoricalRewardsRecord is used for import / export via genesis
 * json.
 *
 * @generated from message milkyway.rewards.v1.HistoricalRewardsRecord
 */
export class HistoricalRewardsRecord extends Message<HistoricalRewardsRecord> {
  /**
   * delegation_target_id is the ID of the delegation target.
   *
   * @generated from field: uint32 delegation_target_id = 1;
   */
  delegationTargetId = 0;

  /**
   * period defines the period the historical rewards apply to.
   *
   * @generated from field: uint64 period = 2;
   */
  period = protoInt64.zero;

  /**
   * rewards defines the historical rewards of the delegation target.
   *
   * @generated from field: milkyway.rewards.v1.HistoricalRewards rewards = 3;
   */
  rewards?: HistoricalRewards;

  constructor(data?: PartialMessage<HistoricalRewardsRecord>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.HistoricalRewardsRecord";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegation_target_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "period", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "rewards", kind: "message", T: HistoricalRewards },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HistoricalRewardsRecord {
    return new HistoricalRewardsRecord().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HistoricalRewardsRecord {
    return new HistoricalRewardsRecord().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HistoricalRewardsRecord {
    return new HistoricalRewardsRecord().fromJsonString(jsonString, options);
  }

  static equals(a: HistoricalRewardsRecord | PlainMessage<HistoricalRewardsRecord> | undefined, b: HistoricalRewardsRecord | PlainMessage<HistoricalRewardsRecord> | undefined): boolean {
    return proto3.util.equals(HistoricalRewardsRecord, a, b);
  }
}

/**
 * CurrentRewardsRecord is used for import / export via genesis json.
 *
 * @generated from message milkyway.rewards.v1.CurrentRewardsRecord
 */
export class CurrentRewardsRecord extends Message<CurrentRewardsRecord> {
  /**
   * delegation_target_id is the ID of the delegation target.
   *
   * @generated from field: uint32 delegation_target_id = 1;
   */
  delegationTargetId = 0;

  /**
   * rewards defines the current rewards of the delegation target.
   *
   * @generated from field: milkyway.rewards.v1.CurrentRewards rewards = 2;
   */
  rewards?: CurrentRewards;

  constructor(data?: PartialMessage<CurrentRewardsRecord>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.CurrentRewardsRecord";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegation_target_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "rewards", kind: "message", T: CurrentRewards },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CurrentRewardsRecord {
    return new CurrentRewardsRecord().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CurrentRewardsRecord {
    return new CurrentRewardsRecord().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CurrentRewardsRecord {
    return new CurrentRewardsRecord().fromJsonString(jsonString, options);
  }

  static equals(a: CurrentRewardsRecord | PlainMessage<CurrentRewardsRecord> | undefined, b: CurrentRewardsRecord | PlainMessage<CurrentRewardsRecord> | undefined): boolean {
    return proto3.util.equals(CurrentRewardsRecord, a, b);
  }
}

/**
 * DelegatorStartingInfoRecord used for import / export via genesis json.
 *
 * @generated from message milkyway.rewards.v1.DelegatorStartingInfoRecord
 */
export class DelegatorStartingInfoRecord extends Message<DelegatorStartingInfoRecord> {
  /**
   * delegator_address is the address of the delegator.
   *
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress = "";

  /**
   * delegation_target_id is the ID of the delegation target.
   *
   * @generated from field: uint32 delegation_target_id = 2;
   */
  delegationTargetId = 0;

  /**
   * starting_info defines the starting info of a delegator.
   *
   * @generated from field: milkyway.rewards.v1.DelegatorStartingInfo starting_info = 3;
   */
  startingInfo?: DelegatorStartingInfo;

  constructor(data?: PartialMessage<DelegatorStartingInfoRecord>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.DelegatorStartingInfoRecord";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "delegation_target_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "starting_info", kind: "message", T: DelegatorStartingInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DelegatorStartingInfoRecord {
    return new DelegatorStartingInfoRecord().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DelegatorStartingInfoRecord {
    return new DelegatorStartingInfoRecord().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DelegatorStartingInfoRecord {
    return new DelegatorStartingInfoRecord().fromJsonString(jsonString, options);
  }

  static equals(a: DelegatorStartingInfoRecord | PlainMessage<DelegatorStartingInfoRecord> | undefined, b: DelegatorStartingInfoRecord | PlainMessage<DelegatorStartingInfoRecord> | undefined): boolean {
    return proto3.util.equals(DelegatorStartingInfoRecord, a, b);
  }
}

/**
 * OperatorAccumulatedCommissionRecord contains the data about the accumulated commission of an operator.
 *
 * @generated from message milkyway.rewards.v1.OperatorAccumulatedCommissionRecord
 */
export class OperatorAccumulatedCommissionRecord extends Message<OperatorAccumulatedCommissionRecord> {
  /**
   * @generated from field: uint32 operator_id = 1;
   */
  operatorId = 0;

  /**
   * accumulated is the accumulated commission of an operator.
   *
   * @generated from field: milkyway.rewards.v1.AccumulatedCommission accumulated = 2;
   */
  accumulated?: AccumulatedCommission;

  constructor(data?: PartialMessage<OperatorAccumulatedCommissionRecord>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.OperatorAccumulatedCommissionRecord";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "operator_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "accumulated", kind: "message", T: AccumulatedCommission },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OperatorAccumulatedCommissionRecord {
    return new OperatorAccumulatedCommissionRecord().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OperatorAccumulatedCommissionRecord {
    return new OperatorAccumulatedCommissionRecord().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OperatorAccumulatedCommissionRecord {
    return new OperatorAccumulatedCommissionRecord().fromJsonString(jsonString, options);
  }

  static equals(a: OperatorAccumulatedCommissionRecord | PlainMessage<OperatorAccumulatedCommissionRecord> | undefined, b: OperatorAccumulatedCommissionRecord | PlainMessage<OperatorAccumulatedCommissionRecord> | undefined): boolean {
    return proto3.util.equals(OperatorAccumulatedCommissionRecord, a, b);
  }
}

/**
 * DelegationTypeRecords groups various genesis records under the same type
 * of delegation target.
 *
 * @generated from message milkyway.rewards.v1.DelegationTypeRecords
 */
export class DelegationTypeRecords extends Message<DelegationTypeRecords> {
  /**
   * outstanding_rewards defines the outstanding rewards of all delegation
   * targets with the same delegation type at genesis.
   *
   * @generated from field: repeated milkyway.rewards.v1.OutstandingRewardsRecord outstanding_rewards = 1;
   */
  outstandingRewards: OutstandingRewardsRecord[] = [];

  /**
   * historical_rewards defines the historical rewards of all delegation targets
   * with the same delegation type at genesis.
   *
   * @generated from field: repeated milkyway.rewards.v1.HistoricalRewardsRecord historical_rewards = 2;
   */
  historicalRewards: HistoricalRewardsRecord[] = [];

  /**
   * current_rewards defines the current rewards of all delegation targets with
   * the same delegation type at genesis.
   *
   * @generated from field: repeated milkyway.rewards.v1.CurrentRewardsRecord current_rewards = 3;
   */
  currentRewards: CurrentRewardsRecord[] = [];

  /**
   * delegator_starting_infos defines the delegator starting infos of all
   * delegation targets with the same delegation type at genesis.
   *
   * @generated from field: repeated milkyway.rewards.v1.DelegatorStartingInfoRecord delegator_starting_infos = 4;
   */
  delegatorStartingInfos: DelegatorStartingInfoRecord[] = [];

  constructor(data?: PartialMessage<DelegationTypeRecords>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.DelegationTypeRecords";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "outstanding_rewards", kind: "message", T: OutstandingRewardsRecord, repeated: true },
    { no: 2, name: "historical_rewards", kind: "message", T: HistoricalRewardsRecord, repeated: true },
    { no: 3, name: "current_rewards", kind: "message", T: CurrentRewardsRecord, repeated: true },
    { no: 4, name: "delegator_starting_infos", kind: "message", T: DelegatorStartingInfoRecord, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DelegationTypeRecords {
    return new DelegationTypeRecords().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DelegationTypeRecords {
    return new DelegationTypeRecords().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DelegationTypeRecords {
    return new DelegationTypeRecords().fromJsonString(jsonString, options);
  }

  static equals(a: DelegationTypeRecords | PlainMessage<DelegationTypeRecords> | undefined, b: DelegationTypeRecords | PlainMessage<DelegationTypeRecords> | undefined): boolean {
    return proto3.util.equals(DelegationTypeRecords, a, b);
  }
}

/**
 * GenesisState defines the module's genesis state.
 *
 * @generated from message milkyway.rewards.v1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * Params defines the parameters of the module.
   *
   * @generated from field: milkyway.rewards.v1.Params params = 1;
   */
  params?: Params;

  /**
   * NextRewardsPlanID represents the id to be used when creating the next
   * rewards plan.
   *
   * @generated from field: uint64 next_rewards_plan_id = 2;
   */
  nextRewardsPlanId = protoInt64.zero;

  /**
   * RewardsPlans defines the list of rewards plans.
   *
   * @generated from field: repeated milkyway.rewards.v1.RewardsPlan rewards_plans = 3;
   */
  rewardsPlans: RewardsPlan[] = [];

  /**
   * last_rewards_allocation_time is the last time rewards were allocated.
   *
   * @generated from field: google.protobuf.Timestamp last_rewards_allocation_time = 4;
   */
  lastRewardsAllocationTime?: Timestamp;

  /**
   * delegator_withdraw_infos defines the delegator withdraw infos at genesis.
   *
   * @generated from field: repeated milkyway.rewards.v1.DelegatorWithdrawInfo delegator_withdraw_infos = 5;
   */
  delegatorWithdrawInfos: DelegatorWithdrawInfo[] = [];

  /**
   * pools_records defines a group of genesis records of all pools at genesis.
   *
   * @generated from field: milkyway.rewards.v1.DelegationTypeRecords pools_records = 6;
   */
  poolsRecords?: DelegationTypeRecords;

  /**
   * operators_records defines a group of genesis records of all operators at
   * genesis.
   *
   * @generated from field: milkyway.rewards.v1.DelegationTypeRecords operators_records = 7;
   */
  operatorsRecords?: DelegationTypeRecords;

  /**
   * services_records defines a group of genesis records of all services at
   * genesis.
   *
   * @generated from field: milkyway.rewards.v1.DelegationTypeRecords services_records = 8;
   */
  servicesRecords?: DelegationTypeRecords;

  /**
   * operator_accumulated_commissions defines the accumulated commissions of all
   * operators at genesis.
   *
   * @generated from field: repeated milkyway.rewards.v1.OperatorAccumulatedCommissionRecord operator_accumulated_commissions = 9;
   */
  operatorAccumulatedCommissions: OperatorAccumulatedCommissionRecord[] = [];

  /**
   * pool_service_total_delegator_shares defines the total delegator shares at
   * genesis.
   *
   * @generated from field: repeated milkyway.rewards.v1.PoolServiceTotalDelegatorShares pool_service_total_delegator_shares = 10;
   */
  poolServiceTotalDelegatorShares: PoolServiceTotalDelegatorShares[] = [];

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
    { no: 2, name: "next_rewards_plan_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "rewards_plans", kind: "message", T: RewardsPlan, repeated: true },
    { no: 4, name: "last_rewards_allocation_time", kind: "message", T: Timestamp },
    { no: 5, name: "delegator_withdraw_infos", kind: "message", T: DelegatorWithdrawInfo, repeated: true },
    { no: 6, name: "pools_records", kind: "message", T: DelegationTypeRecords },
    { no: 7, name: "operators_records", kind: "message", T: DelegationTypeRecords },
    { no: 8, name: "services_records", kind: "message", T: DelegationTypeRecords },
    { no: 9, name: "operator_accumulated_commissions", kind: "message", T: OperatorAccumulatedCommissionRecord, repeated: true },
    { no: 10, name: "pool_service_total_delegator_shares", kind: "message", T: PoolServiceTotalDelegatorShares, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

