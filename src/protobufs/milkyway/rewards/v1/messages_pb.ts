// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file milkyway/rewards/v1/messages.proto (package milkyway.rewards.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
import { Distribution, UsersDistribution } from "./models_pb.js";
import { DelegationType } from "../../restaking/v1/models_pb.js";
import { Params } from "./params_pb.js";

/**
 * MsgCreateRewardsPlan defines the message structure for the
 * CreateRewardsPlan gRPC service method. It allows an account to create a
 * new rewards plan. It requires a sender address as well as the details of
 * the plan to be created.
 *
 * @generated from message milkyway.rewards.v1.MsgCreateRewardsPlan
 */
export class MsgCreateRewardsPlan extends Message<MsgCreateRewardsPlan> {
  /**
   * Sender is the address of the user creating the rewards plan
   *
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: uint32 service_id = 3;
   */
  serviceId = 0;

  /**
   * Amount is the amount of rewards to be distributed.
   *
   * @generated from field: cosmos.base.v1beta1.Coin amount = 4;
   */
  amount?: Coin;

  /**
   * StartTime is the starting time of the plan.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 5;
   */
  startTime?: Timestamp;

  /**
   * EndTime is the ending time of the plan.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 6;
   */
  endTime?: Timestamp;

  /**
   * PoolsDistribution is the rewards distribution parameters for pools.
   *
   * @generated from field: milkyway.rewards.v1.Distribution pools_distribution = 7;
   */
  poolsDistribution?: Distribution;

  /**
   * OperatorsDistribution is the rewards distribution parameters for operators.
   *
   * @generated from field: milkyway.rewards.v1.Distribution operators_distribution = 8;
   */
  operatorsDistribution?: Distribution;

  /**
   * UsersDistribution is the rewards distribution parameters for users who
   * delegated directly to the service.
   *
   * @generated from field: milkyway.rewards.v1.UsersDistribution users_distribution = 9;
   */
  usersDistribution?: UsersDistribution;

  /**
   * FeeAmount represents the fees that are going to be paid to create the
   * rewards plan. These should always be greater or equals of any of the coins
   * specified inside the RewardsPlanCreationFee field of the modules params.
   * If no fees are specified inside the module parameters, this field can be
   * omitted.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin fee_amount = 10;
   */
  feeAmount: Coin[] = [];

  constructor(data?: PartialMessage<MsgCreateRewardsPlan>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.MsgCreateRewardsPlan";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "service_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "amount", kind: "message", T: Coin },
    { no: 5, name: "start_time", kind: "message", T: Timestamp },
    { no: 6, name: "end_time", kind: "message", T: Timestamp },
    { no: 7, name: "pools_distribution", kind: "message", T: Distribution },
    { no: 8, name: "operators_distribution", kind: "message", T: Distribution },
    { no: 9, name: "users_distribution", kind: "message", T: UsersDistribution },
    { no: 10, name: "fee_amount", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateRewardsPlan {
    return new MsgCreateRewardsPlan().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateRewardsPlan {
    return new MsgCreateRewardsPlan().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateRewardsPlan {
    return new MsgCreateRewardsPlan().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateRewardsPlan | PlainMessage<MsgCreateRewardsPlan> | undefined, b: MsgCreateRewardsPlan | PlainMessage<MsgCreateRewardsPlan> | undefined): boolean {
    return proto3.util.equals(MsgCreateRewardsPlan, a, b);
  }
}

/**
 * MsgCreateRewardsPlanResponse is the return value of
 * MsgCreateRewardsPlan. It returns the newly created plan ID.
 *
 * @generated from message milkyway.rewards.v1.MsgCreateRewardsPlanResponse
 */
export class MsgCreateRewardsPlanResponse extends Message<MsgCreateRewardsPlanResponse> {
  /**
   * NewRewardsPlanID is the ID of the newly created rewards plan
   *
   * @generated from field: uint64 new_rewards_plan_id = 1;
   */
  newRewardsPlanId = protoInt64.zero;

  constructor(data?: PartialMessage<MsgCreateRewardsPlanResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.MsgCreateRewardsPlanResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "new_rewards_plan_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateRewardsPlanResponse {
    return new MsgCreateRewardsPlanResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateRewardsPlanResponse {
    return new MsgCreateRewardsPlanResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateRewardsPlanResponse {
    return new MsgCreateRewardsPlanResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateRewardsPlanResponse | PlainMessage<MsgCreateRewardsPlanResponse> | undefined, b: MsgCreateRewardsPlanResponse | PlainMessage<MsgCreateRewardsPlanResponse> | undefined): boolean {
    return proto3.util.equals(MsgCreateRewardsPlanResponse, a, b);
  }
}

/**
 * MsgEditRewardsPlan defines the message structure for the
 * EditRewardsPlan gRPC service method. It allows an account to edit a
 * previously created rewards plan.
 *
 * @generated from message milkyway.rewards.v1.MsgEditRewardsPlan
 */
export class MsgEditRewardsPlan extends Message<MsgEditRewardsPlan> {
  /**
   * Sender is the address of the user editing the rewards plan.
   *
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * ID is the ID of the rewards plan to be edited.
   *
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * Amount is the amount of rewards to be distributed.
   *
   * @generated from field: cosmos.base.v1beta1.Coin amount = 4;
   */
  amount?: Coin;

  /**
   * StartTime is the starting time of the plan.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 5;
   */
  startTime?: Timestamp;

  /**
   * EndTime is the ending time of the plan.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 6;
   */
  endTime?: Timestamp;

  /**
   * PoolsDistribution is the rewards distribution parameters for pools.
   *
   * @generated from field: milkyway.rewards.v1.Distribution pools_distribution = 7;
   */
  poolsDistribution?: Distribution;

  /**
   * OperatorsDistribution is the rewards distribution parameters for operators.
   *
   * @generated from field: milkyway.rewards.v1.Distribution operators_distribution = 8;
   */
  operatorsDistribution?: Distribution;

  /**
   * UsersDistribution is the rewards distribution parameters for users who
   * delegated directly to the service.
   *
   * @generated from field: milkyway.rewards.v1.UsersDistribution users_distribution = 9;
   */
  usersDistribution?: UsersDistribution;

  constructor(data?: PartialMessage<MsgEditRewardsPlan>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.MsgEditRewardsPlan";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "amount", kind: "message", T: Coin },
    { no: 5, name: "start_time", kind: "message", T: Timestamp },
    { no: 6, name: "end_time", kind: "message", T: Timestamp },
    { no: 7, name: "pools_distribution", kind: "message", T: Distribution },
    { no: 8, name: "operators_distribution", kind: "message", T: Distribution },
    { no: 9, name: "users_distribution", kind: "message", T: UsersDistribution },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgEditRewardsPlan {
    return new MsgEditRewardsPlan().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgEditRewardsPlan {
    return new MsgEditRewardsPlan().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgEditRewardsPlan {
    return new MsgEditRewardsPlan().fromJsonString(jsonString, options);
  }

  static equals(a: MsgEditRewardsPlan | PlainMessage<MsgEditRewardsPlan> | undefined, b: MsgEditRewardsPlan | PlainMessage<MsgEditRewardsPlan> | undefined): boolean {
    return proto3.util.equals(MsgEditRewardsPlan, a, b);
  }
}

/**
 * MsgEditRewardsPlanResponse is the return value of
 * MsgEditRewardsPlan.
 *
 * @generated from message milkyway.rewards.v1.MsgEditRewardsPlanResponse
 */
export class MsgEditRewardsPlanResponse extends Message<MsgEditRewardsPlanResponse> {
  constructor(data?: PartialMessage<MsgEditRewardsPlanResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.MsgEditRewardsPlanResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgEditRewardsPlanResponse {
    return new MsgEditRewardsPlanResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgEditRewardsPlanResponse {
    return new MsgEditRewardsPlanResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgEditRewardsPlanResponse {
    return new MsgEditRewardsPlanResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgEditRewardsPlanResponse | PlainMessage<MsgEditRewardsPlanResponse> | undefined, b: MsgEditRewardsPlanResponse | PlainMessage<MsgEditRewardsPlanResponse> | undefined): boolean {
    return proto3.util.equals(MsgEditRewardsPlanResponse, a, b);
  }
}

/**
 * MsgSetWithdrawAddress sets the withdraw address for a delegator(or an
 * operator when withdrawing commission).
 *
 * @generated from message milkyway.rewards.v1.MsgSetWithdrawAddress
 */
export class MsgSetWithdrawAddress extends Message<MsgSetWithdrawAddress> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string withdraw_address = 2;
   */
  withdrawAddress = "";

  constructor(data?: PartialMessage<MsgSetWithdrawAddress>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.MsgSetWithdrawAddress";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "withdraw_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetWithdrawAddress {
    return new MsgSetWithdrawAddress().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetWithdrawAddress {
    return new MsgSetWithdrawAddress().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetWithdrawAddress {
    return new MsgSetWithdrawAddress().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetWithdrawAddress | PlainMessage<MsgSetWithdrawAddress> | undefined, b: MsgSetWithdrawAddress | PlainMessage<MsgSetWithdrawAddress> | undefined): boolean {
    return proto3.util.equals(MsgSetWithdrawAddress, a, b);
  }
}

/**
 * MsgSetWithdrawAddressResponse defines the Msg/SetWithdrawAddress response
 * type.
 *
 * @generated from message milkyway.rewards.v1.MsgSetWithdrawAddressResponse
 */
export class MsgSetWithdrawAddressResponse extends Message<MsgSetWithdrawAddressResponse> {
  constructor(data?: PartialMessage<MsgSetWithdrawAddressResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.MsgSetWithdrawAddressResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetWithdrawAddressResponse {
    return new MsgSetWithdrawAddressResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetWithdrawAddressResponse {
    return new MsgSetWithdrawAddressResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetWithdrawAddressResponse {
    return new MsgSetWithdrawAddressResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetWithdrawAddressResponse | PlainMessage<MsgSetWithdrawAddressResponse> | undefined, b: MsgSetWithdrawAddressResponse | PlainMessage<MsgSetWithdrawAddressResponse> | undefined): boolean {
    return proto3.util.equals(MsgSetWithdrawAddressResponse, a, b);
  }
}

/**
 * MsgWithdrawDelegatorReward represents delegation withdrawal to a delegator
 * from a single delegation target.
 *
 * @generated from message milkyway.rewards.v1.MsgWithdrawDelegatorReward
 */
export class MsgWithdrawDelegatorReward extends Message<MsgWithdrawDelegatorReward> {
  /**
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress = "";

  /**
   * @generated from field: milkyway.restaking.v1.DelegationType delegation_type = 2;
   */
  delegationType = DelegationType.UNSPECIFIED;

  /**
   * @generated from field: uint32 delegation_target_id = 3;
   */
  delegationTargetId = 0;

  constructor(data?: PartialMessage<MsgWithdrawDelegatorReward>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.MsgWithdrawDelegatorReward";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "delegation_type", kind: "enum", T: proto3.getEnumType(DelegationType) },
    { no: 3, name: "delegation_target_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgWithdrawDelegatorReward {
    return new MsgWithdrawDelegatorReward().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgWithdrawDelegatorReward {
    return new MsgWithdrawDelegatorReward().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgWithdrawDelegatorReward {
    return new MsgWithdrawDelegatorReward().fromJsonString(jsonString, options);
  }

  static equals(a: MsgWithdrawDelegatorReward | PlainMessage<MsgWithdrawDelegatorReward> | undefined, b: MsgWithdrawDelegatorReward | PlainMessage<MsgWithdrawDelegatorReward> | undefined): boolean {
    return proto3.util.equals(MsgWithdrawDelegatorReward, a, b);
  }
}

/**
 * MsgWithdrawDelegatorRewardResponse defines the Msg/WithdrawDelegatorReward
 * response type.
 *
 * @generated from message milkyway.rewards.v1.MsgWithdrawDelegatorRewardResponse
 */
export class MsgWithdrawDelegatorRewardResponse extends Message<MsgWithdrawDelegatorRewardResponse> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 1;
   */
  amount: Coin[] = [];

  constructor(data?: PartialMessage<MsgWithdrawDelegatorRewardResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.MsgWithdrawDelegatorRewardResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgWithdrawDelegatorRewardResponse {
    return new MsgWithdrawDelegatorRewardResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgWithdrawDelegatorRewardResponse {
    return new MsgWithdrawDelegatorRewardResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgWithdrawDelegatorRewardResponse {
    return new MsgWithdrawDelegatorRewardResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgWithdrawDelegatorRewardResponse | PlainMessage<MsgWithdrawDelegatorRewardResponse> | undefined, b: MsgWithdrawDelegatorRewardResponse | PlainMessage<MsgWithdrawDelegatorRewardResponse> | undefined): boolean {
    return proto3.util.equals(MsgWithdrawDelegatorRewardResponse, a, b);
  }
}

/**
 * MsgWithdrawOperatorCommission withdraws the full commission to the operator.
 *
 * @generated from message milkyway.rewards.v1.MsgWithdrawOperatorCommission
 */
export class MsgWithdrawOperatorCommission extends Message<MsgWithdrawOperatorCommission> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: uint32 operator_id = 2;
   */
  operatorId = 0;

  constructor(data?: PartialMessage<MsgWithdrawOperatorCommission>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.MsgWithdrawOperatorCommission";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "operator_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgWithdrawOperatorCommission {
    return new MsgWithdrawOperatorCommission().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgWithdrawOperatorCommission {
    return new MsgWithdrawOperatorCommission().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgWithdrawOperatorCommission {
    return new MsgWithdrawOperatorCommission().fromJsonString(jsonString, options);
  }

  static equals(a: MsgWithdrawOperatorCommission | PlainMessage<MsgWithdrawOperatorCommission> | undefined, b: MsgWithdrawOperatorCommission | PlainMessage<MsgWithdrawOperatorCommission> | undefined): boolean {
    return proto3.util.equals(MsgWithdrawOperatorCommission, a, b);
  }
}

/**
 * MsgWithdrawOperatorCommissionResponse defines the
 * Msg/WithdrawOperatorCommission response type.
 *
 * @generated from message milkyway.rewards.v1.MsgWithdrawOperatorCommissionResponse
 */
export class MsgWithdrawOperatorCommissionResponse extends Message<MsgWithdrawOperatorCommissionResponse> {
  /**
   * Since: cosmos-sdk 0.46
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 1;
   */
  amount: Coin[] = [];

  constructor(data?: PartialMessage<MsgWithdrawOperatorCommissionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.MsgWithdrawOperatorCommissionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgWithdrawOperatorCommissionResponse {
    return new MsgWithdrawOperatorCommissionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgWithdrawOperatorCommissionResponse {
    return new MsgWithdrawOperatorCommissionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgWithdrawOperatorCommissionResponse {
    return new MsgWithdrawOperatorCommissionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgWithdrawOperatorCommissionResponse | PlainMessage<MsgWithdrawOperatorCommissionResponse> | undefined, b: MsgWithdrawOperatorCommissionResponse | PlainMessage<MsgWithdrawOperatorCommissionResponse> | undefined): boolean {
    return proto3.util.equals(MsgWithdrawOperatorCommissionResponse, a, b);
  }
}

/**
 * MsgUpdateParams defines the message structure for the UpdateParams gRPC
 * service method. It allows the authority to update the module parameters.
 *
 * @generated from message milkyway.rewards.v1.MsgUpdateParams
 */
export class MsgUpdateParams extends Message<MsgUpdateParams> {
  /**
   * Authority is the address that controls the module (defaults to x/gov unless
   * overwritten).
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * Params define the parameters to update.
   *
   * NOTE: All parameters must be supplied.
   *
   * @generated from field: milkyway.rewards.v1.Params params = 2;
   */
  params?: Params;

  constructor(data?: PartialMessage<MsgUpdateParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.MsgUpdateParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined, b: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParams, a, b);
  }
}

/**
 * MsgUpdateParamsResponse is the return value of MsgUpdateParams.
 *
 * @generated from message milkyway.rewards.v1.MsgUpdateParamsResponse
 */
export class MsgUpdateParamsResponse extends Message<MsgUpdateParamsResponse> {
  constructor(data?: PartialMessage<MsgUpdateParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.rewards.v1.MsgUpdateParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined, b: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParamsResponse, a, b);
  }
}

