// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file milkyway/operators/v1/params.proto (package milkyway.operators.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * Params defines the parameters for the operators module.
 *
 * @generated from message milkyway.operators.v1.Params
 */
export class Params extends Message<Params> {
  /**
   * OperatorRegistrationFee represents the fee that an operator must pay in
   * order to register itself with the network.
   * The fee is drawn from the MsgRegisterOperator sender's account and
   * transferred to the community pool.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin operator_registration_fee = 1;
   */
  operatorRegistrationFee: Coin[] = [];

  /**
   * DeactivationTime represents the amount of time that will pass between
   * the time that an operator signals its willingness to deactivate and the
   * time that it actually becomes inactive.
   *
   * @generated from field: int64 deactivation_time = 2;
   */
  deactivationTime = protoInt64.zero;

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.operators.v1.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "operator_registration_fee", kind: "message", T: Coin, repeated: true },
    { no: 2, name: "deactivation_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}

