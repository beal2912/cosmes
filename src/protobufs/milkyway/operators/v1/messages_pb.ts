// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file milkyway/operators/v1/messages.proto (package milkyway.operators.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
import { OperatorParams } from "./models_pb.js";
import { Params } from "./params_pb.js";

/**
 * MsgRegisterOperator defines the message structure for the RegisterOperator
 * gRPC service method. It allows an account to register a new operator that can
 * opt-in to validate various services. It requires a sender address as well as
 * the details of the operator to be registered.
 *
 * @generated from message milkyway.operators.v1.MsgRegisterOperator
 */
export class MsgRegisterOperator extends Message<MsgRegisterOperator> {
  /**
   * Sender is the address of the user registering the operator
   *
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * Moniker is the moniker of the operator
   *
   * @generated from field: string moniker = 2;
   */
  moniker = "";

  /**
   * Website is the website of the operator (optional)
   *
   * @generated from field: string website = 3;
   */
  website = "";

  /**
   * PictureURL is the URL of operator picture (optional)
   *
   * @generated from field: string picture_url = 4;
   */
  pictureUrl = "";

  /**
   * FeeAmount represents the fees that are going to be paid to create the
   * operator. These should always be greater or equals of any of the coins
   * specified inside the OperatorRegistrationFee field of the modules params.
   * If no fees are specified inside the module parameters, this field can be
   * omitted.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin fee_amount = 5;
   */
  feeAmount: Coin[] = [];

  constructor(data?: PartialMessage<MsgRegisterOperator>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.operators.v1.MsgRegisterOperator";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "moniker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "website", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "picture_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "fee_amount", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRegisterOperator {
    return new MsgRegisterOperator().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRegisterOperator {
    return new MsgRegisterOperator().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRegisterOperator {
    return new MsgRegisterOperator().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRegisterOperator | PlainMessage<MsgRegisterOperator> | undefined, b: MsgRegisterOperator | PlainMessage<MsgRegisterOperator> | undefined): boolean {
    return proto3.util.equals(MsgRegisterOperator, a, b);
  }
}

/**
 * MsgRegisterOperatorResponse is the return value of MsgRegisterOperator.
 * It returns the newly created operator ID.
 *
 * @generated from message milkyway.operators.v1.MsgRegisterOperatorResponse
 */
export class MsgRegisterOperatorResponse extends Message<MsgRegisterOperatorResponse> {
  /**
   * NewOperatorID is the ID of the newly registered operator
   *
   * @generated from field: uint32 new_operator_id = 1;
   */
  newOperatorId = 0;

  constructor(data?: PartialMessage<MsgRegisterOperatorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.operators.v1.MsgRegisterOperatorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "new_operator_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRegisterOperatorResponse {
    return new MsgRegisterOperatorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRegisterOperatorResponse {
    return new MsgRegisterOperatorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRegisterOperatorResponse {
    return new MsgRegisterOperatorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRegisterOperatorResponse | PlainMessage<MsgRegisterOperatorResponse> | undefined, b: MsgRegisterOperatorResponse | PlainMessage<MsgRegisterOperatorResponse> | undefined): boolean {
    return proto3.util.equals(MsgRegisterOperatorResponse, a, b);
  }
}

/**
 * MsgUpdateOperator defines the message structure for the UpdateOperator gRPC
 * service method. It allows the operator owner to update the details of an
 * existing operator.
 *
 * @generated from message milkyway.operators.v1.MsgUpdateOperator
 */
export class MsgUpdateOperator extends Message<MsgUpdateOperator> {
  /**
   * Sender is the address of the user updating the operator
   *
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * OperatorID represents the ID of the operator to be updated
   *
   * @generated from field: uint32 operator_id = 2;
   */
  operatorId = 0;

  /**
   * Moniker is the new moniker of the operator.
   * If it shouldn't be changed, use [do-not-modify] instead.
   *
   * @generated from field: string moniker = 3;
   */
  moniker = "";

  /**
   * Website is the new website of the operator.
   * If it shouldn't be changed, use [do-not-modify] instead.
   *
   * @generated from field: string website = 4;
   */
  website = "";

  /**
   * PictureURL is the new URL of the operator picture.
   * If it shouldn't be changed, use [do-not-modify] instead.
   *
   * @generated from field: string picture_url = 5;
   */
  pictureUrl = "";

  constructor(data?: PartialMessage<MsgUpdateOperator>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.operators.v1.MsgUpdateOperator";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "operator_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "moniker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "website", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "picture_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateOperator {
    return new MsgUpdateOperator().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateOperator {
    return new MsgUpdateOperator().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateOperator {
    return new MsgUpdateOperator().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateOperator | PlainMessage<MsgUpdateOperator> | undefined, b: MsgUpdateOperator | PlainMessage<MsgUpdateOperator> | undefined): boolean {
    return proto3.util.equals(MsgUpdateOperator, a, b);
  }
}

/**
 * MsgUpdateOperatorResponse is the return value of MsgUpdateOperator.
 *
 * @generated from message milkyway.operators.v1.MsgUpdateOperatorResponse
 */
export class MsgUpdateOperatorResponse extends Message<MsgUpdateOperatorResponse> {
  constructor(data?: PartialMessage<MsgUpdateOperatorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.operators.v1.MsgUpdateOperatorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateOperatorResponse {
    return new MsgUpdateOperatorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateOperatorResponse {
    return new MsgUpdateOperatorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateOperatorResponse {
    return new MsgUpdateOperatorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateOperatorResponse | PlainMessage<MsgUpdateOperatorResponse> | undefined, b: MsgUpdateOperatorResponse | PlainMessage<MsgUpdateOperatorResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateOperatorResponse, a, b);
  }
}

/**
 * MsgDeactivateOperator defines the message structure for the
 * DeactivateOperator gRPC service method. It allows the operator owner to
 * signal that the operator will become inactive. This should be used to signal
 * users that the operator is going to stop performing services and they should
 * switch to another operator.
 *
 * @generated from message milkyway.operators.v1.MsgDeactivateOperator
 */
export class MsgDeactivateOperator extends Message<MsgDeactivateOperator> {
  /**
   * Sender is the address of the user deactivating the operator
   *
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * OperatorID represents the ID of the operator to be deregistered
   *
   * @generated from field: uint32 operator_id = 2;
   */
  operatorId = 0;

  constructor(data?: PartialMessage<MsgDeactivateOperator>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.operators.v1.MsgDeactivateOperator";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "operator_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDeactivateOperator {
    return new MsgDeactivateOperator().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDeactivateOperator {
    return new MsgDeactivateOperator().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDeactivateOperator {
    return new MsgDeactivateOperator().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDeactivateOperator | PlainMessage<MsgDeactivateOperator> | undefined, b: MsgDeactivateOperator | PlainMessage<MsgDeactivateOperator> | undefined): boolean {
    return proto3.util.equals(MsgDeactivateOperator, a, b);
  }
}

/**
 * MsgDeactivateOperatorResponse is the return value of MsgDeactivateOperator.
 *
 * @generated from message milkyway.operators.v1.MsgDeactivateOperatorResponse
 */
export class MsgDeactivateOperatorResponse extends Message<MsgDeactivateOperatorResponse> {
  constructor(data?: PartialMessage<MsgDeactivateOperatorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.operators.v1.MsgDeactivateOperatorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDeactivateOperatorResponse {
    return new MsgDeactivateOperatorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDeactivateOperatorResponse {
    return new MsgDeactivateOperatorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDeactivateOperatorResponse {
    return new MsgDeactivateOperatorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDeactivateOperatorResponse | PlainMessage<MsgDeactivateOperatorResponse> | undefined, b: MsgDeactivateOperatorResponse | PlainMessage<MsgDeactivateOperatorResponse> | undefined): boolean {
    return proto3.util.equals(MsgDeactivateOperatorResponse, a, b);
  }
}

/**
 * MsgReactivateOperator defines the message structure for the
 * ReactivateOperator gRPC service method. It allows the operator owner to
 * reactivate an inactive operator.
 *
 * @generated from message milkyway.operators.v1.MsgReactivateOperator
 */
export class MsgReactivateOperator extends Message<MsgReactivateOperator> {
  /**
   * Sender is the address of the user reactivating the operator
   *
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * OperatorID represents the ID of the operator to be reactivated
   *
   * @generated from field: uint32 operator_id = 2;
   */
  operatorId = 0;

  constructor(data?: PartialMessage<MsgReactivateOperator>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.operators.v1.MsgReactivateOperator";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "operator_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgReactivateOperator {
    return new MsgReactivateOperator().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgReactivateOperator {
    return new MsgReactivateOperator().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgReactivateOperator {
    return new MsgReactivateOperator().fromJsonString(jsonString, options);
  }

  static equals(a: MsgReactivateOperator | PlainMessage<MsgReactivateOperator> | undefined, b: MsgReactivateOperator | PlainMessage<MsgReactivateOperator> | undefined): boolean {
    return proto3.util.equals(MsgReactivateOperator, a, b);
  }
}

/**
 * MsgReactivateOperatorResponse is the return value of MsgReactivateOperator.
 *
 * @generated from message milkyway.operators.v1.MsgReactivateOperatorResponse
 */
export class MsgReactivateOperatorResponse extends Message<MsgReactivateOperatorResponse> {
  constructor(data?: PartialMessage<MsgReactivateOperatorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.operators.v1.MsgReactivateOperatorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgReactivateOperatorResponse {
    return new MsgReactivateOperatorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgReactivateOperatorResponse {
    return new MsgReactivateOperatorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgReactivateOperatorResponse {
    return new MsgReactivateOperatorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgReactivateOperatorResponse | PlainMessage<MsgReactivateOperatorResponse> | undefined, b: MsgReactivateOperatorResponse | PlainMessage<MsgReactivateOperatorResponse> | undefined): boolean {
    return proto3.util.equals(MsgReactivateOperatorResponse, a, b);
  }
}

/**
 * MsgDeleteOperator defines the message structure for the
 * DeleteOperator gRPC service method. It allows the operator owner to
 * delete a deactivated operator.
 *
 * @generated from message milkyway.operators.v1.MsgDeleteOperator
 */
export class MsgDeleteOperator extends Message<MsgDeleteOperator> {
  /**
   * Sender is the address of the user deleting the operator
   *
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * OperatorID represents the ID of the operator to be deleted
   *
   * @generated from field: uint32 operator_id = 2;
   */
  operatorId = 0;

  constructor(data?: PartialMessage<MsgDeleteOperator>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.operators.v1.MsgDeleteOperator";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "operator_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDeleteOperator {
    return new MsgDeleteOperator().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDeleteOperator {
    return new MsgDeleteOperator().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDeleteOperator {
    return new MsgDeleteOperator().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDeleteOperator | PlainMessage<MsgDeleteOperator> | undefined, b: MsgDeleteOperator | PlainMessage<MsgDeleteOperator> | undefined): boolean {
    return proto3.util.equals(MsgDeleteOperator, a, b);
  }
}

/**
 * MsgDeleteOperatorResponse is the return value of MsgDeleteOperator.
 *
 * @generated from message milkyway.operators.v1.MsgDeleteOperatorResponse
 */
export class MsgDeleteOperatorResponse extends Message<MsgDeleteOperatorResponse> {
  constructor(data?: PartialMessage<MsgDeleteOperatorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.operators.v1.MsgDeleteOperatorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDeleteOperatorResponse {
    return new MsgDeleteOperatorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDeleteOperatorResponse {
    return new MsgDeleteOperatorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDeleteOperatorResponse {
    return new MsgDeleteOperatorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDeleteOperatorResponse | PlainMessage<MsgDeleteOperatorResponse> | undefined, b: MsgDeleteOperatorResponse | PlainMessage<MsgDeleteOperatorResponse> | undefined): boolean {
    return proto3.util.equals(MsgDeleteOperatorResponse, a, b);
  }
}

/**
 * MsgSetOperatorParams defines the message structure for the
 * SetOperatorParams gRPC service method. It allows the operator admin to
 * update the operator's parameters.
 *
 * @generated from message milkyway.operators.v1.MsgSetOperatorParams
 */
export class MsgSetOperatorParams extends Message<MsgSetOperatorParams> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: uint32 operator_id = 2;
   */
  operatorId = 0;

  /**
   * @generated from field: milkyway.operators.v1.OperatorParams params = 3;
   */
  params?: OperatorParams;

  constructor(data?: PartialMessage<MsgSetOperatorParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.operators.v1.MsgSetOperatorParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "operator_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "params", kind: "message", T: OperatorParams },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetOperatorParams {
    return new MsgSetOperatorParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetOperatorParams {
    return new MsgSetOperatorParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetOperatorParams {
    return new MsgSetOperatorParams().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetOperatorParams | PlainMessage<MsgSetOperatorParams> | undefined, b: MsgSetOperatorParams | PlainMessage<MsgSetOperatorParams> | undefined): boolean {
    return proto3.util.equals(MsgSetOperatorParams, a, b);
  }
}

/**
 * MsgSetOperatorParamsResponse is the return value of
 * MsgSetOperatorParams.
 *
 * @generated from message milkyway.operators.v1.MsgSetOperatorParamsResponse
 */
export class MsgSetOperatorParamsResponse extends Message<MsgSetOperatorParamsResponse> {
  constructor(data?: PartialMessage<MsgSetOperatorParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.operators.v1.MsgSetOperatorParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetOperatorParamsResponse {
    return new MsgSetOperatorParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetOperatorParamsResponse {
    return new MsgSetOperatorParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetOperatorParamsResponse {
    return new MsgSetOperatorParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetOperatorParamsResponse | PlainMessage<MsgSetOperatorParamsResponse> | undefined, b: MsgSetOperatorParamsResponse | PlainMessage<MsgSetOperatorParamsResponse> | undefined): boolean {
    return proto3.util.equals(MsgSetOperatorParamsResponse, a, b);
  }
}

/**
 * MsgTransferOperatorOwnership defines the message structure for the
 * TransferOperatorOwnership gRPC service method. It allows an operator admin to
 * transfer the ownership of the operator to another account.
 *
 * @generated from message milkyway.operators.v1.MsgTransferOperatorOwnership
 */
export class MsgTransferOperatorOwnership extends Message<MsgTransferOperatorOwnership> {
  /**
   * Sender is the address of the user transferring the ownership
   *
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * OperatorID represents the ID of the operator to transfer ownership
   *
   * @generated from field: uint32 operator_id = 2;
   */
  operatorId = 0;

  /**
   * NewAdmin is the address of the new admin of the operator
   *
   * @generated from field: string new_admin = 3;
   */
  newAdmin = "";

  constructor(data?: PartialMessage<MsgTransferOperatorOwnership>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.operators.v1.MsgTransferOperatorOwnership";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "operator_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "new_admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgTransferOperatorOwnership {
    return new MsgTransferOperatorOwnership().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgTransferOperatorOwnership {
    return new MsgTransferOperatorOwnership().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgTransferOperatorOwnership {
    return new MsgTransferOperatorOwnership().fromJsonString(jsonString, options);
  }

  static equals(a: MsgTransferOperatorOwnership | PlainMessage<MsgTransferOperatorOwnership> | undefined, b: MsgTransferOperatorOwnership | PlainMessage<MsgTransferOperatorOwnership> | undefined): boolean {
    return proto3.util.equals(MsgTransferOperatorOwnership, a, b);
  }
}

/**
 * MsgTransferOperatorOwnershipResponse is the return value of
 * MsgTransferOperatorOwnership.
 *
 * @generated from message milkyway.operators.v1.MsgTransferOperatorOwnershipResponse
 */
export class MsgTransferOperatorOwnershipResponse extends Message<MsgTransferOperatorOwnershipResponse> {
  constructor(data?: PartialMessage<MsgTransferOperatorOwnershipResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.operators.v1.MsgTransferOperatorOwnershipResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgTransferOperatorOwnershipResponse {
    return new MsgTransferOperatorOwnershipResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgTransferOperatorOwnershipResponse {
    return new MsgTransferOperatorOwnershipResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgTransferOperatorOwnershipResponse {
    return new MsgTransferOperatorOwnershipResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgTransferOperatorOwnershipResponse | PlainMessage<MsgTransferOperatorOwnershipResponse> | undefined, b: MsgTransferOperatorOwnershipResponse | PlainMessage<MsgTransferOperatorOwnershipResponse> | undefined): boolean {
    return proto3.util.equals(MsgTransferOperatorOwnershipResponse, a, b);
  }
}

/**
 * MsgUpdateParams defines the message structure for the UpdateParams gRPC
 * service method. It allows the authority to update the module parameters.
 *
 * @generated from message milkyway.operators.v1.MsgUpdateParams
 */
export class MsgUpdateParams extends Message<MsgUpdateParams> {
  /**
   * Authority is the address that controls the module (defaults to x/gov unless
   * overwritten).
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * Params define the parameters to update.
   *
   * NOTE: All parameters must be supplied.
   *
   * @generated from field: milkyway.operators.v1.Params params = 2;
   */
  params?: Params;

  constructor(data?: PartialMessage<MsgUpdateParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.operators.v1.MsgUpdateParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined, b: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParams, a, b);
  }
}

/**
 * MsgUpdateParamsResponse is the return value of MsgUpdateParams.
 *
 * @generated from message milkyway.operators.v1.MsgUpdateParamsResponse
 */
export class MsgUpdateParamsResponse extends Message<MsgUpdateParamsResponse> {
  constructor(data?: PartialMessage<MsgUpdateParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.operators.v1.MsgUpdateParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined, b: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParamsResponse, a, b);
  }
}

