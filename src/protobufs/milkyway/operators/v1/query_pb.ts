// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file milkyway/operators/v1/query.proto (package milkyway.operators.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Operator, OperatorParams } from "./models_pb.js";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination_pb.js";
import { Params } from "./params_pb.js";

/**
 * QueryOperatorRequest is the request type for the Query/Operator RPC method.
 *
 * @generated from message milkyway.operators.v1.QueryOperatorRequest
 */
export class QueryOperatorRequest extends Message<QueryOperatorRequest> {
  /**
   * OperatorId is the ID of the operator to query
   *
   * @generated from field: uint32 operator_id = 1;
   */
  operatorId = 0;

  constructor(data?: PartialMessage<QueryOperatorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.operators.v1.QueryOperatorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "operator_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOperatorRequest {
    return new QueryOperatorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOperatorRequest {
    return new QueryOperatorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOperatorRequest {
    return new QueryOperatorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOperatorRequest | PlainMessage<QueryOperatorRequest> | undefined, b: QueryOperatorRequest | PlainMessage<QueryOperatorRequest> | undefined): boolean {
    return proto3.util.equals(QueryOperatorRequest, a, b);
  }
}

/**
 * QueryOperatorResponse is the response type for the Query/Operator RPC method.
 *
 * @generated from message milkyway.operators.v1.QueryOperatorResponse
 */
export class QueryOperatorResponse extends Message<QueryOperatorResponse> {
  /**
   * @generated from field: milkyway.operators.v1.Operator operator = 1;
   */
  operator?: Operator;

  constructor(data?: PartialMessage<QueryOperatorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.operators.v1.QueryOperatorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "operator", kind: "message", T: Operator },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOperatorResponse {
    return new QueryOperatorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOperatorResponse {
    return new QueryOperatorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOperatorResponse {
    return new QueryOperatorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOperatorResponse | PlainMessage<QueryOperatorResponse> | undefined, b: QueryOperatorResponse | PlainMessage<QueryOperatorResponse> | undefined): boolean {
    return proto3.util.equals(QueryOperatorResponse, a, b);
  }
}

/**
 * QueryOperatorParamsRequest is the request type for the Query/OperatorParams
 * RPC method.
 *
 * @generated from message milkyway.operators.v1.QueryOperatorParamsRequest
 */
export class QueryOperatorParamsRequest extends Message<QueryOperatorParamsRequest> {
  /**
   * OperatorID is the ID of the operator for which to query the params
   *
   * @generated from field: uint32 operator_id = 1;
   */
  operatorId = 0;

  constructor(data?: PartialMessage<QueryOperatorParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.operators.v1.QueryOperatorParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "operator_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOperatorParamsRequest {
    return new QueryOperatorParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOperatorParamsRequest {
    return new QueryOperatorParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOperatorParamsRequest {
    return new QueryOperatorParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOperatorParamsRequest | PlainMessage<QueryOperatorParamsRequest> | undefined, b: QueryOperatorParamsRequest | PlainMessage<QueryOperatorParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryOperatorParamsRequest, a, b);
  }
}

/**
 * QueryOperatorParamsResponse is the response type for the Query/OperatorParams
 * RPC method.
 *
 * @generated from message milkyway.operators.v1.QueryOperatorParamsResponse
 */
export class QueryOperatorParamsResponse extends Message<QueryOperatorParamsResponse> {
  /**
   * @generated from field: milkyway.operators.v1.OperatorParams operator_params = 1;
   */
  operatorParams?: OperatorParams;

  constructor(data?: PartialMessage<QueryOperatorParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.operators.v1.QueryOperatorParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "operator_params", kind: "message", T: OperatorParams },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOperatorParamsResponse {
    return new QueryOperatorParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOperatorParamsResponse {
    return new QueryOperatorParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOperatorParamsResponse {
    return new QueryOperatorParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOperatorParamsResponse | PlainMessage<QueryOperatorParamsResponse> | undefined, b: QueryOperatorParamsResponse | PlainMessage<QueryOperatorParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryOperatorParamsResponse, a, b);
  }
}

/**
 * QueryOperatorsRequest is the request type for the Query/Operators RPC method.
 *
 * @generated from message milkyway.operators.v1.QueryOperatorsRequest
 */
export class QueryOperatorsRequest extends Message<QueryOperatorsRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryOperatorsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.operators.v1.QueryOperatorsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOperatorsRequest {
    return new QueryOperatorsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOperatorsRequest {
    return new QueryOperatorsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOperatorsRequest {
    return new QueryOperatorsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOperatorsRequest | PlainMessage<QueryOperatorsRequest> | undefined, b: QueryOperatorsRequest | PlainMessage<QueryOperatorsRequest> | undefined): boolean {
    return proto3.util.equals(QueryOperatorsRequest, a, b);
  }
}

/**
 * QueryOperatorsResponse is the response type for the Query/Operators RPC
 * method.
 *
 * @generated from message milkyway.operators.v1.QueryOperatorsResponse
 */
export class QueryOperatorsResponse extends Message<QueryOperatorsResponse> {
  /**
   * Operators is the list of operators
   *
   * @generated from field: repeated milkyway.operators.v1.Operator operators = 1;
   */
  operators: Operator[] = [];

  /**
   * Pagination defines the pagination response
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryOperatorsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.operators.v1.QueryOperatorsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "operators", kind: "message", T: Operator, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOperatorsResponse {
    return new QueryOperatorsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOperatorsResponse {
    return new QueryOperatorsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOperatorsResponse {
    return new QueryOperatorsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOperatorsResponse | PlainMessage<QueryOperatorsResponse> | undefined, b: QueryOperatorsResponse | PlainMessage<QueryOperatorsResponse> | undefined): boolean {
    return proto3.util.equals(QueryOperatorsResponse, a, b);
  }
}

/**
 * QueryParamsRequest is the request type for the Query/Params RPC method.
 *
 * @generated from message milkyway.operators.v1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.operators.v1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 *
 * @generated from message milkyway.operators.v1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * @generated from field: milkyway.operators.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.operators.v1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

