// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file milkyway/services/v1/messages.proto (package milkyway.services.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
import { ServiceParams } from "./models_pb.js";
import { Params } from "./params_pb.js";

/**
 * MsgCreateServiceResponse defines the message structure for the
 * CreateService gRPC service method. It allows an account to register a new
 * service that can be validated by operators. It requires a sender address
 * as well as the details of the service to be registered.
 *
 * @generated from message milkyway.services.v1.MsgCreateService
 */
export class MsgCreateService extends Message<MsgCreateService> {
  /**
   * Sender is the address of the user registering the service
   *
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * Name is the name of the service
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * Description is the description of the service
   *
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * Website is the website of the service
   *
   * @generated from field: string website = 4;
   */
  website = "";

  /**
   * PictureURL is the URL of the service picture
   *
   * @generated from field: string picture_url = 5;
   */
  pictureUrl = "";

  /**
   * FeeAmount represents the fees that are going to be paid to create the
   * service. These should always be greater or equals of any of the coins
   * specified inside the ServiceRegistrationFee field of the modules params.
   * If no fees are specified inside the module parameters, this field can be
   * omitted.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin fee_amount = 6;
   */
  feeAmount: Coin[] = [];

  constructor(data?: PartialMessage<MsgCreateService>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.services.v1.MsgCreateService";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "website", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "picture_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "fee_amount", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateService {
    return new MsgCreateService().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateService {
    return new MsgCreateService().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateService {
    return new MsgCreateService().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateService | PlainMessage<MsgCreateService> | undefined, b: MsgCreateService | PlainMessage<MsgCreateService> | undefined): boolean {
    return proto3.util.equals(MsgCreateService, a, b);
  }
}

/**
 * MsgCreateServiceResponse is the return value of MsgCreateService.
 * It returns the newly created service ID.
 *
 * @generated from message milkyway.services.v1.MsgCreateServiceResponse
 */
export class MsgCreateServiceResponse extends Message<MsgCreateServiceResponse> {
  /**
   * NewServiceID is the ID of the newly registered service
   *
   * @generated from field: uint32 new_service_id = 1;
   */
  newServiceId = 0;

  constructor(data?: PartialMessage<MsgCreateServiceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.services.v1.MsgCreateServiceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "new_service_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateServiceResponse {
    return new MsgCreateServiceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateServiceResponse {
    return new MsgCreateServiceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateServiceResponse {
    return new MsgCreateServiceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateServiceResponse | PlainMessage<MsgCreateServiceResponse> | undefined, b: MsgCreateServiceResponse | PlainMessage<MsgCreateServiceResponse> | undefined): boolean {
    return proto3.util.equals(MsgCreateServiceResponse, a, b);
  }
}

/**
 * MsgUpdateService defines the message structure for the UpdateService gRPC
 * service method. It allows the service admin to update the details of
 * an existing service.
 *
 * @generated from message milkyway.services.v1.MsgUpdateService
 */
export class MsgUpdateService extends Message<MsgUpdateService> {
  /**
   * Sender is the address of the user updating the service
   *
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * ID represents the ID of the service to be updated
   *
   * @generated from field: uint32 service_id = 2;
   */
  serviceId = 0;

  /**
   * Name is the new name of the service.
   * If it shouldn't be changed, use [do-not-modify] instead.
   *
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * Description is the new description of the service.
   * If it shouldn't be changed, use [do-not-modify] instead.
   *
   * @generated from field: string description = 4;
   */
  description = "";

  /**
   * Website is the new website of the service.
   * If it shouldn't be changed, use [do-not-modify] instead.
   *
   * @generated from field: string website = 5;
   */
  website = "";

  /**
   * PictureURL is the new URL of the service picture.
   * If it shouldn't be changed, use [do-not-modify] instead.
   *
   * @generated from field: string picture_url = 6;
   */
  pictureUrl = "";

  constructor(data?: PartialMessage<MsgUpdateService>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.services.v1.MsgUpdateService";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "service_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "website", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "picture_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateService {
    return new MsgUpdateService().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateService {
    return new MsgUpdateService().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateService {
    return new MsgUpdateService().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateService | PlainMessage<MsgUpdateService> | undefined, b: MsgUpdateService | PlainMessage<MsgUpdateService> | undefined): boolean {
    return proto3.util.equals(MsgUpdateService, a, b);
  }
}

/**
 * MsgUpdateServiceResponse is the return value of MsgUpdateService.
 *
 * @generated from message milkyway.services.v1.MsgUpdateServiceResponse
 */
export class MsgUpdateServiceResponse extends Message<MsgUpdateServiceResponse> {
  constructor(data?: PartialMessage<MsgUpdateServiceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.services.v1.MsgUpdateServiceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateServiceResponse {
    return new MsgUpdateServiceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateServiceResponse {
    return new MsgUpdateServiceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateServiceResponse {
    return new MsgUpdateServiceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateServiceResponse | PlainMessage<MsgUpdateServiceResponse> | undefined, b: MsgUpdateServiceResponse | PlainMessage<MsgUpdateServiceResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateServiceResponse, a, b);
  }
}

/**
 * MsgActivateService defines the message structure for the ActivateService gRPC
 *
 * @generated from message milkyway.services.v1.MsgActivateService
 */
export class MsgActivateService extends Message<MsgActivateService> {
  /**
   * Sender is the address of the user that wants to activate the service
   *
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * ServiceID represents the ID of the service to be activated
   *
   * @generated from field: uint32 service_id = 2;
   */
  serviceId = 0;

  constructor(data?: PartialMessage<MsgActivateService>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.services.v1.MsgActivateService";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "service_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgActivateService {
    return new MsgActivateService().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgActivateService {
    return new MsgActivateService().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgActivateService {
    return new MsgActivateService().fromJsonString(jsonString, options);
  }

  static equals(a: MsgActivateService | PlainMessage<MsgActivateService> | undefined, b: MsgActivateService | PlainMessage<MsgActivateService> | undefined): boolean {
    return proto3.util.equals(MsgActivateService, a, b);
  }
}

/**
 * MsgActivateServiceResponse is the return value of MsgActivateService.
 *
 * @generated from message milkyway.services.v1.MsgActivateServiceResponse
 */
export class MsgActivateServiceResponse extends Message<MsgActivateServiceResponse> {
  constructor(data?: PartialMessage<MsgActivateServiceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.services.v1.MsgActivateServiceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgActivateServiceResponse {
    return new MsgActivateServiceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgActivateServiceResponse {
    return new MsgActivateServiceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgActivateServiceResponse {
    return new MsgActivateServiceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgActivateServiceResponse | PlainMessage<MsgActivateServiceResponse> | undefined, b: MsgActivateServiceResponse | PlainMessage<MsgActivateServiceResponse> | undefined): boolean {
    return proto3.util.equals(MsgActivateServiceResponse, a, b);
  }
}

/**
 * MsgDeactivateService defines the message structure for the DeactivateService
 * gRPC service method. It allows the service admin to deactivate an existing
 * service.
 *
 * @generated from message milkyway.services.v1.MsgDeactivateService
 */
export class MsgDeactivateService extends Message<MsgDeactivateService> {
  /**
   * Sender is the address of the user that wants to deactivate the service
   *
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * ServiceID represents the ID of the service to be deactivated
   *
   * @generated from field: uint32 service_id = 2;
   */
  serviceId = 0;

  constructor(data?: PartialMessage<MsgDeactivateService>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.services.v1.MsgDeactivateService";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "service_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDeactivateService {
    return new MsgDeactivateService().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDeactivateService {
    return new MsgDeactivateService().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDeactivateService {
    return new MsgDeactivateService().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDeactivateService | PlainMessage<MsgDeactivateService> | undefined, b: MsgDeactivateService | PlainMessage<MsgDeactivateService> | undefined): boolean {
    return proto3.util.equals(MsgDeactivateService, a, b);
  }
}

/**
 * MsgDeactivateServiceResponse is the return value of MsgDeactivateService.
 *
 * @generated from message milkyway.services.v1.MsgDeactivateServiceResponse
 */
export class MsgDeactivateServiceResponse extends Message<MsgDeactivateServiceResponse> {
  constructor(data?: PartialMessage<MsgDeactivateServiceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.services.v1.MsgDeactivateServiceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDeactivateServiceResponse {
    return new MsgDeactivateServiceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDeactivateServiceResponse {
    return new MsgDeactivateServiceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDeactivateServiceResponse {
    return new MsgDeactivateServiceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDeactivateServiceResponse | PlainMessage<MsgDeactivateServiceResponse> | undefined, b: MsgDeactivateServiceResponse | PlainMessage<MsgDeactivateServiceResponse> | undefined): boolean {
    return proto3.util.equals(MsgDeactivateServiceResponse, a, b);
  }
}

/**
 * MsgDeleteService defines the message structure for the DeleteService
 * gRPC service method. It allows the service admin to delete a previously
 * deactivated service
 *
 * @generated from message milkyway.services.v1.MsgDeleteService
 */
export class MsgDeleteService extends Message<MsgDeleteService> {
  /**
   * Sender is the address of the user that wants to delete the service
   *
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * ServiceID represents the ID of the service to be deleted
   *
   * @generated from field: uint32 service_id = 2;
   */
  serviceId = 0;

  constructor(data?: PartialMessage<MsgDeleteService>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.services.v1.MsgDeleteService";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "service_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDeleteService {
    return new MsgDeleteService().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDeleteService {
    return new MsgDeleteService().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDeleteService {
    return new MsgDeleteService().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDeleteService | PlainMessage<MsgDeleteService> | undefined, b: MsgDeleteService | PlainMessage<MsgDeleteService> | undefined): boolean {
    return proto3.util.equals(MsgDeleteService, a, b);
  }
}

/**
 * MsgDeleteServiceResponse is the return value of MsgDeleteService.
 *
 * @generated from message milkyway.services.v1.MsgDeleteServiceResponse
 */
export class MsgDeleteServiceResponse extends Message<MsgDeleteServiceResponse> {
  constructor(data?: PartialMessage<MsgDeleteServiceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.services.v1.MsgDeleteServiceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDeleteServiceResponse {
    return new MsgDeleteServiceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDeleteServiceResponse {
    return new MsgDeleteServiceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDeleteServiceResponse {
    return new MsgDeleteServiceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDeleteServiceResponse | PlainMessage<MsgDeleteServiceResponse> | undefined, b: MsgDeleteServiceResponse | PlainMessage<MsgDeleteServiceResponse> | undefined): boolean {
    return proto3.util.equals(MsgDeleteServiceResponse, a, b);
  }
}

/**
 * MsgTransferServiceOwnership defines the message structure for the
 * TransferServiceOwnership gRPC service method. It allows a service admin to
 * transfer the ownership of the service to another account.
 *
 * @generated from message milkyway.services.v1.MsgTransferServiceOwnership
 */
export class MsgTransferServiceOwnership extends Message<MsgTransferServiceOwnership> {
  /**
   * Sender is the address of the user transferring the ownership
   *
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * ServiceID represents the ID of the service to transfer ownership
   *
   * @generated from field: uint32 service_id = 2;
   */
  serviceId = 0;

  /**
   * NewAdmin is the address of the new admin of the service
   *
   * @generated from field: string new_admin = 3;
   */
  newAdmin = "";

  constructor(data?: PartialMessage<MsgTransferServiceOwnership>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.services.v1.MsgTransferServiceOwnership";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "service_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "new_admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgTransferServiceOwnership {
    return new MsgTransferServiceOwnership().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgTransferServiceOwnership {
    return new MsgTransferServiceOwnership().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgTransferServiceOwnership {
    return new MsgTransferServiceOwnership().fromJsonString(jsonString, options);
  }

  static equals(a: MsgTransferServiceOwnership | PlainMessage<MsgTransferServiceOwnership> | undefined, b: MsgTransferServiceOwnership | PlainMessage<MsgTransferServiceOwnership> | undefined): boolean {
    return proto3.util.equals(MsgTransferServiceOwnership, a, b);
  }
}

/**
 * MsgTransferServiceOwnershipResponse is the return value of
 * MsgTransferServiceOwnership.
 *
 * @generated from message milkyway.services.v1.MsgTransferServiceOwnershipResponse
 */
export class MsgTransferServiceOwnershipResponse extends Message<MsgTransferServiceOwnershipResponse> {
  constructor(data?: PartialMessage<MsgTransferServiceOwnershipResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.services.v1.MsgTransferServiceOwnershipResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgTransferServiceOwnershipResponse {
    return new MsgTransferServiceOwnershipResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgTransferServiceOwnershipResponse {
    return new MsgTransferServiceOwnershipResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgTransferServiceOwnershipResponse {
    return new MsgTransferServiceOwnershipResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgTransferServiceOwnershipResponse | PlainMessage<MsgTransferServiceOwnershipResponse> | undefined, b: MsgTransferServiceOwnershipResponse | PlainMessage<MsgTransferServiceOwnershipResponse> | undefined): boolean {
    return proto3.util.equals(MsgTransferServiceOwnershipResponse, a, b);
  }
}

/**
 * MsgSetServiceParams defines the message structure for the
 * SetServiceParams gRPC service method. It allows a service admin to
 * update the parameters of a service.
 *
 * @generated from message milkyway.services.v1.MsgSetServiceParams
 */
export class MsgSetServiceParams extends Message<MsgSetServiceParams> {
  /**
   * Sender is the address of the user setting the parameters
   *
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * ServiceID is the ID of the service whose parameters are being set
   *
   * @generated from field: uint32 service_id = 2;
   */
  serviceId = 0;

  /**
   * ServiceParams defines the new parameters of the service
   *
   * @generated from field: milkyway.services.v1.ServiceParams service_params = 3;
   */
  serviceParams?: ServiceParams;

  constructor(data?: PartialMessage<MsgSetServiceParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.services.v1.MsgSetServiceParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "service_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "service_params", kind: "message", T: ServiceParams },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetServiceParams {
    return new MsgSetServiceParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetServiceParams {
    return new MsgSetServiceParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetServiceParams {
    return new MsgSetServiceParams().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetServiceParams | PlainMessage<MsgSetServiceParams> | undefined, b: MsgSetServiceParams | PlainMessage<MsgSetServiceParams> | undefined): boolean {
    return proto3.util.equals(MsgSetServiceParams, a, b);
  }
}

/**
 * MsgSetServiceParamsResponse is the return value of MsgSetServiceParams.
 *
 * @generated from message milkyway.services.v1.MsgSetServiceParamsResponse
 */
export class MsgSetServiceParamsResponse extends Message<MsgSetServiceParamsResponse> {
  constructor(data?: PartialMessage<MsgSetServiceParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.services.v1.MsgSetServiceParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetServiceParamsResponse {
    return new MsgSetServiceParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetServiceParamsResponse {
    return new MsgSetServiceParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetServiceParamsResponse {
    return new MsgSetServiceParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetServiceParamsResponse | PlainMessage<MsgSetServiceParamsResponse> | undefined, b: MsgSetServiceParamsResponse | PlainMessage<MsgSetServiceParamsResponse> | undefined): boolean {
    return proto3.util.equals(MsgSetServiceParamsResponse, a, b);
  }
}

/**
 * MsgDeactivateService defines the message structure for the UpdateParams gRPC
 * service method. It allows the authority to update the module parameters.
 *
 * @generated from message milkyway.services.v1.MsgUpdateParams
 */
export class MsgUpdateParams extends Message<MsgUpdateParams> {
  /**
   * Authority is the address that controls the module (defaults to x/gov unless
   * overwritten).
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * Params define the parameters to update.
   *
   * NOTE: All parameters must be supplied.
   *
   * @generated from field: milkyway.services.v1.Params params = 2;
   */
  params?: Params;

  constructor(data?: PartialMessage<MsgUpdateParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.services.v1.MsgUpdateParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined, b: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParams, a, b);
  }
}

/**
 * MsgDeactivateServiceResponse is the return value of MsgUpdateParams.
 *
 * @generated from message milkyway.services.v1.MsgUpdateParamsResponse
 */
export class MsgUpdateParamsResponse extends Message<MsgUpdateParamsResponse> {
  constructor(data?: PartialMessage<MsgUpdateParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.services.v1.MsgUpdateParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined, b: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParamsResponse, a, b);
  }
}

/**
 * MsgAccreditService defines the message structure for the AccreditService gRPC
 * service method. It allows the authority to accredit a service.
 *
 * @generated from message milkyway.services.v1.MsgAccreditService
 */
export class MsgAccreditService extends Message<MsgAccreditService> {
  /**
   * Authority is the address that controls the module (defaults to x/gov unless
   * overwritten).
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * ServiceID represents the ID of the service to be accredited
   *
   * @generated from field: uint32 service_id = 2;
   */
  serviceId = 0;

  constructor(data?: PartialMessage<MsgAccreditService>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.services.v1.MsgAccreditService";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "service_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgAccreditService {
    return new MsgAccreditService().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgAccreditService {
    return new MsgAccreditService().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgAccreditService {
    return new MsgAccreditService().fromJsonString(jsonString, options);
  }

  static equals(a: MsgAccreditService | PlainMessage<MsgAccreditService> | undefined, b: MsgAccreditService | PlainMessage<MsgAccreditService> | undefined): boolean {
    return proto3.util.equals(MsgAccreditService, a, b);
  }
}

/**
 * MsgAccreditServiceResponse is the return value of MsgAccreditService.
 *
 * @generated from message milkyway.services.v1.MsgAccreditServiceResponse
 */
export class MsgAccreditServiceResponse extends Message<MsgAccreditServiceResponse> {
  constructor(data?: PartialMessage<MsgAccreditServiceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.services.v1.MsgAccreditServiceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgAccreditServiceResponse {
    return new MsgAccreditServiceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgAccreditServiceResponse {
    return new MsgAccreditServiceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgAccreditServiceResponse {
    return new MsgAccreditServiceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgAccreditServiceResponse | PlainMessage<MsgAccreditServiceResponse> | undefined, b: MsgAccreditServiceResponse | PlainMessage<MsgAccreditServiceResponse> | undefined): boolean {
    return proto3.util.equals(MsgAccreditServiceResponse, a, b);
  }
}

/**
 * MsgRevokeServiceAccreditation defines the message structure for the
 * RevokeServiceAccreditation gRPC service method. It allows the authority to
 * revoke a service's accreditation.
 *
 * @generated from message milkyway.services.v1.MsgRevokeServiceAccreditation
 */
export class MsgRevokeServiceAccreditation extends Message<MsgRevokeServiceAccreditation> {
  /**
   * Authority is the address that controls the module (defaults to x/gov unless
   * overwritten).
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * ServiceID represents the ID of the service to have its accreditation
   * revoked
   *
   * @generated from field: uint32 service_id = 2;
   */
  serviceId = 0;

  constructor(data?: PartialMessage<MsgRevokeServiceAccreditation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.services.v1.MsgRevokeServiceAccreditation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "service_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRevokeServiceAccreditation {
    return new MsgRevokeServiceAccreditation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRevokeServiceAccreditation {
    return new MsgRevokeServiceAccreditation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRevokeServiceAccreditation {
    return new MsgRevokeServiceAccreditation().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRevokeServiceAccreditation | PlainMessage<MsgRevokeServiceAccreditation> | undefined, b: MsgRevokeServiceAccreditation | PlainMessage<MsgRevokeServiceAccreditation> | undefined): boolean {
    return proto3.util.equals(MsgRevokeServiceAccreditation, a, b);
  }
}

/**
 * MsgRevokeServiceAccreditationResponse is the return value of
 * MsgRevokeServiceAccreditation.
 *
 * @generated from message milkyway.services.v1.MsgRevokeServiceAccreditationResponse
 */
export class MsgRevokeServiceAccreditationResponse extends Message<MsgRevokeServiceAccreditationResponse> {
  constructor(data?: PartialMessage<MsgRevokeServiceAccreditationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.services.v1.MsgRevokeServiceAccreditationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRevokeServiceAccreditationResponse {
    return new MsgRevokeServiceAccreditationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRevokeServiceAccreditationResponse {
    return new MsgRevokeServiceAccreditationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRevokeServiceAccreditationResponse {
    return new MsgRevokeServiceAccreditationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRevokeServiceAccreditationResponse | PlainMessage<MsgRevokeServiceAccreditationResponse> | undefined, b: MsgRevokeServiceAccreditationResponse | PlainMessage<MsgRevokeServiceAccreditationResponse> | undefined): boolean {
    return proto3.util.equals(MsgRevokeServiceAccreditationResponse, a, b);
  }
}

