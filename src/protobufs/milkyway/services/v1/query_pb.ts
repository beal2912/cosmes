// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file milkyway/services/v1/query.proto (package milkyway.services.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination_pb.js";
import { Service, ServiceParams } from "./models_pb.js";

/**
 * QueryParamsRequest is the request type for the Query/Params RPC method.
 *
 * @generated from message milkyway.services.v1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.services.v1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 *
 * @generated from message milkyway.services.v1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * @generated from field: milkyway.services.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.services.v1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * QueryServicesRequest is the request type for the Query/Services RPC method.
 *
 * @generated from message milkyway.services.v1.QueryServicesRequest
 */
export class QueryServicesRequest extends Message<QueryServicesRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryServicesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.services.v1.QueryServicesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryServicesRequest {
    return new QueryServicesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryServicesRequest {
    return new QueryServicesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryServicesRequest {
    return new QueryServicesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryServicesRequest | PlainMessage<QueryServicesRequest> | undefined, b: QueryServicesRequest | PlainMessage<QueryServicesRequest> | undefined): boolean {
    return proto3.util.equals(QueryServicesRequest, a, b);
  }
}

/**
 * QueryServicesResponse is the response type for the Query/Services RPC method.
 *
 * @generated from message milkyway.services.v1.QueryServicesResponse
 */
export class QueryServicesResponse extends Message<QueryServicesResponse> {
  /**
   * Services services defines the list of actively validates services
   *
   * @generated from field: repeated milkyway.services.v1.Service services = 1;
   */
  services: Service[] = [];

  /**
   * Pagination defines the pagination response
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryServicesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.services.v1.QueryServicesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "services", kind: "message", T: Service, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryServicesResponse {
    return new QueryServicesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryServicesResponse {
    return new QueryServicesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryServicesResponse {
    return new QueryServicesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryServicesResponse | PlainMessage<QueryServicesResponse> | undefined, b: QueryServicesResponse | PlainMessage<QueryServicesResponse> | undefined): boolean {
    return proto3.util.equals(QueryServicesResponse, a, b);
  }
}

/**
 * QueryServiceRequest is the request type for the Query/Service RPC method.
 *
 * @generated from message milkyway.services.v1.QueryServiceRequest
 */
export class QueryServiceRequest extends Message<QueryServiceRequest> {
  /**
   * ServiceID is the ID of the service to query
   *
   * @generated from field: uint32 service_id = 1;
   */
  serviceId = 0;

  constructor(data?: PartialMessage<QueryServiceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.services.v1.QueryServiceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryServiceRequest {
    return new QueryServiceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryServiceRequest {
    return new QueryServiceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryServiceRequest {
    return new QueryServiceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryServiceRequest | PlainMessage<QueryServiceRequest> | undefined, b: QueryServiceRequest | PlainMessage<QueryServiceRequest> | undefined): boolean {
    return proto3.util.equals(QueryServiceRequest, a, b);
  }
}

/**
 * QueryServiceResponse is the response type for the Query/Service RPC method.
 *
 * @generated from message milkyway.services.v1.QueryServiceResponse
 */
export class QueryServiceResponse extends Message<QueryServiceResponse> {
  /**
   * @generated from field: milkyway.services.v1.Service service = 1;
   */
  service?: Service;

  constructor(data?: PartialMessage<QueryServiceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.services.v1.QueryServiceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service", kind: "message", T: Service },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryServiceResponse {
    return new QueryServiceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryServiceResponse {
    return new QueryServiceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryServiceResponse {
    return new QueryServiceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryServiceResponse | PlainMessage<QueryServiceResponse> | undefined, b: QueryServiceResponse | PlainMessage<QueryServiceResponse> | undefined): boolean {
    return proto3.util.equals(QueryServiceResponse, a, b);
  }
}

/**
 * QueryServiceParamsRequest is the request type for the Query/ServiceParams RPC
 * method.
 *
 * @generated from message milkyway.services.v1.QueryServiceParamsRequest
 */
export class QueryServiceParamsRequest extends Message<QueryServiceParamsRequest> {
  /**
   * @generated from field: uint32 service_id = 1;
   */
  serviceId = 0;

  constructor(data?: PartialMessage<QueryServiceParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.services.v1.QueryServiceParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryServiceParamsRequest {
    return new QueryServiceParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryServiceParamsRequest {
    return new QueryServiceParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryServiceParamsRequest {
    return new QueryServiceParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryServiceParamsRequest | PlainMessage<QueryServiceParamsRequest> | undefined, b: QueryServiceParamsRequest | PlainMessage<QueryServiceParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryServiceParamsRequest, a, b);
  }
}

/**
 * QueryServiceParamsResponse is the response type for the Query/ServiceParams
 * RPC method.
 *
 * @generated from message milkyway.services.v1.QueryServiceParamsResponse
 */
export class QueryServiceParamsResponse extends Message<QueryServiceParamsResponse> {
  /**
   * @generated from field: milkyway.services.v1.ServiceParams service_params = 1;
   */
  serviceParams?: ServiceParams;

  constructor(data?: PartialMessage<QueryServiceParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.services.v1.QueryServiceParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_params", kind: "message", T: ServiceParams },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryServiceParamsResponse {
    return new QueryServiceParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryServiceParamsResponse {
    return new QueryServiceParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryServiceParamsResponse {
    return new QueryServiceParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryServiceParamsResponse | PlainMessage<QueryServiceParamsResponse> | undefined, b: QueryServiceParamsResponse | PlainMessage<QueryServiceParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryServiceParamsResponse, a, b);
  }
}

