// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file milkyway/services/v1/models.proto (package milkyway.services.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Coin, DecCoin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * ServiceStatus defines the status of a service
 *
 * @generated from enum milkyway.services.v1.ServiceStatus
 */
export enum ServiceStatus {
  /**
   * SERVICE_STATUS_UNSPECIFIED defines an unspecified status
   *
   * @generated from enum value: SERVICE_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * SERVICE_STATUS_CREATED identifies a recently created service that is not
   * yet active
   *
   * @generated from enum value: SERVICE_STATUS_CREATED = 1;
   */
  CREATED = 1,

  /**
   * SERVICE_STATUS_ACTIVE identifies an active service
   *
   * @generated from enum value: SERVICE_STATUS_ACTIVE = 2;
   */
  ACTIVE = 2,

  /**
   * SERVICE_STATUS_INACTIVE identifies an inactive service
   *
   * @generated from enum value: SERVICE_STATUS_INACTIVE = 3;
   */
  INACTIVE = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(ServiceStatus)
proto3.util.setEnumType(ServiceStatus, "milkyway.services.v1.ServiceStatus", [
  { no: 0, name: "SERVICE_STATUS_UNSPECIFIED" },
  { no: 1, name: "SERVICE_STATUS_CREATED" },
  { no: 2, name: "SERVICE_STATUS_ACTIVE" },
  { no: 3, name: "SERVICE_STATUS_INACTIVE" },
]);

/**
 * Service defines the fields of a service
 *
 * @generated from message milkyway.services.v1.Service
 */
export class Service extends Message<Service> {
  /**
   * ID is the unique identifier of the service
   *
   * @generated from field: uint32 id = 1;
   */
  id = 0;

  /**
   * Status is the status of the service
   *
   * @generated from field: milkyway.services.v1.ServiceStatus status = 2;
   */
  status = ServiceStatus.UNSPECIFIED;

  /**
   * Admin is the address of the user that has administrative power over the
   * service
   *
   * @generated from field: string admin = 3;
   */
  admin = "";

  /**
   * Name is the name of the service
   *
   * @generated from field: string name = 4;
   */
  name = "";

  /**
   * Description is the description of the service
   *
   * @generated from field: string description = 5;
   */
  description = "";

  /**
   * Website is the website of the service
   *
   * @generated from field: string website = 6;
   */
  website = "";

  /**
   * PictureURL is the URL of the picture of the service
   *
   * @generated from field: string picture_url = 7;
   */
  pictureUrl = "";

  /**
   * Address is the address of the account associated with the service.
   * This will be used in order to store all the tokens that are delegated to
   * this service by various users.
   *
   * @generated from field: string address = 8;
   */
  address = "";

  /**
   * Tokens define the delegated tokens.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin tokens = 9;
   */
  tokens: Coin[] = [];

  /**
   * DelegatorShares define the total shares issued to a service's delegators.
   *
   * @generated from field: repeated cosmos.base.v1beta1.DecCoin delegator_shares = 10;
   */
  delegatorShares: DecCoin[] = [];

  /**
   * Accredited defines if the service is accredited.
   * Note: We use this term instead of "trusted" of "verified" in order to
   * represent something more generic.
   * Initially, services will be accredited by the on-chain governance process.
   * In the future, we may add more ways to accredit services (e.g. automatic
   * ones based on the operators that decide to run the service, or the amount
   * of cryptoeconomic security that the service was able to capture).
   *
   * @generated from field: bool accredited = 11;
   */
  accredited = false;

  constructor(data?: PartialMessage<Service>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.services.v1.Service";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "status", kind: "enum", T: proto3.getEnumType(ServiceStatus) },
    { no: 3, name: "admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "website", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "picture_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "tokens", kind: "message", T: Coin, repeated: true },
    { no: 10, name: "delegator_shares", kind: "message", T: DecCoin, repeated: true },
    { no: 11, name: "accredited", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Service {
    return new Service().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Service {
    return new Service().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Service {
    return new Service().fromJsonString(jsonString, options);
  }

  static equals(a: Service | PlainMessage<Service> | undefined, b: Service | PlainMessage<Service> | undefined): boolean {
    return proto3.util.equals(Service, a, b);
  }
}

/**
 * ServiceParams defines the parameters of a service
 *
 * @generated from message milkyway.services.v1.ServiceParams
 */
export class ServiceParams extends Message<ServiceParams> {
  /**
   * AllowedDenoms defines the list of denoms that can be restaked toward
   * the service. If the list is empty, any denom can be used.
   *
   * @generated from field: repeated string allowed_denoms = 1;
   */
  allowedDenoms: string[] = [];

  constructor(data?: PartialMessage<ServiceParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.services.v1.ServiceParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "allowed_denoms", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServiceParams {
    return new ServiceParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServiceParams {
    return new ServiceParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServiceParams {
    return new ServiceParams().fromJsonString(jsonString, options);
  }

  static equals(a: ServiceParams | PlainMessage<ServiceParams> | undefined, b: ServiceParams | PlainMessage<ServiceParams> | undefined): boolean {
    return proto3.util.equals(ServiceParams, a, b);
  }
}

