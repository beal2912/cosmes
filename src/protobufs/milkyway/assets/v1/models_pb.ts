// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file milkyway/assets/v1/models.proto (package milkyway.assets.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Asset represents an asset that can be registered on the chain.
 *
 * @generated from message milkyway.assets.v1.Asset
 */
export class Asset extends Message<Asset> {
  /**
   * Denom is the denomination of the asset.
   *
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * Ticker is the ticker of the asset.
   *
   * @generated from field: string ticker = 2;
   */
  ticker = "";

  /**
   * Exponent represents power of 10 exponent that one must
   * raise the denom to in order to equal the given ticker.
   * 1 ticker = 10^exponent denom
   *
   * @generated from field: uint32 exponent = 3;
   */
  exponent = 0;

  constructor(data?: PartialMessage<Asset>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.assets.v1.Asset";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ticker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "exponent", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Asset {
    return new Asset().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Asset {
    return new Asset().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Asset {
    return new Asset().fromJsonString(jsonString, options);
  }

  static equals(a: Asset | PlainMessage<Asset> | undefined, b: Asset | PlainMessage<Asset> | undefined): boolean {
    return proto3.util.equals(Asset, a, b);
  }
}

