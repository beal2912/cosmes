// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file milkyway/assets/v1/messages.proto (package milkyway.assets.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Asset } from "./models_pb.js";

/**
 * MsgRegisterAsset defines the message structure for the RegisterAsset
 * gRPC service method. It allows the authority to register an asset.
 *
 * @generated from message milkyway.assets.v1.MsgRegisterAsset
 */
export class MsgRegisterAsset extends Message<MsgRegisterAsset> {
  /**
   * Authority is the address that controls the module (defaults to x/gov unless
   * overwritten).
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * Asset represents the asset to be registered.
   *
   * @generated from field: milkyway.assets.v1.Asset asset = 2;
   */
  asset?: Asset;

  constructor(data?: PartialMessage<MsgRegisterAsset>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.assets.v1.MsgRegisterAsset";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "asset", kind: "message", T: Asset },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRegisterAsset {
    return new MsgRegisterAsset().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRegisterAsset {
    return new MsgRegisterAsset().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRegisterAsset {
    return new MsgRegisterAsset().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRegisterAsset | PlainMessage<MsgRegisterAsset> | undefined, b: MsgRegisterAsset | PlainMessage<MsgRegisterAsset> | undefined): boolean {
    return proto3.util.equals(MsgRegisterAsset, a, b);
  }
}

/**
 * MsgRegisterAssetResponse is the return value of MsgRegisterAsset.
 *
 * @generated from message milkyway.assets.v1.MsgRegisterAssetResponse
 */
export class MsgRegisterAssetResponse extends Message<MsgRegisterAssetResponse> {
  constructor(data?: PartialMessage<MsgRegisterAssetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.assets.v1.MsgRegisterAssetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRegisterAssetResponse {
    return new MsgRegisterAssetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRegisterAssetResponse {
    return new MsgRegisterAssetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRegisterAssetResponse {
    return new MsgRegisterAssetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRegisterAssetResponse | PlainMessage<MsgRegisterAssetResponse> | undefined, b: MsgRegisterAssetResponse | PlainMessage<MsgRegisterAssetResponse> | undefined): boolean {
    return proto3.util.equals(MsgRegisterAssetResponse, a, b);
  }
}

/**
 * MsgDeregisterAsset defines the message structure for the DeregisterAsset
 * gRPC service method. It allows the authority to de-register an asset with
 * the token denomination.
 *
 * @generated from message milkyway.assets.v1.MsgDeregisterAsset
 */
export class MsgDeregisterAsset extends Message<MsgDeregisterAsset> {
  /**
   * Authority is the address that controls the module (defaults to x/gov unless
   * overwritten).
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * Denom represents the denomination of the token associated with the asset.
   *
   * @generated from field: string denom = 2;
   */
  denom = "";

  constructor(data?: PartialMessage<MsgDeregisterAsset>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.assets.v1.MsgDeregisterAsset";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDeregisterAsset {
    return new MsgDeregisterAsset().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDeregisterAsset {
    return new MsgDeregisterAsset().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDeregisterAsset {
    return new MsgDeregisterAsset().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDeregisterAsset | PlainMessage<MsgDeregisterAsset> | undefined, b: MsgDeregisterAsset | PlainMessage<MsgDeregisterAsset> | undefined): boolean {
    return proto3.util.equals(MsgDeregisterAsset, a, b);
  }
}

/**
 * MsgRegisterAssetResponse is the return value of MsgDeregisterAsset.
 *
 * @generated from message milkyway.assets.v1.MsgDeregisterAssetResponse
 */
export class MsgDeregisterAssetResponse extends Message<MsgDeregisterAssetResponse> {
  constructor(data?: PartialMessage<MsgDeregisterAssetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.assets.v1.MsgDeregisterAssetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDeregisterAssetResponse {
    return new MsgDeregisterAssetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDeregisterAssetResponse {
    return new MsgDeregisterAssetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDeregisterAssetResponse {
    return new MsgDeregisterAssetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDeregisterAssetResponse | PlainMessage<MsgDeregisterAssetResponse> | undefined, b: MsgDeregisterAssetResponse | PlainMessage<MsgDeregisterAssetResponse> | undefined): boolean {
    return proto3.util.equals(MsgDeregisterAssetResponse, a, b);
  }
}

