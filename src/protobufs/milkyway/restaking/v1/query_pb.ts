// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file milkyway/restaking/v1/query.proto (package milkyway.restaking.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination_pb.js";
import { Operator } from "../../operators/v1/models_pb.js";
import { DelegationResponse, UnbondingDelegation, UserPreferences } from "./models_pb.js";
import { Pool } from "../../pools/v1/models_pb.js";
import { Service } from "../../services/v1/models_pb.js";
import { Params } from "./params_pb.js";

/**
 * QueryOperatorJoinedServicesRequest is request type for the
 * Query/OperatorJoinedServices RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryOperatorJoinedServicesRequest
 */
export class QueryOperatorJoinedServicesRequest extends Message<QueryOperatorJoinedServicesRequest> {
  /**
   * OperatorId is the ID of the operator to query
   *
   * @generated from field: uint32 operator_id = 1;
   */
  operatorId = 0;

  /**
   * Pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryOperatorJoinedServicesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryOperatorJoinedServicesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "operator_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOperatorJoinedServicesRequest {
    return new QueryOperatorJoinedServicesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOperatorJoinedServicesRequest {
    return new QueryOperatorJoinedServicesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOperatorJoinedServicesRequest {
    return new QueryOperatorJoinedServicesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOperatorJoinedServicesRequest | PlainMessage<QueryOperatorJoinedServicesRequest> | undefined, b: QueryOperatorJoinedServicesRequest | PlainMessage<QueryOperatorJoinedServicesRequest> | undefined): boolean {
    return proto3.util.equals(QueryOperatorJoinedServicesRequest, a, b);
  }
}

/**
 * QueryOperatorJoinedServicesResponse is response type for the
 * Query/OperatorJoinedServices RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryOperatorJoinedServicesResponse
 */
export class QueryOperatorJoinedServicesResponse extends Message<QueryOperatorJoinedServicesResponse> {
  /**
   * ServiceIds is the list of services joined by the operator.
   *
   * @generated from field: repeated uint32 service_ids = 1;
   */
  serviceIds: number[] = [];

  /**
   * Pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryOperatorJoinedServicesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryOperatorJoinedServicesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_ids", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOperatorJoinedServicesResponse {
    return new QueryOperatorJoinedServicesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOperatorJoinedServicesResponse {
    return new QueryOperatorJoinedServicesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOperatorJoinedServicesResponse {
    return new QueryOperatorJoinedServicesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOperatorJoinedServicesResponse | PlainMessage<QueryOperatorJoinedServicesResponse> | undefined, b: QueryOperatorJoinedServicesResponse | PlainMessage<QueryOperatorJoinedServicesResponse> | undefined): boolean {
    return proto3.util.equals(QueryOperatorJoinedServicesResponse, a, b);
  }
}

/**
 * QueryServiceAllowedOperatorsRequest is request type for the
 * Query/ServiceAllowedOperators RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryServiceAllowedOperatorsRequest
 */
export class QueryServiceAllowedOperatorsRequest extends Message<QueryServiceAllowedOperatorsRequest> {
  /**
   * ServiceId is the ID of the service to query
   *
   * @generated from field: uint32 service_id = 1;
   */
  serviceId = 0;

  /**
   * Pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryServiceAllowedOperatorsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryServiceAllowedOperatorsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryServiceAllowedOperatorsRequest {
    return new QueryServiceAllowedOperatorsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryServiceAllowedOperatorsRequest {
    return new QueryServiceAllowedOperatorsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryServiceAllowedOperatorsRequest {
    return new QueryServiceAllowedOperatorsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryServiceAllowedOperatorsRequest | PlainMessage<QueryServiceAllowedOperatorsRequest> | undefined, b: QueryServiceAllowedOperatorsRequest | PlainMessage<QueryServiceAllowedOperatorsRequest> | undefined): boolean {
    return proto3.util.equals(QueryServiceAllowedOperatorsRequest, a, b);
  }
}

/**
 * QueryServiceAllowedOperatorsResponse is response type for the
 * Query/ServiceAllowedOperators RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryServiceAllowedOperatorsResponse
 */
export class QueryServiceAllowedOperatorsResponse extends Message<QueryServiceAllowedOperatorsResponse> {
  /**
   * OperatorIds is the list of operators allowed to validate the service
   *
   * @generated from field: repeated uint32 operator_ids = 1;
   */
  operatorIds: number[] = [];

  /**
   * Pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryServiceAllowedOperatorsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryServiceAllowedOperatorsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "operator_ids", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryServiceAllowedOperatorsResponse {
    return new QueryServiceAllowedOperatorsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryServiceAllowedOperatorsResponse {
    return new QueryServiceAllowedOperatorsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryServiceAllowedOperatorsResponse {
    return new QueryServiceAllowedOperatorsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryServiceAllowedOperatorsResponse | PlainMessage<QueryServiceAllowedOperatorsResponse> | undefined, b: QueryServiceAllowedOperatorsResponse | PlainMessage<QueryServiceAllowedOperatorsResponse> | undefined): boolean {
    return proto3.util.equals(QueryServiceAllowedOperatorsResponse, a, b);
  }
}

/**
 * QueryServiceSecuringPoolsRequest is request type for the
 * Query/ServiceSecuringPools RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryServiceSecuringPoolsRequest
 */
export class QueryServiceSecuringPoolsRequest extends Message<QueryServiceSecuringPoolsRequest> {
  /**
   * ServiceId is the ID of the service to query.
   *
   * @generated from field: uint32 service_id = 1;
   */
  serviceId = 0;

  /**
   * Pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryServiceSecuringPoolsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryServiceSecuringPoolsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryServiceSecuringPoolsRequest {
    return new QueryServiceSecuringPoolsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryServiceSecuringPoolsRequest {
    return new QueryServiceSecuringPoolsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryServiceSecuringPoolsRequest {
    return new QueryServiceSecuringPoolsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryServiceSecuringPoolsRequest | PlainMessage<QueryServiceSecuringPoolsRequest> | undefined, b: QueryServiceSecuringPoolsRequest | PlainMessage<QueryServiceSecuringPoolsRequest> | undefined): boolean {
    return proto3.util.equals(QueryServiceSecuringPoolsRequest, a, b);
  }
}

/**
 * QueryServiceSecuringPoolsResponse is response type for the
 * Query/ServiceSecuringPools RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryServiceSecuringPoolsResponse
 */
export class QueryServiceSecuringPoolsResponse extends Message<QueryServiceSecuringPoolsResponse> {
  /**
   * PoolIds is the list of pools from which the service is allowed to borrow
   * security.
   *
   * @generated from field: repeated uint32 pool_ids = 1;
   */
  poolIds: number[] = [];

  /**
   * Pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryServiceSecuringPoolsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryServiceSecuringPoolsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_ids", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryServiceSecuringPoolsResponse {
    return new QueryServiceSecuringPoolsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryServiceSecuringPoolsResponse {
    return new QueryServiceSecuringPoolsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryServiceSecuringPoolsResponse {
    return new QueryServiceSecuringPoolsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryServiceSecuringPoolsResponse | PlainMessage<QueryServiceSecuringPoolsResponse> | undefined, b: QueryServiceSecuringPoolsResponse | PlainMessage<QueryServiceSecuringPoolsResponse> | undefined): boolean {
    return proto3.util.equals(QueryServiceSecuringPoolsResponse, a, b);
  }
}

/**
 * QueryServiceOperatorsRequest is request type for the Query/ServiceOperators
 * RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryServiceOperatorsRequest
 */
export class QueryServiceOperatorsRequest extends Message<QueryServiceOperatorsRequest> {
  /**
   * ServiceId is the ID of the service to query
   *
   * @generated from field: uint32 service_id = 1;
   */
  serviceId = 0;

  /**
   * Pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryServiceOperatorsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryServiceOperatorsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryServiceOperatorsRequest {
    return new QueryServiceOperatorsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryServiceOperatorsRequest {
    return new QueryServiceOperatorsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryServiceOperatorsRequest {
    return new QueryServiceOperatorsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryServiceOperatorsRequest | PlainMessage<QueryServiceOperatorsRequest> | undefined, b: QueryServiceOperatorsRequest | PlainMessage<QueryServiceOperatorsRequest> | undefined): boolean {
    return proto3.util.equals(QueryServiceOperatorsRequest, a, b);
  }
}

/**
 * QueryServiceOperatorsResponse is response type for the Query/ServiceOperators
 * RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryServiceOperatorsResponse
 */
export class QueryServiceOperatorsResponse extends Message<QueryServiceOperatorsResponse> {
  /**
   * Operators is the list of operators
   *
   * @generated from field: repeated milkyway.operators.v1.Operator operators = 1;
   */
  operators: Operator[] = [];

  /**
   * Pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryServiceOperatorsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryServiceOperatorsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "operators", kind: "message", T: Operator, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryServiceOperatorsResponse {
    return new QueryServiceOperatorsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryServiceOperatorsResponse {
    return new QueryServiceOperatorsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryServiceOperatorsResponse {
    return new QueryServiceOperatorsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryServiceOperatorsResponse | PlainMessage<QueryServiceOperatorsResponse> | undefined, b: QueryServiceOperatorsResponse | PlainMessage<QueryServiceOperatorsResponse> | undefined): boolean {
    return proto3.util.equals(QueryServiceOperatorsResponse, a, b);
  }
}

/**
 * QueryPoolDelegationsRequest is request type for the Query/PoolDelegations RPC
 * method.
 *
 * @generated from message milkyway.restaking.v1.QueryPoolDelegationsRequest
 */
export class QueryPoolDelegationsRequest extends Message<QueryPoolDelegationsRequest> {
  /**
   * PoolId is the ID of the pool to query.
   *
   * @generated from field: uint32 pool_id = 1;
   */
  poolId = 0;

  /**
   * Pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryPoolDelegationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryPoolDelegationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolDelegationsRequest {
    return new QueryPoolDelegationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolDelegationsRequest {
    return new QueryPoolDelegationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolDelegationsRequest {
    return new QueryPoolDelegationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolDelegationsRequest | PlainMessage<QueryPoolDelegationsRequest> | undefined, b: QueryPoolDelegationsRequest | PlainMessage<QueryPoolDelegationsRequest> | undefined): boolean {
    return proto3.util.equals(QueryPoolDelegationsRequest, a, b);
  }
}

/**
 * QueryPoolDelegationsResponse is response type for the Query/PoolDelegations
 * RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryPoolDelegationsResponse
 */
export class QueryPoolDelegationsResponse extends Message<QueryPoolDelegationsResponse> {
  /**
   * Delegations is the list of delegations.
   *
   * @generated from field: repeated milkyway.restaking.v1.DelegationResponse delegations = 1;
   */
  delegations: DelegationResponse[] = [];

  /**
   * Pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryPoolDelegationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryPoolDelegationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegations", kind: "message", T: DelegationResponse, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolDelegationsResponse {
    return new QueryPoolDelegationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolDelegationsResponse {
    return new QueryPoolDelegationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolDelegationsResponse {
    return new QueryPoolDelegationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolDelegationsResponse | PlainMessage<QueryPoolDelegationsResponse> | undefined, b: QueryPoolDelegationsResponse | PlainMessage<QueryPoolDelegationsResponse> | undefined): boolean {
    return proto3.util.equals(QueryPoolDelegationsResponse, a, b);
  }
}

/**
 * QueryPoolDelegationRequest is request type for the Query/PoolDelegation RPC
 * method.
 *
 * @generated from message milkyway.restaking.v1.QueryPoolDelegationRequest
 */
export class QueryPoolDelegationRequest extends Message<QueryPoolDelegationRequest> {
  /**
   * PoolId is the ID of the pool to query
   *
   * @generated from field: uint32 pool_id = 1;
   */
  poolId = 0;

  /**
   * DelegatorAddress is the address of the delegator to query
   *
   * @generated from field: string delegator_address = 2;
   */
  delegatorAddress = "";

  constructor(data?: PartialMessage<QueryPoolDelegationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryPoolDelegationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolDelegationRequest {
    return new QueryPoolDelegationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolDelegationRequest {
    return new QueryPoolDelegationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolDelegationRequest {
    return new QueryPoolDelegationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolDelegationRequest | PlainMessage<QueryPoolDelegationRequest> | undefined, b: QueryPoolDelegationRequest | PlainMessage<QueryPoolDelegationRequest> | undefined): boolean {
    return proto3.util.equals(QueryPoolDelegationRequest, a, b);
  }
}

/**
 * QueryPoolDelegationResponse is response type for the Query/PoolDelegation RPC
 * method.
 *
 * @generated from message milkyway.restaking.v1.QueryPoolDelegationResponse
 */
export class QueryPoolDelegationResponse extends Message<QueryPoolDelegationResponse> {
  /**
   * Delegation is the delegation
   *
   * @generated from field: milkyway.restaking.v1.DelegationResponse delegation = 1;
   */
  delegation?: DelegationResponse;

  constructor(data?: PartialMessage<QueryPoolDelegationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryPoolDelegationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegation", kind: "message", T: DelegationResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolDelegationResponse {
    return new QueryPoolDelegationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolDelegationResponse {
    return new QueryPoolDelegationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolDelegationResponse {
    return new QueryPoolDelegationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolDelegationResponse | PlainMessage<QueryPoolDelegationResponse> | undefined, b: QueryPoolDelegationResponse | PlainMessage<QueryPoolDelegationResponse> | undefined): boolean {
    return proto3.util.equals(QueryPoolDelegationResponse, a, b);
  }
}

/**
 * QueryPoolUnbondingDelegationsRequest is request type for the
 * Query/PoolUnbondingDelegations RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryPoolUnbondingDelegationsRequest
 */
export class QueryPoolUnbondingDelegationsRequest extends Message<QueryPoolUnbondingDelegationsRequest> {
  /**
   * @generated from field: uint32 pool_id = 1;
   */
  poolId = 0;

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryPoolUnbondingDelegationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryPoolUnbondingDelegationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolUnbondingDelegationsRequest {
    return new QueryPoolUnbondingDelegationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolUnbondingDelegationsRequest {
    return new QueryPoolUnbondingDelegationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolUnbondingDelegationsRequest {
    return new QueryPoolUnbondingDelegationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolUnbondingDelegationsRequest | PlainMessage<QueryPoolUnbondingDelegationsRequest> | undefined, b: QueryPoolUnbondingDelegationsRequest | PlainMessage<QueryPoolUnbondingDelegationsRequest> | undefined): boolean {
    return proto3.util.equals(QueryPoolUnbondingDelegationsRequest, a, b);
  }
}

/**
 * QueryPoolUnbondingDelegationsResponse is response type for the
 * Query/PoolUnbondingDelegations RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryPoolUnbondingDelegationsResponse
 */
export class QueryPoolUnbondingDelegationsResponse extends Message<QueryPoolUnbondingDelegationsResponse> {
  /**
   * @generated from field: repeated milkyway.restaking.v1.UnbondingDelegation unbonding_delegations = 1;
   */
  unbondingDelegations: UnbondingDelegation[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryPoolUnbondingDelegationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryPoolUnbondingDelegationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "unbonding_delegations", kind: "message", T: UnbondingDelegation, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolUnbondingDelegationsResponse {
    return new QueryPoolUnbondingDelegationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolUnbondingDelegationsResponse {
    return new QueryPoolUnbondingDelegationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolUnbondingDelegationsResponse {
    return new QueryPoolUnbondingDelegationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolUnbondingDelegationsResponse | PlainMessage<QueryPoolUnbondingDelegationsResponse> | undefined, b: QueryPoolUnbondingDelegationsResponse | PlainMessage<QueryPoolUnbondingDelegationsResponse> | undefined): boolean {
    return proto3.util.equals(QueryPoolUnbondingDelegationsResponse, a, b);
  }
}

/**
 * QueryPoolUnbondingDelegationRequest is request type for the
 * Query/PoolUnbondingDelegation RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryPoolUnbondingDelegationRequest
 */
export class QueryPoolUnbondingDelegationRequest extends Message<QueryPoolUnbondingDelegationRequest> {
  /**
   * @generated from field: uint32 pool_id = 1;
   */
  poolId = 0;

  /**
   * @generated from field: string delegator_address = 2;
   */
  delegatorAddress = "";

  constructor(data?: PartialMessage<QueryPoolUnbondingDelegationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryPoolUnbondingDelegationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolUnbondingDelegationRequest {
    return new QueryPoolUnbondingDelegationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolUnbondingDelegationRequest {
    return new QueryPoolUnbondingDelegationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolUnbondingDelegationRequest {
    return new QueryPoolUnbondingDelegationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolUnbondingDelegationRequest | PlainMessage<QueryPoolUnbondingDelegationRequest> | undefined, b: QueryPoolUnbondingDelegationRequest | PlainMessage<QueryPoolUnbondingDelegationRequest> | undefined): boolean {
    return proto3.util.equals(QueryPoolUnbondingDelegationRequest, a, b);
  }
}

/**
 * QueryPoolUnbondingDelegationResponse is response type for the
 * Query/PoolUnbondingDelegation RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryPoolUnbondingDelegationResponse
 */
export class QueryPoolUnbondingDelegationResponse extends Message<QueryPoolUnbondingDelegationResponse> {
  /**
   * @generated from field: milkyway.restaking.v1.UnbondingDelegation unbonding_delegation = 1;
   */
  unbondingDelegation?: UnbondingDelegation;

  constructor(data?: PartialMessage<QueryPoolUnbondingDelegationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryPoolUnbondingDelegationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "unbonding_delegation", kind: "message", T: UnbondingDelegation },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolUnbondingDelegationResponse {
    return new QueryPoolUnbondingDelegationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolUnbondingDelegationResponse {
    return new QueryPoolUnbondingDelegationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolUnbondingDelegationResponse {
    return new QueryPoolUnbondingDelegationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolUnbondingDelegationResponse | PlainMessage<QueryPoolUnbondingDelegationResponse> | undefined, b: QueryPoolUnbondingDelegationResponse | PlainMessage<QueryPoolUnbondingDelegationResponse> | undefined): boolean {
    return proto3.util.equals(QueryPoolUnbondingDelegationResponse, a, b);
  }
}

/**
 * QueryOperatorDelegationsRequest is request type for the
 * Query/OperatorDelegations RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryOperatorDelegationsRequest
 */
export class QueryOperatorDelegationsRequest extends Message<QueryOperatorDelegationsRequest> {
  /**
   * OperatorId is the ID of the operator to query
   *
   * @generated from field: uint32 operator_id = 1;
   */
  operatorId = 0;

  /**
   * Pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryOperatorDelegationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryOperatorDelegationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "operator_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOperatorDelegationsRequest {
    return new QueryOperatorDelegationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOperatorDelegationsRequest {
    return new QueryOperatorDelegationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOperatorDelegationsRequest {
    return new QueryOperatorDelegationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOperatorDelegationsRequest | PlainMessage<QueryOperatorDelegationsRequest> | undefined, b: QueryOperatorDelegationsRequest | PlainMessage<QueryOperatorDelegationsRequest> | undefined): boolean {
    return proto3.util.equals(QueryOperatorDelegationsRequest, a, b);
  }
}

/**
 * QueryOperatorDelegationsResponse is response type for the
 * Query/OperatorDelegations RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryOperatorDelegationsResponse
 */
export class QueryOperatorDelegationsResponse extends Message<QueryOperatorDelegationsResponse> {
  /**
   * Delegations is the list of delegations
   *
   * @generated from field: repeated milkyway.restaking.v1.DelegationResponse delegations = 1;
   */
  delegations: DelegationResponse[] = [];

  /**
   * Pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryOperatorDelegationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryOperatorDelegationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegations", kind: "message", T: DelegationResponse, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOperatorDelegationsResponse {
    return new QueryOperatorDelegationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOperatorDelegationsResponse {
    return new QueryOperatorDelegationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOperatorDelegationsResponse {
    return new QueryOperatorDelegationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOperatorDelegationsResponse | PlainMessage<QueryOperatorDelegationsResponse> | undefined, b: QueryOperatorDelegationsResponse | PlainMessage<QueryOperatorDelegationsResponse> | undefined): boolean {
    return proto3.util.equals(QueryOperatorDelegationsResponse, a, b);
  }
}

/**
 * QueryOperatorDelegationRequest is request type for the
 * Query/OperatorDelegation RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryOperatorDelegationRequest
 */
export class QueryOperatorDelegationRequest extends Message<QueryOperatorDelegationRequest> {
  /**
   * OperatorId is the ID of the operator to query
   *
   * @generated from field: uint32 operator_id = 1;
   */
  operatorId = 0;

  /**
   * DelegatorAddress is the address of the delegator to query
   *
   * @generated from field: string delegator_address = 2;
   */
  delegatorAddress = "";

  constructor(data?: PartialMessage<QueryOperatorDelegationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryOperatorDelegationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "operator_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOperatorDelegationRequest {
    return new QueryOperatorDelegationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOperatorDelegationRequest {
    return new QueryOperatorDelegationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOperatorDelegationRequest {
    return new QueryOperatorDelegationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOperatorDelegationRequest | PlainMessage<QueryOperatorDelegationRequest> | undefined, b: QueryOperatorDelegationRequest | PlainMessage<QueryOperatorDelegationRequest> | undefined): boolean {
    return proto3.util.equals(QueryOperatorDelegationRequest, a, b);
  }
}

/**
 * QueryOperatorDelegationResponse is response type for the
 * Query/OperatorDelegation RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryOperatorDelegationResponse
 */
export class QueryOperatorDelegationResponse extends Message<QueryOperatorDelegationResponse> {
  /**
   * Delegation is the delegation
   *
   * @generated from field: milkyway.restaking.v1.DelegationResponse delegation = 1;
   */
  delegation?: DelegationResponse;

  constructor(data?: PartialMessage<QueryOperatorDelegationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryOperatorDelegationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegation", kind: "message", T: DelegationResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOperatorDelegationResponse {
    return new QueryOperatorDelegationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOperatorDelegationResponse {
    return new QueryOperatorDelegationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOperatorDelegationResponse {
    return new QueryOperatorDelegationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOperatorDelegationResponse | PlainMessage<QueryOperatorDelegationResponse> | undefined, b: QueryOperatorDelegationResponse | PlainMessage<QueryOperatorDelegationResponse> | undefined): boolean {
    return proto3.util.equals(QueryOperatorDelegationResponse, a, b);
  }
}

/**
 * QueryOperatorUnbondingDelegationsRequest is request type for the
 * Query/OperatorUnbondingDelegations RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryOperatorUnbondingDelegationsRequest
 */
export class QueryOperatorUnbondingDelegationsRequest extends Message<QueryOperatorUnbondingDelegationsRequest> {
  /**
   * OperatorId is the ID of the operator to query
   *
   * @generated from field: uint32 operator_id = 1;
   */
  operatorId = 0;

  /**
   * Pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryOperatorUnbondingDelegationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryOperatorUnbondingDelegationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "operator_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOperatorUnbondingDelegationsRequest {
    return new QueryOperatorUnbondingDelegationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOperatorUnbondingDelegationsRequest {
    return new QueryOperatorUnbondingDelegationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOperatorUnbondingDelegationsRequest {
    return new QueryOperatorUnbondingDelegationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOperatorUnbondingDelegationsRequest | PlainMessage<QueryOperatorUnbondingDelegationsRequest> | undefined, b: QueryOperatorUnbondingDelegationsRequest | PlainMessage<QueryOperatorUnbondingDelegationsRequest> | undefined): boolean {
    return proto3.util.equals(QueryOperatorUnbondingDelegationsRequest, a, b);
  }
}

/**
 * QueryOperatorUnbondingDelegationsResponse is response type for the
 * Query/OperatorUnbondingDelegations RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryOperatorUnbondingDelegationsResponse
 */
export class QueryOperatorUnbondingDelegationsResponse extends Message<QueryOperatorUnbondingDelegationsResponse> {
  /**
   * UnbondingDelegations is the list of unbonding delegations
   *
   * @generated from field: repeated milkyway.restaking.v1.UnbondingDelegation unbonding_delegations = 1;
   */
  unbondingDelegations: UnbondingDelegation[] = [];

  /**
   * Pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryOperatorUnbondingDelegationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryOperatorUnbondingDelegationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "unbonding_delegations", kind: "message", T: UnbondingDelegation, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOperatorUnbondingDelegationsResponse {
    return new QueryOperatorUnbondingDelegationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOperatorUnbondingDelegationsResponse {
    return new QueryOperatorUnbondingDelegationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOperatorUnbondingDelegationsResponse {
    return new QueryOperatorUnbondingDelegationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOperatorUnbondingDelegationsResponse | PlainMessage<QueryOperatorUnbondingDelegationsResponse> | undefined, b: QueryOperatorUnbondingDelegationsResponse | PlainMessage<QueryOperatorUnbondingDelegationsResponse> | undefined): boolean {
    return proto3.util.equals(QueryOperatorUnbondingDelegationsResponse, a, b);
  }
}

/**
 * QueryOperatorUnbondingDelegationRequest is request type for the
 * Query/OperatorUnbondingDelegation RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryOperatorUnbondingDelegationRequest
 */
export class QueryOperatorUnbondingDelegationRequest extends Message<QueryOperatorUnbondingDelegationRequest> {
  /**
   * OperatorId is the ID of the operator to query
   *
   * @generated from field: uint32 operator_id = 1;
   */
  operatorId = 0;

  /**
   * DelegatorAddress is the address of the delegator to query
   *
   * @generated from field: string delegator_address = 2;
   */
  delegatorAddress = "";

  constructor(data?: PartialMessage<QueryOperatorUnbondingDelegationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryOperatorUnbondingDelegationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "operator_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOperatorUnbondingDelegationRequest {
    return new QueryOperatorUnbondingDelegationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOperatorUnbondingDelegationRequest {
    return new QueryOperatorUnbondingDelegationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOperatorUnbondingDelegationRequest {
    return new QueryOperatorUnbondingDelegationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOperatorUnbondingDelegationRequest | PlainMessage<QueryOperatorUnbondingDelegationRequest> | undefined, b: QueryOperatorUnbondingDelegationRequest | PlainMessage<QueryOperatorUnbondingDelegationRequest> | undefined): boolean {
    return proto3.util.equals(QueryOperatorUnbondingDelegationRequest, a, b);
  }
}

/**
 * QueryOperatorUnbondingDelegationResponse is response type for the
 * Query/OperatorUnbondingDelegation RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryOperatorUnbondingDelegationResponse
 */
export class QueryOperatorUnbondingDelegationResponse extends Message<QueryOperatorUnbondingDelegationResponse> {
  /**
   * UnbondingDelegation is the unbonding delegation
   *
   * @generated from field: milkyway.restaking.v1.UnbondingDelegation unbonding_delegation = 1;
   */
  unbondingDelegation?: UnbondingDelegation;

  constructor(data?: PartialMessage<QueryOperatorUnbondingDelegationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryOperatorUnbondingDelegationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "unbonding_delegation", kind: "message", T: UnbondingDelegation },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOperatorUnbondingDelegationResponse {
    return new QueryOperatorUnbondingDelegationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOperatorUnbondingDelegationResponse {
    return new QueryOperatorUnbondingDelegationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOperatorUnbondingDelegationResponse {
    return new QueryOperatorUnbondingDelegationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOperatorUnbondingDelegationResponse | PlainMessage<QueryOperatorUnbondingDelegationResponse> | undefined, b: QueryOperatorUnbondingDelegationResponse | PlainMessage<QueryOperatorUnbondingDelegationResponse> | undefined): boolean {
    return proto3.util.equals(QueryOperatorUnbondingDelegationResponse, a, b);
  }
}

/**
 * QueryServiceDelegationsRequest is request type for the
 * Query/ServiceDelegations RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryServiceDelegationsRequest
 */
export class QueryServiceDelegationsRequest extends Message<QueryServiceDelegationsRequest> {
  /**
   * ServiceId is the ID of the service to query
   *
   * @generated from field: uint32 service_id = 1;
   */
  serviceId = 0;

  /**
   * Pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryServiceDelegationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryServiceDelegationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryServiceDelegationsRequest {
    return new QueryServiceDelegationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryServiceDelegationsRequest {
    return new QueryServiceDelegationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryServiceDelegationsRequest {
    return new QueryServiceDelegationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryServiceDelegationsRequest | PlainMessage<QueryServiceDelegationsRequest> | undefined, b: QueryServiceDelegationsRequest | PlainMessage<QueryServiceDelegationsRequest> | undefined): boolean {
    return proto3.util.equals(QueryServiceDelegationsRequest, a, b);
  }
}

/**
 * QueryServiceDelegationsResponse is response type for the
 * Query/ServiceDelegations RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryServiceDelegationsResponse
 */
export class QueryServiceDelegationsResponse extends Message<QueryServiceDelegationsResponse> {
  /**
   * Delegations is the list of delegations
   *
   * @generated from field: repeated milkyway.restaking.v1.DelegationResponse delegations = 1;
   */
  delegations: DelegationResponse[] = [];

  /**
   * Pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryServiceDelegationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryServiceDelegationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegations", kind: "message", T: DelegationResponse, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryServiceDelegationsResponse {
    return new QueryServiceDelegationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryServiceDelegationsResponse {
    return new QueryServiceDelegationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryServiceDelegationsResponse {
    return new QueryServiceDelegationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryServiceDelegationsResponse | PlainMessage<QueryServiceDelegationsResponse> | undefined, b: QueryServiceDelegationsResponse | PlainMessage<QueryServiceDelegationsResponse> | undefined): boolean {
    return proto3.util.equals(QueryServiceDelegationsResponse, a, b);
  }
}

/**
 * QueryServiceDelegationRequest is request type for the Query/ServiceDelegation
 * RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryServiceDelegationRequest
 */
export class QueryServiceDelegationRequest extends Message<QueryServiceDelegationRequest> {
  /**
   * ServiceId is the ID of the service to query
   *
   * @generated from field: uint32 service_id = 1;
   */
  serviceId = 0;

  /**
   * DelegatorAddress is the address of the delegator to query
   *
   * @generated from field: string delegator_address = 2;
   */
  delegatorAddress = "";

  constructor(data?: PartialMessage<QueryServiceDelegationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryServiceDelegationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryServiceDelegationRequest {
    return new QueryServiceDelegationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryServiceDelegationRequest {
    return new QueryServiceDelegationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryServiceDelegationRequest {
    return new QueryServiceDelegationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryServiceDelegationRequest | PlainMessage<QueryServiceDelegationRequest> | undefined, b: QueryServiceDelegationRequest | PlainMessage<QueryServiceDelegationRequest> | undefined): boolean {
    return proto3.util.equals(QueryServiceDelegationRequest, a, b);
  }
}

/**
 * QueryServiceDelegationResponse is response type for the
 * Query/ServiceDelegation RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryServiceDelegationResponse
 */
export class QueryServiceDelegationResponse extends Message<QueryServiceDelegationResponse> {
  /**
   * Delegation is the delegation
   *
   * @generated from field: milkyway.restaking.v1.DelegationResponse delegation = 1;
   */
  delegation?: DelegationResponse;

  constructor(data?: PartialMessage<QueryServiceDelegationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryServiceDelegationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegation", kind: "message", T: DelegationResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryServiceDelegationResponse {
    return new QueryServiceDelegationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryServiceDelegationResponse {
    return new QueryServiceDelegationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryServiceDelegationResponse {
    return new QueryServiceDelegationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryServiceDelegationResponse | PlainMessage<QueryServiceDelegationResponse> | undefined, b: QueryServiceDelegationResponse | PlainMessage<QueryServiceDelegationResponse> | undefined): boolean {
    return proto3.util.equals(QueryServiceDelegationResponse, a, b);
  }
}

/**
 * QueryServiceUnbondingDelegationsRequest is request type for the
 * Query/ServiceUnbondingDelegations RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryServiceUnbondingDelegationsRequest
 */
export class QueryServiceUnbondingDelegationsRequest extends Message<QueryServiceUnbondingDelegationsRequest> {
  /**
   * ServiceId is the ID of the service to query
   *
   * @generated from field: uint32 service_id = 1;
   */
  serviceId = 0;

  /**
   * Pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryServiceUnbondingDelegationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryServiceUnbondingDelegationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryServiceUnbondingDelegationsRequest {
    return new QueryServiceUnbondingDelegationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryServiceUnbondingDelegationsRequest {
    return new QueryServiceUnbondingDelegationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryServiceUnbondingDelegationsRequest {
    return new QueryServiceUnbondingDelegationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryServiceUnbondingDelegationsRequest | PlainMessage<QueryServiceUnbondingDelegationsRequest> | undefined, b: QueryServiceUnbondingDelegationsRequest | PlainMessage<QueryServiceUnbondingDelegationsRequest> | undefined): boolean {
    return proto3.util.equals(QueryServiceUnbondingDelegationsRequest, a, b);
  }
}

/**
 * QueryServiceUnbondingDelegationsResponse is response type for the
 * Query/ServiceUnbondingDelegations RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryServiceUnbondingDelegationsResponse
 */
export class QueryServiceUnbondingDelegationsResponse extends Message<QueryServiceUnbondingDelegationsResponse> {
  /**
   * UnbondingDelegations is the list of unbonding delegations
   *
   * @generated from field: repeated milkyway.restaking.v1.UnbondingDelegation unbonding_delegations = 1;
   */
  unbondingDelegations: UnbondingDelegation[] = [];

  /**
   * Pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryServiceUnbondingDelegationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryServiceUnbondingDelegationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "unbonding_delegations", kind: "message", T: UnbondingDelegation, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryServiceUnbondingDelegationsResponse {
    return new QueryServiceUnbondingDelegationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryServiceUnbondingDelegationsResponse {
    return new QueryServiceUnbondingDelegationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryServiceUnbondingDelegationsResponse {
    return new QueryServiceUnbondingDelegationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryServiceUnbondingDelegationsResponse | PlainMessage<QueryServiceUnbondingDelegationsResponse> | undefined, b: QueryServiceUnbondingDelegationsResponse | PlainMessage<QueryServiceUnbondingDelegationsResponse> | undefined): boolean {
    return proto3.util.equals(QueryServiceUnbondingDelegationsResponse, a, b);
  }
}

/**
 * QueryServiceUnbondingDelegationRequest is request type for the
 * Query/ServiceUnbondingDelegation RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryServiceUnbondingDelegationRequest
 */
export class QueryServiceUnbondingDelegationRequest extends Message<QueryServiceUnbondingDelegationRequest> {
  /**
   * ServiceId is the ID of the service to query
   *
   * @generated from field: uint32 service_id = 1;
   */
  serviceId = 0;

  /**
   * DelegatorAddress is the address of the delegator to query
   *
   * @generated from field: string delegator_address = 2;
   */
  delegatorAddress = "";

  constructor(data?: PartialMessage<QueryServiceUnbondingDelegationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryServiceUnbondingDelegationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryServiceUnbondingDelegationRequest {
    return new QueryServiceUnbondingDelegationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryServiceUnbondingDelegationRequest {
    return new QueryServiceUnbondingDelegationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryServiceUnbondingDelegationRequest {
    return new QueryServiceUnbondingDelegationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryServiceUnbondingDelegationRequest | PlainMessage<QueryServiceUnbondingDelegationRequest> | undefined, b: QueryServiceUnbondingDelegationRequest | PlainMessage<QueryServiceUnbondingDelegationRequest> | undefined): boolean {
    return proto3.util.equals(QueryServiceUnbondingDelegationRequest, a, b);
  }
}

/**
 * QueryServiceUnbondingDelegationResponse is response type for the
 * Query/ServiceUnbondingDelegation RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryServiceUnbondingDelegationResponse
 */
export class QueryServiceUnbondingDelegationResponse extends Message<QueryServiceUnbondingDelegationResponse> {
  /**
   * UnbondingDelegation is the unbonding delegation
   *
   * @generated from field: milkyway.restaking.v1.UnbondingDelegation unbonding_delegation = 1;
   */
  unbondingDelegation?: UnbondingDelegation;

  constructor(data?: PartialMessage<QueryServiceUnbondingDelegationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryServiceUnbondingDelegationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "unbonding_delegation", kind: "message", T: UnbondingDelegation },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryServiceUnbondingDelegationResponse {
    return new QueryServiceUnbondingDelegationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryServiceUnbondingDelegationResponse {
    return new QueryServiceUnbondingDelegationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryServiceUnbondingDelegationResponse {
    return new QueryServiceUnbondingDelegationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryServiceUnbondingDelegationResponse | PlainMessage<QueryServiceUnbondingDelegationResponse> | undefined, b: QueryServiceUnbondingDelegationResponse | PlainMessage<QueryServiceUnbondingDelegationResponse> | undefined): boolean {
    return proto3.util.equals(QueryServiceUnbondingDelegationResponse, a, b);
  }
}

/**
 * QueryDelegatorPoolDelegationsRequest is request type for the
 * Query/DelegatorPoolDelegations RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryDelegatorPoolDelegationsRequest
 */
export class QueryDelegatorPoolDelegationsRequest extends Message<QueryDelegatorPoolDelegationsRequest> {
  /**
   * DelegatorAddress is the address of the delegator to query
   *
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress = "";

  /**
   * Pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryDelegatorPoolDelegationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryDelegatorPoolDelegationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDelegatorPoolDelegationsRequest {
    return new QueryDelegatorPoolDelegationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDelegatorPoolDelegationsRequest {
    return new QueryDelegatorPoolDelegationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDelegatorPoolDelegationsRequest {
    return new QueryDelegatorPoolDelegationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDelegatorPoolDelegationsRequest | PlainMessage<QueryDelegatorPoolDelegationsRequest> | undefined, b: QueryDelegatorPoolDelegationsRequest | PlainMessage<QueryDelegatorPoolDelegationsRequest> | undefined): boolean {
    return proto3.util.equals(QueryDelegatorPoolDelegationsRequest, a, b);
  }
}

/**
 * QueryDelegatorPoolDelegationsResponse is response type for the
 * Query/DelegatorPoolDelegations RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryDelegatorPoolDelegationsResponse
 */
export class QueryDelegatorPoolDelegationsResponse extends Message<QueryDelegatorPoolDelegationsResponse> {
  /**
   * Delegations is the list of delegations
   *
   * @generated from field: repeated milkyway.restaking.v1.DelegationResponse delegations = 1;
   */
  delegations: DelegationResponse[] = [];

  /**
   * Pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryDelegatorPoolDelegationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryDelegatorPoolDelegationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegations", kind: "message", T: DelegationResponse, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDelegatorPoolDelegationsResponse {
    return new QueryDelegatorPoolDelegationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDelegatorPoolDelegationsResponse {
    return new QueryDelegatorPoolDelegationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDelegatorPoolDelegationsResponse {
    return new QueryDelegatorPoolDelegationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDelegatorPoolDelegationsResponse | PlainMessage<QueryDelegatorPoolDelegationsResponse> | undefined, b: QueryDelegatorPoolDelegationsResponse | PlainMessage<QueryDelegatorPoolDelegationsResponse> | undefined): boolean {
    return proto3.util.equals(QueryDelegatorPoolDelegationsResponse, a, b);
  }
}

/**
 * QueryDelegatorPoolUnbondingDelegationsRequest is request type for the
 * Query/DelegatorPoolUnbondingDelegations RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryDelegatorPoolUnbondingDelegationsRequest
 */
export class QueryDelegatorPoolUnbondingDelegationsRequest extends Message<QueryDelegatorPoolUnbondingDelegationsRequest> {
  /**
   * DelegatorAddress is the address of the delegator to query
   *
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress = "";

  /**
   * Pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryDelegatorPoolUnbondingDelegationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryDelegatorPoolUnbondingDelegationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDelegatorPoolUnbondingDelegationsRequest {
    return new QueryDelegatorPoolUnbondingDelegationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDelegatorPoolUnbondingDelegationsRequest {
    return new QueryDelegatorPoolUnbondingDelegationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDelegatorPoolUnbondingDelegationsRequest {
    return new QueryDelegatorPoolUnbondingDelegationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDelegatorPoolUnbondingDelegationsRequest | PlainMessage<QueryDelegatorPoolUnbondingDelegationsRequest> | undefined, b: QueryDelegatorPoolUnbondingDelegationsRequest | PlainMessage<QueryDelegatorPoolUnbondingDelegationsRequest> | undefined): boolean {
    return proto3.util.equals(QueryDelegatorPoolUnbondingDelegationsRequest, a, b);
  }
}

/**
 * QueryDelegatorPoolUnbondingDelegationsResponse is response type for the
 * Query/DelegatorPoolUnbondingDelegations RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryDelegatorPoolUnbondingDelegationsResponse
 */
export class QueryDelegatorPoolUnbondingDelegationsResponse extends Message<QueryDelegatorPoolUnbondingDelegationsResponse> {
  /**
   * UnbondingDelegations is the list of unbonding delegations
   *
   * @generated from field: repeated milkyway.restaking.v1.UnbondingDelegation unbonding_delegations = 1;
   */
  unbondingDelegations: UnbondingDelegation[] = [];

  /**
   * Pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryDelegatorPoolUnbondingDelegationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryDelegatorPoolUnbondingDelegationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "unbonding_delegations", kind: "message", T: UnbondingDelegation, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDelegatorPoolUnbondingDelegationsResponse {
    return new QueryDelegatorPoolUnbondingDelegationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDelegatorPoolUnbondingDelegationsResponse {
    return new QueryDelegatorPoolUnbondingDelegationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDelegatorPoolUnbondingDelegationsResponse {
    return new QueryDelegatorPoolUnbondingDelegationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDelegatorPoolUnbondingDelegationsResponse | PlainMessage<QueryDelegatorPoolUnbondingDelegationsResponse> | undefined, b: QueryDelegatorPoolUnbondingDelegationsResponse | PlainMessage<QueryDelegatorPoolUnbondingDelegationsResponse> | undefined): boolean {
    return proto3.util.equals(QueryDelegatorPoolUnbondingDelegationsResponse, a, b);
  }
}

/**
 * QueryDelegatorOperatorDelegationsRequest is request type for the
 * Query/DelegatorOperatorDelegations RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryDelegatorOperatorDelegationsRequest
 */
export class QueryDelegatorOperatorDelegationsRequest extends Message<QueryDelegatorOperatorDelegationsRequest> {
  /**
   * DelegatorAddress is the address of the delegator to query
   *
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress = "";

  /**
   * Pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryDelegatorOperatorDelegationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryDelegatorOperatorDelegationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDelegatorOperatorDelegationsRequest {
    return new QueryDelegatorOperatorDelegationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDelegatorOperatorDelegationsRequest {
    return new QueryDelegatorOperatorDelegationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDelegatorOperatorDelegationsRequest {
    return new QueryDelegatorOperatorDelegationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDelegatorOperatorDelegationsRequest | PlainMessage<QueryDelegatorOperatorDelegationsRequest> | undefined, b: QueryDelegatorOperatorDelegationsRequest | PlainMessage<QueryDelegatorOperatorDelegationsRequest> | undefined): boolean {
    return proto3.util.equals(QueryDelegatorOperatorDelegationsRequest, a, b);
  }
}

/**
 * QueryDelegatorOperatorDelegationsResponse is response type for the
 * Query/DelegatorOperatorDelegations RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryDelegatorOperatorDelegationsResponse
 */
export class QueryDelegatorOperatorDelegationsResponse extends Message<QueryDelegatorOperatorDelegationsResponse> {
  /**
   * Delegations is the list of delegations
   *
   * @generated from field: repeated milkyway.restaking.v1.DelegationResponse delegations = 1;
   */
  delegations: DelegationResponse[] = [];

  /**
   * Pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryDelegatorOperatorDelegationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryDelegatorOperatorDelegationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegations", kind: "message", T: DelegationResponse, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDelegatorOperatorDelegationsResponse {
    return new QueryDelegatorOperatorDelegationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDelegatorOperatorDelegationsResponse {
    return new QueryDelegatorOperatorDelegationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDelegatorOperatorDelegationsResponse {
    return new QueryDelegatorOperatorDelegationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDelegatorOperatorDelegationsResponse | PlainMessage<QueryDelegatorOperatorDelegationsResponse> | undefined, b: QueryDelegatorOperatorDelegationsResponse | PlainMessage<QueryDelegatorOperatorDelegationsResponse> | undefined): boolean {
    return proto3.util.equals(QueryDelegatorOperatorDelegationsResponse, a, b);
  }
}

/**
 * QueryDelegatorOperatorUnbondingDelegationsRequest is request type for the
 * Query/DelegatorOperatorUnbondingDelegations RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryDelegatorOperatorUnbondingDelegationsRequest
 */
export class QueryDelegatorOperatorUnbondingDelegationsRequest extends Message<QueryDelegatorOperatorUnbondingDelegationsRequest> {
  /**
   * DelegatorAddress is the address of the delegator to query
   *
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress = "";

  /**
   * Pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryDelegatorOperatorUnbondingDelegationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryDelegatorOperatorUnbondingDelegationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDelegatorOperatorUnbondingDelegationsRequest {
    return new QueryDelegatorOperatorUnbondingDelegationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDelegatorOperatorUnbondingDelegationsRequest {
    return new QueryDelegatorOperatorUnbondingDelegationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDelegatorOperatorUnbondingDelegationsRequest {
    return new QueryDelegatorOperatorUnbondingDelegationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDelegatorOperatorUnbondingDelegationsRequest | PlainMessage<QueryDelegatorOperatorUnbondingDelegationsRequest> | undefined, b: QueryDelegatorOperatorUnbondingDelegationsRequest | PlainMessage<QueryDelegatorOperatorUnbondingDelegationsRequest> | undefined): boolean {
    return proto3.util.equals(QueryDelegatorOperatorUnbondingDelegationsRequest, a, b);
  }
}

/**
 * QueryDelegatorOperatorUnbondingDelegationsResponse is response type for the
 * Query/DelegatorOperatorUnbondingDelegations RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryDelegatorOperatorUnbondingDelegationsResponse
 */
export class QueryDelegatorOperatorUnbondingDelegationsResponse extends Message<QueryDelegatorOperatorUnbondingDelegationsResponse> {
  /**
   * UnbondingDelegations is the list of unbonding delegations
   *
   * @generated from field: repeated milkyway.restaking.v1.UnbondingDelegation unbonding_delegations = 1;
   */
  unbondingDelegations: UnbondingDelegation[] = [];

  /**
   * Pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryDelegatorOperatorUnbondingDelegationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryDelegatorOperatorUnbondingDelegationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "unbonding_delegations", kind: "message", T: UnbondingDelegation, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDelegatorOperatorUnbondingDelegationsResponse {
    return new QueryDelegatorOperatorUnbondingDelegationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDelegatorOperatorUnbondingDelegationsResponse {
    return new QueryDelegatorOperatorUnbondingDelegationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDelegatorOperatorUnbondingDelegationsResponse {
    return new QueryDelegatorOperatorUnbondingDelegationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDelegatorOperatorUnbondingDelegationsResponse | PlainMessage<QueryDelegatorOperatorUnbondingDelegationsResponse> | undefined, b: QueryDelegatorOperatorUnbondingDelegationsResponse | PlainMessage<QueryDelegatorOperatorUnbondingDelegationsResponse> | undefined): boolean {
    return proto3.util.equals(QueryDelegatorOperatorUnbondingDelegationsResponse, a, b);
  }
}

/**
 * QueryDelegatorServiceDelegationsRequest is request type for the
 * Query/DelegatorServiceDelegations RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryDelegatorServiceDelegationsRequest
 */
export class QueryDelegatorServiceDelegationsRequest extends Message<QueryDelegatorServiceDelegationsRequest> {
  /**
   * DelegatorAddress is the address of the delegator to query
   *
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress = "";

  /**
   * Pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryDelegatorServiceDelegationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryDelegatorServiceDelegationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDelegatorServiceDelegationsRequest {
    return new QueryDelegatorServiceDelegationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDelegatorServiceDelegationsRequest {
    return new QueryDelegatorServiceDelegationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDelegatorServiceDelegationsRequest {
    return new QueryDelegatorServiceDelegationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDelegatorServiceDelegationsRequest | PlainMessage<QueryDelegatorServiceDelegationsRequest> | undefined, b: QueryDelegatorServiceDelegationsRequest | PlainMessage<QueryDelegatorServiceDelegationsRequest> | undefined): boolean {
    return proto3.util.equals(QueryDelegatorServiceDelegationsRequest, a, b);
  }
}

/**
 * QueryDelegatorServiceDelegationsResponse is response type for the
 * Query/DelegatorServiceDelegations RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryDelegatorServiceDelegationsResponse
 */
export class QueryDelegatorServiceDelegationsResponse extends Message<QueryDelegatorServiceDelegationsResponse> {
  /**
   * Delegations is the list of delegations
   *
   * @generated from field: repeated milkyway.restaking.v1.DelegationResponse delegations = 1;
   */
  delegations: DelegationResponse[] = [];

  /**
   * Pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryDelegatorServiceDelegationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryDelegatorServiceDelegationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegations", kind: "message", T: DelegationResponse, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDelegatorServiceDelegationsResponse {
    return new QueryDelegatorServiceDelegationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDelegatorServiceDelegationsResponse {
    return new QueryDelegatorServiceDelegationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDelegatorServiceDelegationsResponse {
    return new QueryDelegatorServiceDelegationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDelegatorServiceDelegationsResponse | PlainMessage<QueryDelegatorServiceDelegationsResponse> | undefined, b: QueryDelegatorServiceDelegationsResponse | PlainMessage<QueryDelegatorServiceDelegationsResponse> | undefined): boolean {
    return proto3.util.equals(QueryDelegatorServiceDelegationsResponse, a, b);
  }
}

/**
 * QueryDelegatorServiceUnbondingDelegationsRequest is request type for the
 * Query/DelegatorServiceUnbondingDelegations RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryDelegatorServiceUnbondingDelegationsRequest
 */
export class QueryDelegatorServiceUnbondingDelegationsRequest extends Message<QueryDelegatorServiceUnbondingDelegationsRequest> {
  /**
   * DelegatorAddress is the address of the delegator to query
   *
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress = "";

  /**
   * Pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryDelegatorServiceUnbondingDelegationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryDelegatorServiceUnbondingDelegationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDelegatorServiceUnbondingDelegationsRequest {
    return new QueryDelegatorServiceUnbondingDelegationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDelegatorServiceUnbondingDelegationsRequest {
    return new QueryDelegatorServiceUnbondingDelegationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDelegatorServiceUnbondingDelegationsRequest {
    return new QueryDelegatorServiceUnbondingDelegationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDelegatorServiceUnbondingDelegationsRequest | PlainMessage<QueryDelegatorServiceUnbondingDelegationsRequest> | undefined, b: QueryDelegatorServiceUnbondingDelegationsRequest | PlainMessage<QueryDelegatorServiceUnbondingDelegationsRequest> | undefined): boolean {
    return proto3.util.equals(QueryDelegatorServiceUnbondingDelegationsRequest, a, b);
  }
}

/**
 * QueryDelegatorServiceUnbondingDelegationsResponse is response type for the
 * Query/DelegatorServiceUnbondingDelegations RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryDelegatorServiceUnbondingDelegationsResponse
 */
export class QueryDelegatorServiceUnbondingDelegationsResponse extends Message<QueryDelegatorServiceUnbondingDelegationsResponse> {
  /**
   * UnbondingDelegations is the list of unbonding delegations
   *
   * @generated from field: repeated milkyway.restaking.v1.UnbondingDelegation unbonding_delegations = 1;
   */
  unbondingDelegations: UnbondingDelegation[] = [];

  /**
   * Pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryDelegatorServiceUnbondingDelegationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryDelegatorServiceUnbondingDelegationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "unbonding_delegations", kind: "message", T: UnbondingDelegation, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDelegatorServiceUnbondingDelegationsResponse {
    return new QueryDelegatorServiceUnbondingDelegationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDelegatorServiceUnbondingDelegationsResponse {
    return new QueryDelegatorServiceUnbondingDelegationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDelegatorServiceUnbondingDelegationsResponse {
    return new QueryDelegatorServiceUnbondingDelegationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDelegatorServiceUnbondingDelegationsResponse | PlainMessage<QueryDelegatorServiceUnbondingDelegationsResponse> | undefined, b: QueryDelegatorServiceUnbondingDelegationsResponse | PlainMessage<QueryDelegatorServiceUnbondingDelegationsResponse> | undefined): boolean {
    return proto3.util.equals(QueryDelegatorServiceUnbondingDelegationsResponse, a, b);
  }
}

/**
 * QueryDelegatorPoolsRequest is request type for the Query/DelegatorPools RPC
 * method.
 *
 * @generated from message milkyway.restaking.v1.QueryDelegatorPoolsRequest
 */
export class QueryDelegatorPoolsRequest extends Message<QueryDelegatorPoolsRequest> {
  /**
   * DelegatorAddress is the address of the delegator to query
   *
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress = "";

  /**
   * Pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryDelegatorPoolsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryDelegatorPoolsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDelegatorPoolsRequest {
    return new QueryDelegatorPoolsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDelegatorPoolsRequest {
    return new QueryDelegatorPoolsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDelegatorPoolsRequest {
    return new QueryDelegatorPoolsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDelegatorPoolsRequest | PlainMessage<QueryDelegatorPoolsRequest> | undefined, b: QueryDelegatorPoolsRequest | PlainMessage<QueryDelegatorPoolsRequest> | undefined): boolean {
    return proto3.util.equals(QueryDelegatorPoolsRequest, a, b);
  }
}

/**
 * QueryDelegatorPoolsResponse is response type for the Query/DelegatorPools RPC
 * method.
 *
 * @generated from message milkyway.restaking.v1.QueryDelegatorPoolsResponse
 */
export class QueryDelegatorPoolsResponse extends Message<QueryDelegatorPoolsResponse> {
  /**
   * Pools is the list of pools
   *
   * @generated from field: repeated milkyway.pools.v1.Pool pools = 1;
   */
  pools: Pool[] = [];

  /**
   * Pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryDelegatorPoolsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryDelegatorPoolsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pools", kind: "message", T: Pool, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDelegatorPoolsResponse {
    return new QueryDelegatorPoolsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDelegatorPoolsResponse {
    return new QueryDelegatorPoolsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDelegatorPoolsResponse {
    return new QueryDelegatorPoolsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDelegatorPoolsResponse | PlainMessage<QueryDelegatorPoolsResponse> | undefined, b: QueryDelegatorPoolsResponse | PlainMessage<QueryDelegatorPoolsResponse> | undefined): boolean {
    return proto3.util.equals(QueryDelegatorPoolsResponse, a, b);
  }
}

/**
 * QueryDelegatorPoolRequest is request type for the Query/DelegatorPool RPC
 * method.
 *
 * @generated from message milkyway.restaking.v1.QueryDelegatorPoolRequest
 */
export class QueryDelegatorPoolRequest extends Message<QueryDelegatorPoolRequest> {
  /**
   * DelegatorAddress is the address of the delegator to query
   *
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress = "";

  /**
   * PoolId is the ID of the pool to query
   *
   * @generated from field: uint32 pool_id = 2;
   */
  poolId = 0;

  constructor(data?: PartialMessage<QueryDelegatorPoolRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryDelegatorPoolRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pool_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDelegatorPoolRequest {
    return new QueryDelegatorPoolRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDelegatorPoolRequest {
    return new QueryDelegatorPoolRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDelegatorPoolRequest {
    return new QueryDelegatorPoolRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDelegatorPoolRequest | PlainMessage<QueryDelegatorPoolRequest> | undefined, b: QueryDelegatorPoolRequest | PlainMessage<QueryDelegatorPoolRequest> | undefined): boolean {
    return proto3.util.equals(QueryDelegatorPoolRequest, a, b);
  }
}

/**
 * QueryDelegatorPoolResponse is response type for the Query/DelegatorPool RPC
 * method.
 *
 * @generated from message milkyway.restaking.v1.QueryDelegatorPoolResponse
 */
export class QueryDelegatorPoolResponse extends Message<QueryDelegatorPoolResponse> {
  /**
   * Pool is the pool
   *
   * @generated from field: milkyway.pools.v1.Pool pool = 1;
   */
  pool?: Pool;

  constructor(data?: PartialMessage<QueryDelegatorPoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryDelegatorPoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool", kind: "message", T: Pool },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDelegatorPoolResponse {
    return new QueryDelegatorPoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDelegatorPoolResponse {
    return new QueryDelegatorPoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDelegatorPoolResponse {
    return new QueryDelegatorPoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDelegatorPoolResponse | PlainMessage<QueryDelegatorPoolResponse> | undefined, b: QueryDelegatorPoolResponse | PlainMessage<QueryDelegatorPoolResponse> | undefined): boolean {
    return proto3.util.equals(QueryDelegatorPoolResponse, a, b);
  }
}

/**
 * QueryDelegatorOperatorsRequest is request type for the
 * Query/DelegatorOperators RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryDelegatorOperatorsRequest
 */
export class QueryDelegatorOperatorsRequest extends Message<QueryDelegatorOperatorsRequest> {
  /**
   * DelegatorAddress is the address of the delegator to query
   *
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress = "";

  /**
   * Pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryDelegatorOperatorsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryDelegatorOperatorsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDelegatorOperatorsRequest {
    return new QueryDelegatorOperatorsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDelegatorOperatorsRequest {
    return new QueryDelegatorOperatorsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDelegatorOperatorsRequest {
    return new QueryDelegatorOperatorsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDelegatorOperatorsRequest | PlainMessage<QueryDelegatorOperatorsRequest> | undefined, b: QueryDelegatorOperatorsRequest | PlainMessage<QueryDelegatorOperatorsRequest> | undefined): boolean {
    return proto3.util.equals(QueryDelegatorOperatorsRequest, a, b);
  }
}

/**
 * QueryDelegatorOperatorsResponse is response type for the
 * Query/DelegatorOperators RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryDelegatorOperatorsResponse
 */
export class QueryDelegatorOperatorsResponse extends Message<QueryDelegatorOperatorsResponse> {
  /**
   * Operators is the list of operators
   *
   * @generated from field: repeated milkyway.operators.v1.Operator operators = 1;
   */
  operators: Operator[] = [];

  /**
   * Pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryDelegatorOperatorsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryDelegatorOperatorsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "operators", kind: "message", T: Operator, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDelegatorOperatorsResponse {
    return new QueryDelegatorOperatorsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDelegatorOperatorsResponse {
    return new QueryDelegatorOperatorsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDelegatorOperatorsResponse {
    return new QueryDelegatorOperatorsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDelegatorOperatorsResponse | PlainMessage<QueryDelegatorOperatorsResponse> | undefined, b: QueryDelegatorOperatorsResponse | PlainMessage<QueryDelegatorOperatorsResponse> | undefined): boolean {
    return proto3.util.equals(QueryDelegatorOperatorsResponse, a, b);
  }
}

/**
 * QueryDelegatorOperatorRequest is request type for the Query/DelegatorOperator
 * RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryDelegatorOperatorRequest
 */
export class QueryDelegatorOperatorRequest extends Message<QueryDelegatorOperatorRequest> {
  /**
   * DelegatorAddress is the address of the delegator to query
   *
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress = "";

  /**
   * OperatorId is the ID of the operator to query
   *
   * @generated from field: uint32 operator_id = 2;
   */
  operatorId = 0;

  constructor(data?: PartialMessage<QueryDelegatorOperatorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryDelegatorOperatorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "operator_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDelegatorOperatorRequest {
    return new QueryDelegatorOperatorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDelegatorOperatorRequest {
    return new QueryDelegatorOperatorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDelegatorOperatorRequest {
    return new QueryDelegatorOperatorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDelegatorOperatorRequest | PlainMessage<QueryDelegatorOperatorRequest> | undefined, b: QueryDelegatorOperatorRequest | PlainMessage<QueryDelegatorOperatorRequest> | undefined): boolean {
    return proto3.util.equals(QueryDelegatorOperatorRequest, a, b);
  }
}

/**
 * QueryDelegatorOperatorResponse is response type for the
 * Query/DelegatorOperator RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryDelegatorOperatorResponse
 */
export class QueryDelegatorOperatorResponse extends Message<QueryDelegatorOperatorResponse> {
  /**
   * Operator is the operator
   *
   * @generated from field: milkyway.operators.v1.Operator operator = 1;
   */
  operator?: Operator;

  constructor(data?: PartialMessage<QueryDelegatorOperatorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryDelegatorOperatorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "operator", kind: "message", T: Operator },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDelegatorOperatorResponse {
    return new QueryDelegatorOperatorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDelegatorOperatorResponse {
    return new QueryDelegatorOperatorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDelegatorOperatorResponse {
    return new QueryDelegatorOperatorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDelegatorOperatorResponse | PlainMessage<QueryDelegatorOperatorResponse> | undefined, b: QueryDelegatorOperatorResponse | PlainMessage<QueryDelegatorOperatorResponse> | undefined): boolean {
    return proto3.util.equals(QueryDelegatorOperatorResponse, a, b);
  }
}

/**
 * QueryDelegatorServicesRequest is request type for the Query/DelegatorServices
 * RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryDelegatorServicesRequest
 */
export class QueryDelegatorServicesRequest extends Message<QueryDelegatorServicesRequest> {
  /**
   * DelegatorAddress is the address of the delegator to query
   *
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress = "";

  /**
   * Pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryDelegatorServicesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryDelegatorServicesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDelegatorServicesRequest {
    return new QueryDelegatorServicesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDelegatorServicesRequest {
    return new QueryDelegatorServicesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDelegatorServicesRequest {
    return new QueryDelegatorServicesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDelegatorServicesRequest | PlainMessage<QueryDelegatorServicesRequest> | undefined, b: QueryDelegatorServicesRequest | PlainMessage<QueryDelegatorServicesRequest> | undefined): boolean {
    return proto3.util.equals(QueryDelegatorServicesRequest, a, b);
  }
}

/**
 * QueryDelegatorServicesResponse is response type for the
 * Query/DelegatorServices RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryDelegatorServicesResponse
 */
export class QueryDelegatorServicesResponse extends Message<QueryDelegatorServicesResponse> {
  /**
   * Services is the list of services
   *
   * @generated from field: repeated milkyway.services.v1.Service services = 1;
   */
  services: Service[] = [];

  /**
   * Pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryDelegatorServicesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryDelegatorServicesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "services", kind: "message", T: Service, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDelegatorServicesResponse {
    return new QueryDelegatorServicesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDelegatorServicesResponse {
    return new QueryDelegatorServicesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDelegatorServicesResponse {
    return new QueryDelegatorServicesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDelegatorServicesResponse | PlainMessage<QueryDelegatorServicesResponse> | undefined, b: QueryDelegatorServicesResponse | PlainMessage<QueryDelegatorServicesResponse> | undefined): boolean {
    return proto3.util.equals(QueryDelegatorServicesResponse, a, b);
  }
}

/**
 * QueryDelegatorServiceRequest is request type for the Query/DelegatorService
 * RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryDelegatorServiceRequest
 */
export class QueryDelegatorServiceRequest extends Message<QueryDelegatorServiceRequest> {
  /**
   * DelegatorAddress is the address of the delegator to query
   *
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress = "";

  /**
   * ServiceId is the ID of the service to query
   *
   * @generated from field: uint32 service_id = 2;
   */
  serviceId = 0;

  constructor(data?: PartialMessage<QueryDelegatorServiceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryDelegatorServiceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "service_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDelegatorServiceRequest {
    return new QueryDelegatorServiceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDelegatorServiceRequest {
    return new QueryDelegatorServiceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDelegatorServiceRequest {
    return new QueryDelegatorServiceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDelegatorServiceRequest | PlainMessage<QueryDelegatorServiceRequest> | undefined, b: QueryDelegatorServiceRequest | PlainMessage<QueryDelegatorServiceRequest> | undefined): boolean {
    return proto3.util.equals(QueryDelegatorServiceRequest, a, b);
  }
}

/**
 * QueryDelegatorServiceResponse is response type for the Query/DelegatorService
 * RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryDelegatorServiceResponse
 */
export class QueryDelegatorServiceResponse extends Message<QueryDelegatorServiceResponse> {
  /**
   * Service is the service
   *
   * @generated from field: milkyway.services.v1.Service service = 1;
   */
  service?: Service;

  constructor(data?: PartialMessage<QueryDelegatorServiceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryDelegatorServiceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service", kind: "message", T: Service },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDelegatorServiceResponse {
    return new QueryDelegatorServiceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDelegatorServiceResponse {
    return new QueryDelegatorServiceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDelegatorServiceResponse {
    return new QueryDelegatorServiceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDelegatorServiceResponse | PlainMessage<QueryDelegatorServiceResponse> | undefined, b: QueryDelegatorServiceResponse | PlainMessage<QueryDelegatorServiceResponse> | undefined): boolean {
    return proto3.util.equals(QueryDelegatorServiceResponse, a, b);
  }
}

/**
 * QueryUserPreferences is request type for the Query/UserPreferences RPC
 * method.
 *
 * @generated from message milkyway.restaking.v1.QueryUserPreferencesRequest
 */
export class QueryUserPreferencesRequest extends Message<QueryUserPreferencesRequest> {
  /**
   * UserAddress is the address of the user to query the preferences for
   *
   * @generated from field: string user_address = 1;
   */
  userAddress = "";

  constructor(data?: PartialMessage<QueryUserPreferencesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryUserPreferencesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryUserPreferencesRequest {
    return new QueryUserPreferencesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryUserPreferencesRequest {
    return new QueryUserPreferencesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryUserPreferencesRequest {
    return new QueryUserPreferencesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryUserPreferencesRequest | PlainMessage<QueryUserPreferencesRequest> | undefined, b: QueryUserPreferencesRequest | PlainMessage<QueryUserPreferencesRequest> | undefined): boolean {
    return proto3.util.equals(QueryUserPreferencesRequest, a, b);
  }
}

/**
 * QueryUserPreferencesResponse is response type for the Query/UserPreferences
 * RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryUserPreferencesResponse
 */
export class QueryUserPreferencesResponse extends Message<QueryUserPreferencesResponse> {
  /**
   * Preferences is the user preferences
   *
   * @generated from field: milkyway.restaking.v1.UserPreferences preferences = 1;
   */
  preferences?: UserPreferences;

  constructor(data?: PartialMessage<QueryUserPreferencesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryUserPreferencesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "preferences", kind: "message", T: UserPreferences },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryUserPreferencesResponse {
    return new QueryUserPreferencesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryUserPreferencesResponse {
    return new QueryUserPreferencesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryUserPreferencesResponse {
    return new QueryUserPreferencesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryUserPreferencesResponse | PlainMessage<QueryUserPreferencesResponse> | undefined, b: QueryUserPreferencesResponse | PlainMessage<QueryUserPreferencesResponse> | undefined): boolean {
    return proto3.util.equals(QueryUserPreferencesResponse, a, b);
  }
}

/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from message milkyway.restaking.v1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: milkyway.restaking.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

