// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file milkyway/restaking/v1/messages.proto (package milkyway.restaking.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
import { Params } from "./params_pb.js";
import { UserPreferences } from "./models_pb.js";

/**
 * MsgJoinService defines the message structure for the
 * JoinService gRPC service method. It allows the operator admin to
 * start securing a AVS.
 *
 * @generated from message milkyway.restaking.v1.MsgJoinService
 */
export class MsgJoinService extends Message<MsgJoinService> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: uint32 operator_id = 2;
   */
  operatorId = 0;

  /**
   * @generated from field: uint32 service_id = 3;
   */
  serviceId = 0;

  constructor(data?: PartialMessage<MsgJoinService>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.MsgJoinService";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "operator_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "service_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgJoinService {
    return new MsgJoinService().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgJoinService {
    return new MsgJoinService().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgJoinService {
    return new MsgJoinService().fromJsonString(jsonString, options);
  }

  static equals(a: MsgJoinService | PlainMessage<MsgJoinService> | undefined, b: MsgJoinService | PlainMessage<MsgJoinService> | undefined): boolean {
    return proto3.util.equals(MsgJoinService, a, b);
  }
}

/**
 * MsgJoinServiceResponse is the return value of MsgJoinService.
 *
 * @generated from message milkyway.restaking.v1.MsgJoinServiceResponse
 */
export class MsgJoinServiceResponse extends Message<MsgJoinServiceResponse> {
  constructor(data?: PartialMessage<MsgJoinServiceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.MsgJoinServiceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgJoinServiceResponse {
    return new MsgJoinServiceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgJoinServiceResponse {
    return new MsgJoinServiceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgJoinServiceResponse {
    return new MsgJoinServiceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgJoinServiceResponse | PlainMessage<MsgJoinServiceResponse> | undefined, b: MsgJoinServiceResponse | PlainMessage<MsgJoinServiceResponse> | undefined): boolean {
    return proto3.util.equals(MsgJoinServiceResponse, a, b);
  }
}

/**
 * MsgLeaveService defines the message structure for the
 * LeaveService gRPC service method. It allows the operator admin to
 * stop securing a AVS.
 *
 * @generated from message milkyway.restaking.v1.MsgLeaveService
 */
export class MsgLeaveService extends Message<MsgLeaveService> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: uint32 operator_id = 2;
   */
  operatorId = 0;

  /**
   * @generated from field: uint32 service_id = 3;
   */
  serviceId = 0;

  constructor(data?: PartialMessage<MsgLeaveService>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.MsgLeaveService";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "operator_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "service_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgLeaveService {
    return new MsgLeaveService().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgLeaveService {
    return new MsgLeaveService().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgLeaveService {
    return new MsgLeaveService().fromJsonString(jsonString, options);
  }

  static equals(a: MsgLeaveService | PlainMessage<MsgLeaveService> | undefined, b: MsgLeaveService | PlainMessage<MsgLeaveService> | undefined): boolean {
    return proto3.util.equals(MsgLeaveService, a, b);
  }
}

/**
 * MsgLeaveServiceResponse is the return value of MsgLeaveService.
 *
 * @generated from message milkyway.restaking.v1.MsgLeaveServiceResponse
 */
export class MsgLeaveServiceResponse extends Message<MsgLeaveServiceResponse> {
  constructor(data?: PartialMessage<MsgLeaveServiceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.MsgLeaveServiceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgLeaveServiceResponse {
    return new MsgLeaveServiceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgLeaveServiceResponse {
    return new MsgLeaveServiceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgLeaveServiceResponse {
    return new MsgLeaveServiceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgLeaveServiceResponse | PlainMessage<MsgLeaveServiceResponse> | undefined, b: MsgLeaveServiceResponse | PlainMessage<MsgLeaveServiceResponse> | undefined): boolean {
    return proto3.util.equals(MsgLeaveServiceResponse, a, b);
  }
}

/**
 * MsgAddOperatorToAllowList defines the message structure for the
 * AddOperatorToAllowList gRPC service method. It allows the service admin
 * to add an operator to the list of allowed operator to secure the service.
 *
 * @generated from message milkyway.restaking.v1.MsgAddOperatorToAllowList
 */
export class MsgAddOperatorToAllowList extends Message<MsgAddOperatorToAllowList> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: uint32 service_id = 2;
   */
  serviceId = 0;

  /**
   * @generated from field: uint32 operator_id = 3;
   */
  operatorId = 0;

  constructor(data?: PartialMessage<MsgAddOperatorToAllowList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.MsgAddOperatorToAllowList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "service_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "operator_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgAddOperatorToAllowList {
    return new MsgAddOperatorToAllowList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgAddOperatorToAllowList {
    return new MsgAddOperatorToAllowList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgAddOperatorToAllowList {
    return new MsgAddOperatorToAllowList().fromJsonString(jsonString, options);
  }

  static equals(a: MsgAddOperatorToAllowList | PlainMessage<MsgAddOperatorToAllowList> | undefined, b: MsgAddOperatorToAllowList | PlainMessage<MsgAddOperatorToAllowList> | undefined): boolean {
    return proto3.util.equals(MsgAddOperatorToAllowList, a, b);
  }
}

/**
 * MsgAddOperatorToAllowListResponse is the return value of
 * MsgAddOperatorToAllowList.
 *
 * @generated from message milkyway.restaking.v1.MsgAddOperatorToAllowListResponse
 */
export class MsgAddOperatorToAllowListResponse extends Message<MsgAddOperatorToAllowListResponse> {
  constructor(data?: PartialMessage<MsgAddOperatorToAllowListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.MsgAddOperatorToAllowListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgAddOperatorToAllowListResponse {
    return new MsgAddOperatorToAllowListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgAddOperatorToAllowListResponse {
    return new MsgAddOperatorToAllowListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgAddOperatorToAllowListResponse {
    return new MsgAddOperatorToAllowListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgAddOperatorToAllowListResponse | PlainMessage<MsgAddOperatorToAllowListResponse> | undefined, b: MsgAddOperatorToAllowListResponse | PlainMessage<MsgAddOperatorToAllowListResponse> | undefined): boolean {
    return proto3.util.equals(MsgAddOperatorToAllowListResponse, a, b);
  }
}

/**
 * MsgRemoveOperatorFromAllowlist defines the message structure for the
 * RemoveOperatorFromAllowlist gRPC service method. It allows the service admin
 * to remove a previously added operator from the list of allowed operators
 * to secure the service.
 *
 * @generated from message milkyway.restaking.v1.MsgRemoveOperatorFromAllowlist
 */
export class MsgRemoveOperatorFromAllowlist extends Message<MsgRemoveOperatorFromAllowlist> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: uint32 service_id = 2;
   */
  serviceId = 0;

  /**
   * @generated from field: uint32 operator_id = 3;
   */
  operatorId = 0;

  constructor(data?: PartialMessage<MsgRemoveOperatorFromAllowlist>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.MsgRemoveOperatorFromAllowlist";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "service_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "operator_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRemoveOperatorFromAllowlist {
    return new MsgRemoveOperatorFromAllowlist().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRemoveOperatorFromAllowlist {
    return new MsgRemoveOperatorFromAllowlist().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRemoveOperatorFromAllowlist {
    return new MsgRemoveOperatorFromAllowlist().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRemoveOperatorFromAllowlist | PlainMessage<MsgRemoveOperatorFromAllowlist> | undefined, b: MsgRemoveOperatorFromAllowlist | PlainMessage<MsgRemoveOperatorFromAllowlist> | undefined): boolean {
    return proto3.util.equals(MsgRemoveOperatorFromAllowlist, a, b);
  }
}

/**
 * MsgRemoveOperatorFromAllowlistResponse is the return value of
 * MsgRemoveOperatorFromAllowlist.
 *
 * @generated from message milkyway.restaking.v1.MsgRemoveOperatorFromAllowlistResponse
 */
export class MsgRemoveOperatorFromAllowlistResponse extends Message<MsgRemoveOperatorFromAllowlistResponse> {
  constructor(data?: PartialMessage<MsgRemoveOperatorFromAllowlistResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.MsgRemoveOperatorFromAllowlistResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRemoveOperatorFromAllowlistResponse {
    return new MsgRemoveOperatorFromAllowlistResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRemoveOperatorFromAllowlistResponse {
    return new MsgRemoveOperatorFromAllowlistResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRemoveOperatorFromAllowlistResponse {
    return new MsgRemoveOperatorFromAllowlistResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRemoveOperatorFromAllowlistResponse | PlainMessage<MsgRemoveOperatorFromAllowlistResponse> | undefined, b: MsgRemoveOperatorFromAllowlistResponse | PlainMessage<MsgRemoveOperatorFromAllowlistResponse> | undefined): boolean {
    return proto3.util.equals(MsgRemoveOperatorFromAllowlistResponse, a, b);
  }
}

/**
 * MsgBorrowPoolSecurity defines the message structure for the
 * BorrowPoolSecurity gRPC service method. It allows the service admin
 * to add a pool to the list of pools from which the service has chosen
 * to borrow security.
 *
 * @generated from message milkyway.restaking.v1.MsgBorrowPoolSecurity
 */
export class MsgBorrowPoolSecurity extends Message<MsgBorrowPoolSecurity> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: uint32 service_id = 2;
   */
  serviceId = 0;

  /**
   * @generated from field: uint32 pool_id = 3;
   */
  poolId = 0;

  constructor(data?: PartialMessage<MsgBorrowPoolSecurity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.MsgBorrowPoolSecurity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "service_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "pool_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgBorrowPoolSecurity {
    return new MsgBorrowPoolSecurity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgBorrowPoolSecurity {
    return new MsgBorrowPoolSecurity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgBorrowPoolSecurity {
    return new MsgBorrowPoolSecurity().fromJsonString(jsonString, options);
  }

  static equals(a: MsgBorrowPoolSecurity | PlainMessage<MsgBorrowPoolSecurity> | undefined, b: MsgBorrowPoolSecurity | PlainMessage<MsgBorrowPoolSecurity> | undefined): boolean {
    return proto3.util.equals(MsgBorrowPoolSecurity, a, b);
  }
}

/**
 * MsgBorrowPoolSecurityResponse is the return value of MsgBorrowPoolSecurity.
 *
 * @generated from message milkyway.restaking.v1.MsgBorrowPoolSecurityResponse
 */
export class MsgBorrowPoolSecurityResponse extends Message<MsgBorrowPoolSecurityResponse> {
  constructor(data?: PartialMessage<MsgBorrowPoolSecurityResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.MsgBorrowPoolSecurityResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgBorrowPoolSecurityResponse {
    return new MsgBorrowPoolSecurityResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgBorrowPoolSecurityResponse {
    return new MsgBorrowPoolSecurityResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgBorrowPoolSecurityResponse {
    return new MsgBorrowPoolSecurityResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgBorrowPoolSecurityResponse | PlainMessage<MsgBorrowPoolSecurityResponse> | undefined, b: MsgBorrowPoolSecurityResponse | PlainMessage<MsgBorrowPoolSecurityResponse> | undefined): boolean {
    return proto3.util.equals(MsgBorrowPoolSecurityResponse, a, b);
  }
}

/**
 * MsgCeasePoolSecurityBorrow defines the message structure for the
 * CeaseBorrowPoolSecurity gRPC service method. It allows the service admin
 * to remove a pool from the list of pools from which the service has chosen
 * to borrow security.
 *
 * @generated from message milkyway.restaking.v1.MsgCeasePoolSecurityBorrow
 */
export class MsgCeasePoolSecurityBorrow extends Message<MsgCeasePoolSecurityBorrow> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: uint32 service_id = 2;
   */
  serviceId = 0;

  /**
   * @generated from field: uint32 pool_id = 3;
   */
  poolId = 0;

  constructor(data?: PartialMessage<MsgCeasePoolSecurityBorrow>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.MsgCeasePoolSecurityBorrow";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "service_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "pool_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCeasePoolSecurityBorrow {
    return new MsgCeasePoolSecurityBorrow().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCeasePoolSecurityBorrow {
    return new MsgCeasePoolSecurityBorrow().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCeasePoolSecurityBorrow {
    return new MsgCeasePoolSecurityBorrow().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCeasePoolSecurityBorrow | PlainMessage<MsgCeasePoolSecurityBorrow> | undefined, b: MsgCeasePoolSecurityBorrow | PlainMessage<MsgCeasePoolSecurityBorrow> | undefined): boolean {
    return proto3.util.equals(MsgCeasePoolSecurityBorrow, a, b);
  }
}

/**
 * MsgCeasePoolSecurityBorrowResponse is the return value of
 * MsgCeasePoolSecurityBorrow.
 *
 * @generated from message milkyway.restaking.v1.MsgCeasePoolSecurityBorrowResponse
 */
export class MsgCeasePoolSecurityBorrowResponse extends Message<MsgCeasePoolSecurityBorrowResponse> {
  constructor(data?: PartialMessage<MsgCeasePoolSecurityBorrowResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.MsgCeasePoolSecurityBorrowResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCeasePoolSecurityBorrowResponse {
    return new MsgCeasePoolSecurityBorrowResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCeasePoolSecurityBorrowResponse {
    return new MsgCeasePoolSecurityBorrowResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCeasePoolSecurityBorrowResponse {
    return new MsgCeasePoolSecurityBorrowResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCeasePoolSecurityBorrowResponse | PlainMessage<MsgCeasePoolSecurityBorrowResponse> | undefined, b: MsgCeasePoolSecurityBorrowResponse | PlainMessage<MsgCeasePoolSecurityBorrowResponse> | undefined): boolean {
    return proto3.util.equals(MsgCeasePoolSecurityBorrowResponse, a, b);
  }
}

/**
 * MsgDelegatePool defines the message structure for the DelegatePool gRPC
 * service method. It allows a user to put their assets into a restaking pool
 * that will later be used to provide cryptoeconomic security to services that
 * choose it.
 *
 * @generated from message milkyway.restaking.v1.MsgDelegatePool
 */
export class MsgDelegatePool extends Message<MsgDelegatePool> {
  /**
   * Delegator is the address of the user joining the pool
   *
   * @generated from field: string delegator = 1;
   */
  delegator = "";

  /**
   * Amount is the amount of coins to be staked
   *
   * @generated from field: cosmos.base.v1beta1.Coin amount = 2;
   */
  amount?: Coin;

  constructor(data?: PartialMessage<MsgDelegatePool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.MsgDelegatePool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDelegatePool {
    return new MsgDelegatePool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDelegatePool {
    return new MsgDelegatePool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDelegatePool {
    return new MsgDelegatePool().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDelegatePool | PlainMessage<MsgDelegatePool> | undefined, b: MsgDelegatePool | PlainMessage<MsgDelegatePool> | undefined): boolean {
    return proto3.util.equals(MsgDelegatePool, a, b);
  }
}

/**
 * MsgDelegatePoolResponse defines the return value of MsgDelegatePool.
 *
 * @generated from message milkyway.restaking.v1.MsgDelegatePoolResponse
 */
export class MsgDelegatePoolResponse extends Message<MsgDelegatePoolResponse> {
  constructor(data?: PartialMessage<MsgDelegatePoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.MsgDelegatePoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDelegatePoolResponse {
    return new MsgDelegatePoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDelegatePoolResponse {
    return new MsgDelegatePoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDelegatePoolResponse {
    return new MsgDelegatePoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDelegatePoolResponse | PlainMessage<MsgDelegatePoolResponse> | undefined, b: MsgDelegatePoolResponse | PlainMessage<MsgDelegatePoolResponse> | undefined): boolean {
    return proto3.util.equals(MsgDelegatePoolResponse, a, b);
  }
}

/**
 * MsgDelegateOperator defines the message structure for the DelegateOperator
 * gRPC service method. It allows a user to delegate their assets to an
 * operator.
 *
 * @generated from message milkyway.restaking.v1.MsgDelegateOperator
 */
export class MsgDelegateOperator extends Message<MsgDelegateOperator> {
  /**
   * Delegator is the address of the user delegating to the operator
   *
   * @generated from field: string delegator = 1;
   */
  delegator = "";

  /**
   * OperatorID is the ID of the operator to delegate to
   *
   * @generated from field: uint32 operator_id = 2;
   */
  operatorId = 0;

  /**
   * Amount is the amount of coins to be delegated
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 3;
   */
  amount: Coin[] = [];

  constructor(data?: PartialMessage<MsgDelegateOperator>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.MsgDelegateOperator";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "operator_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "amount", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDelegateOperator {
    return new MsgDelegateOperator().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDelegateOperator {
    return new MsgDelegateOperator().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDelegateOperator {
    return new MsgDelegateOperator().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDelegateOperator | PlainMessage<MsgDelegateOperator> | undefined, b: MsgDelegateOperator | PlainMessage<MsgDelegateOperator> | undefined): boolean {
    return proto3.util.equals(MsgDelegateOperator, a, b);
  }
}

/**
 * MsgDelegateOperatorResponse is the return value of MsgDelegateOperator.
 *
 * @generated from message milkyway.restaking.v1.MsgDelegateOperatorResponse
 */
export class MsgDelegateOperatorResponse extends Message<MsgDelegateOperatorResponse> {
  constructor(data?: PartialMessage<MsgDelegateOperatorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.MsgDelegateOperatorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDelegateOperatorResponse {
    return new MsgDelegateOperatorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDelegateOperatorResponse {
    return new MsgDelegateOperatorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDelegateOperatorResponse {
    return new MsgDelegateOperatorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDelegateOperatorResponse | PlainMessage<MsgDelegateOperatorResponse> | undefined, b: MsgDelegateOperatorResponse | PlainMessage<MsgDelegateOperatorResponse> | undefined): boolean {
    return proto3.util.equals(MsgDelegateOperatorResponse, a, b);
  }
}

/**
 * MsgDelegateService defines the message structure for the DelegateService gRPC
 * service method. It allows a user to delegate their assets to a service.
 *
 * @generated from message milkyway.restaking.v1.MsgDelegateService
 */
export class MsgDelegateService extends Message<MsgDelegateService> {
  /**
   * Delegator is the address of the user delegating to the service
   *
   * @generated from field: string delegator = 1;
   */
  delegator = "";

  /**
   * ServiceID is the ID of the service to delegate to
   *
   * @generated from field: uint32 service_id = 2;
   */
  serviceId = 0;

  /**
   * Amount is the amount of coins to be delegated
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 3;
   */
  amount: Coin[] = [];

  constructor(data?: PartialMessage<MsgDelegateService>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.MsgDelegateService";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "service_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "amount", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDelegateService {
    return new MsgDelegateService().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDelegateService {
    return new MsgDelegateService().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDelegateService {
    return new MsgDelegateService().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDelegateService | PlainMessage<MsgDelegateService> | undefined, b: MsgDelegateService | PlainMessage<MsgDelegateService> | undefined): boolean {
    return proto3.util.equals(MsgDelegateService, a, b);
  }
}

/**
 * MsgDelegateServiceResponse is the return value of MsgDelegateService.
 *
 * @generated from message milkyway.restaking.v1.MsgDelegateServiceResponse
 */
export class MsgDelegateServiceResponse extends Message<MsgDelegateServiceResponse> {
  constructor(data?: PartialMessage<MsgDelegateServiceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.MsgDelegateServiceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDelegateServiceResponse {
    return new MsgDelegateServiceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDelegateServiceResponse {
    return new MsgDelegateServiceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDelegateServiceResponse {
    return new MsgDelegateServiceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDelegateServiceResponse | PlainMessage<MsgDelegateServiceResponse> | undefined, b: MsgDelegateServiceResponse | PlainMessage<MsgDelegateServiceResponse> | undefined): boolean {
    return proto3.util.equals(MsgDelegateServiceResponse, a, b);
  }
}

/**
 * MsgUpdateParams defines the message structure for the UpdateParams gRPC
 * service method. It allows the authority to update the module parameters.
 *
 * @generated from message milkyway.restaking.v1.MsgUpdateParams
 */
export class MsgUpdateParams extends Message<MsgUpdateParams> {
  /**
   * Authority is the address that controls the module (defaults to x/gov unless
   * overwritten).
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * Params define the parameters to update.
   *
   * NOTE: All parameters must be supplied.
   *
   * @generated from field: milkyway.restaking.v1.Params params = 2;
   */
  params?: Params;

  constructor(data?: PartialMessage<MsgUpdateParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.MsgUpdateParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined, b: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParams, a, b);
  }
}

/**
 * MsgUpdateParamsResponse is the return value of MsgUpdateParams.
 *
 * @generated from message milkyway.restaking.v1.MsgUpdateParamsResponse
 */
export class MsgUpdateParamsResponse extends Message<MsgUpdateParamsResponse> {
  constructor(data?: PartialMessage<MsgUpdateParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.MsgUpdateParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined, b: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParamsResponse, a, b);
  }
}

/**
 * MsgUndelegatePool the message structure for the UndelegatePool gRPC service
 * method. It allows a user to undelegate their assets from a restaking pool.
 *
 * @generated from message milkyway.restaking.v1.MsgUndelegatePool
 */
export class MsgUndelegatePool extends Message<MsgUndelegatePool> {
  /**
   * Delegator is the address of the user undelegating from the pool.
   *
   * @generated from field: string delegator = 1;
   */
  delegator = "";

  /**
   * Amount is the amount of coins to be undelegated.
   *
   * @generated from field: cosmos.base.v1beta1.Coin amount = 2;
   */
  amount?: Coin;

  constructor(data?: PartialMessage<MsgUndelegatePool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.MsgUndelegatePool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUndelegatePool {
    return new MsgUndelegatePool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUndelegatePool {
    return new MsgUndelegatePool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUndelegatePool {
    return new MsgUndelegatePool().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUndelegatePool | PlainMessage<MsgUndelegatePool> | undefined, b: MsgUndelegatePool | PlainMessage<MsgUndelegatePool> | undefined): boolean {
    return proto3.util.equals(MsgUndelegatePool, a, b);
  }
}

/**
 * MsgUndelegateOperator the message structure for the UndelegateOperator gRPC
 * service method. It allows a user to undelegate their assets from a restaking
 * operator.
 *
 * @generated from message milkyway.restaking.v1.MsgUndelegateOperator
 */
export class MsgUndelegateOperator extends Message<MsgUndelegateOperator> {
  /**
   * Delegator is the address of the user undelegating from the operator.
   *
   * @generated from field: string delegator = 1;
   */
  delegator = "";

  /**
   * OperatorID is the ID of the operator to undelegate from.
   *
   * @generated from field: uint32 operator_id = 2;
   */
  operatorId = 0;

  /**
   * Amount is the amount of coins to be undelegated.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 3;
   */
  amount: Coin[] = [];

  constructor(data?: PartialMessage<MsgUndelegateOperator>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.MsgUndelegateOperator";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "operator_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "amount", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUndelegateOperator {
    return new MsgUndelegateOperator().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUndelegateOperator {
    return new MsgUndelegateOperator().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUndelegateOperator {
    return new MsgUndelegateOperator().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUndelegateOperator | PlainMessage<MsgUndelegateOperator> | undefined, b: MsgUndelegateOperator | PlainMessage<MsgUndelegateOperator> | undefined): boolean {
    return proto3.util.equals(MsgUndelegateOperator, a, b);
  }
}

/**
 * MsgUndelegateService the message structure for the UndelegateService gRPC
 * service method. It allows a user to undelegate their assets from a restaking
 * service.
 *
 * @generated from message milkyway.restaking.v1.MsgUndelegateService
 */
export class MsgUndelegateService extends Message<MsgUndelegateService> {
  /**
   * Delegator is the address of the user undelegating from the service.
   *
   * @generated from field: string delegator = 1;
   */
  delegator = "";

  /**
   * ServiceID is the ID of the service to undelegate from.
   *
   * @generated from field: uint32 service_id = 2;
   */
  serviceId = 0;

  /**
   * Amount is the amount of coins to be undelegated.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 3;
   */
  amount: Coin[] = [];

  constructor(data?: PartialMessage<MsgUndelegateService>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.MsgUndelegateService";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "service_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "amount", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUndelegateService {
    return new MsgUndelegateService().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUndelegateService {
    return new MsgUndelegateService().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUndelegateService {
    return new MsgUndelegateService().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUndelegateService | PlainMessage<MsgUndelegateService> | undefined, b: MsgUndelegateService | PlainMessage<MsgUndelegateService> | undefined): boolean {
    return proto3.util.equals(MsgUndelegateService, a, b);
  }
}

/**
 * MsgUndelegateResponse defines the response type for the undelegation methods.
 *
 * @generated from message milkyway.restaking.v1.MsgUndelegateResponse
 */
export class MsgUndelegateResponse extends Message<MsgUndelegateResponse> {
  /**
   * CompletionTime represents the time at which the undelegation will be
   * complete
   *
   * @generated from field: google.protobuf.Timestamp completion_time = 1;
   */
  completionTime?: Timestamp;

  constructor(data?: PartialMessage<MsgUndelegateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.MsgUndelegateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "completion_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUndelegateResponse {
    return new MsgUndelegateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUndelegateResponse {
    return new MsgUndelegateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUndelegateResponse {
    return new MsgUndelegateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUndelegateResponse | PlainMessage<MsgUndelegateResponse> | undefined, b: MsgUndelegateResponse | PlainMessage<MsgUndelegateResponse> | undefined): boolean {
    return proto3.util.equals(MsgUndelegateResponse, a, b);
  }
}

/**
 * MsgSetUserPreferences is the message structure for the SetUserPreferences
 * gRPC service method. It allows a user to set their preferences for the
 * restaking module.
 *
 * @generated from message milkyway.restaking.v1.MsgSetUserPreferences
 */
export class MsgSetUserPreferences extends Message<MsgSetUserPreferences> {
  /**
   * User is the address of the user setting their preferences
   *
   * @generated from field: string user = 1;
   */
  user = "";

  /**
   * Preferences is the user's preferences
   *
   * @generated from field: milkyway.restaking.v1.UserPreferences preferences = 2;
   */
  preferences?: UserPreferences;

  constructor(data?: PartialMessage<MsgSetUserPreferences>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.MsgSetUserPreferences";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "preferences", kind: "message", T: UserPreferences },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetUserPreferences {
    return new MsgSetUserPreferences().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetUserPreferences {
    return new MsgSetUserPreferences().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetUserPreferences {
    return new MsgSetUserPreferences().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetUserPreferences | PlainMessage<MsgSetUserPreferences> | undefined, b: MsgSetUserPreferences | PlainMessage<MsgSetUserPreferences> | undefined): boolean {
    return proto3.util.equals(MsgSetUserPreferences, a, b);
  }
}

/**
 * MsgSetUserPreferencesResponse is the return value of MsgSetUserPreferences.
 *
 * @generated from message milkyway.restaking.v1.MsgSetUserPreferencesResponse
 */
export class MsgSetUserPreferencesResponse extends Message<MsgSetUserPreferencesResponse> {
  constructor(data?: PartialMessage<MsgSetUserPreferencesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.MsgSetUserPreferencesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetUserPreferencesResponse {
    return new MsgSetUserPreferencesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetUserPreferencesResponse {
    return new MsgSetUserPreferencesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetUserPreferencesResponse {
    return new MsgSetUserPreferencesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetUserPreferencesResponse | PlainMessage<MsgSetUserPreferencesResponse> | undefined, b: MsgSetUserPreferencesResponse | PlainMessage<MsgSetUserPreferencesResponse> | undefined): boolean {
    return proto3.util.equals(MsgSetUserPreferencesResponse, a, b);
  }
}

