// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file milkyway/restaking/v1/params.proto (package milkyway.restaking.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * Params defines the parameters for the module.
 *
 * @generated from message milkyway.restaking.v1.Params
 */
export class Params extends Message<Params> {
  /**
   * UnbondingTime represents the time that will take for assets to be unbonded
   * after the user initiates an unbonding request. This will be applied to all
   * types of restaking: pool, operator and service restaking.
   *
   * @generated from field: int64 unbonding_time = 1;
   */
  unbondingTime = protoInt64.zero;

  /**
   * AllowedDenoms represents the list of denoms allowed for restaking
   * and that will be considered when computing rewards. If no denoms are set,
   * all denoms will be considered as restakable.
   *
   * @generated from field: repeated string allowed_denoms = 2;
   */
  allowedDenoms: string[] = [];

  /**
   * RestakingCap represents the maximum USD value of overall restaked assets
   * inside the chain. If set to 0, it indicates no limit, allowing any amount
   * of assets to be restaked.
   *
   * @generated from field: string restaking_cap = 3;
   */
  restakingCap = "";

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "unbonding_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "allowed_denoms", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "restaking_cap", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}

