// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file milkyway/restaking/v1/models.proto (package milkyway.restaking.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Coin, DecCoin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * DelegationType defines the type of delegation.
 *
 * @generated from enum milkyway.restaking.v1.DelegationType
 */
export enum DelegationType {
  /**
   * DELEGATION_TYPE_UNSPECIFIED defines an unspecified delegation type.
   *
   * @generated from enum value: DELEGATION_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * DELEGATION_TYPE_POOL defines a delegation to a pool.
   *
   * @generated from enum value: DELEGATION_TYPE_POOL = 1;
   */
  POOL = 1,

  /**
   * DELEGATION_TYPE_OPERATOR defines a delegation to an operator.
   *
   * @generated from enum value: DELEGATION_TYPE_OPERATOR = 2;
   */
  OPERATOR = 2,

  /**
   * DELEGATION_TYPE_SERVICE defines a delegation to a service.
   *
   * @generated from enum value: DELEGATION_TYPE_SERVICE = 3;
   */
  SERVICE = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(DelegationType)
proto3.util.setEnumType(DelegationType, "milkyway.restaking.v1.DelegationType", [
  { no: 0, name: "DELEGATION_TYPE_UNSPECIFIED" },
  { no: 1, name: "DELEGATION_TYPE_POOL" },
  { no: 2, name: "DELEGATION_TYPE_OPERATOR" },
  { no: 3, name: "DELEGATION_TYPE_SERVICE" },
]);

/**
 * Delegation represents the bond with tokens held by an account with a
 * given target.
 *
 * @generated from message milkyway.restaking.v1.Delegation
 */
export class Delegation extends Message<Delegation> {
  /**
   * Type is the type of delegation.
   *
   * @generated from field: milkyway.restaking.v1.DelegationType type = 1;
   */
  type = DelegationType.UNSPECIFIED;

  /**
   * UserAddress is the encoded address of the user.
   *
   * @generated from field: string user_address = 2;
   */
  userAddress = "";

  /**
   * TargetID is the id of the target to which the delegation is associated
   * (pool, operator, service).
   *
   * @generated from field: uint32 target_id = 3;
   */
  targetId = 0;

  /**
   * Shares define the delegation shares received.
   *
   * @generated from field: repeated cosmos.base.v1beta1.DecCoin shares = 4;
   */
  shares: DecCoin[] = [];

  constructor(data?: PartialMessage<Delegation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.Delegation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(DelegationType) },
    { no: 2, name: "user_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "target_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "shares", kind: "message", T: DecCoin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Delegation {
    return new Delegation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Delegation {
    return new Delegation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Delegation {
    return new Delegation().fromJsonString(jsonString, options);
  }

  static equals(a: Delegation | PlainMessage<Delegation> | undefined, b: Delegation | PlainMessage<Delegation> | undefined): boolean {
    return proto3.util.equals(Delegation, a, b);
  }
}

/**
 * DelegationResponse is equivalent to Delegation except that it
 * contains a balance in addition to shares which is more suitable for client
 * responses.
 *
 * @generated from message milkyway.restaking.v1.DelegationResponse
 */
export class DelegationResponse extends Message<DelegationResponse> {
  /**
   * @generated from field: milkyway.restaking.v1.Delegation delegation = 1;
   */
  delegation?: Delegation;

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin balance = 2;
   */
  balance: Coin[] = [];

  constructor(data?: PartialMessage<DelegationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.DelegationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegation", kind: "message", T: Delegation },
    { no: 2, name: "balance", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DelegationResponse {
    return new DelegationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DelegationResponse {
    return new DelegationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DelegationResponse {
    return new DelegationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DelegationResponse | PlainMessage<DelegationResponse> | undefined, b: DelegationResponse | PlainMessage<DelegationResponse> | undefined): boolean {
    return proto3.util.equals(DelegationResponse, a, b);
  }
}

/**
 * UnbondingDelegation stores all of a single delegator's unbonding bonds
 * for a single target in an time-ordered list.
 *
 * @generated from message milkyway.restaking.v1.UnbondingDelegation
 */
export class UnbondingDelegation extends Message<UnbondingDelegation> {
  /**
   * Type is the type of the unbonding delegation.
   *
   * @generated from field: milkyway.restaking.v1.DelegationType type = 1;
   */
  type = DelegationType.UNSPECIFIED;

  /**
   * DelegatorAddress is the encoded address of the delegator.
   *
   * @generated from field: string delegator_address = 2;
   */
  delegatorAddress = "";

  /**
   * TargetID is the ID of the target from which the tokens will be undelegated
   * (pool, service, operator)
   *
   * @generated from field: uint32 target_id = 3;
   */
  targetId = 0;

  /**
   * Entries are the unbonding delegation entries.
   *
   * unbonding delegation entries
   *
   * @generated from field: repeated milkyway.restaking.v1.UnbondingDelegationEntry entries = 4;
   */
  entries: UnbondingDelegationEntry[] = [];

  constructor(data?: PartialMessage<UnbondingDelegation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.UnbondingDelegation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(DelegationType) },
    { no: 2, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "target_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "entries", kind: "message", T: UnbondingDelegationEntry, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnbondingDelegation {
    return new UnbondingDelegation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnbondingDelegation {
    return new UnbondingDelegation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnbondingDelegation {
    return new UnbondingDelegation().fromJsonString(jsonString, options);
  }

  static equals(a: UnbondingDelegation | PlainMessage<UnbondingDelegation> | undefined, b: UnbondingDelegation | PlainMessage<UnbondingDelegation> | undefined): boolean {
    return proto3.util.equals(UnbondingDelegation, a, b);
  }
}

/**
 * UnbondingDelegationEntry defines an unbonding object with relevant metadata.
 *
 * @generated from message milkyway.restaking.v1.UnbondingDelegationEntry
 */
export class UnbondingDelegationEntry extends Message<UnbondingDelegationEntry> {
  /**
   * CreationHeight is the height which the unbonding took place.
   *
   * @generated from field: int64 creation_height = 1;
   */
  creationHeight = protoInt64.zero;

  /**
   * CompletionTime is the unix time for unbonding completion.
   *
   * @generated from field: google.protobuf.Timestamp completion_time = 2;
   */
  completionTime?: Timestamp;

  /**
   * InitialBalance defines the tokens initially scheduled to receive at
   * completion.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin initial_balance = 3;
   */
  initialBalance: Coin[] = [];

  /**
   * Balance defines the tokens to receive at completion.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin balance = 4;
   */
  balance: Coin[] = [];

  /**
   * Incrementing id that uniquely identifies this entry
   *
   * @generated from field: uint64 unbonding_id = 5;
   */
  unbondingId = protoInt64.zero;

  constructor(data?: PartialMessage<UnbondingDelegationEntry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.UnbondingDelegationEntry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creation_height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "completion_time", kind: "message", T: Timestamp },
    { no: 3, name: "initial_balance", kind: "message", T: Coin, repeated: true },
    { no: 4, name: "balance", kind: "message", T: Coin, repeated: true },
    { no: 5, name: "unbonding_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnbondingDelegationEntry {
    return new UnbondingDelegationEntry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnbondingDelegationEntry {
    return new UnbondingDelegationEntry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnbondingDelegationEntry {
    return new UnbondingDelegationEntry().fromJsonString(jsonString, options);
  }

  static equals(a: UnbondingDelegationEntry | PlainMessage<UnbondingDelegationEntry> | undefined, b: UnbondingDelegationEntry | PlainMessage<UnbondingDelegationEntry> | undefined): boolean {
    return proto3.util.equals(UnbondingDelegationEntry, a, b);
  }
}

/**
 * DTData is a struct that contains the basic information about an unbonding
 * delegation. It is intended to be used as a marshalable pointer. For example,
 * a DTData can be used to construct the key to getting an UnbondingDelegation
 * from state.
 *
 * @generated from message milkyway.restaking.v1.DTData
 */
export class DTData extends Message<DTData> {
  /**
   * @generated from field: milkyway.restaking.v1.DelegationType unbonding_delegation_type = 1;
   */
  unbondingDelegationType = DelegationType.UNSPECIFIED;

  /**
   * @generated from field: string delegator_address = 2;
   */
  delegatorAddress = "";

  /**
   * @generated from field: uint32 target_id = 3;
   */
  targetId = 0;

  constructor(data?: PartialMessage<DTData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.DTData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "unbonding_delegation_type", kind: "enum", T: proto3.getEnumType(DelegationType) },
    { no: 2, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "target_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DTData {
    return new DTData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DTData {
    return new DTData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DTData {
    return new DTData().fromJsonString(jsonString, options);
  }

  static equals(a: DTData | PlainMessage<DTData> | undefined, b: DTData | PlainMessage<DTData> | undefined): boolean {
    return proto3.util.equals(DTData, a, b);
  }
}

/**
 * DTDataList defines an array of DTData objects.
 *
 * @generated from message milkyway.restaking.v1.DTDataList
 */
export class DTDataList extends Message<DTDataList> {
  /**
   * @generated from field: repeated milkyway.restaking.v1.DTData data = 1;
   */
  data: DTData[] = [];

  constructor(data?: PartialMessage<DTDataList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.DTDataList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: DTData, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DTDataList {
    return new DTDataList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DTDataList {
    return new DTDataList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DTDataList {
    return new DTDataList().fromJsonString(jsonString, options);
  }

  static equals(a: DTDataList | PlainMessage<DTDataList> | undefined, b: DTDataList | PlainMessage<DTDataList> | undefined): boolean {
    return proto3.util.equals(DTDataList, a, b);
  }
}

/**
 * UserPreferences is a struct that contains a user's preferences for
 * restaking.
 *
 * @generated from message milkyway.restaking.v1.UserPreferences
 */
export class UserPreferences extends Message<UserPreferences> {
  /**
   * TrustedServices is a list of services that the user trusts
   *
   * @generated from field: repeated milkyway.restaking.v1.TrustedServiceEntry trusted_services = 4;
   */
  trustedServices: TrustedServiceEntry[] = [];

  constructor(data?: PartialMessage<UserPreferences>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.UserPreferences";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 4, name: "trusted_services", kind: "message", T: TrustedServiceEntry, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserPreferences {
    return new UserPreferences().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserPreferences {
    return new UserPreferences().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserPreferences {
    return new UserPreferences().fromJsonString(jsonString, options);
  }

  static equals(a: UserPreferences | PlainMessage<UserPreferences> | undefined, b: UserPreferences | PlainMessage<UserPreferences> | undefined): boolean {
    return proto3.util.equals(UserPreferences, a, b);
  }
}

/**
 * TrustedServiceEntry is a struct that contains the ID of a service that the user trusts
 * and the IDs of the pools that the user wants the service to access
 *
 * @generated from message milkyway.restaking.v1.TrustedServiceEntry
 */
export class TrustedServiceEntry extends Message<TrustedServiceEntry> {
  /**
   * ServiceID represents the ID of the service that the user trusts
   *
   * @generated from field: uint32 service_id = 1;
   */
  serviceId = 0;

  /**
   * PoolsIDs represents the IDs of the pools that the user wants the service with ServiceID to access
   *
   * @generated from field: repeated uint32 pools_ids = 2;
   */
  poolsIds: number[] = [];

  constructor(data?: PartialMessage<TrustedServiceEntry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.TrustedServiceEntry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "pools_ids", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TrustedServiceEntry {
    return new TrustedServiceEntry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TrustedServiceEntry {
    return new TrustedServiceEntry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TrustedServiceEntry {
    return new TrustedServiceEntry().fromJsonString(jsonString, options);
  }

  static equals(a: TrustedServiceEntry | PlainMessage<TrustedServiceEntry> | undefined, b: TrustedServiceEntry | PlainMessage<TrustedServiceEntry> | undefined): boolean {
    return proto3.util.equals(TrustedServiceEntry, a, b);
  }
}

