// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file milkyway/restaking/v1/genesis.proto (package milkyway.restaking.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Delegation, UnbondingDelegation, UserPreferences } from "./models_pb.js";
import { Params } from "./params_pb.js";

/**
 * OperatorJoinedServicesRecord represents the services joined by a
 * individual operator.
 *
 * @generated from message milkyway.restaking.v1.OperatorJoinedServices
 */
export class OperatorJoinedServices extends Message<OperatorJoinedServices> {
  /**
   * OperatorID is the ID of the operator.
   *
   * @generated from field: uint32 operator_id = 1;
   */
  operatorId = 0;

  /**
   * ServiceIDs represents the list of services joined by the operator.
   *
   * @generated from field: repeated uint32 service_ids = 2;
   */
  serviceIds: number[] = [];

  constructor(data?: PartialMessage<OperatorJoinedServices>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.OperatorJoinedServices";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "operator_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "service_ids", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OperatorJoinedServices {
    return new OperatorJoinedServices().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OperatorJoinedServices {
    return new OperatorJoinedServices().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OperatorJoinedServices {
    return new OperatorJoinedServices().fromJsonString(jsonString, options);
  }

  static equals(a: OperatorJoinedServices | PlainMessage<OperatorJoinedServices> | undefined, b: OperatorJoinedServices | PlainMessage<OperatorJoinedServices> | undefined): boolean {
    return proto3.util.equals(OperatorJoinedServices, a, b);
  }
}

/**
 * ServiceAllowedOperators represents the operators allowed to secure a
 * a service.
 *
 * @generated from message milkyway.restaking.v1.ServiceAllowedOperators
 */
export class ServiceAllowedOperators extends Message<ServiceAllowedOperators> {
  /**
   * ServiceID is the ID of the service.
   *
   * @generated from field: uint32 service_id = 1;
   */
  serviceId = 0;

  /**
   * OperatorIDs defines the allowed operator IDs.
   *
   * @generated from field: repeated uint32 operator_ids = 2;
   */
  operatorIds: number[] = [];

  constructor(data?: PartialMessage<ServiceAllowedOperators>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.ServiceAllowedOperators";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "operator_ids", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServiceAllowedOperators {
    return new ServiceAllowedOperators().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServiceAllowedOperators {
    return new ServiceAllowedOperators().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServiceAllowedOperators {
    return new ServiceAllowedOperators().fromJsonString(jsonString, options);
  }

  static equals(a: ServiceAllowedOperators | PlainMessage<ServiceAllowedOperators> | undefined, b: ServiceAllowedOperators | PlainMessage<ServiceAllowedOperators> | undefined): boolean {
    return proto3.util.equals(ServiceAllowedOperators, a, b);
  }
}

/**
 * ServiceSecuringPools represents the list pools from which a service can
 * borrow security
 *
 * @generated from message milkyway.restaking.v1.ServiceSecuringPools
 */
export class ServiceSecuringPools extends Message<ServiceSecuringPools> {
  /**
   * ServiceID is the ID of the service.
   *
   * @generated from field: uint32 service_id = 1;
   */
  serviceId = 0;

  /**
   * PoolIDs defines the IDs of the pools from which the service can borrow
   * security.
   *
   * @generated from field: repeated uint32 pool_ids = 2;
   */
  poolIds: number[] = [];

  constructor(data?: PartialMessage<ServiceSecuringPools>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.ServiceSecuringPools";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "pool_ids", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServiceSecuringPools {
    return new ServiceSecuringPools().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServiceSecuringPools {
    return new ServiceSecuringPools().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServiceSecuringPools {
    return new ServiceSecuringPools().fromJsonString(jsonString, options);
  }

  static equals(a: ServiceSecuringPools | PlainMessage<ServiceSecuringPools> | undefined, b: ServiceSecuringPools | PlainMessage<ServiceSecuringPools> | undefined): boolean {
    return proto3.util.equals(ServiceSecuringPools, a, b);
  }
}

/**
 * UserPreferencesEntry represents the user preferences.
 *
 * @generated from message milkyway.restaking.v1.UserPreferencesEntry
 */
export class UserPreferencesEntry extends Message<UserPreferencesEntry> {
  /**
   * UserAddress is the encoded address of the user.
   *
   * @generated from field: string user_address = 1;
   */
  userAddress = "";

  /**
   * Preferences is the user preferences.
   *
   * @generated from field: milkyway.restaking.v1.UserPreferences preferences = 2;
   */
  preferences?: UserPreferences;

  constructor(data?: PartialMessage<UserPreferencesEntry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.UserPreferencesEntry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "preferences", kind: "message", T: UserPreferences },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserPreferencesEntry {
    return new UserPreferencesEntry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserPreferencesEntry {
    return new UserPreferencesEntry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserPreferencesEntry {
    return new UserPreferencesEntry().fromJsonString(jsonString, options);
  }

  static equals(a: UserPreferencesEntry | PlainMessage<UserPreferencesEntry> | undefined, b: UserPreferencesEntry | PlainMessage<UserPreferencesEntry> | undefined): boolean {
    return proto3.util.equals(UserPreferencesEntry, a, b);
  }
}

/**
 * GenesisState defines the restaking module's genesis state.
 *
 * @generated from message milkyway.restaking.v1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * Params defines the parameters of the module.
   *
   * @generated from field: milkyway.restaking.v1.Params params = 1;
   */
  params?: Params;

  /**
   * OperatorsJoinedServices defines the list of the services that each operator
   * has joined.
   *
   * @generated from field: repeated milkyway.restaking.v1.OperatorJoinedServices operators_joined_services = 2;
   */
  operatorsJoinedServices: OperatorJoinedServices[] = [];

  /**
   * ServiceAllowedOperators defines the operators allowed to secure each
   * service.
   *
   * @generated from field: repeated milkyway.restaking.v1.ServiceAllowedOperators services_allowed_operators = 3;
   */
  servicesAllowedOperators: ServiceAllowedOperators[] = [];

  /**
   * ServicesSecuringPools defines the whitelisted pools for each service.
   *
   * @generated from field: repeated milkyway.restaking.v1.ServiceSecuringPools services_securing_pools = 4;
   */
  servicesSecuringPools: ServiceSecuringPools[] = [];

  /**
   * Delegations represents the delegations.
   *
   * @generated from field: repeated milkyway.restaking.v1.Delegation delegations = 5;
   */
  delegations: Delegation[] = [];

  /**
   * UnbondingDelegations represents the unbonding delegations.
   *
   * @generated from field: repeated milkyway.restaking.v1.UnbondingDelegation unbonding_delegations = 6;
   */
  unbondingDelegations: UnbondingDelegation[] = [];

  /**
   * UserPreferences represents the user preferences.
   *
   * @generated from field: repeated milkyway.restaking.v1.UserPreferencesEntry users_preferences = 7;
   */
  usersPreferences: UserPreferencesEntry[] = [];

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "milkyway.restaking.v1.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
    { no: 2, name: "operators_joined_services", kind: "message", T: OperatorJoinedServices, repeated: true },
    { no: 3, name: "services_allowed_operators", kind: "message", T: ServiceAllowedOperators, repeated: true },
    { no: 4, name: "services_securing_pools", kind: "message", T: ServiceSecuringPools, repeated: true },
    { no: 5, name: "delegations", kind: "message", T: Delegation, repeated: true },
    { no: 6, name: "unbonding_delegations", kind: "message", T: UnbondingDelegation, repeated: true },
    { no: 7, name: "users_preferences", kind: "message", T: UserPreferencesEntry, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

