// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file sunrise/liquiditypool/query.proto (package sunrise.liquiditypool, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { Pool } from "./pool_pb.js";
import { Coin } from "../../cosmos/base/v1beta1/coin_pb.js";
import { PageRequest, PageResponse } from "../../cosmos/base/query/v1beta1/pagination_pb.js";
import { Position } from "./position_pb.js";

/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from message sunrise.liquiditypool.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquiditypool.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from message sunrise.liquiditypool.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: sunrise.liquiditypool.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquiditypool.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * @generated from message sunrise.liquiditypool.QueryPoolRequest
 */
export class QueryPoolRequest extends Message<QueryPoolRequest> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<QueryPoolRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquiditypool.QueryPoolRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolRequest {
    return new QueryPoolRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolRequest {
    return new QueryPoolRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolRequest {
    return new QueryPoolRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolRequest | PlainMessage<QueryPoolRequest> | undefined, b: QueryPoolRequest | PlainMessage<QueryPoolRequest> | undefined): boolean {
    return proto3.util.equals(QueryPoolRequest, a, b);
  }
}

/**
 * @generated from message sunrise.liquiditypool.PoolInfo
 */
export class PoolInfo extends Message<PoolInfo> {
  /**
   * @generated from field: sunrise.liquiditypool.Pool pool = 1;
   */
  pool?: Pool;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin token_base = 2;
   */
  tokenBase?: Coin;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin token_quote = 3;
   */
  tokenQuote?: Coin;

  constructor(data?: PartialMessage<PoolInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquiditypool.PoolInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool", kind: "message", T: Pool },
    { no: 2, name: "token_base", kind: "message", T: Coin },
    { no: 3, name: "token_quote", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolInfo {
    return new PoolInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolInfo {
    return new PoolInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolInfo {
    return new PoolInfo().fromJsonString(jsonString, options);
  }

  static equals(a: PoolInfo | PlainMessage<PoolInfo> | undefined, b: PoolInfo | PlainMessage<PoolInfo> | undefined): boolean {
    return proto3.util.equals(PoolInfo, a, b);
  }
}

/**
 * @generated from message sunrise.liquiditypool.QueryPoolResponse
 */
export class QueryPoolResponse extends Message<QueryPoolResponse> {
  /**
   * @generated from field: sunrise.liquiditypool.PoolInfo pool = 1;
   */
  pool?: PoolInfo;

  constructor(data?: PartialMessage<QueryPoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquiditypool.QueryPoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool", kind: "message", T: PoolInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolResponse {
    return new QueryPoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolResponse {
    return new QueryPoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolResponse {
    return new QueryPoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolResponse | PlainMessage<QueryPoolResponse> | undefined, b: QueryPoolResponse | PlainMessage<QueryPoolResponse> | undefined): boolean {
    return proto3.util.equals(QueryPoolResponse, a, b);
  }
}

/**
 * @generated from message sunrise.liquiditypool.QueryPoolsRequest
 */
export class QueryPoolsRequest extends Message<QueryPoolsRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryPoolsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquiditypool.QueryPoolsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolsRequest {
    return new QueryPoolsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolsRequest {
    return new QueryPoolsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolsRequest {
    return new QueryPoolsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolsRequest | PlainMessage<QueryPoolsRequest> | undefined, b: QueryPoolsRequest | PlainMessage<QueryPoolsRequest> | undefined): boolean {
    return proto3.util.equals(QueryPoolsRequest, a, b);
  }
}

/**
 * @generated from message sunrise.liquiditypool.QueryPoolsResponse
 */
export class QueryPoolsResponse extends Message<QueryPoolsResponse> {
  /**
   * @generated from field: repeated sunrise.liquiditypool.PoolInfo pools = 1;
   */
  pools: PoolInfo[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryPoolsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquiditypool.QueryPoolsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pools", kind: "message", T: PoolInfo, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolsResponse {
    return new QueryPoolsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolsResponse {
    return new QueryPoolsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolsResponse {
    return new QueryPoolsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolsResponse | PlainMessage<QueryPoolsResponse> | undefined, b: QueryPoolsResponse | PlainMessage<QueryPoolsResponse> | undefined): boolean {
    return proto3.util.equals(QueryPoolsResponse, a, b);
  }
}

/**
 * @generated from message sunrise.liquiditypool.QueryPositionRequest
 */
export class QueryPositionRequest extends Message<QueryPositionRequest> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<QueryPositionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquiditypool.QueryPositionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPositionRequest {
    return new QueryPositionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPositionRequest {
    return new QueryPositionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPositionRequest {
    return new QueryPositionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPositionRequest | PlainMessage<QueryPositionRequest> | undefined, b: QueryPositionRequest | PlainMessage<QueryPositionRequest> | undefined): boolean {
    return proto3.util.equals(QueryPositionRequest, a, b);
  }
}

/**
 * @generated from message sunrise.liquiditypool.PositionInfo
 */
export class PositionInfo extends Message<PositionInfo> {
  /**
   * @generated from field: sunrise.liquiditypool.Position position = 1;
   */
  position?: Position;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin token_base = 2;
   */
  tokenBase?: Coin;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin token_quote = 3;
   */
  tokenQuote?: Coin;

  constructor(data?: PartialMessage<PositionInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquiditypool.PositionInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "position", kind: "message", T: Position },
    { no: 2, name: "token_base", kind: "message", T: Coin },
    { no: 3, name: "token_quote", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PositionInfo {
    return new PositionInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PositionInfo {
    return new PositionInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PositionInfo {
    return new PositionInfo().fromJsonString(jsonString, options);
  }

  static equals(a: PositionInfo | PlainMessage<PositionInfo> | undefined, b: PositionInfo | PlainMessage<PositionInfo> | undefined): boolean {
    return proto3.util.equals(PositionInfo, a, b);
  }
}

/**
 * @generated from message sunrise.liquiditypool.QueryPositionResponse
 */
export class QueryPositionResponse extends Message<QueryPositionResponse> {
  /**
   * @generated from field: sunrise.liquiditypool.PositionInfo position = 1;
   */
  position?: PositionInfo;

  constructor(data?: PartialMessage<QueryPositionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquiditypool.QueryPositionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "position", kind: "message", T: PositionInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPositionResponse {
    return new QueryPositionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPositionResponse {
    return new QueryPositionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPositionResponse {
    return new QueryPositionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPositionResponse | PlainMessage<QueryPositionResponse> | undefined, b: QueryPositionResponse | PlainMessage<QueryPositionResponse> | undefined): boolean {
    return proto3.util.equals(QueryPositionResponse, a, b);
  }
}

/**
 * @generated from message sunrise.liquiditypool.QueryPositionsRequest
 */
export class QueryPositionsRequest extends Message<QueryPositionsRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryPositionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquiditypool.QueryPositionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPositionsRequest {
    return new QueryPositionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPositionsRequest {
    return new QueryPositionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPositionsRequest {
    return new QueryPositionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPositionsRequest | PlainMessage<QueryPositionsRequest> | undefined, b: QueryPositionsRequest | PlainMessage<QueryPositionsRequest> | undefined): boolean {
    return proto3.util.equals(QueryPositionsRequest, a, b);
  }
}

/**
 * @generated from message sunrise.liquiditypool.QueryPositionsResponse
 */
export class QueryPositionsResponse extends Message<QueryPositionsResponse> {
  /**
   * @generated from field: repeated sunrise.liquiditypool.PositionInfo positions = 1;
   */
  positions: PositionInfo[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryPositionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquiditypool.QueryPositionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "positions", kind: "message", T: PositionInfo, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPositionsResponse {
    return new QueryPositionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPositionsResponse {
    return new QueryPositionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPositionsResponse {
    return new QueryPositionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPositionsResponse | PlainMessage<QueryPositionsResponse> | undefined, b: QueryPositionsResponse | PlainMessage<QueryPositionsResponse> | undefined): boolean {
    return proto3.util.equals(QueryPositionsResponse, a, b);
  }
}

/**
 * @generated from message sunrise.liquiditypool.QueryPoolPositionsRequest
 */
export class QueryPoolPositionsRequest extends Message<QueryPoolPositionsRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  constructor(data?: PartialMessage<QueryPoolPositionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquiditypool.QueryPoolPositionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolPositionsRequest {
    return new QueryPoolPositionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolPositionsRequest {
    return new QueryPoolPositionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolPositionsRequest {
    return new QueryPoolPositionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolPositionsRequest | PlainMessage<QueryPoolPositionsRequest> | undefined, b: QueryPoolPositionsRequest | PlainMessage<QueryPoolPositionsRequest> | undefined): boolean {
    return proto3.util.equals(QueryPoolPositionsRequest, a, b);
  }
}

/**
 * @generated from message sunrise.liquiditypool.QueryPoolPositionsResponse
 */
export class QueryPoolPositionsResponse extends Message<QueryPoolPositionsResponse> {
  /**
   * @generated from field: repeated sunrise.liquiditypool.PositionInfo positions = 1;
   */
  positions: PositionInfo[] = [];

  constructor(data?: PartialMessage<QueryPoolPositionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquiditypool.QueryPoolPositionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "positions", kind: "message", T: PositionInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolPositionsResponse {
    return new QueryPoolPositionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolPositionsResponse {
    return new QueryPoolPositionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolPositionsResponse {
    return new QueryPoolPositionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolPositionsResponse | PlainMessage<QueryPoolPositionsResponse> | undefined, b: QueryPoolPositionsResponse | PlainMessage<QueryPoolPositionsResponse> | undefined): boolean {
    return proto3.util.equals(QueryPoolPositionsResponse, a, b);
  }
}

/**
 * @generated from message sunrise.liquiditypool.QueryAddressPositionsRequest
 */
export class QueryAddressPositionsRequest extends Message<QueryAddressPositionsRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  constructor(data?: PartialMessage<QueryAddressPositionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquiditypool.QueryAddressPositionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAddressPositionsRequest {
    return new QueryAddressPositionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAddressPositionsRequest {
    return new QueryAddressPositionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAddressPositionsRequest {
    return new QueryAddressPositionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAddressPositionsRequest | PlainMessage<QueryAddressPositionsRequest> | undefined, b: QueryAddressPositionsRequest | PlainMessage<QueryAddressPositionsRequest> | undefined): boolean {
    return proto3.util.equals(QueryAddressPositionsRequest, a, b);
  }
}

/**
 * @generated from message sunrise.liquiditypool.QueryAddressPositionsResponse
 */
export class QueryAddressPositionsResponse extends Message<QueryAddressPositionsResponse> {
  /**
   * @generated from field: repeated sunrise.liquiditypool.PositionInfo positions = 1;
   */
  positions: PositionInfo[] = [];

  constructor(data?: PartialMessage<QueryAddressPositionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquiditypool.QueryAddressPositionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "positions", kind: "message", T: PositionInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAddressPositionsResponse {
    return new QueryAddressPositionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAddressPositionsResponse {
    return new QueryAddressPositionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAddressPositionsResponse {
    return new QueryAddressPositionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAddressPositionsResponse | PlainMessage<QueryAddressPositionsResponse> | undefined, b: QueryAddressPositionsResponse | PlainMessage<QueryAddressPositionsResponse> | undefined): boolean {
    return proto3.util.equals(QueryAddressPositionsResponse, a, b);
  }
}

/**
 * @generated from message sunrise.liquiditypool.QueryPositionFeesRequest
 */
export class QueryPositionFeesRequest extends Message<QueryPositionFeesRequest> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<QueryPositionFeesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquiditypool.QueryPositionFeesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPositionFeesRequest {
    return new QueryPositionFeesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPositionFeesRequest {
    return new QueryPositionFeesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPositionFeesRequest {
    return new QueryPositionFeesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPositionFeesRequest | PlainMessage<QueryPositionFeesRequest> | undefined, b: QueryPositionFeesRequest | PlainMessage<QueryPositionFeesRequest> | undefined): boolean {
    return proto3.util.equals(QueryPositionFeesRequest, a, b);
  }
}

/**
 * @generated from message sunrise.liquiditypool.QueryPositionFeesResponse
 */
export class QueryPositionFeesResponse extends Message<QueryPositionFeesResponse> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin fees = 1;
   */
  fees: Coin[] = [];

  constructor(data?: PartialMessage<QueryPositionFeesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquiditypool.QueryPositionFeesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fees", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPositionFeesResponse {
    return new QueryPositionFeesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPositionFeesResponse {
    return new QueryPositionFeesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPositionFeesResponse {
    return new QueryPositionFeesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPositionFeesResponse | PlainMessage<QueryPositionFeesResponse> | undefined, b: QueryPositionFeesResponse | PlainMessage<QueryPositionFeesResponse> | undefined): boolean {
    return proto3.util.equals(QueryPositionFeesResponse, a, b);
  }
}

/**
 * @generated from message sunrise.liquiditypool.QueryCalculationCreatePositionRequest
 */
export class QueryCalculationCreatePositionRequest extends Message<QueryCalculationCreatePositionRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: string lower_tick = 2;
   */
  lowerTick = "";

  /**
   * @generated from field: string upper_tick = 3;
   */
  upperTick = "";

  /**
   * @generated from field: string amount = 4;
   */
  amount = "";

  /**
   * @generated from field: string denom = 5;
   */
  denom = "";

  constructor(data?: PartialMessage<QueryCalculationCreatePositionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquiditypool.QueryCalculationCreatePositionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "lower_tick", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "upper_tick", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCalculationCreatePositionRequest {
    return new QueryCalculationCreatePositionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCalculationCreatePositionRequest {
    return new QueryCalculationCreatePositionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCalculationCreatePositionRequest {
    return new QueryCalculationCreatePositionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCalculationCreatePositionRequest | PlainMessage<QueryCalculationCreatePositionRequest> | undefined, b: QueryCalculationCreatePositionRequest | PlainMessage<QueryCalculationCreatePositionRequest> | undefined): boolean {
    return proto3.util.equals(QueryCalculationCreatePositionRequest, a, b);
  }
}

/**
 * @generated from message sunrise.liquiditypool.QueryCalculationCreatePositionResponse
 */
export class QueryCalculationCreatePositionResponse extends Message<QueryCalculationCreatePositionResponse> {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 1;
   */
  amount?: Coin;

  constructor(data?: PartialMessage<QueryCalculationCreatePositionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquiditypool.QueryCalculationCreatePositionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCalculationCreatePositionResponse {
    return new QueryCalculationCreatePositionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCalculationCreatePositionResponse {
    return new QueryCalculationCreatePositionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCalculationCreatePositionResponse {
    return new QueryCalculationCreatePositionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCalculationCreatePositionResponse | PlainMessage<QueryCalculationCreatePositionResponse> | undefined, b: QueryCalculationCreatePositionResponse | PlainMessage<QueryCalculationCreatePositionResponse> | undefined): boolean {
    return proto3.util.equals(QueryCalculationCreatePositionResponse, a, b);
  }
}

/**
 * @generated from message sunrise.liquiditypool.QueryCalculationIncreaseLiquidityRequest
 */
export class QueryCalculationIncreaseLiquidityRequest extends Message<QueryCalculationIncreaseLiquidityRequest> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string amount_in = 2;
   */
  amountIn = "";

  /**
   * @generated from field: string denom_in = 3;
   */
  denomIn = "";

  constructor(data?: PartialMessage<QueryCalculationIncreaseLiquidityRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquiditypool.QueryCalculationIncreaseLiquidityRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "amount_in", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "denom_in", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCalculationIncreaseLiquidityRequest {
    return new QueryCalculationIncreaseLiquidityRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCalculationIncreaseLiquidityRequest {
    return new QueryCalculationIncreaseLiquidityRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCalculationIncreaseLiquidityRequest {
    return new QueryCalculationIncreaseLiquidityRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCalculationIncreaseLiquidityRequest | PlainMessage<QueryCalculationIncreaseLiquidityRequest> | undefined, b: QueryCalculationIncreaseLiquidityRequest | PlainMessage<QueryCalculationIncreaseLiquidityRequest> | undefined): boolean {
    return proto3.util.equals(QueryCalculationIncreaseLiquidityRequest, a, b);
  }
}

/**
 * @generated from message sunrise.liquiditypool.QueryCalculationIncreaseLiquidityResponse
 */
export class QueryCalculationIncreaseLiquidityResponse extends Message<QueryCalculationIncreaseLiquidityResponse> {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin token_required = 1;
   */
  tokenRequired?: Coin;

  constructor(data?: PartialMessage<QueryCalculationIncreaseLiquidityResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquiditypool.QueryCalculationIncreaseLiquidityResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token_required", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCalculationIncreaseLiquidityResponse {
    return new QueryCalculationIncreaseLiquidityResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCalculationIncreaseLiquidityResponse {
    return new QueryCalculationIncreaseLiquidityResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCalculationIncreaseLiquidityResponse {
    return new QueryCalculationIncreaseLiquidityResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCalculationIncreaseLiquidityResponse | PlainMessage<QueryCalculationIncreaseLiquidityResponse> | undefined, b: QueryCalculationIncreaseLiquidityResponse | PlainMessage<QueryCalculationIncreaseLiquidityResponse> | undefined): boolean {
    return proto3.util.equals(QueryCalculationIncreaseLiquidityResponse, a, b);
  }
}

