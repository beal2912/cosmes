// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file sunrise/liquiditypool/events.proto (package sunrise.liquiditypool, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Coin } from "../../cosmos/base/v1beta1/coin_pb.js";

/**
 * EventCreatePool
 *
 * @generated from message sunrise.liquiditypool.EventCreatePool
 */
export class EventCreatePool extends Message<EventCreatePool> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: string denom_base = 2;
   */
  denomBase = "";

  /**
   * @generated from field: string denom_quote = 3;
   */
  denomQuote = "";

  /**
   * @generated from field: string fee_rate = 4;
   */
  feeRate = "";

  /**
   * @generated from field: string price_ratio = 5;
   */
  priceRatio = "";

  /**
   * @generated from field: string base_offset = 6;
   */
  baseOffset = "";

  constructor(data?: PartialMessage<EventCreatePool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquiditypool.EventCreatePool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "denom_base", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "denom_quote", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "fee_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "price_ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "base_offset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventCreatePool {
    return new EventCreatePool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventCreatePool {
    return new EventCreatePool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventCreatePool {
    return new EventCreatePool().fromJsonString(jsonString, options);
  }

  static equals(a: EventCreatePool | PlainMessage<EventCreatePool> | undefined, b: EventCreatePool | PlainMessage<EventCreatePool> | undefined): boolean {
    return proto3.util.equals(EventCreatePool, a, b);
  }
}

/**
 * EventCreatePosition
 *
 * @generated from message sunrise.liquiditypool.EventCreatePosition
 */
export class EventCreatePosition extends Message<EventCreatePosition> {
  /**
   * @generated from field: uint64 position_id = 1;
   */
  positionId = protoInt64.zero;

  /**
   * @generated from field: string address = 2;
   */
  address = "";

  /**
   * @generated from field: uint64 pool_id = 3;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: int64 lower_tick = 4;
   */
  lowerTick = protoInt64.zero;

  /**
   * @generated from field: int64 upper_tick = 5;
   */
  upperTick = protoInt64.zero;

  /**
   * @generated from field: string liquidity = 6;
   */
  liquidity = "";

  constructor(data?: PartialMessage<EventCreatePosition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquiditypool.EventCreatePosition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "position_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "lower_tick", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "upper_tick", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "liquidity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventCreatePosition {
    return new EventCreatePosition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventCreatePosition {
    return new EventCreatePosition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventCreatePosition {
    return new EventCreatePosition().fromJsonString(jsonString, options);
  }

  static equals(a: EventCreatePosition | PlainMessage<EventCreatePosition> | undefined, b: EventCreatePosition | PlainMessage<EventCreatePosition> | undefined): boolean {
    return proto3.util.equals(EventCreatePosition, a, b);
  }
}

/**
 * EventIncreaseLiquidity
 *
 * @generated from message sunrise.liquiditypool.EventIncreaseLiquidity
 */
export class EventIncreaseLiquidity extends Message<EventIncreaseLiquidity> {
  /**
   * @generated from field: uint64 old_position_id = 1;
   */
  oldPositionId = protoInt64.zero;

  /**
   * @generated from field: uint64 new_position_id = 2;
   */
  newPositionId = protoInt64.zero;

  /**
   * @generated from field: string address = 3;
   */
  address = "";

  /**
   * @generated from field: string amount_base = 4;
   */
  amountBase = "";

  /**
   * @generated from field: string amount_quote = 5;
   */
  amountQuote = "";

  constructor(data?: PartialMessage<EventIncreaseLiquidity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquiditypool.EventIncreaseLiquidity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "old_position_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "new_position_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "amount_base", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "amount_quote", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventIncreaseLiquidity {
    return new EventIncreaseLiquidity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventIncreaseLiquidity {
    return new EventIncreaseLiquidity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventIncreaseLiquidity {
    return new EventIncreaseLiquidity().fromJsonString(jsonString, options);
  }

  static equals(a: EventIncreaseLiquidity | PlainMessage<EventIncreaseLiquidity> | undefined, b: EventIncreaseLiquidity | PlainMessage<EventIncreaseLiquidity> | undefined): boolean {
    return proto3.util.equals(EventIncreaseLiquidity, a, b);
  }
}

/**
 * EventDecreaseLiquidity
 *
 * @generated from message sunrise.liquiditypool.EventDecreaseLiquidity
 */
export class EventDecreaseLiquidity extends Message<EventDecreaseLiquidity> {
  /**
   * @generated from field: uint64 position_id = 1;
   */
  positionId = protoInt64.zero;

  /**
   * @generated from field: string address = 2;
   */
  address = "";

  /**
   * @generated from field: string amount_base = 3;
   */
  amountBase = "";

  /**
   * @generated from field: string amount_quote = 4;
   */
  amountQuote = "";

  constructor(data?: PartialMessage<EventDecreaseLiquidity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquiditypool.EventDecreaseLiquidity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "position_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount_base", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "amount_quote", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventDecreaseLiquidity {
    return new EventDecreaseLiquidity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventDecreaseLiquidity {
    return new EventDecreaseLiquidity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventDecreaseLiquidity {
    return new EventDecreaseLiquidity().fromJsonString(jsonString, options);
  }

  static equals(a: EventDecreaseLiquidity | PlainMessage<EventDecreaseLiquidity> | undefined, b: EventDecreaseLiquidity | PlainMessage<EventDecreaseLiquidity> | undefined): boolean {
    return proto3.util.equals(EventDecreaseLiquidity, a, b);
  }
}

/**
 * EventClaimRewards
 *
 * @generated from message sunrise.liquiditypool.EventClaimRewards
 */
export class EventClaimRewards extends Message<EventClaimRewards> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: uint64 position_id = 2;
   */
  positionId = protoInt64.zero;

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin rewards = 3;
   */
  rewards: Coin[] = [];

  constructor(data?: PartialMessage<EventClaimRewards>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquiditypool.EventClaimRewards";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "position_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "rewards", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventClaimRewards {
    return new EventClaimRewards().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventClaimRewards {
    return new EventClaimRewards().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventClaimRewards {
    return new EventClaimRewards().fromJsonString(jsonString, options);
  }

  static equals(a: EventClaimRewards | PlainMessage<EventClaimRewards> | undefined, b: EventClaimRewards | PlainMessage<EventClaimRewards> | undefined): boolean {
    return proto3.util.equals(EventClaimRewards, a, b);
  }
}

/**
 * EventSwapExactAmountIn
 *
 * @generated from message sunrise.liquiditypool.EventSwapExactAmountIn
 */
export class EventSwapExactAmountIn extends Message<EventSwapExactAmountIn> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: uint64 pool_id = 2;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin token_in = 3;
   */
  tokenIn?: Coin;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin token_out = 4;
   */
  tokenOut?: Coin;

  /**
   * @generated from field: bool fee_enabled = 5;
   */
  feeEnabled = false;

  constructor(data?: PartialMessage<EventSwapExactAmountIn>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquiditypool.EventSwapExactAmountIn";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "token_in", kind: "message", T: Coin },
    { no: 4, name: "token_out", kind: "message", T: Coin },
    { no: 5, name: "fee_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSwapExactAmountIn {
    return new EventSwapExactAmountIn().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSwapExactAmountIn {
    return new EventSwapExactAmountIn().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSwapExactAmountIn {
    return new EventSwapExactAmountIn().fromJsonString(jsonString, options);
  }

  static equals(a: EventSwapExactAmountIn | PlainMessage<EventSwapExactAmountIn> | undefined, b: EventSwapExactAmountIn | PlainMessage<EventSwapExactAmountIn> | undefined): boolean {
    return proto3.util.equals(EventSwapExactAmountIn, a, b);
  }
}

/**
 * EventSwapExactAmountOut
 *
 * @generated from message sunrise.liquiditypool.EventSwapExactAmountOut
 */
export class EventSwapExactAmountOut extends Message<EventSwapExactAmountOut> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: uint64 pool_id = 2;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin token_in = 3;
   */
  tokenIn?: Coin;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin token_out = 4;
   */
  tokenOut?: Coin;

  /**
   * @generated from field: bool fee_enabled = 5;
   */
  feeEnabled = false;

  constructor(data?: PartialMessage<EventSwapExactAmountOut>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquiditypool.EventSwapExactAmountOut";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "token_in", kind: "message", T: Coin },
    { no: 4, name: "token_out", kind: "message", T: Coin },
    { no: 5, name: "fee_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSwapExactAmountOut {
    return new EventSwapExactAmountOut().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSwapExactAmountOut {
    return new EventSwapExactAmountOut().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSwapExactAmountOut {
    return new EventSwapExactAmountOut().fromJsonString(jsonString, options);
  }

  static equals(a: EventSwapExactAmountOut | PlainMessage<EventSwapExactAmountOut> | undefined, b: EventSwapExactAmountOut | PlainMessage<EventSwapExactAmountOut> | undefined): boolean {
    return proto3.util.equals(EventSwapExactAmountOut, a, b);
  }
}

