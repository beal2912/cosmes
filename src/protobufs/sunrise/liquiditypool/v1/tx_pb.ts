// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file sunrise/liquiditypool/v1/tx.proto (package sunrise.liquiditypool.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * MsgUpdateParams is the Msg/UpdateParams request type.
 *
 * @generated from message sunrise.liquiditypool.v1.MsgUpdateParams
 */
export class MsgUpdateParams extends Message<MsgUpdateParams> {
  /**
   * authority is the address that controls the module (defaults to x/gov unless
   * overwritten).
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * NOTE: All parameters must be supplied.
   *
   * @generated from field: sunrise.liquiditypool.v1.Params params = 2;
   */
  params?: Params;

  constructor(data?: PartialMessage<MsgUpdateParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquiditypool.v1.MsgUpdateParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined, b: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParams, a, b);
  }
}

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 *
 * @generated from message sunrise.liquiditypool.v1.MsgUpdateParamsResponse
 */
export class MsgUpdateParamsResponse extends Message<MsgUpdateParamsResponse> {
  constructor(data?: PartialMessage<MsgUpdateParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquiditypool.v1.MsgUpdateParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined, b: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParamsResponse, a, b);
  }
}

/**
 * MsgCreatePool
 *
 * @generated from message sunrise.liquiditypool.v1.MsgCreatePool
 */
export class MsgCreatePool extends Message<MsgCreatePool> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string denom_base = 2;
   */
  denomBase = "";

  /**
   * @generated from field: string denom_quote = 3;
   */
  denomQuote = "";

  /**
   * @generated from field: string fee_rate = 4;
   */
  feeRate = "";

  /**
   * Basically 1.0001
   *
   * @generated from field: string price_ratio = 5;
   */
  priceRatio = "";

  /**
   * basically 0 and (-1, 0]. In the 1:1 stable pair, 0.5 would work
   *
   * @generated from field: string base_offset = 6;
   */
  baseOffset = "";

  constructor(data?: PartialMessage<MsgCreatePool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquiditypool.v1.MsgCreatePool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom_base", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "denom_quote", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "fee_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "price_ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "base_offset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreatePool {
    return new MsgCreatePool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreatePool {
    return new MsgCreatePool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreatePool {
    return new MsgCreatePool().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreatePool | PlainMessage<MsgCreatePool> | undefined, b: MsgCreatePool | PlainMessage<MsgCreatePool> | undefined): boolean {
    return proto3.util.equals(MsgCreatePool, a, b);
  }
}

/**
 * MsgCreatePoolResponse
 *
 * @generated from message sunrise.liquiditypool.v1.MsgCreatePoolResponse
 */
export class MsgCreatePoolResponse extends Message<MsgCreatePoolResponse> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<MsgCreatePoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquiditypool.v1.MsgCreatePoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreatePoolResponse {
    return new MsgCreatePoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreatePoolResponse {
    return new MsgCreatePoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreatePoolResponse {
    return new MsgCreatePoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreatePoolResponse | PlainMessage<MsgCreatePoolResponse> | undefined, b: MsgCreatePoolResponse | PlainMessage<MsgCreatePoolResponse> | undefined): boolean {
    return proto3.util.equals(MsgCreatePoolResponse, a, b);
  }
}

/**
 * MsgCreatePosition
 *
 * @generated from message sunrise.liquiditypool.v1.MsgCreatePosition
 */
export class MsgCreatePosition extends Message<MsgCreatePosition> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: uint64 pool_id = 2;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: int64 lower_tick = 3;
   */
  lowerTick = protoInt64.zero;

  /**
   * @generated from field: int64 upper_tick = 4;
   */
  upperTick = protoInt64.zero;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin token_base = 5;
   */
  tokenBase?: Coin;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin token_quote = 6;
   */
  tokenQuote?: Coin;

  /**
   * @generated from field: string min_amount_base = 7;
   */
  minAmountBase = "";

  /**
   * @generated from field: string min_amount_quote = 8;
   */
  minAmountQuote = "";

  constructor(data?: PartialMessage<MsgCreatePosition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquiditypool.v1.MsgCreatePosition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "lower_tick", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "upper_tick", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "token_base", kind: "message", T: Coin },
    { no: 6, name: "token_quote", kind: "message", T: Coin },
    { no: 7, name: "min_amount_base", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "min_amount_quote", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreatePosition {
    return new MsgCreatePosition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreatePosition {
    return new MsgCreatePosition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreatePosition {
    return new MsgCreatePosition().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreatePosition | PlainMessage<MsgCreatePosition> | undefined, b: MsgCreatePosition | PlainMessage<MsgCreatePosition> | undefined): boolean {
    return proto3.util.equals(MsgCreatePosition, a, b);
  }
}

/**
 * MsgCreatePositionResponse
 *
 * @generated from message sunrise.liquiditypool.v1.MsgCreatePositionResponse
 */
export class MsgCreatePositionResponse extends Message<MsgCreatePositionResponse> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string amount_base = 2;
   */
  amountBase = "";

  /**
   * @generated from field: string amount_quote = 3;
   */
  amountQuote = "";

  /**
   * @generated from field: string liquidity = 4;
   */
  liquidity = "";

  constructor(data?: PartialMessage<MsgCreatePositionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquiditypool.v1.MsgCreatePositionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "amount_base", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount_quote", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "liquidity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreatePositionResponse {
    return new MsgCreatePositionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreatePositionResponse {
    return new MsgCreatePositionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreatePositionResponse {
    return new MsgCreatePositionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreatePositionResponse | PlainMessage<MsgCreatePositionResponse> | undefined, b: MsgCreatePositionResponse | PlainMessage<MsgCreatePositionResponse> | undefined): boolean {
    return proto3.util.equals(MsgCreatePositionResponse, a, b);
  }
}

/**
 * MsgIncreaseLiquidity
 *
 * @generated from message sunrise.liquiditypool.v1.MsgIncreaseLiquidity
 */
export class MsgIncreaseLiquidity extends Message<MsgIncreaseLiquidity> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string amount_base = 3;
   */
  amountBase = "";

  /**
   * @generated from field: string amount_quote = 4;
   */
  amountQuote = "";

  /**
   * @generated from field: string min_amount_base = 5;
   */
  minAmountBase = "";

  /**
   * @generated from field: string min_amount_quote = 6;
   */
  minAmountQuote = "";

  constructor(data?: PartialMessage<MsgIncreaseLiquidity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquiditypool.v1.MsgIncreaseLiquidity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "amount_base", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "amount_quote", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "min_amount_base", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "min_amount_quote", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgIncreaseLiquidity {
    return new MsgIncreaseLiquidity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgIncreaseLiquidity {
    return new MsgIncreaseLiquidity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgIncreaseLiquidity {
    return new MsgIncreaseLiquidity().fromJsonString(jsonString, options);
  }

  static equals(a: MsgIncreaseLiquidity | PlainMessage<MsgIncreaseLiquidity> | undefined, b: MsgIncreaseLiquidity | PlainMessage<MsgIncreaseLiquidity> | undefined): boolean {
    return proto3.util.equals(MsgIncreaseLiquidity, a, b);
  }
}

/**
 * MsgIncreaseLiquidityResponse
 *
 * @generated from message sunrise.liquiditypool.v1.MsgIncreaseLiquidityResponse
 */
export class MsgIncreaseLiquidityResponse extends Message<MsgIncreaseLiquidityResponse> {
  /**
   * @generated from field: uint64 position_id = 1;
   */
  positionId = protoInt64.zero;

  /**
   * @generated from field: string amount_base = 2;
   */
  amountBase = "";

  /**
   * @generated from field: string amount_quote = 3;
   */
  amountQuote = "";

  constructor(data?: PartialMessage<MsgIncreaseLiquidityResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquiditypool.v1.MsgIncreaseLiquidityResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "position_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "amount_base", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount_quote", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgIncreaseLiquidityResponse {
    return new MsgIncreaseLiquidityResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgIncreaseLiquidityResponse {
    return new MsgIncreaseLiquidityResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgIncreaseLiquidityResponse {
    return new MsgIncreaseLiquidityResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgIncreaseLiquidityResponse | PlainMessage<MsgIncreaseLiquidityResponse> | undefined, b: MsgIncreaseLiquidityResponse | PlainMessage<MsgIncreaseLiquidityResponse> | undefined): boolean {
    return proto3.util.equals(MsgIncreaseLiquidityResponse, a, b);
  }
}

/**
 * MsgDecreaseLiquidity
 *
 * @generated from message sunrise.liquiditypool.v1.MsgDecreaseLiquidity
 */
export class MsgDecreaseLiquidity extends Message<MsgDecreaseLiquidity> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string liquidity = 3;
   */
  liquidity = "";

  constructor(data?: PartialMessage<MsgDecreaseLiquidity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquiditypool.v1.MsgDecreaseLiquidity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "liquidity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDecreaseLiquidity {
    return new MsgDecreaseLiquidity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDecreaseLiquidity {
    return new MsgDecreaseLiquidity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDecreaseLiquidity {
    return new MsgDecreaseLiquidity().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDecreaseLiquidity | PlainMessage<MsgDecreaseLiquidity> | undefined, b: MsgDecreaseLiquidity | PlainMessage<MsgDecreaseLiquidity> | undefined): boolean {
    return proto3.util.equals(MsgDecreaseLiquidity, a, b);
  }
}

/**
 * MsgDecreaseLiquidityResponse
 *
 * @generated from message sunrise.liquiditypool.v1.MsgDecreaseLiquidityResponse
 */
export class MsgDecreaseLiquidityResponse extends Message<MsgDecreaseLiquidityResponse> {
  /**
   * @generated from field: string amount_base = 1;
   */
  amountBase = "";

  /**
   * @generated from field: string amount_quote = 2;
   */
  amountQuote = "";

  constructor(data?: PartialMessage<MsgDecreaseLiquidityResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquiditypool.v1.MsgDecreaseLiquidityResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount_base", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount_quote", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDecreaseLiquidityResponse {
    return new MsgDecreaseLiquidityResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDecreaseLiquidityResponse {
    return new MsgDecreaseLiquidityResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDecreaseLiquidityResponse {
    return new MsgDecreaseLiquidityResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDecreaseLiquidityResponse | PlainMessage<MsgDecreaseLiquidityResponse> | undefined, b: MsgDecreaseLiquidityResponse | PlainMessage<MsgDecreaseLiquidityResponse> | undefined): boolean {
    return proto3.util.equals(MsgDecreaseLiquidityResponse, a, b);
  }
}

/**
 * MsgClaimRewards
 *
 * @generated from message sunrise.liquiditypool.v1.MsgClaimRewards
 */
export class MsgClaimRewards extends Message<MsgClaimRewards> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: repeated uint64 position_ids = 2;
   */
  positionIds: bigint[] = [];

  constructor(data?: PartialMessage<MsgClaimRewards>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquiditypool.v1.MsgClaimRewards";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "position_ids", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgClaimRewards {
    return new MsgClaimRewards().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgClaimRewards {
    return new MsgClaimRewards().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgClaimRewards {
    return new MsgClaimRewards().fromJsonString(jsonString, options);
  }

  static equals(a: MsgClaimRewards | PlainMessage<MsgClaimRewards> | undefined, b: MsgClaimRewards | PlainMessage<MsgClaimRewards> | undefined): boolean {
    return proto3.util.equals(MsgClaimRewards, a, b);
  }
}

/**
 * MsgClaimRewardsResponse
 *
 * @generated from message sunrise.liquiditypool.v1.MsgClaimRewardsResponse
 */
export class MsgClaimRewardsResponse extends Message<MsgClaimRewardsResponse> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 1;
   */
  amount: Coin[] = [];

  constructor(data?: PartialMessage<MsgClaimRewardsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquiditypool.v1.MsgClaimRewardsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgClaimRewardsResponse {
    return new MsgClaimRewardsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgClaimRewardsResponse {
    return new MsgClaimRewardsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgClaimRewardsResponse {
    return new MsgClaimRewardsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgClaimRewardsResponse | PlainMessage<MsgClaimRewardsResponse> | undefined, b: MsgClaimRewardsResponse | PlainMessage<MsgClaimRewardsResponse> | undefined): boolean {
    return proto3.util.equals(MsgClaimRewardsResponse, a, b);
  }
}

