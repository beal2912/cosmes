// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file sunrise/da/v0/tx.proto (package sunrise.da.v0, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";

/**
 * MsgUpdateParams is the Msg/UpdateParams request type.
 *
 * @generated from message sunrise.da.v0.MsgUpdateParams
 */
export class MsgUpdateParams extends Message<MsgUpdateParams> {
  /**
   * authority is the address that controls the module (defaults to x/gov unless
   * overwritten).
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * NOTE: All parameters must be supplied.
   *
   * @generated from field: sunrise.da.v0.Params params = 2;
   */
  params?: Params;

  constructor(data?: PartialMessage<MsgUpdateParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.da.v0.MsgUpdateParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined, b: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParams, a, b);
  }
}

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 *
 * @generated from message sunrise.da.v0.MsgUpdateParamsResponse
 */
export class MsgUpdateParamsResponse extends Message<MsgUpdateParamsResponse> {
  constructor(data?: PartialMessage<MsgUpdateParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.da.v0.MsgUpdateParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined, b: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParamsResponse, a, b);
  }
}

/**
 * MsgPublishData
 *
 * @generated from message sunrise.da.v0.MsgPublishData
 */
export class MsgPublishData extends Message<MsgPublishData> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string metadata_uri = 2;
   */
  metadataUri = "";

  /**
   * @generated from field: uint64 parity_shard_count = 3;
   */
  parityShardCount = protoInt64.zero;

  /**
   * @generated from field: repeated bytes shard_double_hashes = 4;
   */
  shardDoubleHashes: Uint8Array[] = [];

  /**
   * @generated from field: string data_source_info = 5;
   */
  dataSourceInfo = "";

  constructor(data?: PartialMessage<MsgPublishData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.da.v0.MsgPublishData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "parity_shard_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "shard_double_hashes", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
    { no: 5, name: "data_source_info", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgPublishData {
    return new MsgPublishData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgPublishData {
    return new MsgPublishData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgPublishData {
    return new MsgPublishData().fromJsonString(jsonString, options);
  }

  static equals(a: MsgPublishData | PlainMessage<MsgPublishData> | undefined, b: MsgPublishData | PlainMessage<MsgPublishData> | undefined): boolean {
    return proto3.util.equals(MsgPublishData, a, b);
  }
}

/**
 * MsgPublishDataResponse
 *
 * @generated from message sunrise.da.v0.MsgPublishDataResponse
 */
export class MsgPublishDataResponse extends Message<MsgPublishDataResponse> {
  constructor(data?: PartialMessage<MsgPublishDataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.da.v0.MsgPublishDataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgPublishDataResponse {
    return new MsgPublishDataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgPublishDataResponse {
    return new MsgPublishDataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgPublishDataResponse {
    return new MsgPublishDataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgPublishDataResponse | PlainMessage<MsgPublishDataResponse> | undefined, b: MsgPublishDataResponse | PlainMessage<MsgPublishDataResponse> | undefined): boolean {
    return proto3.util.equals(MsgPublishDataResponse, a, b);
  }
}

/**
 * MsgSubmitInvalidity
 *
 * @generated from message sunrise.da.v0.MsgSubmitInvalidity
 */
export class MsgSubmitInvalidity extends Message<MsgSubmitInvalidity> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string metadata_uri = 2;
   */
  metadataUri = "";

  /**
   * @generated from field: repeated int64 indices = 3;
   */
  indices: bigint[] = [];

  constructor(data?: PartialMessage<MsgSubmitInvalidity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.da.v0.MsgSubmitInvalidity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "indices", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSubmitInvalidity {
    return new MsgSubmitInvalidity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSubmitInvalidity {
    return new MsgSubmitInvalidity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSubmitInvalidity {
    return new MsgSubmitInvalidity().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSubmitInvalidity | PlainMessage<MsgSubmitInvalidity> | undefined, b: MsgSubmitInvalidity | PlainMessage<MsgSubmitInvalidity> | undefined): boolean {
    return proto3.util.equals(MsgSubmitInvalidity, a, b);
  }
}

/**
 * MsgSubmitInvalidityResponse
 *
 * @generated from message sunrise.da.v0.MsgSubmitInvalidityResponse
 */
export class MsgSubmitInvalidityResponse extends Message<MsgSubmitInvalidityResponse> {
  constructor(data?: PartialMessage<MsgSubmitInvalidityResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.da.v0.MsgSubmitInvalidityResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSubmitInvalidityResponse {
    return new MsgSubmitInvalidityResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSubmitInvalidityResponse {
    return new MsgSubmitInvalidityResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSubmitInvalidityResponse {
    return new MsgSubmitInvalidityResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSubmitInvalidityResponse | PlainMessage<MsgSubmitInvalidityResponse> | undefined, b: MsgSubmitInvalidityResponse | PlainMessage<MsgSubmitInvalidityResponse> | undefined): boolean {
    return proto3.util.equals(MsgSubmitInvalidityResponse, a, b);
  }
}

/**
 * MsgSubmitValidityProof
 *
 * @generated from message sunrise.da.v0.MsgSubmitValidityProof
 */
export class MsgSubmitValidityProof extends Message<MsgSubmitValidityProof> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string validator_address = 2;
   */
  validatorAddress = "";

  /**
   * @generated from field: string metadata_uri = 3;
   */
  metadataUri = "";

  /**
   * @generated from field: repeated int64 indices = 4;
   */
  indices: bigint[] = [];

  /**
   * @generated from field: repeated bytes proofs = 5;
   */
  proofs: Uint8Array[] = [];

  constructor(data?: PartialMessage<MsgSubmitValidityProof>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.da.v0.MsgSubmitValidityProof";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "metadata_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "indices", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
    { no: 5, name: "proofs", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSubmitValidityProof {
    return new MsgSubmitValidityProof().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSubmitValidityProof {
    return new MsgSubmitValidityProof().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSubmitValidityProof {
    return new MsgSubmitValidityProof().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSubmitValidityProof | PlainMessage<MsgSubmitValidityProof> | undefined, b: MsgSubmitValidityProof | PlainMessage<MsgSubmitValidityProof> | undefined): boolean {
    return proto3.util.equals(MsgSubmitValidityProof, a, b);
  }
}

/**
 * MsgSubmitValidityProofResponse
 *
 * @generated from message sunrise.da.v0.MsgSubmitValidityProofResponse
 */
export class MsgSubmitValidityProofResponse extends Message<MsgSubmitValidityProofResponse> {
  constructor(data?: PartialMessage<MsgSubmitValidityProofResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.da.v0.MsgSubmitValidityProofResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSubmitValidityProofResponse {
    return new MsgSubmitValidityProofResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSubmitValidityProofResponse {
    return new MsgSubmitValidityProofResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSubmitValidityProofResponse {
    return new MsgSubmitValidityProofResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSubmitValidityProofResponse | PlainMessage<MsgSubmitValidityProofResponse> | undefined, b: MsgSubmitValidityProofResponse | PlainMessage<MsgSubmitValidityProofResponse> | undefined): boolean {
    return proto3.util.equals(MsgSubmitValidityProofResponse, a, b);
  }
}

/**
 * MsgRegisterProofDeputy
 *
 * @generated from message sunrise.da.v0.MsgRegisterProofDeputy
 */
export class MsgRegisterProofDeputy extends Message<MsgRegisterProofDeputy> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string deputy_address = 2;
   */
  deputyAddress = "";

  constructor(data?: PartialMessage<MsgRegisterProofDeputy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.da.v0.MsgRegisterProofDeputy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "deputy_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRegisterProofDeputy {
    return new MsgRegisterProofDeputy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRegisterProofDeputy {
    return new MsgRegisterProofDeputy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRegisterProofDeputy {
    return new MsgRegisterProofDeputy().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRegisterProofDeputy | PlainMessage<MsgRegisterProofDeputy> | undefined, b: MsgRegisterProofDeputy | PlainMessage<MsgRegisterProofDeputy> | undefined): boolean {
    return proto3.util.equals(MsgRegisterProofDeputy, a, b);
  }
}

/**
 * MsgRegisterProofDeputyResponse
 *
 * @generated from message sunrise.da.v0.MsgRegisterProofDeputyResponse
 */
export class MsgRegisterProofDeputyResponse extends Message<MsgRegisterProofDeputyResponse> {
  constructor(data?: PartialMessage<MsgRegisterProofDeputyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.da.v0.MsgRegisterProofDeputyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRegisterProofDeputyResponse {
    return new MsgRegisterProofDeputyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRegisterProofDeputyResponse {
    return new MsgRegisterProofDeputyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRegisterProofDeputyResponse {
    return new MsgRegisterProofDeputyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRegisterProofDeputyResponse | PlainMessage<MsgRegisterProofDeputyResponse> | undefined, b: MsgRegisterProofDeputyResponse | PlainMessage<MsgRegisterProofDeputyResponse> | undefined): boolean {
    return proto3.util.equals(MsgRegisterProofDeputyResponse, a, b);
  }
}

/**
 * MsgUnregisterProofDeputy
 *
 * @generated from message sunrise.da.v0.MsgUnregisterProofDeputy
 */
export class MsgUnregisterProofDeputy extends Message<MsgUnregisterProofDeputy> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  constructor(data?: PartialMessage<MsgUnregisterProofDeputy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.da.v0.MsgUnregisterProofDeputy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUnregisterProofDeputy {
    return new MsgUnregisterProofDeputy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUnregisterProofDeputy {
    return new MsgUnregisterProofDeputy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUnregisterProofDeputy {
    return new MsgUnregisterProofDeputy().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUnregisterProofDeputy | PlainMessage<MsgUnregisterProofDeputy> | undefined, b: MsgUnregisterProofDeputy | PlainMessage<MsgUnregisterProofDeputy> | undefined): boolean {
    return proto3.util.equals(MsgUnregisterProofDeputy, a, b);
  }
}

/**
 * MsgUnregisterProofDeputyResponse
 *
 * @generated from message sunrise.da.v0.MsgUnregisterProofDeputyResponse
 */
export class MsgUnregisterProofDeputyResponse extends Message<MsgUnregisterProofDeputyResponse> {
  constructor(data?: PartialMessage<MsgUnregisterProofDeputyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.da.v0.MsgUnregisterProofDeputyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUnregisterProofDeputyResponse {
    return new MsgUnregisterProofDeputyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUnregisterProofDeputyResponse {
    return new MsgUnregisterProofDeputyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUnregisterProofDeputyResponse {
    return new MsgUnregisterProofDeputyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUnregisterProofDeputyResponse | PlainMessage<MsgUnregisterProofDeputyResponse> | undefined, b: MsgUnregisterProofDeputyResponse | PlainMessage<MsgUnregisterProofDeputyResponse> | undefined): boolean {
    return proto3.util.equals(MsgUnregisterProofDeputyResponse, a, b);
  }
}

/**
 * MsgVerifyData defines the message to trigger the data verification process.
 *
 * @generated from message sunrise.da.v0.MsgVerifyData
 */
export class MsgVerifyData extends Message<MsgVerifyData> {
  /**
   * sender is the address of the account that triggers the process.
   *
   * @generated from field: string sender = 1;
   */
  sender = "";

  constructor(data?: PartialMessage<MsgVerifyData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.da.v0.MsgVerifyData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgVerifyData {
    return new MsgVerifyData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgVerifyData {
    return new MsgVerifyData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgVerifyData {
    return new MsgVerifyData().fromJsonString(jsonString, options);
  }

  static equals(a: MsgVerifyData | PlainMessage<MsgVerifyData> | undefined, b: MsgVerifyData | PlainMessage<MsgVerifyData> | undefined): boolean {
    return proto3.util.equals(MsgVerifyData, a, b);
  }
}

/**
 * MsgVerifyDataResponse defines the response for MsgVerifyData.
 *
 * @generated from message sunrise.da.v0.MsgVerifyDataResponse
 */
export class MsgVerifyDataResponse extends Message<MsgVerifyDataResponse> {
  constructor(data?: PartialMessage<MsgVerifyDataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.da.v0.MsgVerifyDataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgVerifyDataResponse {
    return new MsgVerifyDataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgVerifyDataResponse {
    return new MsgVerifyDataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgVerifyDataResponse {
    return new MsgVerifyDataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgVerifyDataResponse | PlainMessage<MsgVerifyDataResponse> | undefined, b: MsgVerifyDataResponse | PlainMessage<MsgVerifyDataResponse> | undefined): boolean {
    return proto3.util.equals(MsgVerifyDataResponse, a, b);
  }
}

