// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file sunrise/da/params.proto (package sunrise.da, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Coin } from "../../cosmos/base/v1beta1/coin_pb.js";

/**
 * Params defines the parameters for the module.
 *
 * @generated from message sunrise.da.Params
 */
export class Params extends Message<Params> {
  /**
   * @generated from field: string vote_threshold = 1;
   */
  voteThreshold = "";

  /**
   * @generated from field: uint64 slash_epoch = 2;
   */
  slashEpoch = protoInt64.zero;

  /**
   * @generated from field: uint64 epoch_max_fault = 3;
   */
  epochMaxFault = protoInt64.zero;

  /**
   * @generated from field: string slash_fraction = 4;
   */
  slashFraction = "";

  /**
   * @generated from field: string replication_factor = 5;
   */
  replicationFactor = "";

  /**
   * @generated from field: uint64 min_shard_count = 6;
   */
  minShardCount = protoInt64.zero;

  /**
   * @generated from field: uint64 max_shard_count = 7;
   */
  maxShardCount = protoInt64.zero;

  /**
   * @generated from field: uint64 max_shard_size = 8;
   */
  maxShardSize = protoInt64.zero;

  /**
   * @generated from field: google.protobuf.Duration challenge_period = 9;
   */
  challengePeriod?: Duration;

  /**
   * @generated from field: google.protobuf.Duration proof_period = 10;
   */
  proofPeriod?: Duration;

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin challenge_collateral = 11;
   */
  challengeCollateral: Coin[] = [];

  /**
   * @generated from field: bytes zkp_proving_key = 12;
   */
  zkpProvingKey = new Uint8Array(0);

  /**
   * @generated from field: bytes zkp_verifying_key = 13;
   */
  zkpVerifyingKey = new Uint8Array(0);

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.da.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vote_threshold", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "slash_epoch", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "epoch_max_fault", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "slash_fraction", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "replication_factor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "min_shard_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "max_shard_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "max_shard_size", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 9, name: "challenge_period", kind: "message", T: Duration },
    { no: 10, name: "proof_period", kind: "message", T: Duration },
    { no: 11, name: "challenge_collateral", kind: "message", T: Coin, repeated: true },
    { no: 12, name: "zkp_proving_key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 13, name: "zkp_verifying_key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}

