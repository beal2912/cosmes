// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file sunrise/da/metadata.proto (package sunrise.da, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message sunrise.da.Metadata
 */
export class Metadata extends Message<Metadata> {
  /**
   * @generated from field: bytes recovered_data_hash = 1;
   */
  recoveredDataHash = new Uint8Array(0);

  /**
   * @generated from field: uint64 recovered_data_size = 2;
   */
  recoveredDataSize = protoInt64.zero;

  /**
   * @generated from field: uint64 shard_size = 3;
   */
  shardSize = protoInt64.zero;

  /**
   * @generated from field: uint64 parity_shard_count = 4;
   */
  parityShardCount = protoInt64.zero;

  /**
   * @generated from field: repeated string shard_uris = 5;
   */
  shardUris: string[] = [];

  constructor(data?: PartialMessage<Metadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.da.Metadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "recovered_data_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "recovered_data_size", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "shard_size", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "parity_shard_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "shard_uris", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Metadata {
    return new Metadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Metadata {
    return new Metadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Metadata {
    return new Metadata().fromJsonString(jsonString, options);
  }

  static equals(a: Metadata | PlainMessage<Metadata> | undefined, b: Metadata | PlainMessage<Metadata> | undefined): boolean {
    return proto3.util.equals(Metadata, a, b);
  }
}

