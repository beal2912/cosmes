// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file sunrise/da/v1/query.proto (package sunrise.da.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { Invalidity, Proof, PublishedData } from "./published_data_pb.js";

/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from message sunrise.da.v1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.da.v1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from message sunrise.da.v1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: sunrise.da.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.da.v1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * QueryPublishedDataRequest is request type for the Query/PublishedData RPC
 * method.
 *
 * @generated from message sunrise.da.v1.QueryPublishedDataRequest
 */
export class QueryPublishedDataRequest extends Message<QueryPublishedDataRequest> {
  /**
   * @generated from field: string metadata_uri = 1;
   */
  metadataUri = "";

  constructor(data?: PartialMessage<QueryPublishedDataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.da.v1.QueryPublishedDataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPublishedDataRequest {
    return new QueryPublishedDataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPublishedDataRequest {
    return new QueryPublishedDataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPublishedDataRequest {
    return new QueryPublishedDataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPublishedDataRequest | PlainMessage<QueryPublishedDataRequest> | undefined, b: QueryPublishedDataRequest | PlainMessage<QueryPublishedDataRequest> | undefined): boolean {
    return proto3.util.equals(QueryPublishedDataRequest, a, b);
  }
}

/**
 * QueryPublishedDataResponse is response type for the Query/PublishedData RPC
 * method.
 *
 * @generated from message sunrise.da.v1.QueryPublishedDataResponse
 */
export class QueryPublishedDataResponse extends Message<QueryPublishedDataResponse> {
  /**
   * @generated from field: sunrise.da.v1.PublishedData data = 1;
   */
  data?: PublishedData;

  constructor(data?: PartialMessage<QueryPublishedDataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.da.v1.QueryPublishedDataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: PublishedData },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPublishedDataResponse {
    return new QueryPublishedDataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPublishedDataResponse {
    return new QueryPublishedDataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPublishedDataResponse {
    return new QueryPublishedDataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPublishedDataResponse | PlainMessage<QueryPublishedDataResponse> | undefined, b: QueryPublishedDataResponse | PlainMessage<QueryPublishedDataResponse> | undefined): boolean {
    return proto3.util.equals(QueryPublishedDataResponse, a, b);
  }
}

/**
 * QueryAllPublishedDataRequest is request type for the
 * Query/AllPublishedData RPC method.
 *
 * @generated from message sunrise.da.v1.QueryAllPublishedDataRequest
 */
export class QueryAllPublishedDataRequest extends Message<QueryAllPublishedDataRequest> {
  constructor(data?: PartialMessage<QueryAllPublishedDataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.da.v1.QueryAllPublishedDataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllPublishedDataRequest {
    return new QueryAllPublishedDataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllPublishedDataRequest {
    return new QueryAllPublishedDataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllPublishedDataRequest {
    return new QueryAllPublishedDataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllPublishedDataRequest | PlainMessage<QueryAllPublishedDataRequest> | undefined, b: QueryAllPublishedDataRequest | PlainMessage<QueryAllPublishedDataRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllPublishedDataRequest, a, b);
  }
}

/**
 * QueryAllPublishedDataResponse is response type for the
 * Query/AllPublishedData RPC method.
 *
 * @generated from message sunrise.da.v1.QueryAllPublishedDataResponse
 */
export class QueryAllPublishedDataResponse extends Message<QueryAllPublishedDataResponse> {
  /**
   * @generated from field: repeated sunrise.da.v1.PublishedData data = 1;
   */
  data: PublishedData[] = [];

  constructor(data?: PartialMessage<QueryAllPublishedDataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.da.v1.QueryAllPublishedDataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: PublishedData, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllPublishedDataResponse {
    return new QueryAllPublishedDataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllPublishedDataResponse {
    return new QueryAllPublishedDataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllPublishedDataResponse {
    return new QueryAllPublishedDataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllPublishedDataResponse | PlainMessage<QueryAllPublishedDataResponse> | undefined, b: QueryAllPublishedDataResponse | PlainMessage<QueryAllPublishedDataResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllPublishedDataResponse, a, b);
  }
}

/**
 * QueryValidityProofRequest is request type for the Query/ValidityProof RPC
 * method.
 *
 * @generated from message sunrise.da.v1.QueryValidityProofRequest
 */
export class QueryValidityProofRequest extends Message<QueryValidityProofRequest> {
  /**
   * @generated from field: string metadata_uri = 1;
   */
  metadataUri = "";

  /**
   * @generated from field: string validator_address = 2;
   */
  validatorAddress = "";

  constructor(data?: PartialMessage<QueryValidityProofRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.da.v1.QueryValidityProofRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryValidityProofRequest {
    return new QueryValidityProofRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryValidityProofRequest {
    return new QueryValidityProofRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryValidityProofRequest {
    return new QueryValidityProofRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryValidityProofRequest | PlainMessage<QueryValidityProofRequest> | undefined, b: QueryValidityProofRequest | PlainMessage<QueryValidityProofRequest> | undefined): boolean {
    return proto3.util.equals(QueryValidityProofRequest, a, b);
  }
}

/**
 * QueryValidityProofResponse is response type for the Query/ValidityProof RPC
 * method.
 *
 * @generated from message sunrise.da.v1.QueryValidityProofResponse
 */
export class QueryValidityProofResponse extends Message<QueryValidityProofResponse> {
  /**
   * @generated from field: sunrise.da.v1.Proof proof = 1;
   */
  proof?: Proof;

  constructor(data?: PartialMessage<QueryValidityProofResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.da.v1.QueryValidityProofResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "proof", kind: "message", T: Proof },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryValidityProofResponse {
    return new QueryValidityProofResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryValidityProofResponse {
    return new QueryValidityProofResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryValidityProofResponse {
    return new QueryValidityProofResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryValidityProofResponse | PlainMessage<QueryValidityProofResponse> | undefined, b: QueryValidityProofResponse | PlainMessage<QueryValidityProofResponse> | undefined): boolean {
    return proto3.util.equals(QueryValidityProofResponse, a, b);
  }
}

/**
 * QueryAllValidityProofsRequest is request type for the Query/AllValidityProofs RPC
 * method.
 *
 * @generated from message sunrise.da.v1.QueryAllValidityProofsRequest
 */
export class QueryAllValidityProofsRequest extends Message<QueryAllValidityProofsRequest> {
  /**
   * @generated from field: string metadata_uri = 1;
   */
  metadataUri = "";

  constructor(data?: PartialMessage<QueryAllValidityProofsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.da.v1.QueryAllValidityProofsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllValidityProofsRequest {
    return new QueryAllValidityProofsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllValidityProofsRequest {
    return new QueryAllValidityProofsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllValidityProofsRequest {
    return new QueryAllValidityProofsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllValidityProofsRequest | PlainMessage<QueryAllValidityProofsRequest> | undefined, b: QueryAllValidityProofsRequest | PlainMessage<QueryAllValidityProofsRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllValidityProofsRequest, a, b);
  }
}

/**
 * QueryAllValidityProofsResponse is response type for the Query/AllValidityProofs RPC
 * method.
 *
 * @generated from message sunrise.da.v1.QueryAllValidityProofsResponse
 */
export class QueryAllValidityProofsResponse extends Message<QueryAllValidityProofsResponse> {
  /**
   * @generated from field: repeated sunrise.da.v1.Proof proofs = 1;
   */
  proofs: Proof[] = [];

  constructor(data?: PartialMessage<QueryAllValidityProofsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.da.v1.QueryAllValidityProofsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "proofs", kind: "message", T: Proof, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllValidityProofsResponse {
    return new QueryAllValidityProofsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllValidityProofsResponse {
    return new QueryAllValidityProofsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllValidityProofsResponse {
    return new QueryAllValidityProofsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllValidityProofsResponse | PlainMessage<QueryAllValidityProofsResponse> | undefined, b: QueryAllValidityProofsResponse | PlainMessage<QueryAllValidityProofsResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllValidityProofsResponse, a, b);
  }
}

/**
 * QueryInvalidityProofRequest is request type for the Query/Invalidity RPC
 * method.
 *
 * @generated from message sunrise.da.v1.QueryInvalidityRequest
 */
export class QueryInvalidityRequest extends Message<QueryInvalidityRequest> {
  /**
   * @generated from field: string metadata_uri = 1;
   */
  metadataUri = "";

  /**
   * @generated from field: string sender_address = 2;
   */
  senderAddress = "";

  constructor(data?: PartialMessage<QueryInvalidityRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.da.v1.QueryInvalidityRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sender_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryInvalidityRequest {
    return new QueryInvalidityRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryInvalidityRequest {
    return new QueryInvalidityRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryInvalidityRequest {
    return new QueryInvalidityRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryInvalidityRequest | PlainMessage<QueryInvalidityRequest> | undefined, b: QueryInvalidityRequest | PlainMessage<QueryInvalidityRequest> | undefined): boolean {
    return proto3.util.equals(QueryInvalidityRequest, a, b);
  }
}

/**
 * QueryInvalidityResponse is response type for the Query/Invalidity RPC
 * method.
 *
 * @generated from message sunrise.da.v1.QueryInvalidityResponse
 */
export class QueryInvalidityResponse extends Message<QueryInvalidityResponse> {
  /**
   * @generated from field: sunrise.da.v1.Invalidity invalidity = 1;
   */
  invalidity?: Invalidity;

  constructor(data?: PartialMessage<QueryInvalidityResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.da.v1.QueryInvalidityResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "invalidity", kind: "message", T: Invalidity },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryInvalidityResponse {
    return new QueryInvalidityResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryInvalidityResponse {
    return new QueryInvalidityResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryInvalidityResponse {
    return new QueryInvalidityResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryInvalidityResponse | PlainMessage<QueryInvalidityResponse> | undefined, b: QueryInvalidityResponse | PlainMessage<QueryInvalidityResponse> | undefined): boolean {
    return proto3.util.equals(QueryInvalidityResponse, a, b);
  }
}

/**
 * QueryAllInvalidityProofRequest is request type for the Query/AllInvalidity RPC
 * method.
 *
 * @generated from message sunrise.da.v1.QueryAllInvalidityRequest
 */
export class QueryAllInvalidityRequest extends Message<QueryAllInvalidityRequest> {
  /**
   * @generated from field: string metadata_uri = 1;
   */
  metadataUri = "";

  constructor(data?: PartialMessage<QueryAllInvalidityRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.da.v1.QueryAllInvalidityRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllInvalidityRequest {
    return new QueryAllInvalidityRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllInvalidityRequest {
    return new QueryAllInvalidityRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllInvalidityRequest {
    return new QueryAllInvalidityRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllInvalidityRequest | PlainMessage<QueryAllInvalidityRequest> | undefined, b: QueryAllInvalidityRequest | PlainMessage<QueryAllInvalidityRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllInvalidityRequest, a, b);
  }
}

/**
 * QueryAllInvalidityResponse is response type for the Query/AllInvalidity RPC
 * method.
 *
 * @generated from message sunrise.da.v1.QueryAllInvalidityResponse
 */
export class QueryAllInvalidityResponse extends Message<QueryAllInvalidityResponse> {
  /**
   * @generated from field: repeated sunrise.da.v1.Invalidity invalidity = 1;
   */
  invalidity: Invalidity[] = [];

  constructor(data?: PartialMessage<QueryAllInvalidityResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.da.v1.QueryAllInvalidityResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "invalidity", kind: "message", T: Invalidity, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllInvalidityResponse {
    return new QueryAllInvalidityResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllInvalidityResponse {
    return new QueryAllInvalidityResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllInvalidityResponse {
    return new QueryAllInvalidityResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllInvalidityResponse | PlainMessage<QueryAllInvalidityResponse> | undefined, b: QueryAllInvalidityResponse | PlainMessage<QueryAllInvalidityResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllInvalidityResponse, a, b);
  }
}

/**
 * QueryValidatorShardIndicesRequest is request type for the
 * Query/ValidatorShardIndices RPC method.
 *
 * @generated from message sunrise.da.v1.QueryValidatorShardIndicesRequest
 */
export class QueryValidatorShardIndicesRequest extends Message<QueryValidatorShardIndicesRequest> {
  /**
   * @generated from field: string validator_address = 1;
   */
  validatorAddress = "";

  /**
   * @generated from field: uint64 shard_count = 2;
   */
  shardCount = protoInt64.zero;

  constructor(data?: PartialMessage<QueryValidatorShardIndicesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.da.v1.QueryValidatorShardIndicesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "shard_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryValidatorShardIndicesRequest {
    return new QueryValidatorShardIndicesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryValidatorShardIndicesRequest {
    return new QueryValidatorShardIndicesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryValidatorShardIndicesRequest {
    return new QueryValidatorShardIndicesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryValidatorShardIndicesRequest | PlainMessage<QueryValidatorShardIndicesRequest> | undefined, b: QueryValidatorShardIndicesRequest | PlainMessage<QueryValidatorShardIndicesRequest> | undefined): boolean {
    return proto3.util.equals(QueryValidatorShardIndicesRequest, a, b);
  }
}

/**
 * QueryValidatorShardIndicesResponse is response type for the
 * Query/ValidatorShardIndices RPC method.
 *
 * @generated from message sunrise.da.v1.QueryValidatorShardIndicesResponse
 */
export class QueryValidatorShardIndicesResponse extends Message<QueryValidatorShardIndicesResponse> {
  /**
   * @generated from field: repeated uint64 shard_indices = 1;
   */
  shardIndices: bigint[] = [];

  constructor(data?: PartialMessage<QueryValidatorShardIndicesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.da.v1.QueryValidatorShardIndicesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "shard_indices", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryValidatorShardIndicesResponse {
    return new QueryValidatorShardIndicesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryValidatorShardIndicesResponse {
    return new QueryValidatorShardIndicesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryValidatorShardIndicesResponse {
    return new QueryValidatorShardIndicesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryValidatorShardIndicesResponse | PlainMessage<QueryValidatorShardIndicesResponse> | undefined, b: QueryValidatorShardIndicesResponse | PlainMessage<QueryValidatorShardIndicesResponse> | undefined): boolean {
    return proto3.util.equals(QueryValidatorShardIndicesResponse, a, b);
  }
}

/**
 * QueryZkpProofThresholdRequest is request type for the
 * Query/ZkpProofThreshold RPC method.
 *
 * @generated from message sunrise.da.v1.QueryZkpProofThresholdRequest
 */
export class QueryZkpProofThresholdRequest extends Message<QueryZkpProofThresholdRequest> {
  /**
   * @generated from field: uint64 shard_count = 1;
   */
  shardCount = protoInt64.zero;

  constructor(data?: PartialMessage<QueryZkpProofThresholdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.da.v1.QueryZkpProofThresholdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "shard_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryZkpProofThresholdRequest {
    return new QueryZkpProofThresholdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryZkpProofThresholdRequest {
    return new QueryZkpProofThresholdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryZkpProofThresholdRequest {
    return new QueryZkpProofThresholdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryZkpProofThresholdRequest | PlainMessage<QueryZkpProofThresholdRequest> | undefined, b: QueryZkpProofThresholdRequest | PlainMessage<QueryZkpProofThresholdRequest> | undefined): boolean {
    return proto3.util.equals(QueryZkpProofThresholdRequest, a, b);
  }
}

/**
 * QueryZkpProofThresholdResponse is response type for the
 * Query/ZkpProofThreshold RPC method.
 *
 * @generated from message sunrise.da.v1.QueryZkpProofThresholdResponse
 */
export class QueryZkpProofThresholdResponse extends Message<QueryZkpProofThresholdResponse> {
  /**
   * @generated from field: uint64 threshold = 1;
   */
  threshold = protoInt64.zero;

  constructor(data?: PartialMessage<QueryZkpProofThresholdResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.da.v1.QueryZkpProofThresholdResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "threshold", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryZkpProofThresholdResponse {
    return new QueryZkpProofThresholdResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryZkpProofThresholdResponse {
    return new QueryZkpProofThresholdResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryZkpProofThresholdResponse {
    return new QueryZkpProofThresholdResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryZkpProofThresholdResponse | PlainMessage<QueryZkpProofThresholdResponse> | undefined, b: QueryZkpProofThresholdResponse | PlainMessage<QueryZkpProofThresholdResponse> | undefined): boolean {
    return proto3.util.equals(QueryZkpProofThresholdResponse, a, b);
  }
}

/**
 * QueryProofDeputyRequest is request type for the
 * Query/ProofDeputy RPC method.
 *
 * @generated from message sunrise.da.v1.QueryProofDeputyRequest
 */
export class QueryProofDeputyRequest extends Message<QueryProofDeputyRequest> {
  /**
   * @generated from field: string validator_address = 1;
   */
  validatorAddress = "";

  constructor(data?: PartialMessage<QueryProofDeputyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.da.v1.QueryProofDeputyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryProofDeputyRequest {
    return new QueryProofDeputyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryProofDeputyRequest {
    return new QueryProofDeputyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryProofDeputyRequest {
    return new QueryProofDeputyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryProofDeputyRequest | PlainMessage<QueryProofDeputyRequest> | undefined, b: QueryProofDeputyRequest | PlainMessage<QueryProofDeputyRequest> | undefined): boolean {
    return proto3.util.equals(QueryProofDeputyRequest, a, b);
  }
}

/**
 * QueryProofDeputyResponse is response type for the
 * Query/ProofDeputy RPC method.
 *
 * @generated from message sunrise.da.v1.QueryProofDeputyResponse
 */
export class QueryProofDeputyResponse extends Message<QueryProofDeputyResponse> {
  /**
   * @generated from field: string deputy_address = 1;
   */
  deputyAddress = "";

  constructor(data?: PartialMessage<QueryProofDeputyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.da.v1.QueryProofDeputyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deputy_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryProofDeputyResponse {
    return new QueryProofDeputyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryProofDeputyResponse {
    return new QueryProofDeputyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryProofDeputyResponse {
    return new QueryProofDeputyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryProofDeputyResponse | PlainMessage<QueryProofDeputyResponse> | undefined, b: QueryProofDeputyResponse | PlainMessage<QueryProofDeputyResponse> | undefined): boolean {
    return proto3.util.equals(QueryProofDeputyResponse, a, b);
  }
}

