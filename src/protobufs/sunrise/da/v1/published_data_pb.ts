// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file sunrise/da/v1/published_data.proto (package sunrise.da.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * PublishedDataStatus
 *
 * @generated from enum sunrise.da.v1.Status
 */
export enum Status {
  /**
   * Default value
   *
   * @generated from enum value: STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Verified
   *
   * @generated from enum value: STATUS_VERIFIED = 1;
   */
  VERIFIED = 1,

  /**
   * Rejected
   *
   * @generated from enum value: STATUS_REJECTED = 2;
   */
  REJECTED = 2,

  /**
   * Verified the votes from the validators. Challenge can be received (after preBlocker)
   *
   * @generated from enum value: STATUS_CHALLENGE_PERIOD = 3;
   */
  CHALLENGE_PERIOD = 3,

  /**
   * A certain number of SubmitInvalidity received. Validators can send SubmitValidityProof tx.
   *
   * @generated from enum value: STATUS_CHALLENGING = 4;
   */
  CHALLENGING = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(Status)
proto3.util.setEnumType(Status, "sunrise.da.v1.Status", [
  { no: 0, name: "STATUS_UNSPECIFIED" },
  { no: 1, name: "STATUS_VERIFIED" },
  { no: 2, name: "STATUS_REJECTED" },
  { no: 3, name: "STATUS_CHALLENGE_PERIOD" },
  { no: 4, name: "STATUS_CHALLENGING" },
]);

/**
 * PublishedData
 *
 * @generated from message sunrise.da.v1.PublishedData
 */
export class PublishedData extends Message<PublishedData> {
  /**
   * @generated from field: string metadata_uri = 1;
   */
  metadataUri = "";

  /**
   * @generated from field: uint64 parity_shard_count = 2;
   */
  parityShardCount = protoInt64.zero;

  /**
   * @generated from field: repeated bytes shard_double_hashes = 3;
   */
  shardDoubleHashes: Uint8Array[] = [];

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 4;
   */
  timestamp?: Timestamp;

  /**
   * @generated from field: sunrise.da.v1.Status status = 5;
   */
  status = Status.UNSPECIFIED;

  /**
   * @generated from field: string publisher = 6;
   */
  publisher = "";

  /**
   * @generated from field: string challenger = 7;
   */
  challenger = "";

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin publish_data_collateral = 8;
   */
  publishDataCollateral: Coin[] = [];

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin submit_invalidity_collateral = 9;
   */
  submitInvalidityCollateral: Coin[] = [];

  /**
   * @generated from field: google.protobuf.Timestamp published_timestamp = 10;
   */
  publishedTimestamp?: Timestamp;

  /**
   * @generated from field: string data_source_info = 11;
   */
  dataSourceInfo = "";

  /**
   * @generated from field: int64 verified_height = 12;
   */
  verifiedHeight = protoInt64.zero;

  constructor(data?: PartialMessage<PublishedData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.da.v1.PublishedData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "parity_shard_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "shard_double_hashes", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
    { no: 4, name: "timestamp", kind: "message", T: Timestamp },
    { no: 5, name: "status", kind: "enum", T: proto3.getEnumType(Status) },
    { no: 6, name: "publisher", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "challenger", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "publish_data_collateral", kind: "message", T: Coin, repeated: true },
    { no: 9, name: "submit_invalidity_collateral", kind: "message", T: Coin, repeated: true },
    { no: 10, name: "published_timestamp", kind: "message", T: Timestamp },
    { no: 11, name: "data_source_info", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "verified_height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishedData {
    return new PublishedData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishedData {
    return new PublishedData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishedData {
    return new PublishedData().fromJsonString(jsonString, options);
  }

  static equals(a: PublishedData | PlainMessage<PublishedData> | undefined, b: PublishedData | PlainMessage<PublishedData> | undefined): boolean {
    return proto3.util.equals(PublishedData, a, b);
  }
}

/**
 * Proof
 *
 * @generated from message sunrise.da.v1.Proof
 */
export class Proof extends Message<Proof> {
  /**
   * @generated from field: string metadata_uri = 1;
   */
  metadataUri = "";

  /**
   * @generated from field: string sender = 2;
   */
  sender = "";

  /**
   * @generated from field: repeated int64 indices = 3;
   */
  indices: bigint[] = [];

  /**
   * @generated from field: repeated bytes proofs = 4;
   */
  proofs: Uint8Array[] = [];

  constructor(data?: PartialMessage<Proof>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.da.v1.Proof";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "indices", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
    { no: 4, name: "proofs", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Proof {
    return new Proof().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Proof {
    return new Proof().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Proof {
    return new Proof().fromJsonString(jsonString, options);
  }

  static equals(a: Proof | PlainMessage<Proof> | undefined, b: Proof | PlainMessage<Proof> | undefined): boolean {
    return proto3.util.equals(Proof, a, b);
  }
}

/**
 * Invalidity
 *
 * @generated from message sunrise.da.v1.Invalidity
 */
export class Invalidity extends Message<Invalidity> {
  /**
   * @generated from field: string metadata_uri = 1;
   */
  metadataUri = "";

  /**
   * @generated from field: string sender = 2;
   */
  sender = "";

  /**
   * @generated from field: repeated int64 indices = 3;
   */
  indices: bigint[] = [];

  constructor(data?: PartialMessage<Invalidity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.da.v1.Invalidity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "indices", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Invalidity {
    return new Invalidity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Invalidity {
    return new Invalidity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Invalidity {
    return new Invalidity().fromJsonString(jsonString, options);
  }

  static equals(a: Invalidity | PlainMessage<Invalidity> | undefined, b: Invalidity | PlainMessage<Invalidity> | undefined): boolean {
    return proto3.util.equals(Invalidity, a, b);
  }
}

