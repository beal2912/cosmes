// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file sunrise/da/published_data.proto (package sunrise.da, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Coin } from "../../cosmos/base/v1beta1/coin_pb.js";

/**
 * @generated from message sunrise.da.PublishedData
 */
export class PublishedData extends Message<PublishedData> {
  /**
   * @generated from field: string metadata_uri = 1;
   */
  metadataUri = "";

  /**
   * @generated from field: uint64 parity_shard_count = 2;
   */
  parityShardCount = protoInt64.zero;

  /**
   * @generated from field: repeated bytes shard_double_hashes = 3;
   */
  shardDoubleHashes: Uint8Array[] = [];

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 4;
   */
  timestamp?: Timestamp;

  /**
   * TODO: to be replaced with enum
   *
   * @generated from field: string status = 5;
   */
  status = "";

  /**
   * @generated from field: string publisher = 6;
   */
  publisher = "";

  /**
   * @generated from field: string challenger = 7;
   */
  challenger = "";

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin collateral = 8;
   */
  collateral: Coin[] = [];

  /**
   * @generated from field: google.protobuf.Timestamp challenge_timestamp = 9;
   */
  challengeTimestamp?: Timestamp;

  /**
   * @generated from field: string data_source_info = 10;
   */
  dataSourceInfo = "";

  constructor(data?: PartialMessage<PublishedData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.da.PublishedData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "parity_shard_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "shard_double_hashes", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
    { no: 4, name: "timestamp", kind: "message", T: Timestamp },
    { no: 5, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "publisher", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "challenger", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "collateral", kind: "message", T: Coin, repeated: true },
    { no: 9, name: "challenge_timestamp", kind: "message", T: Timestamp },
    { no: 10, name: "data_source_info", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishedData {
    return new PublishedData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishedData {
    return new PublishedData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishedData {
    return new PublishedData().fromJsonString(jsonString, options);
  }

  static equals(a: PublishedData | PlainMessage<PublishedData> | undefined, b: PublishedData | PlainMessage<PublishedData> | undefined): boolean {
    return proto3.util.equals(PublishedData, a, b);
  }
}

/**
 * @generated from message sunrise.da.Proof
 */
export class Proof extends Message<Proof> {
  /**
   * @generated from field: string metadata_uri = 1;
   */
  metadataUri = "";

  /**
   * @generated from field: string sender = 2;
   */
  sender = "";

  /**
   * @generated from field: repeated int64 indices = 3;
   */
  indices: bigint[] = [];

  /**
   * @generated from field: repeated bytes proofs = 4;
   */
  proofs: Uint8Array[] = [];

  /**
   * @generated from field: bool is_valid_data = 5;
   */
  isValidData = false;

  constructor(data?: PartialMessage<Proof>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.da.Proof";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "indices", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
    { no: 4, name: "proofs", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
    { no: 5, name: "is_valid_data", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Proof {
    return new Proof().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Proof {
    return new Proof().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Proof {
    return new Proof().fromJsonString(jsonString, options);
  }

  static equals(a: Proof | PlainMessage<Proof> | undefined, b: Proof | PlainMessage<Proof> | undefined): boolean {
    return proto3.util.equals(Proof, a, b);
  }
}

