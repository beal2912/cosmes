// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file sunrise/swap/v1/metadata.proto (package sunrise.swap.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3 } from "@bufbuild/protobuf";
import { Route } from "./route_pb.js";

/**
 * PacketMetadata
 *
 * @generated from message sunrise.swap.v1.PacketMetadata
 */
export class PacketMetadata extends Message<PacketMetadata> {
  /**
   * @generated from field: sunrise.swap.v1.SwapMetadata swap = 1;
   */
  swap?: SwapMetadata;

  constructor(data?: PartialMessage<PacketMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.swap.v1.PacketMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "swap", kind: "message", T: SwapMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PacketMetadata {
    return new PacketMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PacketMetadata {
    return new PacketMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PacketMetadata {
    return new PacketMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: PacketMetadata | PlainMessage<PacketMetadata> | undefined, b: PacketMetadata | PlainMessage<PacketMetadata> | undefined): boolean {
    return proto3.util.equals(PacketMetadata, a, b);
  }
}

/**
 * ForwardMetadata
 *
 * @generated from message sunrise.swap.v1.ForwardMetadata
 */
export class ForwardMetadata extends Message<ForwardMetadata> {
  /**
   * @generated from field: string receiver = 1;
   */
  receiver = "";

  /**
   * @generated from field: string port = 2;
   */
  port = "";

  /**
   * @generated from field: string channel = 3;
   */
  channel = "";

  /**
   * @generated from field: google.protobuf.Duration timeout = 4;
   */
  timeout?: Duration;

  /**
   * @generated from field: uint32 retries = 5;
   */
  retries = 0;

  /**
   * @generated from field: string next = 6;
   */
  next = "";

  constructor(data?: PartialMessage<ForwardMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.swap.v1.ForwardMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "receiver", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "port", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "channel", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "timeout", kind: "message", T: Duration },
    { no: 5, name: "retries", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 6, name: "next", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ForwardMetadata {
    return new ForwardMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ForwardMetadata {
    return new ForwardMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ForwardMetadata {
    return new ForwardMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: ForwardMetadata | PlainMessage<ForwardMetadata> | undefined, b: ForwardMetadata | PlainMessage<ForwardMetadata> | undefined): boolean {
    return proto3.util.equals(ForwardMetadata, a, b);
  }
}

/**
 * ExactAmountIn
 *
 * @generated from message sunrise.swap.v1.ExactAmountIn
 */
export class ExactAmountIn extends Message<ExactAmountIn> {
  /**
   * @generated from field: string min_amount_out = 1;
   */
  minAmountOut = "";

  constructor(data?: PartialMessage<ExactAmountIn>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.swap.v1.ExactAmountIn";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "min_amount_out", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExactAmountIn {
    return new ExactAmountIn().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExactAmountIn {
    return new ExactAmountIn().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExactAmountIn {
    return new ExactAmountIn().fromJsonString(jsonString, options);
  }

  static equals(a: ExactAmountIn | PlainMessage<ExactAmountIn> | undefined, b: ExactAmountIn | PlainMessage<ExactAmountIn> | undefined): boolean {
    return proto3.util.equals(ExactAmountIn, a, b);
  }
}

/**
 * ExactAmountOut
 *
 * @generated from message sunrise.swap.v1.ExactAmountOut
 */
export class ExactAmountOut extends Message<ExactAmountOut> {
  /**
   * @generated from field: string amount_out = 1;
   */
  amountOut = "";

  /**
   * @generated from field: sunrise.swap.v1.ForwardMetadata change = 2;
   */
  change?: ForwardMetadata;

  constructor(data?: PartialMessage<ExactAmountOut>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.swap.v1.ExactAmountOut";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount_out", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "change", kind: "message", T: ForwardMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExactAmountOut {
    return new ExactAmountOut().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExactAmountOut {
    return new ExactAmountOut().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExactAmountOut {
    return new ExactAmountOut().fromJsonString(jsonString, options);
  }

  static equals(a: ExactAmountOut | PlainMessage<ExactAmountOut> | undefined, b: ExactAmountOut | PlainMessage<ExactAmountOut> | undefined): boolean {
    return proto3.util.equals(ExactAmountOut, a, b);
  }
}

/**
 * SwapMetadata
 *
 * @generated from message sunrise.swap.v1.SwapMetadata
 */
export class SwapMetadata extends Message<SwapMetadata> {
  /**
   * @generated from field: string interface_provider = 1;
   */
  interfaceProvider = "";

  /**
   * @generated from field: sunrise.swap.v1.Route route = 2;
   */
  route?: Route;

  /**
   * amount_strategy
   *
   * @generated from oneof sunrise.swap.v1.SwapMetadata.amount_strategy
   */
  amountStrategy: {
    /**
     * @generated from field: sunrise.swap.v1.ExactAmountIn exact_amount_in = 3;
     */
    value: ExactAmountIn;
    case: "exactAmountIn";
  } | {
    /**
     * @generated from field: sunrise.swap.v1.ExactAmountOut exact_amount_out = 4;
     */
    value: ExactAmountOut;
    case: "exactAmountOut";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: sunrise.swap.v1.ForwardMetadata forward = 5;
   */
  forward?: ForwardMetadata;

  constructor(data?: PartialMessage<SwapMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.swap.v1.SwapMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "interface_provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "route", kind: "message", T: Route },
    { no: 3, name: "exact_amount_in", kind: "message", T: ExactAmountIn, oneof: "amount_strategy" },
    { no: 4, name: "exact_amount_out", kind: "message", T: ExactAmountOut, oneof: "amount_strategy" },
    { no: 5, name: "forward", kind: "message", T: ForwardMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SwapMetadata {
    return new SwapMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SwapMetadata {
    return new SwapMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SwapMetadata {
    return new SwapMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: SwapMetadata | PlainMessage<SwapMetadata> | undefined, b: SwapMetadata | PlainMessage<SwapMetadata> | undefined): boolean {
    return proto3.util.equals(SwapMetadata, a, b);
  }
}

