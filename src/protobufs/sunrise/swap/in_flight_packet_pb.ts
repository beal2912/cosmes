// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file sunrise/swap/in_flight_packet.proto (package sunrise.swap, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { RouteResult } from "./route_pb.js";

/**
 * PacketIndex
 *
 * @generated from message sunrise.swap.PacketIndex
 */
export class PacketIndex extends Message<PacketIndex> {
  /**
   * @generated from field: string port_id = 1;
   */
  portId = "";

  /**
   * @generated from field: string channel_id = 2;
   */
  channelId = "";

  /**
   * @generated from field: uint64 sequence = 3;
   */
  sequence = protoInt64.zero;

  constructor(data?: PartialMessage<PacketIndex>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.swap.PacketIndex";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PacketIndex {
    return new PacketIndex().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PacketIndex {
    return new PacketIndex().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PacketIndex {
    return new PacketIndex().fromJsonString(jsonString, options);
  }

  static equals(a: PacketIndex | PlainMessage<PacketIndex> | undefined, b: PacketIndex | PlainMessage<PacketIndex> | undefined): boolean {
    return proto3.util.equals(PacketIndex, a, b);
  }
}

/**
 * IncomingInFlightPacket
 *
 * @generated from message sunrise.swap.IncomingInFlightPacket
 */
export class IncomingInFlightPacket extends Message<IncomingInFlightPacket> {
  /**
   * @generated from field: sunrise.swap.PacketIndex index = 1;
   */
  index?: PacketIndex;

  /**
   * @generated from field: bytes data = 2;
   */
  data = new Uint8Array(0);

  /**
   * @generated from field: string src_port_id = 3;
   */
  srcPortId = "";

  /**
   * @generated from field: string src_channel_id = 4;
   */
  srcChannelId = "";

  /**
   * @generated from field: string timeout_height = 5;
   */
  timeoutHeight = "";

  /**
   * @generated from field: uint64 timeout_timestamp = 6;
   */
  timeoutTimestamp = protoInt64.zero;

  /**
   * @generated from field: bytes ack = 7;
   */
  ack = new Uint8Array(0);

  /**
   * @generated from field: sunrise.swap.RouteResult result = 8;
   */
  result?: RouteResult;

  /**
   * @generated from field: string interface_fee = 9;
   */
  interfaceFee = "";

  /**
   * change
   *
   * @generated from oneof sunrise.swap.IncomingInFlightPacket.change
   */
  change: {
    /**
     * @generated from field: sunrise.swap.PacketIndex outgoing_index_change = 10;
     */
    value: PacketIndex;
    case: "outgoingIndexChange";
  } | {
    /**
     * @generated from field: bytes ack_change = 11;
     */
    value: Uint8Array;
    case: "ackChange";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * forward
   *
   * @generated from oneof sunrise.swap.IncomingInFlightPacket.forward
   */
  forward: {
    /**
     * @generated from field: sunrise.swap.PacketIndex outgoing_index_forward = 12;
     */
    value: PacketIndex;
    case: "outgoingIndexForward";
  } | {
    /**
     * @generated from field: bytes ack_forward = 13;
     */
    value: Uint8Array;
    case: "ackForward";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<IncomingInFlightPacket>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.swap.IncomingInFlightPacket";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "index", kind: "message", T: PacketIndex },
    { no: 2, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "src_port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "src_channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "timeout_height", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "timeout_timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "ack", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 8, name: "result", kind: "message", T: RouteResult },
    { no: 9, name: "interface_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "outgoing_index_change", kind: "message", T: PacketIndex, oneof: "change" },
    { no: 11, name: "ack_change", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "change" },
    { no: 12, name: "outgoing_index_forward", kind: "message", T: PacketIndex, oneof: "forward" },
    { no: 13, name: "ack_forward", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "forward" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IncomingInFlightPacket {
    return new IncomingInFlightPacket().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IncomingInFlightPacket {
    return new IncomingInFlightPacket().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IncomingInFlightPacket {
    return new IncomingInFlightPacket().fromJsonString(jsonString, options);
  }

  static equals(a: IncomingInFlightPacket | PlainMessage<IncomingInFlightPacket> | undefined, b: IncomingInFlightPacket | PlainMessage<IncomingInFlightPacket> | undefined): boolean {
    return proto3.util.equals(IncomingInFlightPacket, a, b);
  }
}

/**
 * OutgoingInFlightPacket
 *
 * @generated from message sunrise.swap.OutgoingInFlightPacket
 */
export class OutgoingInFlightPacket extends Message<OutgoingInFlightPacket> {
  /**
   * @generated from field: sunrise.swap.PacketIndex index = 1;
   */
  index?: PacketIndex;

  /**
   * @generated from field: sunrise.swap.PacketIndex ack_waiting_index = 2;
   */
  ackWaitingIndex?: PacketIndex;

  /**
   * @generated from field: int32 retries_remaining = 3;
   */
  retriesRemaining = 0;

  constructor(data?: PartialMessage<OutgoingInFlightPacket>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.swap.OutgoingInFlightPacket";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "index", kind: "message", T: PacketIndex },
    { no: 2, name: "ack_waiting_index", kind: "message", T: PacketIndex },
    { no: 3, name: "retries_remaining", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OutgoingInFlightPacket {
    return new OutgoingInFlightPacket().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OutgoingInFlightPacket {
    return new OutgoingInFlightPacket().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OutgoingInFlightPacket {
    return new OutgoingInFlightPacket().fromJsonString(jsonString, options);
  }

  static equals(a: OutgoingInFlightPacket | PlainMessage<OutgoingInFlightPacket> | undefined, b: OutgoingInFlightPacket | PlainMessage<OutgoingInFlightPacket> | undefined): boolean {
    return proto3.util.equals(OutgoingInFlightPacket, a, b);
  }
}

