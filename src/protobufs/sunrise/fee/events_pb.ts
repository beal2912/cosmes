// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file sunrise/fee/events.proto (package sunrise.fee, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Coin } from "../../cosmos/base/v1beta1/coin_pb.js";

/**
 * EventFeeBurn
 *
 * @generated from message sunrise.fee.EventFeeBurn
 */
export class EventFeeBurn extends Message<EventFeeBurn> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin fees = 1;
   */
  fees: Coin[] = [];

  constructor(data?: PartialMessage<EventFeeBurn>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.fee.EventFeeBurn";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fees", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventFeeBurn {
    return new EventFeeBurn().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventFeeBurn {
    return new EventFeeBurn().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventFeeBurn {
    return new EventFeeBurn().fromJsonString(jsonString, options);
  }

  static equals(a: EventFeeBurn | PlainMessage<EventFeeBurn> | undefined, b: EventFeeBurn | PlainMessage<EventFeeBurn> | undefined): boolean {
    return proto3.util.equals(EventFeeBurn, a, b);
  }
}

