// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file sunrise/liquidityincentive/v1/epoch.proto (package sunrise.liquidityincentive.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Gauge } from "./gauge_pb.js";

/**
 * Epoch
 *
 * @generated from message sunrise.liquidityincentive.v1.Epoch
 */
export class Epoch extends Message<Epoch> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: int64 start_block = 2;
   */
  startBlock = protoInt64.zero;

  /**
   * @generated from field: int64 start_time = 3;
   */
  startTime = protoInt64.zero;

  /**
   * @generated from field: int64 end_block = 4;
   */
  endBlock = protoInt64.zero;

  /**
   * @generated from field: repeated sunrise.liquidityincentive.v1.Gauge gauges = 5;
   */
  gauges: Gauge[] = [];

  constructor(data?: PartialMessage<Epoch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.Epoch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "start_block", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "start_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "end_block", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "gauges", kind: "message", T: Gauge, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Epoch {
    return new Epoch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Epoch {
    return new Epoch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Epoch {
    return new Epoch().fromJsonString(jsonString, options);
  }

  static equals(a: Epoch | PlainMessage<Epoch> | undefined, b: Epoch | PlainMessage<Epoch> | undefined): boolean {
    return proto3.util.equals(Epoch, a, b);
  }
}

