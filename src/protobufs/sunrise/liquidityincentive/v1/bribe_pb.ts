// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file sunrise/liquidityincentive/v1/bribe.proto (package sunrise.liquidityincentive.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * Bribe
 *
 * @generated from message sunrise.liquidityincentive.v1.Bribe
 */
export class Bribe extends Message<Bribe> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: uint64 epoch_id = 2;
   */
  epochId = protoInt64.zero;

  /**
   * @generated from field: uint64 pool_id = 3;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: string address = 4;
   */
  address = "";

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 5;
   */
  amount: Coin[] = [];

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin claimed_amount = 6;
   */
  claimedAmount: Coin[] = [];

  constructor(data?: PartialMessage<Bribe>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.Bribe";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "epoch_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "amount", kind: "message", T: Coin, repeated: true },
    { no: 6, name: "claimed_amount", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Bribe {
    return new Bribe().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Bribe {
    return new Bribe().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Bribe {
    return new Bribe().fromJsonString(jsonString, options);
  }

  static equals(a: Bribe | PlainMessage<Bribe> | undefined, b: Bribe | PlainMessage<Bribe> | undefined): boolean {
    return proto3.util.equals(Bribe, a, b);
  }
}

/**
 * BribeAllocation
 *
 * @generated from message sunrise.liquidityincentive.v1.BribeAllocation
 */
export class BribeAllocation extends Message<BribeAllocation> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: uint64 epoch_id = 2;
   */
  epochId = protoInt64.zero;

  /**
   * @generated from field: uint64 pool_id = 3;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: string weight = 4;
   */
  weight = "";

  /**
   * @generated from field: repeated uint64 claimed_bribe_ids = 5;
   */
  claimedBribeIds: bigint[] = [];

  constructor(data?: PartialMessage<BribeAllocation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.BribeAllocation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "epoch_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "weight", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "claimed_bribe_ids", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BribeAllocation {
    return new BribeAllocation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BribeAllocation {
    return new BribeAllocation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BribeAllocation {
    return new BribeAllocation().fromJsonString(jsonString, options);
  }

  static equals(a: BribeAllocation | PlainMessage<BribeAllocation> | undefined, b: BribeAllocation | PlainMessage<BribeAllocation> | undefined): boolean {
    return proto3.util.equals(BribeAllocation, a, b);
  }
}

