// @generated by protoc-gen-cosmes v0.0.1 with parameter "target=ts"
// @generated from file sunrise/liquidityincentive/v1/query.proto (package sunrise.liquidityincentive.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { QueryBribeAllocationRequest, QueryBribeAllocationResponse, QueryBribeAllocationsRequest, QueryBribeAllocationsResponse, QueryBribeRequest, QueryBribeResponse, QueryBribesRequest, QueryBribesResponse, QueryEpochRequest, QueryEpochResponse, QueryEpochsRequest, QueryEpochsResponse, QueryParamsRequest, QueryParamsResponse, QueryTallyResultRequest, QueryTallyResultResponse, QueryVoteRequest, QueryVoteResponse, QueryVotesRequest, QueryVotesResponse } from "./query_pb.js";

const TYPE_NAME = "sunrise.liquidityincentive.v1.Query";

/**
 * Parameters queries the parameters of the module.
 *
 * @generated from rpc sunrise.liquidityincentive.v1.Query.Params
 */
export const QueryParamsService = {
  typeName: TYPE_NAME,
  method: "Params",
  Request: QueryParamsRequest,
  Response: QueryParamsResponse,
} as const;

/**
 * Epoch
 *
 * @generated from rpc sunrise.liquidityincentive.v1.Query.Epoch
 */
export const QueryEpochService = {
  typeName: TYPE_NAME,
  method: "Epoch",
  Request: QueryEpochRequest,
  Response: QueryEpochResponse,
} as const;

/**
 * Epochs
 *
 * @generated from rpc sunrise.liquidityincentive.v1.Query.Epochs
 */
export const QueryEpochsService = {
  typeName: TYPE_NAME,
  method: "Epochs",
  Request: QueryEpochsRequest,
  Response: QueryEpochsResponse,
} as const;

/**
 * Vote
 *
 * @generated from rpc sunrise.liquidityincentive.v1.Query.Vote
 */
export const QueryVoteService = {
  typeName: TYPE_NAME,
  method: "Vote",
  Request: QueryVoteRequest,
  Response: QueryVoteResponse,
} as const;

/**
 * Votes
 *
 * @generated from rpc sunrise.liquidityincentive.v1.Query.Votes
 */
export const QueryVotesService = {
  typeName: TYPE_NAME,
  method: "Votes",
  Request: QueryVotesRequest,
  Response: QueryVotesResponse,
} as const;

/**
 * Bribes queries bribes with optional filters for epoch_id and pool_id.
 *
 * @generated from rpc sunrise.liquidityincentive.v1.Query.Bribes
 */
export const QueryBribesService = {
  typeName: TYPE_NAME,
  method: "Bribes",
  Request: QueryBribesRequest,
  Response: QueryBribesResponse,
} as const;

/**
 * Bribe queries a Bribe by its ID.
 *
 * @generated from rpc sunrise.liquidityincentive.v1.Query.Bribe
 */
export const QueryBribeService = {
  typeName: TYPE_NAME,
  method: "Bribe",
  Request: QueryBribeRequest,
  Response: QueryBribeResponse,
} as const;

/**
 * BribeAllocations queries bribe allocations with an optional filter for address.
 *
 * @generated from rpc sunrise.liquidityincentive.v1.Query.BribeAllocations
 */
export const QueryBribeAllocationsService = {
  typeName: TYPE_NAME,
  method: "BribeAllocations",
  Request: QueryBribeAllocationsRequest,
  Response: QueryBribeAllocationsResponse,
} as const;

/**
 * BribeAllocation queries a BribeAllocation by address, epoch ID, and pool ID.
 *
 * @generated from rpc sunrise.liquidityincentive.v1.Query.BribeAllocation
 */
export const QueryBribeAllocationService = {
  typeName: TYPE_NAME,
  method: "BribeAllocation",
  Request: QueryBribeAllocationRequest,
  Response: QueryBribeAllocationResponse,
} as const;

/**
 * TallyResult queries the tally of next epoch.
 *
 * @generated from rpc sunrise.liquidityincentive.v1.Query.TallyResult
 */
export const QueryTallyResultService = {
  typeName: TYPE_NAME,
  method: "TallyResult",
  Request: QueryTallyResultRequest,
  Response: QueryTallyResultResponse,
} as const;

