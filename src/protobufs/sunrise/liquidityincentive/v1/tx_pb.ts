// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file sunrise/liquidityincentive/v1/tx.proto (package sunrise.liquidityincentive.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { PoolWeight } from "./gauge_pb.js";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * MsgUpdateParams is the Msg/UpdateParams request type.
 *
 * @generated from message sunrise.liquidityincentive.v1.MsgUpdateParams
 */
export class MsgUpdateParams extends Message<MsgUpdateParams> {
  /**
   * authority is the address that controls the module (defaults to x/gov unless
   * overwritten).
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * NOTE: All parameters must be supplied.
   *
   * @generated from field: sunrise.liquidityincentive.v1.Params params = 2;
   */
  params?: Params;

  constructor(data?: PartialMessage<MsgUpdateParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.MsgUpdateParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined, b: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParams, a, b);
  }
}

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 *
 * @generated from message sunrise.liquidityincentive.v1.MsgUpdateParamsResponse
 */
export class MsgUpdateParamsResponse extends Message<MsgUpdateParamsResponse> {
  constructor(data?: PartialMessage<MsgUpdateParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.MsgUpdateParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined, b: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParamsResponse, a, b);
  }
}

/**
 * MsgVoteGauge
 *
 * @generated from message sunrise.liquidityincentive.v1.MsgVoteGauge
 */
export class MsgVoteGauge extends Message<MsgVoteGauge> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: repeated sunrise.liquidityincentive.v1.PoolWeight pool_weights = 2;
   */
  poolWeights: PoolWeight[] = [];

  constructor(data?: PartialMessage<MsgVoteGauge>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.MsgVoteGauge";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pool_weights", kind: "message", T: PoolWeight, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgVoteGauge {
    return new MsgVoteGauge().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgVoteGauge {
    return new MsgVoteGauge().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgVoteGauge {
    return new MsgVoteGauge().fromJsonString(jsonString, options);
  }

  static equals(a: MsgVoteGauge | PlainMessage<MsgVoteGauge> | undefined, b: MsgVoteGauge | PlainMessage<MsgVoteGauge> | undefined): boolean {
    return proto3.util.equals(MsgVoteGauge, a, b);
  }
}

/**
 * MsgVoteGaugeResponse
 *
 * @generated from message sunrise.liquidityincentive.v1.MsgVoteGaugeResponse
 */
export class MsgVoteGaugeResponse extends Message<MsgVoteGaugeResponse> {
  constructor(data?: PartialMessage<MsgVoteGaugeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.MsgVoteGaugeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgVoteGaugeResponse {
    return new MsgVoteGaugeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgVoteGaugeResponse {
    return new MsgVoteGaugeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgVoteGaugeResponse {
    return new MsgVoteGaugeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgVoteGaugeResponse | PlainMessage<MsgVoteGaugeResponse> | undefined, b: MsgVoteGaugeResponse | PlainMessage<MsgVoteGaugeResponse> | undefined): boolean {
    return proto3.util.equals(MsgVoteGaugeResponse, a, b);
  }
}

/**
 * MsgRegisterBribe
 *
 * @generated from message sunrise.liquidityincentive.v1.MsgRegisterBribe
 */
export class MsgRegisterBribe extends Message<MsgRegisterBribe> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: uint64 epoch_id = 2;
   */
  epochId = protoInt64.zero;

  /**
   * @generated from field: uint64 pool_id = 3;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 4;
   */
  amount: Coin[] = [];

  constructor(data?: PartialMessage<MsgRegisterBribe>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.MsgRegisterBribe";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "epoch_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "amount", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRegisterBribe {
    return new MsgRegisterBribe().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRegisterBribe {
    return new MsgRegisterBribe().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRegisterBribe {
    return new MsgRegisterBribe().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRegisterBribe | PlainMessage<MsgRegisterBribe> | undefined, b: MsgRegisterBribe | PlainMessage<MsgRegisterBribe> | undefined): boolean {
    return proto3.util.equals(MsgRegisterBribe, a, b);
  }
}

/**
 * MsgRegisterBribeResponse
 *
 * @generated from message sunrise.liquidityincentive.v1.MsgRegisterBribeResponse
 */
export class MsgRegisterBribeResponse extends Message<MsgRegisterBribeResponse> {
  constructor(data?: PartialMessage<MsgRegisterBribeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.MsgRegisterBribeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRegisterBribeResponse {
    return new MsgRegisterBribeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRegisterBribeResponse {
    return new MsgRegisterBribeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRegisterBribeResponse {
    return new MsgRegisterBribeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRegisterBribeResponse | PlainMessage<MsgRegisterBribeResponse> | undefined, b: MsgRegisterBribeResponse | PlainMessage<MsgRegisterBribeResponse> | undefined): boolean {
    return proto3.util.equals(MsgRegisterBribeResponse, a, b);
  }
}

/**
 * MsgClaimBribes
 *
 * @generated from message sunrise.liquidityincentive.v1.MsgClaimBribes
 */
export class MsgClaimBribes extends Message<MsgClaimBribes> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: uint64 bribe_id = 2;
   */
  bribeId = protoInt64.zero;

  constructor(data?: PartialMessage<MsgClaimBribes>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.MsgClaimBribes";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "bribe_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgClaimBribes {
    return new MsgClaimBribes().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgClaimBribes {
    return new MsgClaimBribes().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgClaimBribes {
    return new MsgClaimBribes().fromJsonString(jsonString, options);
  }

  static equals(a: MsgClaimBribes | PlainMessage<MsgClaimBribes> | undefined, b: MsgClaimBribes | PlainMessage<MsgClaimBribes> | undefined): boolean {
    return proto3.util.equals(MsgClaimBribes, a, b);
  }
}

/**
 * MsgClaimBribesResponse
 *
 * @generated from message sunrise.liquidityincentive.v1.MsgClaimBribesResponse
 */
export class MsgClaimBribesResponse extends Message<MsgClaimBribesResponse> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 1;
   */
  amount: Coin[] = [];

  constructor(data?: PartialMessage<MsgClaimBribesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.MsgClaimBribesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgClaimBribesResponse {
    return new MsgClaimBribesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgClaimBribesResponse {
    return new MsgClaimBribesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgClaimBribesResponse {
    return new MsgClaimBribesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgClaimBribesResponse | PlainMessage<MsgClaimBribesResponse> | undefined, b: MsgClaimBribesResponse | PlainMessage<MsgClaimBribesResponse> | undefined): boolean {
    return proto3.util.equals(MsgClaimBribesResponse, a, b);
  }
}

