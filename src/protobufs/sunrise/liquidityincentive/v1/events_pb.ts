// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file sunrise/liquidityincentive/v1/events.proto (package sunrise.liquidityincentive.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { PoolWeight } from "./gauge_pb.js";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * EventVoteGauge
 *
 * @generated from message sunrise.liquidityincentive.v1.EventVoteGauge
 */
export class EventVoteGauge extends Message<EventVoteGauge> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: repeated sunrise.liquidityincentive.v1.PoolWeight pool_weights = 2;
   */
  poolWeights: PoolWeight[] = [];

  constructor(data?: PartialMessage<EventVoteGauge>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.EventVoteGauge";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pool_weights", kind: "message", T: PoolWeight, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventVoteGauge {
    return new EventVoteGauge().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventVoteGauge {
    return new EventVoteGauge().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventVoteGauge {
    return new EventVoteGauge().fromJsonString(jsonString, options);
  }

  static equals(a: EventVoteGauge | PlainMessage<EventVoteGauge> | undefined, b: EventVoteGauge | PlainMessage<EventVoteGauge> | undefined): boolean {
    return proto3.util.equals(EventVoteGauge, a, b);
  }
}

/**
 * EventRegisterBribe
 *
 * @generated from message sunrise.liquidityincentive.v1.EventRegisterBribe
 */
export class EventRegisterBribe extends Message<EventRegisterBribe> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string address = 2;
   */
  address = "";

  /**
   * @generated from field: uint64 epoch_id = 3;
   */
  epochId = protoInt64.zero;

  /**
   * @generated from field: uint64 pool_id = 4;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 5;
   */
  amount: Coin[] = [];

  constructor(data?: PartialMessage<EventRegisterBribe>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.EventRegisterBribe";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "epoch_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "amount", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventRegisterBribe {
    return new EventRegisterBribe().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventRegisterBribe {
    return new EventRegisterBribe().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventRegisterBribe {
    return new EventRegisterBribe().fromJsonString(jsonString, options);
  }

  static equals(a: EventRegisterBribe | PlainMessage<EventRegisterBribe> | undefined, b: EventRegisterBribe | PlainMessage<EventRegisterBribe> | undefined): boolean {
    return proto3.util.equals(EventRegisterBribe, a, b);
  }
}

/**
 * EventClaimBribes
 *
 * @generated from message sunrise.liquidityincentive.v1.EventClaimBribes
 */
export class EventClaimBribes extends Message<EventClaimBribes> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: uint64 bribe_id = 2;
   */
  bribeId = protoInt64.zero;

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 3;
   */
  amount: Coin[] = [];

  constructor(data?: PartialMessage<EventClaimBribes>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.EventClaimBribes";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "bribe_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "amount", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventClaimBribes {
    return new EventClaimBribes().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventClaimBribes {
    return new EventClaimBribes().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventClaimBribes {
    return new EventClaimBribes().fromJsonString(jsonString, options);
  }

  static equals(a: EventClaimBribes | PlainMessage<EventClaimBribes> | undefined, b: EventClaimBribes | PlainMessage<EventClaimBribes> | undefined): boolean {
    return proto3.util.equals(EventClaimBribes, a, b);
  }
}

