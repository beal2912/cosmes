// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file sunrise/liquidityincentive/v1/query.proto (package sunrise.liquidityincentive.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { Epoch } from "./epoch_pb.js";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination_pb.js";
import { Gauge, Vote } from "./gauge_pb.js";
import { Bribe, BribeAllocation } from "./bribe_pb.js";

/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: sunrise.liquidityincentive.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * QueryEpochRequest
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryEpochRequest
 */
export class QueryEpochRequest extends Message<QueryEpochRequest> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<QueryEpochRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryEpochRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEpochRequest {
    return new QueryEpochRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEpochRequest {
    return new QueryEpochRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEpochRequest {
    return new QueryEpochRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEpochRequest | PlainMessage<QueryEpochRequest> | undefined, b: QueryEpochRequest | PlainMessage<QueryEpochRequest> | undefined): boolean {
    return proto3.util.equals(QueryEpochRequest, a, b);
  }
}

/**
 * QueryEpochResponse
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryEpochResponse
 */
export class QueryEpochResponse extends Message<QueryEpochResponse> {
  /**
   * @generated from field: sunrise.liquidityincentive.v1.Epoch epoch = 1;
   */
  epoch?: Epoch;

  constructor(data?: PartialMessage<QueryEpochResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryEpochResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "epoch", kind: "message", T: Epoch },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEpochResponse {
    return new QueryEpochResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEpochResponse {
    return new QueryEpochResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEpochResponse {
    return new QueryEpochResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEpochResponse | PlainMessage<QueryEpochResponse> | undefined, b: QueryEpochResponse | PlainMessage<QueryEpochResponse> | undefined): boolean {
    return proto3.util.equals(QueryEpochResponse, a, b);
  }
}

/**
 * QueryEpochsRequest
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryEpochsRequest
 */
export class QueryEpochsRequest extends Message<QueryEpochsRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryEpochsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryEpochsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEpochsRequest {
    return new QueryEpochsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEpochsRequest {
    return new QueryEpochsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEpochsRequest {
    return new QueryEpochsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEpochsRequest | PlainMessage<QueryEpochsRequest> | undefined, b: QueryEpochsRequest | PlainMessage<QueryEpochsRequest> | undefined): boolean {
    return proto3.util.equals(QueryEpochsRequest, a, b);
  }
}

/**
 * QueryEpochsResponse
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryEpochsResponse
 */
export class QueryEpochsResponse extends Message<QueryEpochsResponse> {
  /**
   * @generated from field: repeated sunrise.liquidityincentive.v1.Epoch epochs = 1;
   */
  epochs: Epoch[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryEpochsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryEpochsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "epochs", kind: "message", T: Epoch, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEpochsResponse {
    return new QueryEpochsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEpochsResponse {
    return new QueryEpochsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEpochsResponse {
    return new QueryEpochsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEpochsResponse | PlainMessage<QueryEpochsResponse> | undefined, b: QueryEpochsResponse | PlainMessage<QueryEpochsResponse> | undefined): boolean {
    return proto3.util.equals(QueryEpochsResponse, a, b);
  }
}

/**
 * QueryVoteRequest
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryVoteRequest
 */
export class QueryVoteRequest extends Message<QueryVoteRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  constructor(data?: PartialMessage<QueryVoteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryVoteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVoteRequest {
    return new QueryVoteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVoteRequest {
    return new QueryVoteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVoteRequest {
    return new QueryVoteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVoteRequest | PlainMessage<QueryVoteRequest> | undefined, b: QueryVoteRequest | PlainMessage<QueryVoteRequest> | undefined): boolean {
    return proto3.util.equals(QueryVoteRequest, a, b);
  }
}

/**
 * QueryVoteResponse
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryVoteResponse
 */
export class QueryVoteResponse extends Message<QueryVoteResponse> {
  /**
   * @generated from field: sunrise.liquidityincentive.v1.Vote vote = 1;
   */
  vote?: Vote;

  constructor(data?: PartialMessage<QueryVoteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryVoteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vote", kind: "message", T: Vote },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVoteResponse {
    return new QueryVoteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVoteResponse {
    return new QueryVoteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVoteResponse {
    return new QueryVoteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVoteResponse | PlainMessage<QueryVoteResponse> | undefined, b: QueryVoteResponse | PlainMessage<QueryVoteResponse> | undefined): boolean {
    return proto3.util.equals(QueryVoteResponse, a, b);
  }
}

/**
 * QueryVotesRequest
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryVotesRequest
 */
export class QueryVotesRequest extends Message<QueryVotesRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryVotesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryVotesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVotesRequest {
    return new QueryVotesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVotesRequest {
    return new QueryVotesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVotesRequest {
    return new QueryVotesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVotesRequest | PlainMessage<QueryVotesRequest> | undefined, b: QueryVotesRequest | PlainMessage<QueryVotesRequest> | undefined): boolean {
    return proto3.util.equals(QueryVotesRequest, a, b);
  }
}

/**
 * QueryVotesResponse
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryVotesResponse
 */
export class QueryVotesResponse extends Message<QueryVotesResponse> {
  /**
   * @generated from field: repeated sunrise.liquidityincentive.v1.Vote votes = 1;
   */
  votes: Vote[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryVotesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryVotesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "votes", kind: "message", T: Vote, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVotesResponse {
    return new QueryVotesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVotesResponse {
    return new QueryVotesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVotesResponse {
    return new QueryVotesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVotesResponse | PlainMessage<QueryVotesResponse> | undefined, b: QueryVotesResponse | PlainMessage<QueryVotesResponse> | undefined): boolean {
    return proto3.util.equals(QueryVotesResponse, a, b);
  }
}

/**
 * QueryBribesRequest
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryBribesRequest
 */
export class QueryBribesRequest extends Message<QueryBribesRequest> {
  /**
   * Optional filter by epoch_id. If empty, not applied.
   *
   * @generated from field: string epoch_id = 1;
   */
  epochId = "";

  /**
   * Optional filter by pool_id. If empty, not applied.
   *
   * @generated from field: string pool_id = 2;
   */
  poolId = "";

  constructor(data?: PartialMessage<QueryBribesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryBribesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "epoch_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pool_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBribesRequest {
    return new QueryBribesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBribesRequest {
    return new QueryBribesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBribesRequest {
    return new QueryBribesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBribesRequest | PlainMessage<QueryBribesRequest> | undefined, b: QueryBribesRequest | PlainMessage<QueryBribesRequest> | undefined): boolean {
    return proto3.util.equals(QueryBribesRequest, a, b);
  }
}

/**
 * QueryBribesResponse
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryBribesResponse
 */
export class QueryBribesResponse extends Message<QueryBribesResponse> {
  /**
   * @generated from field: repeated sunrise.liquidityincentive.v1.Bribe bribes = 1;
   */
  bribes: Bribe[] = [];

  constructor(data?: PartialMessage<QueryBribesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryBribesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bribes", kind: "message", T: Bribe, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBribesResponse {
    return new QueryBribesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBribesResponse {
    return new QueryBribesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBribesResponse {
    return new QueryBribesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBribesResponse | PlainMessage<QueryBribesResponse> | undefined, b: QueryBribesResponse | PlainMessage<QueryBribesResponse> | undefined): boolean {
    return proto3.util.equals(QueryBribesResponse, a, b);
  }
}

/**
 * QueryBribeRequest
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryBribeRequest
 */
export class QueryBribeRequest extends Message<QueryBribeRequest> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<QueryBribeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryBribeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBribeRequest {
    return new QueryBribeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBribeRequest {
    return new QueryBribeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBribeRequest {
    return new QueryBribeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBribeRequest | PlainMessage<QueryBribeRequest> | undefined, b: QueryBribeRequest | PlainMessage<QueryBribeRequest> | undefined): boolean {
    return proto3.util.equals(QueryBribeRequest, a, b);
  }
}

/**
 * QueryBribeResponse
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryBribeResponse
 */
export class QueryBribeResponse extends Message<QueryBribeResponse> {
  /**
   * @generated from field: sunrise.liquidityincentive.v1.Bribe bribe = 1;
   */
  bribe?: Bribe;

  constructor(data?: PartialMessage<QueryBribeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryBribeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bribe", kind: "message", T: Bribe },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBribeResponse {
    return new QueryBribeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBribeResponse {
    return new QueryBribeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBribeResponse {
    return new QueryBribeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBribeResponse | PlainMessage<QueryBribeResponse> | undefined, b: QueryBribeResponse | PlainMessage<QueryBribeResponse> | undefined): boolean {
    return proto3.util.equals(QueryBribeResponse, a, b);
  }
}

/**
 * QueryBribeAllocationsRequest
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryBribeAllocationsRequest
 */
export class QueryBribeAllocationsRequest extends Message<QueryBribeAllocationsRequest> {
  /**
   * Optional filter by address. If empty, not applied.
   *
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * Optional filter by epoch_id. If empty, not applied.
   *
   * @generated from field: string epoch_id = 2;
   */
  epochId = "";

  constructor(data?: PartialMessage<QueryBribeAllocationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryBribeAllocationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "epoch_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBribeAllocationsRequest {
    return new QueryBribeAllocationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBribeAllocationsRequest {
    return new QueryBribeAllocationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBribeAllocationsRequest {
    return new QueryBribeAllocationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBribeAllocationsRequest | PlainMessage<QueryBribeAllocationsRequest> | undefined, b: QueryBribeAllocationsRequest | PlainMessage<QueryBribeAllocationsRequest> | undefined): boolean {
    return proto3.util.equals(QueryBribeAllocationsRequest, a, b);
  }
}

/**
 * QueryBribeAllocationsResponse
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryBribeAllocationsResponse
 */
export class QueryBribeAllocationsResponse extends Message<QueryBribeAllocationsResponse> {
  /**
   * @generated from field: repeated sunrise.liquidityincentive.v1.BribeAllocation bribe_allocations = 1;
   */
  bribeAllocations: BribeAllocation[] = [];

  constructor(data?: PartialMessage<QueryBribeAllocationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryBribeAllocationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bribe_allocations", kind: "message", T: BribeAllocation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBribeAllocationsResponse {
    return new QueryBribeAllocationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBribeAllocationsResponse {
    return new QueryBribeAllocationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBribeAllocationsResponse {
    return new QueryBribeAllocationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBribeAllocationsResponse | PlainMessage<QueryBribeAllocationsResponse> | undefined, b: QueryBribeAllocationsResponse | PlainMessage<QueryBribeAllocationsResponse> | undefined): boolean {
    return proto3.util.equals(QueryBribeAllocationsResponse, a, b);
  }
}

/**
 * QueryBribeAllocationRequest
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryBribeAllocationRequest
 */
export class QueryBribeAllocationRequest extends Message<QueryBribeAllocationRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: string epoch_id = 2;
   */
  epochId = "";

  /**
   * @generated from field: string pool_id = 3;
   */
  poolId = "";

  constructor(data?: PartialMessage<QueryBribeAllocationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryBribeAllocationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "epoch_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pool_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBribeAllocationRequest {
    return new QueryBribeAllocationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBribeAllocationRequest {
    return new QueryBribeAllocationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBribeAllocationRequest {
    return new QueryBribeAllocationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBribeAllocationRequest | PlainMessage<QueryBribeAllocationRequest> | undefined, b: QueryBribeAllocationRequest | PlainMessage<QueryBribeAllocationRequest> | undefined): boolean {
    return proto3.util.equals(QueryBribeAllocationRequest, a, b);
  }
}

/**
 * QueryBribeAllocationResponse
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryBribeAllocationResponse
 */
export class QueryBribeAllocationResponse extends Message<QueryBribeAllocationResponse> {
  /**
   * @generated from field: sunrise.liquidityincentive.v1.BribeAllocation bribe_allocation = 1;
   */
  bribeAllocation?: BribeAllocation;

  constructor(data?: PartialMessage<QueryBribeAllocationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryBribeAllocationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bribe_allocation", kind: "message", T: BribeAllocation },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBribeAllocationResponse {
    return new QueryBribeAllocationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBribeAllocationResponse {
    return new QueryBribeAllocationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBribeAllocationResponse {
    return new QueryBribeAllocationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBribeAllocationResponse | PlainMessage<QueryBribeAllocationResponse> | undefined, b: QueryBribeAllocationResponse | PlainMessage<QueryBribeAllocationResponse> | undefined): boolean {
    return proto3.util.equals(QueryBribeAllocationResponse, a, b);
  }
}

/**
 * QueryTallyResultRequest
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryTallyResultRequest
 */
export class QueryTallyResultRequest extends Message<QueryTallyResultRequest> {
  constructor(data?: PartialMessage<QueryTallyResultRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryTallyResultRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTallyResultRequest {
    return new QueryTallyResultRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTallyResultRequest {
    return new QueryTallyResultRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTallyResultRequest {
    return new QueryTallyResultRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTallyResultRequest | PlainMessage<QueryTallyResultRequest> | undefined, b: QueryTallyResultRequest | PlainMessage<QueryTallyResultRequest> | undefined): boolean {
    return proto3.util.equals(QueryTallyResultRequest, a, b);
  }
}

/**
 * QueryTallyResultResponse
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryTallyResultResponse
 */
export class QueryTallyResultResponse extends Message<QueryTallyResultResponse> {
  /**
   * @generated from field: int64 total_voting_power = 1;
   */
  totalVotingPower = protoInt64.zero;

  /**
   * @generated from field: repeated sunrise.liquidityincentive.v1.Gauge gauges = 2;
   */
  gauges: Gauge[] = [];

  constructor(data?: PartialMessage<QueryTallyResultResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryTallyResultResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total_voting_power", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "gauges", kind: "message", T: Gauge, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTallyResultResponse {
    return new QueryTallyResultResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTallyResultResponse {
    return new QueryTallyResultResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTallyResultResponse {
    return new QueryTallyResultResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTallyResultResponse | PlainMessage<QueryTallyResultResponse> | undefined, b: QueryTallyResultResponse | PlainMessage<QueryTallyResultResponse> | undefined): boolean {
    return proto3.util.equals(QueryTallyResultResponse, a, b);
  }
}

