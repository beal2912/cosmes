// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file sunrise/liquidityincentive/v1/query.proto (package sunrise.liquidityincentive.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { Epoch } from "./epoch_pb.js";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination_pb.js";
import { Gauge, Vote } from "./gauge_pb.js";
import { Bribe, BribeAllocation } from "./bribe_pb.js";

/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: sunrise.liquidityincentive.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * QueryEpochRequest
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryEpochRequest
 */
export class QueryEpochRequest extends Message<QueryEpochRequest> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<QueryEpochRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryEpochRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEpochRequest {
    return new QueryEpochRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEpochRequest {
    return new QueryEpochRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEpochRequest {
    return new QueryEpochRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEpochRequest | PlainMessage<QueryEpochRequest> | undefined, b: QueryEpochRequest | PlainMessage<QueryEpochRequest> | undefined): boolean {
    return proto3.util.equals(QueryEpochRequest, a, b);
  }
}

/**
 * QueryEpochResponse
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryEpochResponse
 */
export class QueryEpochResponse extends Message<QueryEpochResponse> {
  /**
   * @generated from field: sunrise.liquidityincentive.v1.Epoch epoch = 1;
   */
  epoch?: Epoch;

  constructor(data?: PartialMessage<QueryEpochResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryEpochResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "epoch", kind: "message", T: Epoch },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEpochResponse {
    return new QueryEpochResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEpochResponse {
    return new QueryEpochResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEpochResponse {
    return new QueryEpochResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEpochResponse | PlainMessage<QueryEpochResponse> | undefined, b: QueryEpochResponse | PlainMessage<QueryEpochResponse> | undefined): boolean {
    return proto3.util.equals(QueryEpochResponse, a, b);
  }
}

/**
 * QueryEpochsRequest
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryEpochsRequest
 */
export class QueryEpochsRequest extends Message<QueryEpochsRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryEpochsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryEpochsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEpochsRequest {
    return new QueryEpochsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEpochsRequest {
    return new QueryEpochsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEpochsRequest {
    return new QueryEpochsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEpochsRequest | PlainMessage<QueryEpochsRequest> | undefined, b: QueryEpochsRequest | PlainMessage<QueryEpochsRequest> | undefined): boolean {
    return proto3.util.equals(QueryEpochsRequest, a, b);
  }
}

/**
 * QueryEpochsResponse
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryEpochsResponse
 */
export class QueryEpochsResponse extends Message<QueryEpochsResponse> {
  /**
   * @generated from field: repeated sunrise.liquidityincentive.v1.Epoch epochs = 1;
   */
  epochs: Epoch[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryEpochsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryEpochsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "epochs", kind: "message", T: Epoch, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEpochsResponse {
    return new QueryEpochsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEpochsResponse {
    return new QueryEpochsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEpochsResponse {
    return new QueryEpochsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEpochsResponse | PlainMessage<QueryEpochsResponse> | undefined, b: QueryEpochsResponse | PlainMessage<QueryEpochsResponse> | undefined): boolean {
    return proto3.util.equals(QueryEpochsResponse, a, b);
  }
}

/**
 * QueryGaugeRequest
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryGaugeRequest
 */
export class QueryGaugeRequest extends Message<QueryGaugeRequest> {
  /**
   * @generated from field: uint64 previous_epoch_id = 1;
   */
  previousEpochId = protoInt64.zero;

  /**
   * @generated from field: uint64 pool_id = 2;
   */
  poolId = protoInt64.zero;

  constructor(data?: PartialMessage<QueryGaugeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryGaugeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "previous_epoch_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGaugeRequest {
    return new QueryGaugeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGaugeRequest {
    return new QueryGaugeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGaugeRequest {
    return new QueryGaugeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGaugeRequest | PlainMessage<QueryGaugeRequest> | undefined, b: QueryGaugeRequest | PlainMessage<QueryGaugeRequest> | undefined): boolean {
    return proto3.util.equals(QueryGaugeRequest, a, b);
  }
}

/**
 * QueryGaugeResponse
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryGaugeResponse
 */
export class QueryGaugeResponse extends Message<QueryGaugeResponse> {
  /**
   * @generated from field: sunrise.liquidityincentive.v1.Gauge gauge = 1;
   */
  gauge?: Gauge;

  constructor(data?: PartialMessage<QueryGaugeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryGaugeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "gauge", kind: "message", T: Gauge },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGaugeResponse {
    return new QueryGaugeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGaugeResponse {
    return new QueryGaugeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGaugeResponse {
    return new QueryGaugeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGaugeResponse | PlainMessage<QueryGaugeResponse> | undefined, b: QueryGaugeResponse | PlainMessage<QueryGaugeResponse> | undefined): boolean {
    return proto3.util.equals(QueryGaugeResponse, a, b);
  }
}

/**
 * QueryGaugesRequest
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryGaugesRequest
 */
export class QueryGaugesRequest extends Message<QueryGaugesRequest> {
  /**
   * @generated from field: uint64 previous_epoch_id = 1;
   */
  previousEpochId = protoInt64.zero;

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryGaugesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryGaugesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "previous_epoch_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGaugesRequest {
    return new QueryGaugesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGaugesRequest {
    return new QueryGaugesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGaugesRequest {
    return new QueryGaugesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGaugesRequest | PlainMessage<QueryGaugesRequest> | undefined, b: QueryGaugesRequest | PlainMessage<QueryGaugesRequest> | undefined): boolean {
    return proto3.util.equals(QueryGaugesRequest, a, b);
  }
}

/**
 * QueryGaugesResponse
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryGaugesResponse
 */
export class QueryGaugesResponse extends Message<QueryGaugesResponse> {
  /**
   * @generated from field: repeated sunrise.liquidityincentive.v1.Gauge gauge = 1;
   */
  gauge: Gauge[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryGaugesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryGaugesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "gauge", kind: "message", T: Gauge, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGaugesResponse {
    return new QueryGaugesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGaugesResponse {
    return new QueryGaugesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGaugesResponse {
    return new QueryGaugesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGaugesResponse | PlainMessage<QueryGaugesResponse> | undefined, b: QueryGaugesResponse | PlainMessage<QueryGaugesResponse> | undefined): boolean {
    return proto3.util.equals(QueryGaugesResponse, a, b);
  }
}

/**
 * QueryVoteRequest
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryVoteRequest
 */
export class QueryVoteRequest extends Message<QueryVoteRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  constructor(data?: PartialMessage<QueryVoteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryVoteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVoteRequest {
    return new QueryVoteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVoteRequest {
    return new QueryVoteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVoteRequest {
    return new QueryVoteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVoteRequest | PlainMessage<QueryVoteRequest> | undefined, b: QueryVoteRequest | PlainMessage<QueryVoteRequest> | undefined): boolean {
    return proto3.util.equals(QueryVoteRequest, a, b);
  }
}

/**
 * QueryVoteResponse
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryVoteResponse
 */
export class QueryVoteResponse extends Message<QueryVoteResponse> {
  /**
   * @generated from field: sunrise.liquidityincentive.v1.Vote vote = 1;
   */
  vote?: Vote;

  constructor(data?: PartialMessage<QueryVoteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryVoteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vote", kind: "message", T: Vote },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVoteResponse {
    return new QueryVoteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVoteResponse {
    return new QueryVoteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVoteResponse {
    return new QueryVoteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVoteResponse | PlainMessage<QueryVoteResponse> | undefined, b: QueryVoteResponse | PlainMessage<QueryVoteResponse> | undefined): boolean {
    return proto3.util.equals(QueryVoteResponse, a, b);
  }
}

/**
 * QueryVotesRequest
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryVotesRequest
 */
export class QueryVotesRequest extends Message<QueryVotesRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryVotesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryVotesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVotesRequest {
    return new QueryVotesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVotesRequest {
    return new QueryVotesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVotesRequest {
    return new QueryVotesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVotesRequest | PlainMessage<QueryVotesRequest> | undefined, b: QueryVotesRequest | PlainMessage<QueryVotesRequest> | undefined): boolean {
    return proto3.util.equals(QueryVotesRequest, a, b);
  }
}

/**
 * QueryVotesResponse
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryVotesResponse
 */
export class QueryVotesResponse extends Message<QueryVotesResponse> {
  /**
   * @generated from field: repeated sunrise.liquidityincentive.v1.Vote votes = 1;
   */
  votes: Vote[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryVotesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryVotesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "votes", kind: "message", T: Vote, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVotesResponse {
    return new QueryVotesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVotesResponse {
    return new QueryVotesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVotesResponse {
    return new QueryVotesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVotesResponse | PlainMessage<QueryVotesResponse> | undefined, b: QueryVotesResponse | PlainMessage<QueryVotesResponse> | undefined): boolean {
    return proto3.util.equals(QueryVotesResponse, a, b);
  }
}

/**
 * QueryBribesRequest
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryBribesRequest
 */
export class QueryBribesRequest extends Message<QueryBribesRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryBribesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryBribesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBribesRequest {
    return new QueryBribesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBribesRequest {
    return new QueryBribesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBribesRequest {
    return new QueryBribesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBribesRequest | PlainMessage<QueryBribesRequest> | undefined, b: QueryBribesRequest | PlainMessage<QueryBribesRequest> | undefined): boolean {
    return proto3.util.equals(QueryBribesRequest, a, b);
  }
}

/**
 * QueryBribesResponse
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryBribesResponse
 */
export class QueryBribesResponse extends Message<QueryBribesResponse> {
  /**
   * @generated from field: repeated sunrise.liquidityincentive.v1.Bribe bribes = 1;
   */
  bribes: Bribe[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryBribesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryBribesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bribes", kind: "message", T: Bribe, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBribesResponse {
    return new QueryBribesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBribesResponse {
    return new QueryBribesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBribesResponse {
    return new QueryBribesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBribesResponse | PlainMessage<QueryBribesResponse> | undefined, b: QueryBribesResponse | PlainMessage<QueryBribesResponse> | undefined): boolean {
    return proto3.util.equals(QueryBribesResponse, a, b);
  }
}

/**
 * QueryBribeRequest
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryBribeRequest
 */
export class QueryBribeRequest extends Message<QueryBribeRequest> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<QueryBribeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryBribeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBribeRequest {
    return new QueryBribeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBribeRequest {
    return new QueryBribeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBribeRequest {
    return new QueryBribeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBribeRequest | PlainMessage<QueryBribeRequest> | undefined, b: QueryBribeRequest | PlainMessage<QueryBribeRequest> | undefined): boolean {
    return proto3.util.equals(QueryBribeRequest, a, b);
  }
}

/**
 * QueryBribeResponse
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryBribeResponse
 */
export class QueryBribeResponse extends Message<QueryBribeResponse> {
  /**
   * @generated from field: sunrise.liquidityincentive.v1.Bribe bribe = 1;
   */
  bribe?: Bribe;

  constructor(data?: PartialMessage<QueryBribeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryBribeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bribe", kind: "message", T: Bribe },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBribeResponse {
    return new QueryBribeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBribeResponse {
    return new QueryBribeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBribeResponse {
    return new QueryBribeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBribeResponse | PlainMessage<QueryBribeResponse> | undefined, b: QueryBribeResponse | PlainMessage<QueryBribeResponse> | undefined): boolean {
    return proto3.util.equals(QueryBribeResponse, a, b);
  }
}

/**
 * QueryBribesByEpochIdRequest
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryBribesByEpochIdRequest
 */
export class QueryBribesByEpochIdRequest extends Message<QueryBribesByEpochIdRequest> {
  /**
   * @generated from field: uint64 epoch_id = 1;
   */
  epochId = protoInt64.zero;

  constructor(data?: PartialMessage<QueryBribesByEpochIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryBribesByEpochIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "epoch_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBribesByEpochIdRequest {
    return new QueryBribesByEpochIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBribesByEpochIdRequest {
    return new QueryBribesByEpochIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBribesByEpochIdRequest {
    return new QueryBribesByEpochIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBribesByEpochIdRequest | PlainMessage<QueryBribesByEpochIdRequest> | undefined, b: QueryBribesByEpochIdRequest | PlainMessage<QueryBribesByEpochIdRequest> | undefined): boolean {
    return proto3.util.equals(QueryBribesByEpochIdRequest, a, b);
  }
}

/**
 * QueryBribesByEpochIdResponse
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryBribesByEpochIdResponse
 */
export class QueryBribesByEpochIdResponse extends Message<QueryBribesByEpochIdResponse> {
  /**
   * @generated from field: repeated sunrise.liquidityincentive.v1.Bribe bribes = 1;
   */
  bribes: Bribe[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryBribesByEpochIdResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryBribesByEpochIdResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bribes", kind: "message", T: Bribe, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBribesByEpochIdResponse {
    return new QueryBribesByEpochIdResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBribesByEpochIdResponse {
    return new QueryBribesByEpochIdResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBribesByEpochIdResponse {
    return new QueryBribesByEpochIdResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBribesByEpochIdResponse | PlainMessage<QueryBribesByEpochIdResponse> | undefined, b: QueryBribesByEpochIdResponse | PlainMessage<QueryBribesByEpochIdResponse> | undefined): boolean {
    return proto3.util.equals(QueryBribesByEpochIdResponse, a, b);
  }
}

/**
 * QueryBribesByPoolIdRequest
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryBribesByPoolIdRequest
 */
export class QueryBribesByPoolIdRequest extends Message<QueryBribesByPoolIdRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  constructor(data?: PartialMessage<QueryBribesByPoolIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryBribesByPoolIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBribesByPoolIdRequest {
    return new QueryBribesByPoolIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBribesByPoolIdRequest {
    return new QueryBribesByPoolIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBribesByPoolIdRequest {
    return new QueryBribesByPoolIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBribesByPoolIdRequest | PlainMessage<QueryBribesByPoolIdRequest> | undefined, b: QueryBribesByPoolIdRequest | PlainMessage<QueryBribesByPoolIdRequest> | undefined): boolean {
    return proto3.util.equals(QueryBribesByPoolIdRequest, a, b);
  }
}

/**
 * QueryBribesByPoolIdResponse
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryBribesByPoolIdResponse
 */
export class QueryBribesByPoolIdResponse extends Message<QueryBribesByPoolIdResponse> {
  /**
   * @generated from field: repeated sunrise.liquidityincentive.v1.Bribe bribes = 1;
   */
  bribes: Bribe[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryBribesByPoolIdResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryBribesByPoolIdResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bribes", kind: "message", T: Bribe, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBribesByPoolIdResponse {
    return new QueryBribesByPoolIdResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBribesByPoolIdResponse {
    return new QueryBribesByPoolIdResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBribesByPoolIdResponse {
    return new QueryBribesByPoolIdResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBribesByPoolIdResponse | PlainMessage<QueryBribesByPoolIdResponse> | undefined, b: QueryBribesByPoolIdResponse | PlainMessage<QueryBribesByPoolIdResponse> | undefined): boolean {
    return proto3.util.equals(QueryBribesByPoolIdResponse, a, b);
  }
}

/**
 * QueryBribesByEpochAndPoolIdRequest
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryBribesByEpochAndPoolIdRequest
 */
export class QueryBribesByEpochAndPoolIdRequest extends Message<QueryBribesByEpochAndPoolIdRequest> {
  /**
   * @generated from field: uint64 epoch_id = 1;
   */
  epochId = protoInt64.zero;

  /**
   * @generated from field: uint64 pool_id = 2;
   */
  poolId = protoInt64.zero;

  constructor(data?: PartialMessage<QueryBribesByEpochAndPoolIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryBribesByEpochAndPoolIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "epoch_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBribesByEpochAndPoolIdRequest {
    return new QueryBribesByEpochAndPoolIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBribesByEpochAndPoolIdRequest {
    return new QueryBribesByEpochAndPoolIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBribesByEpochAndPoolIdRequest {
    return new QueryBribesByEpochAndPoolIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBribesByEpochAndPoolIdRequest | PlainMessage<QueryBribesByEpochAndPoolIdRequest> | undefined, b: QueryBribesByEpochAndPoolIdRequest | PlainMessage<QueryBribesByEpochAndPoolIdRequest> | undefined): boolean {
    return proto3.util.equals(QueryBribesByEpochAndPoolIdRequest, a, b);
  }
}

/**
 * QueryBribesByEpochAndPoolIdResponse
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryBribesByEpochAndPoolIdResponse
 */
export class QueryBribesByEpochAndPoolIdResponse extends Message<QueryBribesByEpochAndPoolIdResponse> {
  /**
   * @generated from field: repeated sunrise.liquidityincentive.v1.Bribe bribes = 1;
   */
  bribes: Bribe[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryBribesByEpochAndPoolIdResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryBribesByEpochAndPoolIdResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bribes", kind: "message", T: Bribe, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBribesByEpochAndPoolIdResponse {
    return new QueryBribesByEpochAndPoolIdResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBribesByEpochAndPoolIdResponse {
    return new QueryBribesByEpochAndPoolIdResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBribesByEpochAndPoolIdResponse {
    return new QueryBribesByEpochAndPoolIdResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBribesByEpochAndPoolIdResponse | PlainMessage<QueryBribesByEpochAndPoolIdResponse> | undefined, b: QueryBribesByEpochAndPoolIdResponse | PlainMessage<QueryBribesByEpochAndPoolIdResponse> | undefined): boolean {
    return proto3.util.equals(QueryBribesByEpochAndPoolIdResponse, a, b);
  }
}

/**
 * QueryBribeAllocationsRequest
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryBribeAllocationsRequest
 */
export class QueryBribeAllocationsRequest extends Message<QueryBribeAllocationsRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryBribeAllocationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryBribeAllocationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBribeAllocationsRequest {
    return new QueryBribeAllocationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBribeAllocationsRequest {
    return new QueryBribeAllocationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBribeAllocationsRequest {
    return new QueryBribeAllocationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBribeAllocationsRequest | PlainMessage<QueryBribeAllocationsRequest> | undefined, b: QueryBribeAllocationsRequest | PlainMessage<QueryBribeAllocationsRequest> | undefined): boolean {
    return proto3.util.equals(QueryBribeAllocationsRequest, a, b);
  }
}

/**
 * QueryBribeAllocationsResponse
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryBribeAllocationsResponse
 */
export class QueryBribeAllocationsResponse extends Message<QueryBribeAllocationsResponse> {
  /**
   * @generated from field: repeated sunrise.liquidityincentive.v1.BribeAllocation bribe_allocations = 1;
   */
  bribeAllocations: BribeAllocation[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryBribeAllocationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryBribeAllocationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bribe_allocations", kind: "message", T: BribeAllocation, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBribeAllocationsResponse {
    return new QueryBribeAllocationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBribeAllocationsResponse {
    return new QueryBribeAllocationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBribeAllocationsResponse {
    return new QueryBribeAllocationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBribeAllocationsResponse | PlainMessage<QueryBribeAllocationsResponse> | undefined, b: QueryBribeAllocationsResponse | PlainMessage<QueryBribeAllocationsResponse> | undefined): boolean {
    return proto3.util.equals(QueryBribeAllocationsResponse, a, b);
  }
}

/**
 * QueryBribeAllocationsByAddressRequest
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryBribeAllocationsByAddressRequest
 */
export class QueryBribeAllocationsByAddressRequest extends Message<QueryBribeAllocationsByAddressRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  constructor(data?: PartialMessage<QueryBribeAllocationsByAddressRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryBribeAllocationsByAddressRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBribeAllocationsByAddressRequest {
    return new QueryBribeAllocationsByAddressRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBribeAllocationsByAddressRequest {
    return new QueryBribeAllocationsByAddressRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBribeAllocationsByAddressRequest {
    return new QueryBribeAllocationsByAddressRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBribeAllocationsByAddressRequest | PlainMessage<QueryBribeAllocationsByAddressRequest> | undefined, b: QueryBribeAllocationsByAddressRequest | PlainMessage<QueryBribeAllocationsByAddressRequest> | undefined): boolean {
    return proto3.util.equals(QueryBribeAllocationsByAddressRequest, a, b);
  }
}

/**
 * QueryBribeAllocationsByAddressResponse
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryBribeAllocationsByAddressResponse
 */
export class QueryBribeAllocationsByAddressResponse extends Message<QueryBribeAllocationsByAddressResponse> {
  /**
   * @generated from field: repeated sunrise.liquidityincentive.v1.BribeAllocation bribe_allocations = 1;
   */
  bribeAllocations: BribeAllocation[] = [];

  constructor(data?: PartialMessage<QueryBribeAllocationsByAddressResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryBribeAllocationsByAddressResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bribe_allocations", kind: "message", T: BribeAllocation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBribeAllocationsByAddressResponse {
    return new QueryBribeAllocationsByAddressResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBribeAllocationsByAddressResponse {
    return new QueryBribeAllocationsByAddressResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBribeAllocationsByAddressResponse {
    return new QueryBribeAllocationsByAddressResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBribeAllocationsByAddressResponse | PlainMessage<QueryBribeAllocationsByAddressResponse> | undefined, b: QueryBribeAllocationsByAddressResponse | PlainMessage<QueryBribeAllocationsByAddressResponse> | undefined): boolean {
    return proto3.util.equals(QueryBribeAllocationsByAddressResponse, a, b);
  }
}

/**
 * QueryBribeAllocationRequest
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryBribeAllocationRequest
 */
export class QueryBribeAllocationRequest extends Message<QueryBribeAllocationRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: uint64 epoch_id = 2;
   */
  epochId = protoInt64.zero;

  /**
   * @generated from field: uint64 pool_id = 3;
   */
  poolId = protoInt64.zero;

  constructor(data?: PartialMessage<QueryBribeAllocationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryBribeAllocationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "epoch_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBribeAllocationRequest {
    return new QueryBribeAllocationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBribeAllocationRequest {
    return new QueryBribeAllocationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBribeAllocationRequest {
    return new QueryBribeAllocationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBribeAllocationRequest | PlainMessage<QueryBribeAllocationRequest> | undefined, b: QueryBribeAllocationRequest | PlainMessage<QueryBribeAllocationRequest> | undefined): boolean {
    return proto3.util.equals(QueryBribeAllocationRequest, a, b);
  }
}

/**
 * QueryBribeAllocationResponse
 *
 * @generated from message sunrise.liquidityincentive.v1.QueryBribeAllocationResponse
 */
export class QueryBribeAllocationResponse extends Message<QueryBribeAllocationResponse> {
  /**
   * @generated from field: sunrise.liquidityincentive.v1.BribeAllocation bribe_allocation = 1;
   */
  bribeAllocation?: BribeAllocation;

  constructor(data?: PartialMessage<QueryBribeAllocationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.v1.QueryBribeAllocationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bribe_allocation", kind: "message", T: BribeAllocation },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBribeAllocationResponse {
    return new QueryBribeAllocationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBribeAllocationResponse {
    return new QueryBribeAllocationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBribeAllocationResponse {
    return new QueryBribeAllocationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBribeAllocationResponse | PlainMessage<QueryBribeAllocationResponse> | undefined, b: QueryBribeAllocationResponse | PlainMessage<QueryBribeAllocationResponse> | undefined): boolean {
    return proto3.util.equals(QueryBribeAllocationResponse, a, b);
  }
}

