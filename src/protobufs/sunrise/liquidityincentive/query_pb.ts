// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file sunrise/liquidityincentive/query.proto (package sunrise.liquidityincentive, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { Epoch } from "./epoch_pb.js";
import { PageRequest, PageResponse } from "../../cosmos/base/query/v1beta1/pagination_pb.js";
import { Gauge, Vote } from "./gauge_pb.js";

/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from message sunrise.liquidityincentive.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from message sunrise.liquidityincentive.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: sunrise.liquidityincentive.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * QueryEpochRequest
 *
 * @generated from message sunrise.liquidityincentive.QueryEpochRequest
 */
export class QueryEpochRequest extends Message<QueryEpochRequest> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<QueryEpochRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.QueryEpochRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEpochRequest {
    return new QueryEpochRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEpochRequest {
    return new QueryEpochRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEpochRequest {
    return new QueryEpochRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEpochRequest | PlainMessage<QueryEpochRequest> | undefined, b: QueryEpochRequest | PlainMessage<QueryEpochRequest> | undefined): boolean {
    return proto3.util.equals(QueryEpochRequest, a, b);
  }
}

/**
 * QueryEpochResponse
 *
 * @generated from message sunrise.liquidityincentive.QueryEpochResponse
 */
export class QueryEpochResponse extends Message<QueryEpochResponse> {
  /**
   * @generated from field: sunrise.liquidityincentive.Epoch epoch = 1;
   */
  epoch?: Epoch;

  constructor(data?: PartialMessage<QueryEpochResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.QueryEpochResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "epoch", kind: "message", T: Epoch },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEpochResponse {
    return new QueryEpochResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEpochResponse {
    return new QueryEpochResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEpochResponse {
    return new QueryEpochResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEpochResponse | PlainMessage<QueryEpochResponse> | undefined, b: QueryEpochResponse | PlainMessage<QueryEpochResponse> | undefined): boolean {
    return proto3.util.equals(QueryEpochResponse, a, b);
  }
}

/**
 * QueryEpochsRequest
 *
 * @generated from message sunrise.liquidityincentive.QueryEpochsRequest
 */
export class QueryEpochsRequest extends Message<QueryEpochsRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryEpochsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.QueryEpochsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEpochsRequest {
    return new QueryEpochsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEpochsRequest {
    return new QueryEpochsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEpochsRequest {
    return new QueryEpochsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEpochsRequest | PlainMessage<QueryEpochsRequest> | undefined, b: QueryEpochsRequest | PlainMessage<QueryEpochsRequest> | undefined): boolean {
    return proto3.util.equals(QueryEpochsRequest, a, b);
  }
}

/**
 * QueryEpochsResponse
 *
 * @generated from message sunrise.liquidityincentive.QueryEpochsResponse
 */
export class QueryEpochsResponse extends Message<QueryEpochsResponse> {
  /**
   * @generated from field: repeated sunrise.liquidityincentive.Epoch epochs = 1;
   */
  epochs: Epoch[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryEpochsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.QueryEpochsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "epochs", kind: "message", T: Epoch, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEpochsResponse {
    return new QueryEpochsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEpochsResponse {
    return new QueryEpochsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEpochsResponse {
    return new QueryEpochsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEpochsResponse | PlainMessage<QueryEpochsResponse> | undefined, b: QueryEpochsResponse | PlainMessage<QueryEpochsResponse> | undefined): boolean {
    return proto3.util.equals(QueryEpochsResponse, a, b);
  }
}

/**
 * QueryGaugeRequest
 *
 * @generated from message sunrise.liquidityincentive.QueryGaugeRequest
 */
export class QueryGaugeRequest extends Message<QueryGaugeRequest> {
  /**
   * @generated from field: uint64 previous_epoch_id = 1;
   */
  previousEpochId = protoInt64.zero;

  /**
   * @generated from field: uint64 pool_id = 2;
   */
  poolId = protoInt64.zero;

  constructor(data?: PartialMessage<QueryGaugeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.QueryGaugeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "previous_epoch_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGaugeRequest {
    return new QueryGaugeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGaugeRequest {
    return new QueryGaugeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGaugeRequest {
    return new QueryGaugeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGaugeRequest | PlainMessage<QueryGaugeRequest> | undefined, b: QueryGaugeRequest | PlainMessage<QueryGaugeRequest> | undefined): boolean {
    return proto3.util.equals(QueryGaugeRequest, a, b);
  }
}

/**
 * QueryGaugeResponse
 *
 * @generated from message sunrise.liquidityincentive.QueryGaugeResponse
 */
export class QueryGaugeResponse extends Message<QueryGaugeResponse> {
  /**
   * @generated from field: sunrise.liquidityincentive.Gauge gauge = 1;
   */
  gauge?: Gauge;

  constructor(data?: PartialMessage<QueryGaugeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.QueryGaugeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "gauge", kind: "message", T: Gauge },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGaugeResponse {
    return new QueryGaugeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGaugeResponse {
    return new QueryGaugeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGaugeResponse {
    return new QueryGaugeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGaugeResponse | PlainMessage<QueryGaugeResponse> | undefined, b: QueryGaugeResponse | PlainMessage<QueryGaugeResponse> | undefined): boolean {
    return proto3.util.equals(QueryGaugeResponse, a, b);
  }
}

/**
 * QueryGaugesRequest
 *
 * @generated from message sunrise.liquidityincentive.QueryGaugesRequest
 */
export class QueryGaugesRequest extends Message<QueryGaugesRequest> {
  /**
   * @generated from field: uint64 previous_epoch_id = 1;
   */
  previousEpochId = protoInt64.zero;

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryGaugesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.QueryGaugesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "previous_epoch_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGaugesRequest {
    return new QueryGaugesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGaugesRequest {
    return new QueryGaugesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGaugesRequest {
    return new QueryGaugesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGaugesRequest | PlainMessage<QueryGaugesRequest> | undefined, b: QueryGaugesRequest | PlainMessage<QueryGaugesRequest> | undefined): boolean {
    return proto3.util.equals(QueryGaugesRequest, a, b);
  }
}

/**
 * QueryGaugesResponse
 *
 * @generated from message sunrise.liquidityincentive.QueryGaugesResponse
 */
export class QueryGaugesResponse extends Message<QueryGaugesResponse> {
  /**
   * @generated from field: repeated sunrise.liquidityincentive.Gauge gauge = 1;
   */
  gauge: Gauge[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryGaugesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.QueryGaugesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "gauge", kind: "message", T: Gauge, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGaugesResponse {
    return new QueryGaugesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGaugesResponse {
    return new QueryGaugesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGaugesResponse {
    return new QueryGaugesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGaugesResponse | PlainMessage<QueryGaugesResponse> | undefined, b: QueryGaugesResponse | PlainMessage<QueryGaugesResponse> | undefined): boolean {
    return proto3.util.equals(QueryGaugesResponse, a, b);
  }
}

/**
 * QueryVoteRequest
 *
 * @generated from message sunrise.liquidityincentive.QueryVoteRequest
 */
export class QueryVoteRequest extends Message<QueryVoteRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  constructor(data?: PartialMessage<QueryVoteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.QueryVoteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVoteRequest {
    return new QueryVoteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVoteRequest {
    return new QueryVoteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVoteRequest {
    return new QueryVoteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVoteRequest | PlainMessage<QueryVoteRequest> | undefined, b: QueryVoteRequest | PlainMessage<QueryVoteRequest> | undefined): boolean {
    return proto3.util.equals(QueryVoteRequest, a, b);
  }
}

/**
 * QueryVoteResponse
 *
 * @generated from message sunrise.liquidityincentive.QueryVoteResponse
 */
export class QueryVoteResponse extends Message<QueryVoteResponse> {
  /**
   * @generated from field: sunrise.liquidityincentive.Vote vote = 1;
   */
  vote?: Vote;

  constructor(data?: PartialMessage<QueryVoteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.QueryVoteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vote", kind: "message", T: Vote },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVoteResponse {
    return new QueryVoteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVoteResponse {
    return new QueryVoteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVoteResponse {
    return new QueryVoteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVoteResponse | PlainMessage<QueryVoteResponse> | undefined, b: QueryVoteResponse | PlainMessage<QueryVoteResponse> | undefined): boolean {
    return proto3.util.equals(QueryVoteResponse, a, b);
  }
}

/**
 * QueryVotesRequest
 *
 * @generated from message sunrise.liquidityincentive.QueryVotesRequest
 */
export class QueryVotesRequest extends Message<QueryVotesRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryVotesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.QueryVotesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVotesRequest {
    return new QueryVotesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVotesRequest {
    return new QueryVotesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVotesRequest {
    return new QueryVotesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVotesRequest | PlainMessage<QueryVotesRequest> | undefined, b: QueryVotesRequest | PlainMessage<QueryVotesRequest> | undefined): boolean {
    return proto3.util.equals(QueryVotesRequest, a, b);
  }
}

/**
 * QueryVotesResponse
 *
 * @generated from message sunrise.liquidityincentive.QueryVotesResponse
 */
export class QueryVotesResponse extends Message<QueryVotesResponse> {
  /**
   * @generated from field: repeated sunrise.liquidityincentive.Vote votes = 1;
   */
  votes: Vote[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryVotesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.liquidityincentive.QueryVotesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "votes", kind: "message", T: Vote, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVotesResponse {
    return new QueryVotesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVotesResponse {
    return new QueryVotesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVotesResponse {
    return new QueryVotesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVotesResponse | PlainMessage<QueryVotesResponse> | undefined, b: QueryVotesResponse | PlainMessage<QueryVotesResponse> | undefined): boolean {
    return proto3.util.equals(QueryVotesResponse, a, b);
  }
}

