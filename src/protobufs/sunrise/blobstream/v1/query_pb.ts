// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file sunrise/blobstream/v1/query.proto (package sunrise.blobstream.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { DataCommitment, Valset } from "./types_pb.js";

/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from message sunrise.blobstream.v1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.blobstream.v1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from message sunrise.blobstream.v1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: sunrise.blobstream.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.blobstream.v1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * QueryAttestationRequestByNonceRequest
 *
 * @generated from message sunrise.blobstream.v1.QueryAttestationRequestByNonceRequest
 */
export class QueryAttestationRequestByNonceRequest extends Message<QueryAttestationRequestByNonceRequest> {
  /**
   * @generated from field: uint64 nonce = 1;
   */
  nonce = protoInt64.zero;

  constructor(data?: PartialMessage<QueryAttestationRequestByNonceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.blobstream.v1.QueryAttestationRequestByNonceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAttestationRequestByNonceRequest {
    return new QueryAttestationRequestByNonceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAttestationRequestByNonceRequest {
    return new QueryAttestationRequestByNonceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAttestationRequestByNonceRequest {
    return new QueryAttestationRequestByNonceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAttestationRequestByNonceRequest | PlainMessage<QueryAttestationRequestByNonceRequest> | undefined, b: QueryAttestationRequestByNonceRequest | PlainMessage<QueryAttestationRequestByNonceRequest> | undefined): boolean {
    return proto3.util.equals(QueryAttestationRequestByNonceRequest, a, b);
  }
}

/**
 * QueryAttestationRequestByNonceResponse
 *
 * @generated from message sunrise.blobstream.v1.QueryAttestationRequestByNonceResponse
 */
export class QueryAttestationRequestByNonceResponse extends Message<QueryAttestationRequestByNonceResponse> {
  /**
   * AttestationRequestI is either a Data Commitment or a Valset.
   * This was decided as part of the universal nonce approach under:
   * https://github.com/sunriselayer/sunrise/issues/468#issuecomment-1156887715
   *
   * @generated from field: google.protobuf.Any attestation = 1;
   */
  attestation?: Any;

  constructor(data?: PartialMessage<QueryAttestationRequestByNonceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.blobstream.v1.QueryAttestationRequestByNonceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "attestation", kind: "message", T: Any },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAttestationRequestByNonceResponse {
    return new QueryAttestationRequestByNonceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAttestationRequestByNonceResponse {
    return new QueryAttestationRequestByNonceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAttestationRequestByNonceResponse {
    return new QueryAttestationRequestByNonceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAttestationRequestByNonceResponse | PlainMessage<QueryAttestationRequestByNonceResponse> | undefined, b: QueryAttestationRequestByNonceResponse | PlainMessage<QueryAttestationRequestByNonceResponse> | undefined): boolean {
    return proto3.util.equals(QueryAttestationRequestByNonceResponse, a, b);
  }
}

/**
 * QueryLatestAttestationNonceRequest latest attestation nonce request
 *
 * @generated from message sunrise.blobstream.v1.QueryLatestAttestationNonceRequest
 */
export class QueryLatestAttestationNonceRequest extends Message<QueryLatestAttestationNonceRequest> {
  constructor(data?: PartialMessage<QueryLatestAttestationNonceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.blobstream.v1.QueryLatestAttestationNonceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLatestAttestationNonceRequest {
    return new QueryLatestAttestationNonceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLatestAttestationNonceRequest {
    return new QueryLatestAttestationNonceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLatestAttestationNonceRequest {
    return new QueryLatestAttestationNonceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLatestAttestationNonceRequest | PlainMessage<QueryLatestAttestationNonceRequest> | undefined, b: QueryLatestAttestationNonceRequest | PlainMessage<QueryLatestAttestationNonceRequest> | undefined): boolean {
    return proto3.util.equals(QueryLatestAttestationNonceRequest, a, b);
  }
}

/**
 * QueryLatestAttestationNonceResponse latest attestation nonce response
 *
 * @generated from message sunrise.blobstream.v1.QueryLatestAttestationNonceResponse
 */
export class QueryLatestAttestationNonceResponse extends Message<QueryLatestAttestationNonceResponse> {
  /**
   * @generated from field: uint64 nonce = 1;
   */
  nonce = protoInt64.zero;

  constructor(data?: PartialMessage<QueryLatestAttestationNonceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.blobstream.v1.QueryLatestAttestationNonceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLatestAttestationNonceResponse {
    return new QueryLatestAttestationNonceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLatestAttestationNonceResponse {
    return new QueryLatestAttestationNonceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLatestAttestationNonceResponse {
    return new QueryLatestAttestationNonceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLatestAttestationNonceResponse | PlainMessage<QueryLatestAttestationNonceResponse> | undefined, b: QueryLatestAttestationNonceResponse | PlainMessage<QueryLatestAttestationNonceResponse> | undefined): boolean {
    return proto3.util.equals(QueryLatestAttestationNonceResponse, a, b);
  }
}

/**
 * QueryEarliestAttestationNonceRequest earliest attestation nonce request
 *
 * @generated from message sunrise.blobstream.v1.QueryEarliestAttestationNonceRequest
 */
export class QueryEarliestAttestationNonceRequest extends Message<QueryEarliestAttestationNonceRequest> {
  constructor(data?: PartialMessage<QueryEarliestAttestationNonceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.blobstream.v1.QueryEarliestAttestationNonceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEarliestAttestationNonceRequest {
    return new QueryEarliestAttestationNonceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEarliestAttestationNonceRequest {
    return new QueryEarliestAttestationNonceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEarliestAttestationNonceRequest {
    return new QueryEarliestAttestationNonceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEarliestAttestationNonceRequest | PlainMessage<QueryEarliestAttestationNonceRequest> | undefined, b: QueryEarliestAttestationNonceRequest | PlainMessage<QueryEarliestAttestationNonceRequest> | undefined): boolean {
    return proto3.util.equals(QueryEarliestAttestationNonceRequest, a, b);
  }
}

/**
 * QueryEarliestAttestationNonceResponse earliest attestation nonce response
 *
 * @generated from message sunrise.blobstream.v1.QueryEarliestAttestationNonceResponse
 */
export class QueryEarliestAttestationNonceResponse extends Message<QueryEarliestAttestationNonceResponse> {
  /**
   * @generated from field: uint64 nonce = 1;
   */
  nonce = protoInt64.zero;

  constructor(data?: PartialMessage<QueryEarliestAttestationNonceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.blobstream.v1.QueryEarliestAttestationNonceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEarliestAttestationNonceResponse {
    return new QueryEarliestAttestationNonceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEarliestAttestationNonceResponse {
    return new QueryEarliestAttestationNonceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEarliestAttestationNonceResponse {
    return new QueryEarliestAttestationNonceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEarliestAttestationNonceResponse | PlainMessage<QueryEarliestAttestationNonceResponse> | undefined, b: QueryEarliestAttestationNonceResponse | PlainMessage<QueryEarliestAttestationNonceResponse> | undefined): boolean {
    return proto3.util.equals(QueryEarliestAttestationNonceResponse, a, b);
  }
}

/**
 * QueryLatestValsetRequestBeforeNonceRequest latest Valset request before
 * universal nonce request
 *
 * @generated from message sunrise.blobstream.v1.QueryLatestValsetRequestBeforeNonceRequest
 */
export class QueryLatestValsetRequestBeforeNonceRequest extends Message<QueryLatestValsetRequestBeforeNonceRequest> {
  /**
   * @generated from field: uint64 nonce = 1;
   */
  nonce = protoInt64.zero;

  constructor(data?: PartialMessage<QueryLatestValsetRequestBeforeNonceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.blobstream.v1.QueryLatestValsetRequestBeforeNonceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLatestValsetRequestBeforeNonceRequest {
    return new QueryLatestValsetRequestBeforeNonceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLatestValsetRequestBeforeNonceRequest {
    return new QueryLatestValsetRequestBeforeNonceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLatestValsetRequestBeforeNonceRequest {
    return new QueryLatestValsetRequestBeforeNonceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLatestValsetRequestBeforeNonceRequest | PlainMessage<QueryLatestValsetRequestBeforeNonceRequest> | undefined, b: QueryLatestValsetRequestBeforeNonceRequest | PlainMessage<QueryLatestValsetRequestBeforeNonceRequest> | undefined): boolean {
    return proto3.util.equals(QueryLatestValsetRequestBeforeNonceRequest, a, b);
  }
}

/**
 * QueryLatestValsetRequestBeforeNonceResponse latest Valset request before
 * height response
 *
 * @generated from message sunrise.blobstream.v1.QueryLatestValsetRequestBeforeNonceResponse
 */
export class QueryLatestValsetRequestBeforeNonceResponse extends Message<QueryLatestValsetRequestBeforeNonceResponse> {
  /**
   * @generated from field: sunrise.blobstream.v1.Valset valset = 1;
   */
  valset?: Valset;

  constructor(data?: PartialMessage<QueryLatestValsetRequestBeforeNonceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.blobstream.v1.QueryLatestValsetRequestBeforeNonceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "valset", kind: "message", T: Valset },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLatestValsetRequestBeforeNonceResponse {
    return new QueryLatestValsetRequestBeforeNonceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLatestValsetRequestBeforeNonceResponse {
    return new QueryLatestValsetRequestBeforeNonceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLatestValsetRequestBeforeNonceResponse {
    return new QueryLatestValsetRequestBeforeNonceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLatestValsetRequestBeforeNonceResponse | PlainMessage<QueryLatestValsetRequestBeforeNonceResponse> | undefined, b: QueryLatestValsetRequestBeforeNonceResponse | PlainMessage<QueryLatestValsetRequestBeforeNonceResponse> | undefined): boolean {
    return proto3.util.equals(QueryLatestValsetRequestBeforeNonceResponse, a, b);
  }
}

/**
 * QueryLatestUnbondingHeightRequest
 *
 * @generated from message sunrise.blobstream.v1.QueryLatestUnbondingHeightRequest
 */
export class QueryLatestUnbondingHeightRequest extends Message<QueryLatestUnbondingHeightRequest> {
  constructor(data?: PartialMessage<QueryLatestUnbondingHeightRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.blobstream.v1.QueryLatestUnbondingHeightRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLatestUnbondingHeightRequest {
    return new QueryLatestUnbondingHeightRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLatestUnbondingHeightRequest {
    return new QueryLatestUnbondingHeightRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLatestUnbondingHeightRequest {
    return new QueryLatestUnbondingHeightRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLatestUnbondingHeightRequest | PlainMessage<QueryLatestUnbondingHeightRequest> | undefined, b: QueryLatestUnbondingHeightRequest | PlainMessage<QueryLatestUnbondingHeightRequest> | undefined): boolean {
    return proto3.util.equals(QueryLatestUnbondingHeightRequest, a, b);
  }
}

/**
 * QueryLatestUnbondingHeightResponse
 *
 * @generated from message sunrise.blobstream.v1.QueryLatestUnbondingHeightResponse
 */
export class QueryLatestUnbondingHeightResponse extends Message<QueryLatestUnbondingHeightResponse> {
  /**
   * @generated from field: uint64 height = 1;
   */
  height = protoInt64.zero;

  constructor(data?: PartialMessage<QueryLatestUnbondingHeightResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.blobstream.v1.QueryLatestUnbondingHeightResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLatestUnbondingHeightResponse {
    return new QueryLatestUnbondingHeightResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLatestUnbondingHeightResponse {
    return new QueryLatestUnbondingHeightResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLatestUnbondingHeightResponse {
    return new QueryLatestUnbondingHeightResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLatestUnbondingHeightResponse | PlainMessage<QueryLatestUnbondingHeightResponse> | undefined, b: QueryLatestUnbondingHeightResponse | PlainMessage<QueryLatestUnbondingHeightResponse> | undefined): boolean {
    return proto3.util.equals(QueryLatestUnbondingHeightResponse, a, b);
  }
}

/**
 * QueryLatestDataCommitmentRequest
 *
 * @generated from message sunrise.blobstream.v1.QueryLatestDataCommitmentRequest
 */
export class QueryLatestDataCommitmentRequest extends Message<QueryLatestDataCommitmentRequest> {
  constructor(data?: PartialMessage<QueryLatestDataCommitmentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.blobstream.v1.QueryLatestDataCommitmentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLatestDataCommitmentRequest {
    return new QueryLatestDataCommitmentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLatestDataCommitmentRequest {
    return new QueryLatestDataCommitmentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLatestDataCommitmentRequest {
    return new QueryLatestDataCommitmentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLatestDataCommitmentRequest | PlainMessage<QueryLatestDataCommitmentRequest> | undefined, b: QueryLatestDataCommitmentRequest | PlainMessage<QueryLatestDataCommitmentRequest> | undefined): boolean {
    return proto3.util.equals(QueryLatestDataCommitmentRequest, a, b);
  }
}

/**
 * QueryLatestDataCommitmentResponse
 *
 * @generated from message sunrise.blobstream.v1.QueryLatestDataCommitmentResponse
 */
export class QueryLatestDataCommitmentResponse extends Message<QueryLatestDataCommitmentResponse> {
  /**
   * @generated from field: sunrise.blobstream.v1.DataCommitment data_commitment = 1;
   */
  dataCommitment?: DataCommitment;

  constructor(data?: PartialMessage<QueryLatestDataCommitmentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.blobstream.v1.QueryLatestDataCommitmentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data_commitment", kind: "message", T: DataCommitment },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLatestDataCommitmentResponse {
    return new QueryLatestDataCommitmentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLatestDataCommitmentResponse {
    return new QueryLatestDataCommitmentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLatestDataCommitmentResponse {
    return new QueryLatestDataCommitmentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLatestDataCommitmentResponse | PlainMessage<QueryLatestDataCommitmentResponse> | undefined, b: QueryLatestDataCommitmentResponse | PlainMessage<QueryLatestDataCommitmentResponse> | undefined): boolean {
    return proto3.util.equals(QueryLatestDataCommitmentResponse, a, b);
  }
}

/**
 * QueryDataCommitmentRangeForHeightRequest
 *
 * @generated from message sunrise.blobstream.v1.QueryDataCommitmentRangeForHeightRequest
 */
export class QueryDataCommitmentRangeForHeightRequest extends Message<QueryDataCommitmentRangeForHeightRequest> {
  /**
   * @generated from field: uint64 height = 1;
   */
  height = protoInt64.zero;

  constructor(data?: PartialMessage<QueryDataCommitmentRangeForHeightRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.blobstream.v1.QueryDataCommitmentRangeForHeightRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDataCommitmentRangeForHeightRequest {
    return new QueryDataCommitmentRangeForHeightRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDataCommitmentRangeForHeightRequest {
    return new QueryDataCommitmentRangeForHeightRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDataCommitmentRangeForHeightRequest {
    return new QueryDataCommitmentRangeForHeightRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDataCommitmentRangeForHeightRequest | PlainMessage<QueryDataCommitmentRangeForHeightRequest> | undefined, b: QueryDataCommitmentRangeForHeightRequest | PlainMessage<QueryDataCommitmentRangeForHeightRequest> | undefined): boolean {
    return proto3.util.equals(QueryDataCommitmentRangeForHeightRequest, a, b);
  }
}

/**
 * QueryDataCommitmentRangeForHeightResponse
 *
 * @generated from message sunrise.blobstream.v1.QueryDataCommitmentRangeForHeightResponse
 */
export class QueryDataCommitmentRangeForHeightResponse extends Message<QueryDataCommitmentRangeForHeightResponse> {
  /**
   * @generated from field: sunrise.blobstream.v1.DataCommitment data_commitment = 1;
   */
  dataCommitment?: DataCommitment;

  constructor(data?: PartialMessage<QueryDataCommitmentRangeForHeightResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.blobstream.v1.QueryDataCommitmentRangeForHeightResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data_commitment", kind: "message", T: DataCommitment },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDataCommitmentRangeForHeightResponse {
    return new QueryDataCommitmentRangeForHeightResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDataCommitmentRangeForHeightResponse {
    return new QueryDataCommitmentRangeForHeightResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDataCommitmentRangeForHeightResponse {
    return new QueryDataCommitmentRangeForHeightResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDataCommitmentRangeForHeightResponse | PlainMessage<QueryDataCommitmentRangeForHeightResponse> | undefined, b: QueryDataCommitmentRangeForHeightResponse | PlainMessage<QueryDataCommitmentRangeForHeightResponse> | undefined): boolean {
    return proto3.util.equals(QueryDataCommitmentRangeForHeightResponse, a, b);
  }
}

/**
 * QueryEvmAddressRequest
 *
 * @generated from message sunrise.blobstream.v1.QueryEvmAddressRequest
 */
export class QueryEvmAddressRequest extends Message<QueryEvmAddressRequest> {
  /**
   * @generated from field: string validator_address = 1;
   */
  validatorAddress = "";

  constructor(data?: PartialMessage<QueryEvmAddressRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.blobstream.v1.QueryEvmAddressRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEvmAddressRequest {
    return new QueryEvmAddressRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEvmAddressRequest {
    return new QueryEvmAddressRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEvmAddressRequest {
    return new QueryEvmAddressRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEvmAddressRequest | PlainMessage<QueryEvmAddressRequest> | undefined, b: QueryEvmAddressRequest | PlainMessage<QueryEvmAddressRequest> | undefined): boolean {
    return proto3.util.equals(QueryEvmAddressRequest, a, b);
  }
}

/**
 * QueryEvmAddressResponse
 *
 * @generated from message sunrise.blobstream.v1.QueryEvmAddressResponse
 */
export class QueryEvmAddressResponse extends Message<QueryEvmAddressResponse> {
  /**
   * @generated from field: string evm_address = 1;
   */
  evmAddress = "";

  constructor(data?: PartialMessage<QueryEvmAddressResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.blobstream.v1.QueryEvmAddressResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "evm_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEvmAddressResponse {
    return new QueryEvmAddressResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEvmAddressResponse {
    return new QueryEvmAddressResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEvmAddressResponse {
    return new QueryEvmAddressResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEvmAddressResponse | PlainMessage<QueryEvmAddressResponse> | undefined, b: QueryEvmAddressResponse | PlainMessage<QueryEvmAddressResponse> | undefined): boolean {
    return proto3.util.equals(QueryEvmAddressResponse, a, b);
  }
}

