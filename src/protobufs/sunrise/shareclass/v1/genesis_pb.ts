// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file sunrise/shareclass/v1/genesis.proto (package sunrise.shareclass.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { Unbonding } from "./bond_pb.js";

/**
 * GenesisState defines the shareclass module's genesis state.
 *
 * @generated from message sunrise.shareclass.v1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * params defines all the parameters of the module.
   *
   * @generated from field: sunrise.shareclass.v1.Params params = 1;
   */
  params?: Params;

  /**
   * @generated from field: repeated sunrise.shareclass.v1.Unbonding unbondings = 2;
   */
  unbondings: Unbonding[] = [];

  /**
   * @generated from field: uint64 unbonding_count = 3;
   */
  unbondingCount = protoInt64.zero;

  /**
   * @generated from field: repeated sunrise.shareclass.v1.GenesisRewardMultiplier reward_multipliers = 4;
   */
  rewardMultipliers: GenesisRewardMultiplier[] = [];

  /**
   * @generated from field: repeated sunrise.shareclass.v1.GenesisUserLastRewardMultiplier user_last_reward_multipliers = 5;
   */
  userLastRewardMultipliers: GenesisUserLastRewardMultiplier[] = [];

  /**
   * @generated from field: repeated sunrise.shareclass.v1.GenesisLastRewardHandlingTime last_reward_handling_times = 6;
   */
  lastRewardHandlingTimes: GenesisLastRewardHandlingTime[] = [];

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.shareclass.v1.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
    { no: 2, name: "unbondings", kind: "message", T: Unbonding, repeated: true },
    { no: 3, name: "unbonding_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "reward_multipliers", kind: "message", T: GenesisRewardMultiplier, repeated: true },
    { no: 5, name: "user_last_reward_multipliers", kind: "message", T: GenesisUserLastRewardMultiplier, repeated: true },
    { no: 6, name: "last_reward_handling_times", kind: "message", T: GenesisLastRewardHandlingTime, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

/**
 * GenesisRewardMultiplier
 *
 * @generated from message sunrise.shareclass.v1.GenesisRewardMultiplier
 */
export class GenesisRewardMultiplier extends Message<GenesisRewardMultiplier> {
  /**
   * @generated from field: string validator = 1;
   */
  validator = "";

  /**
   * @generated from field: string denom = 2;
   */
  denom = "";

  /**
   * @generated from field: string reward_multiplier = 3;
   */
  rewardMultiplier = "";

  constructor(data?: PartialMessage<GenesisRewardMultiplier>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.shareclass.v1.GenesisRewardMultiplier";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "reward_multiplier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisRewardMultiplier {
    return new GenesisRewardMultiplier().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisRewardMultiplier {
    return new GenesisRewardMultiplier().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisRewardMultiplier {
    return new GenesisRewardMultiplier().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisRewardMultiplier | PlainMessage<GenesisRewardMultiplier> | undefined, b: GenesisRewardMultiplier | PlainMessage<GenesisRewardMultiplier> | undefined): boolean {
    return proto3.util.equals(GenesisRewardMultiplier, a, b);
  }
}

/**
 * GenesisUserLastRewardMultiplier
 *
 * @generated from message sunrise.shareclass.v1.GenesisUserLastRewardMultiplier
 */
export class GenesisUserLastRewardMultiplier extends Message<GenesisUserLastRewardMultiplier> {
  /**
   * @generated from field: string user = 1;
   */
  user = "";

  /**
   * @generated from field: string validator = 2;
   */
  validator = "";

  /**
   * @generated from field: string denom = 3;
   */
  denom = "";

  /**
   * @generated from field: string reward_multiplier = 4;
   */
  rewardMultiplier = "";

  constructor(data?: PartialMessage<GenesisUserLastRewardMultiplier>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.shareclass.v1.GenesisUserLastRewardMultiplier";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "validator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "reward_multiplier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisUserLastRewardMultiplier {
    return new GenesisUserLastRewardMultiplier().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisUserLastRewardMultiplier {
    return new GenesisUserLastRewardMultiplier().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisUserLastRewardMultiplier {
    return new GenesisUserLastRewardMultiplier().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisUserLastRewardMultiplier | PlainMessage<GenesisUserLastRewardMultiplier> | undefined, b: GenesisUserLastRewardMultiplier | PlainMessage<GenesisUserLastRewardMultiplier> | undefined): boolean {
    return proto3.util.equals(GenesisUserLastRewardMultiplier, a, b);
  }
}

/**
 * GenesisLastRewardHandlingTime
 *
 * @generated from message sunrise.shareclass.v1.GenesisLastRewardHandlingTime
 */
export class GenesisLastRewardHandlingTime extends Message<GenesisLastRewardHandlingTime> {
  /**
   * @generated from field: string validator = 1;
   */
  validator = "";

  /**
   * @generated from field: int64 last_reward_handling_time = 2;
   */
  lastRewardHandlingTime = protoInt64.zero;

  constructor(data?: PartialMessage<GenesisLastRewardHandlingTime>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.shareclass.v1.GenesisLastRewardHandlingTime";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "last_reward_handling_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisLastRewardHandlingTime {
    return new GenesisLastRewardHandlingTime().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisLastRewardHandlingTime {
    return new GenesisLastRewardHandlingTime().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisLastRewardHandlingTime {
    return new GenesisLastRewardHandlingTime().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisLastRewardHandlingTime | PlainMessage<GenesisLastRewardHandlingTime> | undefined, b: GenesisLastRewardHandlingTime | PlainMessage<GenesisLastRewardHandlingTime> | undefined): boolean {
    return proto3.util.equals(GenesisLastRewardHandlingTime, a, b);
  }
}

