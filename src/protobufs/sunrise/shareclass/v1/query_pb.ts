// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file sunrise/shareclass/v1/query.proto (package sunrise.shareclass.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
import { Unbonding, ValidatorBond } from "./bond_pb.js";

/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from message sunrise.shareclass.v1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.shareclass.v1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from message sunrise.shareclass.v1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: sunrise.shareclass.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.shareclass.v1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * QueryCalculateAmountRequest
 *
 * @generated from message sunrise.shareclass.v1.QueryCalculateBondingAmountRequest
 */
export class QueryCalculateBondingAmountRequest extends Message<QueryCalculateBondingAmountRequest> {
  /**
   * @generated from field: string validator_address = 1;
   */
  validatorAddress = "";

  /**
   * @generated from field: string share = 2;
   */
  share = "";

  constructor(data?: PartialMessage<QueryCalculateBondingAmountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.shareclass.v1.QueryCalculateBondingAmountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "share", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCalculateBondingAmountRequest {
    return new QueryCalculateBondingAmountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCalculateBondingAmountRequest {
    return new QueryCalculateBondingAmountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCalculateBondingAmountRequest {
    return new QueryCalculateBondingAmountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCalculateBondingAmountRequest | PlainMessage<QueryCalculateBondingAmountRequest> | undefined, b: QueryCalculateBondingAmountRequest | PlainMessage<QueryCalculateBondingAmountRequest> | undefined): boolean {
    return proto3.util.equals(QueryCalculateBondingAmountRequest, a, b);
  }
}

/**
 * QueryCalculateBondingAmountResponse
 *
 * @generated from message sunrise.shareclass.v1.QueryCalculateBondingAmountResponse
 */
export class QueryCalculateBondingAmountResponse extends Message<QueryCalculateBondingAmountResponse> {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 1;
   */
  amount?: Coin;

  constructor(data?: PartialMessage<QueryCalculateBondingAmountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.shareclass.v1.QueryCalculateBondingAmountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCalculateBondingAmountResponse {
    return new QueryCalculateBondingAmountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCalculateBondingAmountResponse {
    return new QueryCalculateBondingAmountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCalculateBondingAmountResponse {
    return new QueryCalculateBondingAmountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCalculateBondingAmountResponse | PlainMessage<QueryCalculateBondingAmountResponse> | undefined, b: QueryCalculateBondingAmountResponse | PlainMessage<QueryCalculateBondingAmountResponse> | undefined): boolean {
    return proto3.util.equals(QueryCalculateBondingAmountResponse, a, b);
  }
}

/**
 * QueryCalculateShareRequest
 *
 * @generated from message sunrise.shareclass.v1.QueryCalculateShareRequest
 */
export class QueryCalculateShareRequest extends Message<QueryCalculateShareRequest> {
  /**
   * @generated from field: string validator_address = 1;
   */
  validatorAddress = "";

  /**
   * @generated from field: string amount = 2;
   */
  amount = "";

  constructor(data?: PartialMessage<QueryCalculateShareRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.shareclass.v1.QueryCalculateShareRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCalculateShareRequest {
    return new QueryCalculateShareRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCalculateShareRequest {
    return new QueryCalculateShareRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCalculateShareRequest {
    return new QueryCalculateShareRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCalculateShareRequest | PlainMessage<QueryCalculateShareRequest> | undefined, b: QueryCalculateShareRequest | PlainMessage<QueryCalculateShareRequest> | undefined): boolean {
    return proto3.util.equals(QueryCalculateShareRequest, a, b);
  }
}

/**
 * QueryCalculateShareResponse
 *
 * @generated from message sunrise.shareclass.v1.QueryCalculateShareResponse
 */
export class QueryCalculateShareResponse extends Message<QueryCalculateShareResponse> {
  /**
   * @generated from field: string share = 1;
   */
  share = "";

  constructor(data?: PartialMessage<QueryCalculateShareResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.shareclass.v1.QueryCalculateShareResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "share", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCalculateShareResponse {
    return new QueryCalculateShareResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCalculateShareResponse {
    return new QueryCalculateShareResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCalculateShareResponse {
    return new QueryCalculateShareResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCalculateShareResponse | PlainMessage<QueryCalculateShareResponse> | undefined, b: QueryCalculateShareResponse | PlainMessage<QueryCalculateShareResponse> | undefined): boolean {
    return proto3.util.equals(QueryCalculateShareResponse, a, b);
  }
}

/**
 * QueryAddressBondedRequest
 *
 * @generated from message sunrise.shareclass.v1.QueryAddressBondedRequest
 */
export class QueryAddressBondedRequest extends Message<QueryAddressBondedRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  constructor(data?: PartialMessage<QueryAddressBondedRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.shareclass.v1.QueryAddressBondedRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAddressBondedRequest {
    return new QueryAddressBondedRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAddressBondedRequest {
    return new QueryAddressBondedRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAddressBondedRequest {
    return new QueryAddressBondedRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAddressBondedRequest | PlainMessage<QueryAddressBondedRequest> | undefined, b: QueryAddressBondedRequest | PlainMessage<QueryAddressBondedRequest> | undefined): boolean {
    return proto3.util.equals(QueryAddressBondedRequest, a, b);
  }
}

/**
 * QueryAddressBondedResponse
 *
 * @generated from message sunrise.shareclass.v1.QueryAddressBondedResponse
 */
export class QueryAddressBondedResponse extends Message<QueryAddressBondedResponse> {
  /**
   * @generated from field: repeated sunrise.shareclass.v1.ValidatorBond bonds = 1;
   */
  bonds: ValidatorBond[] = [];

  constructor(data?: PartialMessage<QueryAddressBondedResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.shareclass.v1.QueryAddressBondedResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bonds", kind: "message", T: ValidatorBond, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAddressBondedResponse {
    return new QueryAddressBondedResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAddressBondedResponse {
    return new QueryAddressBondedResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAddressBondedResponse {
    return new QueryAddressBondedResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAddressBondedResponse | PlainMessage<QueryAddressBondedResponse> | undefined, b: QueryAddressBondedResponse | PlainMessage<QueryAddressBondedResponse> | undefined): boolean {
    return proto3.util.equals(QueryAddressBondedResponse, a, b);
  }
}

/**
 * QueryClaimableRewardsRequest
 *
 * @generated from message sunrise.shareclass.v1.QueryClaimableRewardsRequest
 */
export class QueryClaimableRewardsRequest extends Message<QueryClaimableRewardsRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: string validator_address = 2;
   */
  validatorAddress = "";

  constructor(data?: PartialMessage<QueryClaimableRewardsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.shareclass.v1.QueryClaimableRewardsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryClaimableRewardsRequest {
    return new QueryClaimableRewardsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryClaimableRewardsRequest {
    return new QueryClaimableRewardsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryClaimableRewardsRequest {
    return new QueryClaimableRewardsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryClaimableRewardsRequest | PlainMessage<QueryClaimableRewardsRequest> | undefined, b: QueryClaimableRewardsRequest | PlainMessage<QueryClaimableRewardsRequest> | undefined): boolean {
    return proto3.util.equals(QueryClaimableRewardsRequest, a, b);
  }
}

/**
 * QueryClaimableRewardsResponse
 *
 * @generated from message sunrise.shareclass.v1.QueryClaimableRewardsResponse
 */
export class QueryClaimableRewardsResponse extends Message<QueryClaimableRewardsResponse> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 1;
   */
  amount: Coin[] = [];

  constructor(data?: PartialMessage<QueryClaimableRewardsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.shareclass.v1.QueryClaimableRewardsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryClaimableRewardsResponse {
    return new QueryClaimableRewardsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryClaimableRewardsResponse {
    return new QueryClaimableRewardsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryClaimableRewardsResponse {
    return new QueryClaimableRewardsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryClaimableRewardsResponse | PlainMessage<QueryClaimableRewardsResponse> | undefined, b: QueryClaimableRewardsResponse | PlainMessage<QueryClaimableRewardsResponse> | undefined): boolean {
    return proto3.util.equals(QueryClaimableRewardsResponse, a, b);
  }
}

/**
 * QueryAddressUnbondingRequest
 *
 * @generated from message sunrise.shareclass.v1.QueryAddressUnbondingRequest
 */
export class QueryAddressUnbondingRequest extends Message<QueryAddressUnbondingRequest> {
  /**
   * cosmos.base.query.v1beta1.PageRequest pagination = 2;
   *
   * @generated from field: string address = 1;
   */
  address = "";

  constructor(data?: PartialMessage<QueryAddressUnbondingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.shareclass.v1.QueryAddressUnbondingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAddressUnbondingRequest {
    return new QueryAddressUnbondingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAddressUnbondingRequest {
    return new QueryAddressUnbondingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAddressUnbondingRequest {
    return new QueryAddressUnbondingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAddressUnbondingRequest | PlainMessage<QueryAddressUnbondingRequest> | undefined, b: QueryAddressUnbondingRequest | PlainMessage<QueryAddressUnbondingRequest> | undefined): boolean {
    return proto3.util.equals(QueryAddressUnbondingRequest, a, b);
  }
}

/**
 * QueryAddressUnbondingResponse
 *
 * @generated from message sunrise.shareclass.v1.QueryAddressUnbondingResponse
 */
export class QueryAddressUnbondingResponse extends Message<QueryAddressUnbondingResponse> {
  /**
   * cosmos.base.query.v1beta1.PageResponse pagination = 2;
   *
   * @generated from field: repeated sunrise.shareclass.v1.Unbonding unbondings = 1;
   */
  unbondings: Unbonding[] = [];

  constructor(data?: PartialMessage<QueryAddressUnbondingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.shareclass.v1.QueryAddressUnbondingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "unbondings", kind: "message", T: Unbonding, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAddressUnbondingResponse {
    return new QueryAddressUnbondingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAddressUnbondingResponse {
    return new QueryAddressUnbondingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAddressUnbondingResponse {
    return new QueryAddressUnbondingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAddressUnbondingResponse | PlainMessage<QueryAddressUnbondingResponse> | undefined, b: QueryAddressUnbondingResponse | PlainMessage<QueryAddressUnbondingResponse> | undefined): boolean {
    return proto3.util.equals(QueryAddressUnbondingResponse, a, b);
  }
}

