// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file sunrise/blob/v1/tx.proto (package sunrise.blob.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";

/**
 * MsgUpdateParams is the Msg/UpdateParams request type.
 *
 * @generated from message sunrise.blob.v1.MsgUpdateParams
 */
export class MsgUpdateParams extends Message<MsgUpdateParams> {
  /**
   * authority is the address that controls the module (defaults to x/gov unless overwritten).
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * NOTE: All parameters must be supplied.
   *
   * @generated from field: sunrise.blob.v1.Params params = 2;
   */
  params?: Params;

  constructor(data?: PartialMessage<MsgUpdateParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.blob.v1.MsgUpdateParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined, b: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParams, a, b);
  }
}

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 *
 * @generated from message sunrise.blob.v1.MsgUpdateParamsResponse
 */
export class MsgUpdateParamsResponse extends Message<MsgUpdateParamsResponse> {
  constructor(data?: PartialMessage<MsgUpdateParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.blob.v1.MsgUpdateParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined, b: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParamsResponse, a, b);
  }
}

/**
 * MsgPayForBlobs pays for the inclusion of a blob in the block.
 *
 * @generated from message sunrise.blob.v1.MsgPayForBlobs
 */
export class MsgPayForBlobs extends Message<MsgPayForBlobs> {
  /**
   * signer is the bech32 encoded signer address. See
   * https://en.bitcoin.it/wiki/Bech32.
   *
   * @generated from field: string signer = 1;
   */
  signer = "";

  /**
   * namespaces is a list of namespaces that the blobs are associated with. A
   * namespace is a byte slice of length 29 where the first byte is the
   * namespaceVersion and the subsequent 28 bytes are the namespaceId.
   *
   * @generated from field: repeated bytes namespaces = 2;
   */
  namespaces: Uint8Array[] = [];

  /**
   * blob_sizes is a list of blob sizes (one per blob). Each size is in bytes.
   *
   * @generated from field: repeated uint32 blob_sizes = 3;
   */
  blobSizes: number[] = [];

  /**
   * share_commitments is a list of share commitments (one per blob).
   *
   * @generated from field: repeated bytes share_commitments = 4;
   */
  shareCommitments: Uint8Array[] = [];

  /**
   * share_versions are the versions of the share format that the blobs
   * associated with this message should use when included in a block. The
   * share_versions specified must match the share_versions used to generate the
   * share_commitment in this message.
   *
   * @generated from field: repeated uint32 share_versions = 8;
   */
  shareVersions: number[] = [];

  constructor(data?: PartialMessage<MsgPayForBlobs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.blob.v1.MsgPayForBlobs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespaces", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
    { no: 3, name: "blob_sizes", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true },
    { no: 4, name: "share_commitments", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
    { no: 8, name: "share_versions", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgPayForBlobs {
    return new MsgPayForBlobs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgPayForBlobs {
    return new MsgPayForBlobs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgPayForBlobs {
    return new MsgPayForBlobs().fromJsonString(jsonString, options);
  }

  static equals(a: MsgPayForBlobs | PlainMessage<MsgPayForBlobs> | undefined, b: MsgPayForBlobs | PlainMessage<MsgPayForBlobs> | undefined): boolean {
    return proto3.util.equals(MsgPayForBlobs, a, b);
  }
}

/**
 * MsgPayForBlobsResponse describes the response returned after the submission of a PayForBlobs
 *
 * @generated from message sunrise.blob.v1.MsgPayForBlobsResponse
 */
export class MsgPayForBlobsResponse extends Message<MsgPayForBlobsResponse> {
  constructor(data?: PartialMessage<MsgPayForBlobsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.blob.v1.MsgPayForBlobsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgPayForBlobsResponse {
    return new MsgPayForBlobsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgPayForBlobsResponse {
    return new MsgPayForBlobsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgPayForBlobsResponse {
    return new MsgPayForBlobsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgPayForBlobsResponse | PlainMessage<MsgPayForBlobsResponse> | undefined, b: MsgPayForBlobsResponse | PlainMessage<MsgPayForBlobsResponse> | undefined): boolean {
    return proto3.util.equals(MsgPayForBlobsResponse, a, b);
  }
}

