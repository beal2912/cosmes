// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file sunrise/blob/v1/event.proto (package sunrise.blob.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * EventPayForBlobs defines an event that is emitted after a pay for blob has
 * been processed.
 *
 * @generated from message sunrise.blob.v1.EventPayForBlobs
 */
export class EventPayForBlobs extends Message<EventPayForBlobs> {
  /**
   * @generated from field: string signer = 1;
   */
  signer = "";

  /**
   * @generated from field: repeated uint32 blob_sizes = 2;
   */
  blobSizes: number[] = [];

  /**
   * namespaces is a list of namespaces that the blobs in blob_sizes belong to.
   * A namespace has length of 29 bytes where the first byte is the
   * namespaceVersion and the subsequent 28 bytes are the namespaceID.
   *
   * @generated from field: repeated bytes namespaces = 3;
   */
  namespaces: Uint8Array[] = [];

  constructor(data?: PartialMessage<EventPayForBlobs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.blob.v1.EventPayForBlobs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "blob_sizes", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true },
    { no: 3, name: "namespaces", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventPayForBlobs {
    return new EventPayForBlobs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventPayForBlobs {
    return new EventPayForBlobs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventPayForBlobs {
    return new EventPayForBlobs().fromJsonString(jsonString, options);
  }

  static equals(a: EventPayForBlobs | PlainMessage<EventPayForBlobs> | undefined, b: EventPayForBlobs | PlainMessage<EventPayForBlobs> | undefined): boolean {
    return proto3.util.equals(EventPayForBlobs, a, b);
  }
}

