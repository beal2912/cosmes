// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file sunrise/lockup/v1/query.proto (package sunrise.lockup.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { LockupAccount } from "./lockup_account_pb.js";

/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from message sunrise.lockup.v1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.lockup.v1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from message sunrise.lockup.v1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: sunrise.lockup.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.lockup.v1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * QueryLockupAccountsRequest is request type for the Query/LockupAccounts RPC method.
 *
 * @generated from message sunrise.lockup.v1.QueryLockupAccountsRequest
 */
export class QueryLockupAccountsRequest extends Message<QueryLockupAccountsRequest> {
  /**
   * @generated from field: string owner = 1;
   */
  owner = "";

  constructor(data?: PartialMessage<QueryLockupAccountsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.lockup.v1.QueryLockupAccountsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLockupAccountsRequest {
    return new QueryLockupAccountsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLockupAccountsRequest {
    return new QueryLockupAccountsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLockupAccountsRequest {
    return new QueryLockupAccountsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLockupAccountsRequest | PlainMessage<QueryLockupAccountsRequest> | undefined, b: QueryLockupAccountsRequest | PlainMessage<QueryLockupAccountsRequest> | undefined): boolean {
    return proto3.util.equals(QueryLockupAccountsRequest, a, b);
  }
}

/**
 * QueryLockupAccountsResponse is response type for the Query/LockupAccounts RPC method.
 *
 * @generated from message sunrise.lockup.v1.QueryLockupAccountsResponse
 */
export class QueryLockupAccountsResponse extends Message<QueryLockupAccountsResponse> {
  /**
   * @generated from field: repeated sunrise.lockup.v1.LockupAccount lockup_accounts = 1;
   */
  lockupAccounts: LockupAccount[] = [];

  constructor(data?: PartialMessage<QueryLockupAccountsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.lockup.v1.QueryLockupAccountsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lockup_accounts", kind: "message", T: LockupAccount, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLockupAccountsResponse {
    return new QueryLockupAccountsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLockupAccountsResponse {
    return new QueryLockupAccountsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLockupAccountsResponse {
    return new QueryLockupAccountsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLockupAccountsResponse | PlainMessage<QueryLockupAccountsResponse> | undefined, b: QueryLockupAccountsResponse | PlainMessage<QueryLockupAccountsResponse> | undefined): boolean {
    return proto3.util.equals(QueryLockupAccountsResponse, a, b);
  }
}

/**
 * QueryLockupAccountRequest is request type for the Query/LockupAccount RPC method.
 *
 * @generated from message sunrise.lockup.v1.QueryLockupAccountRequest
 */
export class QueryLockupAccountRequest extends Message<QueryLockupAccountRequest> {
  /**
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<QueryLockupAccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.lockup.v1.QueryLockupAccountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLockupAccountRequest {
    return new QueryLockupAccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLockupAccountRequest {
    return new QueryLockupAccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLockupAccountRequest {
    return new QueryLockupAccountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLockupAccountRequest | PlainMessage<QueryLockupAccountRequest> | undefined, b: QueryLockupAccountRequest | PlainMessage<QueryLockupAccountRequest> | undefined): boolean {
    return proto3.util.equals(QueryLockupAccountRequest, a, b);
  }
}

/**
 * QueryLockupAccountResponse is response type for the Query/LockupAccount RPC method.
 *
 * @generated from message sunrise.lockup.v1.QueryLockupAccountResponse
 */
export class QueryLockupAccountResponse extends Message<QueryLockupAccountResponse> {
  /**
   * @generated from field: sunrise.lockup.v1.LockupAccount lockup_account = 1;
   */
  lockupAccount?: LockupAccount;

  /**
   * @generated from field: string locked_amount = 2;
   */
  lockedAmount = "";

  /**
   * @generated from field: string unlocked_amount = 3;
   */
  unlockedAmount = "";

  constructor(data?: PartialMessage<QueryLockupAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.lockup.v1.QueryLockupAccountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lockup_account", kind: "message", T: LockupAccount },
    { no: 2, name: "locked_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "unlocked_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLockupAccountResponse {
    return new QueryLockupAccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLockupAccountResponse {
    return new QueryLockupAccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLockupAccountResponse {
    return new QueryLockupAccountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLockupAccountResponse | PlainMessage<QueryLockupAccountResponse> | undefined, b: QueryLockupAccountResponse | PlainMessage<QueryLockupAccountResponse> | undefined): boolean {
    return proto3.util.equals(QueryLockupAccountResponse, a, b);
  }
}

/**
 * QuerySpendableAmountRequest is request type for the Query/SpendableAmount RPC method.
 *
 * @generated from message sunrise.lockup.v1.QuerySpendableAmountRequest
 */
export class QuerySpendableAmountRequest extends Message<QuerySpendableAmountRequest> {
  /**
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<QuerySpendableAmountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.lockup.v1.QuerySpendableAmountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuerySpendableAmountRequest {
    return new QuerySpendableAmountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuerySpendableAmountRequest {
    return new QuerySpendableAmountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuerySpendableAmountRequest {
    return new QuerySpendableAmountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QuerySpendableAmountRequest | PlainMessage<QuerySpendableAmountRequest> | undefined, b: QuerySpendableAmountRequest | PlainMessage<QuerySpendableAmountRequest> | undefined): boolean {
    return proto3.util.equals(QuerySpendableAmountRequest, a, b);
  }
}

/**
 * QuerySpendableAmountResponse is response type for the Query/SpendableAmount RPC method.
 *
 * @generated from message sunrise.lockup.v1.QuerySpendableAmountResponse
 */
export class QuerySpendableAmountResponse extends Message<QuerySpendableAmountResponse> {
  /**
   * @generated from field: string spendable_amount = 1;
   */
  spendableAmount = "";

  constructor(data?: PartialMessage<QuerySpendableAmountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.lockup.v1.QuerySpendableAmountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "spendable_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuerySpendableAmountResponse {
    return new QuerySpendableAmountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuerySpendableAmountResponse {
    return new QuerySpendableAmountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuerySpendableAmountResponse {
    return new QuerySpendableAmountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QuerySpendableAmountResponse | PlainMessage<QuerySpendableAmountResponse> | undefined, b: QuerySpendableAmountResponse | PlainMessage<QuerySpendableAmountResponse> | undefined): boolean {
    return proto3.util.equals(QuerySpendableAmountResponse, a, b);
  }
}

