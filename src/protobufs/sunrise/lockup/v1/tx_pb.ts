// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file sunrise/lockup/v1/tx.proto (package sunrise.lockup.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * MsgUpdateParams is the Msg/UpdateParams request type.
 *
 * @generated from message sunrise.lockup.v1.MsgUpdateParams
 */
export class MsgUpdateParams extends Message<MsgUpdateParams> {
  /**
   * authority is the address that controls the module (defaults to x/gov unless overwritten).
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * NOTE: All parameters must be supplied.
   *
   * @generated from field: sunrise.lockup.v1.Params params = 2;
   */
  params?: Params;

  constructor(data?: PartialMessage<MsgUpdateParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.lockup.v1.MsgUpdateParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined, b: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParams, a, b);
  }
}

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 *
 * @generated from message sunrise.lockup.v1.MsgUpdateParamsResponse
 */
export class MsgUpdateParamsResponse extends Message<MsgUpdateParamsResponse> {
  constructor(data?: PartialMessage<MsgUpdateParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.lockup.v1.MsgUpdateParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined, b: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParamsResponse, a, b);
  }
}

/**
 * MsgInitLockupAccount
 *
 * @generated from message sunrise.lockup.v1.MsgInitLockupAccount
 */
export class MsgInitLockupAccount extends Message<MsgInitLockupAccount> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string owner = 2;
   */
  owner = "";

  /**
   * start of lockup as unix time (in seconds).
   *
   * @generated from field: int64 start_time = 3;
   */
  startTime = protoInt64.zero;

  /**
   * end of lockup as unix time (in seconds).
   *
   * @generated from field: int64 end_time = 4;
   */
  endTime = protoInt64.zero;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 5;
   */
  amount?: Coin;

  constructor(data?: PartialMessage<MsgInitLockupAccount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.lockup.v1.MsgInitLockupAccount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "start_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "end_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgInitLockupAccount {
    return new MsgInitLockupAccount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgInitLockupAccount {
    return new MsgInitLockupAccount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgInitLockupAccount {
    return new MsgInitLockupAccount().fromJsonString(jsonString, options);
  }

  static equals(a: MsgInitLockupAccount | PlainMessage<MsgInitLockupAccount> | undefined, b: MsgInitLockupAccount | PlainMessage<MsgInitLockupAccount> | undefined): boolean {
    return proto3.util.equals(MsgInitLockupAccount, a, b);
  }
}

/**
 * MsgInitLockupAccountResponse
 *
 * @generated from message sunrise.lockup.v1.MsgInitLockupAccountResponse
 */
export class MsgInitLockupAccountResponse extends Message<MsgInitLockupAccountResponse> {
  constructor(data?: PartialMessage<MsgInitLockupAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.lockup.v1.MsgInitLockupAccountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgInitLockupAccountResponse {
    return new MsgInitLockupAccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgInitLockupAccountResponse {
    return new MsgInitLockupAccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgInitLockupAccountResponse {
    return new MsgInitLockupAccountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgInitLockupAccountResponse | PlainMessage<MsgInitLockupAccountResponse> | undefined, b: MsgInitLockupAccountResponse | PlainMessage<MsgInitLockupAccountResponse> | undefined): boolean {
    return proto3.util.equals(MsgInitLockupAccountResponse, a, b);
  }
}

/**
 * MsgNonVotingDelegate
 *
 * @generated from message sunrise.lockup.v1.MsgNonVotingDelegate
 */
export class MsgNonVotingDelegate extends Message<MsgNonVotingDelegate> {
  /**
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * @generated from field: uint64 lockup_account_id = 2;
   */
  lockupAccountId = protoInt64.zero;

  /**
   * @generated from field: string validator_address = 3;
   */
  validatorAddress = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 4;
   */
  amount?: Coin;

  constructor(data?: PartialMessage<MsgNonVotingDelegate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.lockup.v1.MsgNonVotingDelegate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "lockup_account_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgNonVotingDelegate {
    return new MsgNonVotingDelegate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgNonVotingDelegate {
    return new MsgNonVotingDelegate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgNonVotingDelegate {
    return new MsgNonVotingDelegate().fromJsonString(jsonString, options);
  }

  static equals(a: MsgNonVotingDelegate | PlainMessage<MsgNonVotingDelegate> | undefined, b: MsgNonVotingDelegate | PlainMessage<MsgNonVotingDelegate> | undefined): boolean {
    return proto3.util.equals(MsgNonVotingDelegate, a, b);
  }
}

/**
 * MsgNonVotingDelegateResponse
 *
 * @generated from message sunrise.lockup.v1.MsgNonVotingDelegateResponse
 */
export class MsgNonVotingDelegateResponse extends Message<MsgNonVotingDelegateResponse> {
  constructor(data?: PartialMessage<MsgNonVotingDelegateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.lockup.v1.MsgNonVotingDelegateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgNonVotingDelegateResponse {
    return new MsgNonVotingDelegateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgNonVotingDelegateResponse {
    return new MsgNonVotingDelegateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgNonVotingDelegateResponse {
    return new MsgNonVotingDelegateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgNonVotingDelegateResponse | PlainMessage<MsgNonVotingDelegateResponse> | undefined, b: MsgNonVotingDelegateResponse | PlainMessage<MsgNonVotingDelegateResponse> | undefined): boolean {
    return proto3.util.equals(MsgNonVotingDelegateResponse, a, b);
  }
}

/**
 * MsgNonVotingUndelegate
 *
 * @generated from message sunrise.lockup.v1.MsgNonVotingUndelegate
 */
export class MsgNonVotingUndelegate extends Message<MsgNonVotingUndelegate> {
  /**
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * @generated from field: uint64 lockup_account_id = 2;
   */
  lockupAccountId = protoInt64.zero;

  /**
   * @generated from field: string validator_address = 3;
   */
  validatorAddress = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 4;
   */
  amount?: Coin;

  constructor(data?: PartialMessage<MsgNonVotingUndelegate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.lockup.v1.MsgNonVotingUndelegate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "lockup_account_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgNonVotingUndelegate {
    return new MsgNonVotingUndelegate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgNonVotingUndelegate {
    return new MsgNonVotingUndelegate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgNonVotingUndelegate {
    return new MsgNonVotingUndelegate().fromJsonString(jsonString, options);
  }

  static equals(a: MsgNonVotingUndelegate | PlainMessage<MsgNonVotingUndelegate> | undefined, b: MsgNonVotingUndelegate | PlainMessage<MsgNonVotingUndelegate> | undefined): boolean {
    return proto3.util.equals(MsgNonVotingUndelegate, a, b);
  }
}

/**
 * MsgNonVotingUndelegateResponse
 *
 * @generated from message sunrise.lockup.v1.MsgNonVotingUndelegateResponse
 */
export class MsgNonVotingUndelegateResponse extends Message<MsgNonVotingUndelegateResponse> {
  constructor(data?: PartialMessage<MsgNonVotingUndelegateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.lockup.v1.MsgNonVotingUndelegateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgNonVotingUndelegateResponse {
    return new MsgNonVotingUndelegateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgNonVotingUndelegateResponse {
    return new MsgNonVotingUndelegateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgNonVotingUndelegateResponse {
    return new MsgNonVotingUndelegateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgNonVotingUndelegateResponse | PlainMessage<MsgNonVotingUndelegateResponse> | undefined, b: MsgNonVotingUndelegateResponse | PlainMessage<MsgNonVotingUndelegateResponse> | undefined): boolean {
    return proto3.util.equals(MsgNonVotingUndelegateResponse, a, b);
  }
}

/**
 * MsgClaimRewards
 *
 * @generated from message sunrise.lockup.v1.MsgClaimRewards
 */
export class MsgClaimRewards extends Message<MsgClaimRewards> {
  /**
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * @generated from field: uint64 lockup_account_id = 2;
   */
  lockupAccountId = protoInt64.zero;

  /**
   * @generated from field: string validator_address = 3;
   */
  validatorAddress = "";

  constructor(data?: PartialMessage<MsgClaimRewards>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.lockup.v1.MsgClaimRewards";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "lockup_account_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgClaimRewards {
    return new MsgClaimRewards().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgClaimRewards {
    return new MsgClaimRewards().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgClaimRewards {
    return new MsgClaimRewards().fromJsonString(jsonString, options);
  }

  static equals(a: MsgClaimRewards | PlainMessage<MsgClaimRewards> | undefined, b: MsgClaimRewards | PlainMessage<MsgClaimRewards> | undefined): boolean {
    return proto3.util.equals(MsgClaimRewards, a, b);
  }
}

/**
 * MsgClaimRewardsResponse
 *
 * @generated from message sunrise.lockup.v1.MsgClaimRewardsResponse
 */
export class MsgClaimRewardsResponse extends Message<MsgClaimRewardsResponse> {
  constructor(data?: PartialMessage<MsgClaimRewardsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.lockup.v1.MsgClaimRewardsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgClaimRewardsResponse {
    return new MsgClaimRewardsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgClaimRewardsResponse {
    return new MsgClaimRewardsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgClaimRewardsResponse {
    return new MsgClaimRewardsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgClaimRewardsResponse | PlainMessage<MsgClaimRewardsResponse> | undefined, b: MsgClaimRewardsResponse | PlainMessage<MsgClaimRewardsResponse> | undefined): boolean {
    return proto3.util.equals(MsgClaimRewardsResponse, a, b);
  }
}

/**
 * MsgSend
 *
 * @generated from message sunrise.lockup.v1.MsgSend
 */
export class MsgSend extends Message<MsgSend> {
  /**
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * @generated from field: uint64 lockup_account_id = 2;
   */
  lockupAccountId = protoInt64.zero;

  /**
   * @generated from field: string recipient = 3;
   */
  recipient = "";

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 4;
   */
  amount: Coin[] = [];

  constructor(data?: PartialMessage<MsgSend>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.lockup.v1.MsgSend";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "lockup_account_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "recipient", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "amount", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSend {
    return new MsgSend().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSend {
    return new MsgSend().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSend {
    return new MsgSend().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSend | PlainMessage<MsgSend> | undefined, b: MsgSend | PlainMessage<MsgSend> | undefined): boolean {
    return proto3.util.equals(MsgSend, a, b);
  }
}

/**
 * MsgSendResponse
 *
 * @generated from message sunrise.lockup.v1.MsgSendResponse
 */
export class MsgSendResponse extends Message<MsgSendResponse> {
  constructor(data?: PartialMessage<MsgSendResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.lockup.v1.MsgSendResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSendResponse {
    return new MsgSendResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSendResponse {
    return new MsgSendResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSendResponse {
    return new MsgSendResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSendResponse | PlainMessage<MsgSendResponse> | undefined, b: MsgSendResponse | PlainMessage<MsgSendResponse> | undefined): boolean {
    return proto3.util.equals(MsgSendResponse, a, b);
  }
}

