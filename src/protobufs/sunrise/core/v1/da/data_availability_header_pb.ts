// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file sunrise/core/v1/da/data_availability_header.proto (package sunrise.core.v1.da, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * DataAvailabilityHeader contains the row and column roots of the erasure
 * coded version of the data in Block.Data.
 * Therefore the original Block.Data is arranged in a
 * k × k matrix, which is then "extended" to a
 * 2k × 2k matrix applying multiple times Reed-Solomon encoding.
 * For details see Section 5.2: https://arxiv.org/abs/1809.09044
 * or the Celestia specification:
 * https://github.com/celestiaorg/celestia-specs/blob/master/src/specs/data_structures.md#availabledataheader
 * Note that currently we list row and column roots in separate fields
 * (different from the spec).
 *
 * @generated from message sunrise.core.v1.da.DataAvailabilityHeader
 */
export class DataAvailabilityHeader extends Message<DataAvailabilityHeader> {
  /**
   * RowRoot_j 	= root((M_{j,1} || M_{j,2} || ... || M_{j,2k} ))
   *
   * @generated from field: repeated bytes row_roots = 1;
   */
  rowRoots: Uint8Array[] = [];

  /**
   * ColumnRoot_j = root((M_{1,j} || M_{2,j} || ... || M_{2k,j} ))
   *
   * @generated from field: repeated bytes column_roots = 2;
   */
  columnRoots: Uint8Array[] = [];

  constructor(data?: PartialMessage<DataAvailabilityHeader>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.core.v1.da.DataAvailabilityHeader";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "row_roots", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
    { no: 2, name: "column_roots", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataAvailabilityHeader {
    return new DataAvailabilityHeader().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataAvailabilityHeader {
    return new DataAvailabilityHeader().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataAvailabilityHeader {
    return new DataAvailabilityHeader().fromJsonString(jsonString, options);
  }

  static equals(a: DataAvailabilityHeader | PlainMessage<DataAvailabilityHeader> | undefined, b: DataAvailabilityHeader | PlainMessage<DataAvailabilityHeader> | undefined): boolean {
    return proto3.util.equals(DataAvailabilityHeader, a, b);
  }
}

