// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file sunrise/core/v1/proof/proof.proto (package sunrise.core.v1.proof, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Proof } from "../../../../tendermint/crypto/proof_pb.js";

/**
 * ShareProof is an NMT proof that a set of shares exist in a set of rows and a
 * Merkle proof that those rows exist in a Merkle tree with a given data root.
 *
 * @generated from message sunrise.core.v1.proof.ShareProof
 */
export class ShareProof extends Message<ShareProof> {
  /**
   * @generated from field: repeated bytes data = 1;
   */
  data: Uint8Array[] = [];

  /**
   * @generated from field: repeated sunrise.core.v1.proof.NMTProof share_proofs = 2;
   */
  shareProofs: NMTProof[] = [];

  /**
   * @generated from field: bytes namespace_id = 3;
   */
  namespaceId = new Uint8Array(0);

  /**
   * @generated from field: sunrise.core.v1.proof.RowProof row_proof = 4;
   */
  rowProof?: RowProof;

  /**
   * @generated from field: uint32 namespace_version = 5;
   */
  namespaceVersion = 0;

  constructor(data?: PartialMessage<ShareProof>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.core.v1.proof.ShareProof";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
    { no: 2, name: "share_proofs", kind: "message", T: NMTProof, repeated: true },
    { no: 3, name: "namespace_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "row_proof", kind: "message", T: RowProof },
    { no: 5, name: "namespace_version", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ShareProof {
    return new ShareProof().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ShareProof {
    return new ShareProof().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ShareProof {
    return new ShareProof().fromJsonString(jsonString, options);
  }

  static equals(a: ShareProof | PlainMessage<ShareProof> | undefined, b: ShareProof | PlainMessage<ShareProof> | undefined): boolean {
    return proto3.util.equals(ShareProof, a, b);
  }
}

/**
 * RowProof is a Merkle proof that a set of rows exist in a Merkle tree with a
 * given data root.
 *
 * @generated from message sunrise.core.v1.proof.RowProof
 */
export class RowProof extends Message<RowProof> {
  /**
   * @generated from field: repeated bytes row_roots = 1;
   */
  rowRoots: Uint8Array[] = [];

  /**
   * @generated from field: repeated tendermint.crypto.Proof proofs = 2;
   */
  proofs: Proof[] = [];

  /**
   * @generated from field: bytes root = 3;
   */
  root = new Uint8Array(0);

  /**
   * @generated from field: uint32 start_row = 4;
   */
  startRow = 0;

  /**
   * @generated from field: uint32 end_row = 5;
   */
  endRow = 0;

  constructor(data?: PartialMessage<RowProof>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.core.v1.proof.RowProof";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "row_roots", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
    { no: 2, name: "proofs", kind: "message", T: Proof, repeated: true },
    { no: 3, name: "root", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "start_row", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "end_row", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RowProof {
    return new RowProof().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RowProof {
    return new RowProof().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RowProof {
    return new RowProof().fromJsonString(jsonString, options);
  }

  static equals(a: RowProof | PlainMessage<RowProof> | undefined, b: RowProof | PlainMessage<RowProof> | undefined): boolean {
    return proto3.util.equals(RowProof, a, b);
  }
}

/**
 * NMTProof is a proof of a namespace.ID in an NMT.
 * In case this proof proves the absence of a namespace.ID
 * in a tree it also contains the leaf hashes of the range
 * where that namespace would be.
 *
 * @generated from message sunrise.core.v1.proof.NMTProof
 */
export class NMTProof extends Message<NMTProof> {
  /**
   * Start index of this proof.
   *
   * @generated from field: int32 start = 1;
   */
  start = 0;

  /**
   * End index of this proof.
   *
   * @generated from field: int32 end = 2;
   */
  end = 0;

  /**
   * Nodes that together with the corresponding leaf values can be used to
   * recompute the root and verify this proof. Nodes should consist of the max
   * and min namespaces along with the actual hash, resulting in each being 48
   * bytes each
   *
   * @generated from field: repeated bytes nodes = 3;
   */
  nodes: Uint8Array[] = [];

  /**
   * leafHash are nil if the namespace is present in the NMT. In case the
   * namespace to be proved is in the min/max range of the tree but absent, this
   * will contain the leaf hash necessary to verify the proof of absence. Leaf
   * hashes should consist of the namespace along with the actual hash,
   * resulting 40 bytes total.
   *
   * @generated from field: bytes leaf_hash = 4;
   */
  leafHash = new Uint8Array(0);

  constructor(data?: PartialMessage<NMTProof>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.core.v1.proof.NMTProof";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "end", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "nodes", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
    { no: 4, name: "leaf_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NMTProof {
    return new NMTProof().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NMTProof {
    return new NMTProof().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NMTProof {
    return new NMTProof().fromJsonString(jsonString, options);
  }

  static equals(a: NMTProof | PlainMessage<NMTProof> | undefined, b: NMTProof | PlainMessage<NMTProof> | undefined): boolean {
    return proto3.util.equals(NMTProof, a, b);
  }
}

