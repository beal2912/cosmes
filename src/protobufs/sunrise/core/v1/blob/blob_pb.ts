// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file sunrise/core/v1/blob/blob.proto (package sunrise.core.v1.blob, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Blob (named after binary large object) is a chunk of data submitted by a user
 * to be published to the Celestia blockchain. The data of a Blob is published
 * to a namespace and is encoded into shares based on the format specified by
 * share_version.
 *
 * @generated from message sunrise.core.v1.blob.Blob
 */
export class Blob extends Message<Blob> {
  /**
   * @generated from field: bytes namespace_id = 1;
   */
  namespaceId = new Uint8Array(0);

  /**
   * @generated from field: bytes data = 2;
   */
  data = new Uint8Array(0);

  /**
   * @generated from field: uint32 share_version = 3;
   */
  shareVersion = 0;

  /**
   * @generated from field: uint32 namespace_version = 4;
   */
  namespaceVersion = 0;

  constructor(data?: PartialMessage<Blob>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.core.v1.blob.Blob";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "namespace_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "share_version", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "namespace_version", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Blob {
    return new Blob().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Blob {
    return new Blob().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Blob {
    return new Blob().fromJsonString(jsonString, options);
  }

  static equals(a: Blob | PlainMessage<Blob> | undefined, b: Blob | PlainMessage<Blob> | undefined): boolean {
    return proto3.util.equals(Blob, a, b);
  }
}

/**
 * BlobTx wraps an encoded sdk.Tx with a second field to contain blobs of data.
 * The raw bytes of the blobs are not signed over, instead we verify each blob
 * using the relevant MsgPayForBlobs that is signed over in the encoded sdk.Tx.
 *
 * @generated from message sunrise.core.v1.blob.BlobTx
 */
export class BlobTx extends Message<BlobTx> {
  /**
   * @generated from field: bytes tx = 1;
   */
  tx = new Uint8Array(0);

  /**
   * @generated from field: repeated sunrise.core.v1.blob.Blob blobs = 2;
   */
  blobs: Blob[] = [];

  /**
   * @generated from field: string type_id = 3;
   */
  typeId = "";

  constructor(data?: PartialMessage<BlobTx>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sunrise.core.v1.blob.BlobTx";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tx", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "blobs", kind: "message", T: Blob, repeated: true },
    { no: 3, name: "type_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlobTx {
    return new BlobTx().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlobTx {
    return new BlobTx().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlobTx {
    return new BlobTx().fromJsonString(jsonString, options);
  }

  static equals(a: BlobTx | PlainMessage<BlobTx> | undefined, b: BlobTx | PlainMessage<BlobTx> | undefined): boolean {
    return proto3.util.equals(BlobTx, a, b);
  }
}

