// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file elys/tier/userdata.proto (package elys.tier, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum elys.tier.MembershipTierType
 */
export enum MembershipTierType {
  /**
   * @generated from enum value: BASIC = 0;
   */
  BASIC = 0,

  /**
   * @generated from enum value: BRONZE = 1;
   */
  BRONZE = 1,

  /**
   * @generated from enum value: SILVER = 2;
   */
  SILVER = 2,

  /**
   * @generated from enum value: GOLD = 3;
   */
  GOLD = 3,

  /**
   * @generated from enum value: PLATINUM = 4;
   */
  PLATINUM = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(MembershipTierType)
proto3.util.setEnumType(MembershipTierType, "elys.tier.MembershipTierType", [
  { no: 0, name: "BASIC" },
  { no: 1, name: "BRONZE" },
  { no: 2, name: "SILVER" },
  { no: 3, name: "GOLD" },
  { no: 4, name: "PLATINUM" },
]);

/**
 * @generated from message elys.tier.UserData
 */
export class UserData extends Message<UserData> {
  /**
   * @generated from field: string user = 1;
   */
  user = "";

  /**
   * @generated from field: repeated elys.tier.Pool pools = 2;
   */
  pools: Pool[] = [];

  constructor(data?: PartialMessage<UserData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.tier.UserData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pools", kind: "message", T: Pool, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserData {
    return new UserData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserData {
    return new UserData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserData {
    return new UserData().fromJsonString(jsonString, options);
  }

  static equals(a: UserData | PlainMessage<UserData> | undefined, b: UserData | PlainMessage<UserData> | undefined): boolean {
    return proto3.util.equals(UserData, a, b);
  }
}

/**
 * @generated from message elys.tier.Pool
 */
export class Pool extends Message<Pool> {
  /**
   * @generated from field: string pool_id = 1;
   */
  poolId = "";

  /**
   * @generated from field: string pool = 2;
   */
  pool = "";

  /**
   * @generated from field: string fiat_value = 3;
   */
  fiatValue = "";

  /**
   * @generated from field: string amount = 4;
   */
  amount = "";

  constructor(data?: PartialMessage<Pool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.tier.Pool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pool", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "fiat_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pool {
    return new Pool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pool {
    return new Pool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pool {
    return new Pool().fromJsonString(jsonString, options);
  }

  static equals(a: Pool | PlainMessage<Pool> | undefined, b: Pool | PlainMessage<Pool> | undefined): boolean {
    return proto3.util.equals(Pool, a, b);
  }
}

/**
 * @generated from message elys.tier.MembershipTier
 */
export class MembershipTier extends Message<MembershipTier> {
  /**
   * @generated from field: string minimum_portfolio = 1;
   */
  minimumPortfolio = "";

  /**
   * @generated from field: elys.tier.MembershipTierType membership = 2;
   */
  membership = MembershipTierType.BASIC;

  /**
   * @generated from field: string discount = 3;
   */
  discount = "";

  constructor(data?: PartialMessage<MembershipTier>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.tier.MembershipTier";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "minimum_portfolio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "membership", kind: "enum", T: proto3.getEnumType(MembershipTierType) },
    { no: 3, name: "discount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MembershipTier {
    return new MembershipTier().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MembershipTier {
    return new MembershipTier().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MembershipTier {
    return new MembershipTier().fromJsonString(jsonString, options);
  }

  static equals(a: MembershipTier | PlainMessage<MembershipTier> | undefined, b: MembershipTier | PlainMessage<MembershipTier> | undefined): boolean {
    return proto3.util.equals(MembershipTier, a, b);
  }
}

