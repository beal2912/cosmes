// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file elys/tier/query.proto (package elys.tier, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { PageRequest, PageResponse } from "../../cosmos/base/query/v1beta1/pagination_pb.js";
import { Portfolio } from "./portfolio_pb.js";

/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from message elys.tier.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.tier.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from message elys.tier.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: elys.tier.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.tier.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * @generated from message elys.tier.QueryGetPortfolioRequest
 */
export class QueryGetPortfolioRequest extends Message<QueryGetPortfolioRequest> {
  /**
   * @generated from field: string user = 1;
   */
  user = "";

  /**
   * @generated from field: string assetType = 2;
   */
  assetType = "";

  constructor(data?: PartialMessage<QueryGetPortfolioRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.tier.QueryGetPortfolioRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "assetType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetPortfolioRequest {
    return new QueryGetPortfolioRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetPortfolioRequest {
    return new QueryGetPortfolioRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetPortfolioRequest {
    return new QueryGetPortfolioRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetPortfolioRequest | PlainMessage<QueryGetPortfolioRequest> | undefined, b: QueryGetPortfolioRequest | PlainMessage<QueryGetPortfolioRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetPortfolioRequest, a, b);
  }
}

/**
 * @generated from message elys.tier.QueryGetPortfolioResponse
 */
export class QueryGetPortfolioResponse extends Message<QueryGetPortfolioResponse> {
  /**
   * @generated from field: string total_portfolio = 1;
   */
  totalPortfolio = "";

  constructor(data?: PartialMessage<QueryGetPortfolioResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.tier.QueryGetPortfolioResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total_portfolio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetPortfolioResponse {
    return new QueryGetPortfolioResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetPortfolioResponse {
    return new QueryGetPortfolioResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetPortfolioResponse {
    return new QueryGetPortfolioResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetPortfolioResponse | PlainMessage<QueryGetPortfolioResponse> | undefined, b: QueryGetPortfolioResponse | PlainMessage<QueryGetPortfolioResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetPortfolioResponse, a, b);
  }
}

/**
 * @generated from message elys.tier.QueryAllPortfolioRequest
 */
export class QueryAllPortfolioRequest extends Message<QueryAllPortfolioRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryAllPortfolioRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.tier.QueryAllPortfolioRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllPortfolioRequest {
    return new QueryAllPortfolioRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllPortfolioRequest {
    return new QueryAllPortfolioRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllPortfolioRequest {
    return new QueryAllPortfolioRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllPortfolioRequest | PlainMessage<QueryAllPortfolioRequest> | undefined, b: QueryAllPortfolioRequest | PlainMessage<QueryAllPortfolioRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllPortfolioRequest, a, b);
  }
}

/**
 * @generated from message elys.tier.QueryAllPortfolioResponse
 */
export class QueryAllPortfolioResponse extends Message<QueryAllPortfolioResponse> {
  /**
   * @generated from field: repeated elys.tier.Portfolio portfolio = 1;
   */
  portfolio: Portfolio[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryAllPortfolioResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.tier.QueryAllPortfolioResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "portfolio", kind: "message", T: Portfolio, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllPortfolioResponse {
    return new QueryAllPortfolioResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllPortfolioResponse {
    return new QueryAllPortfolioResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllPortfolioResponse {
    return new QueryAllPortfolioResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllPortfolioResponse | PlainMessage<QueryAllPortfolioResponse> | undefined, b: QueryAllPortfolioResponse | PlainMessage<QueryAllPortfolioResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllPortfolioResponse, a, b);
  }
}

/**
 * @generated from message elys.tier.QueryCalculateDiscountRequest
 */
export class QueryCalculateDiscountRequest extends Message<QueryCalculateDiscountRequest> {
  /**
   * @generated from field: string user = 1;
   */
  user = "";

  constructor(data?: PartialMessage<QueryCalculateDiscountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.tier.QueryCalculateDiscountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCalculateDiscountRequest {
    return new QueryCalculateDiscountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCalculateDiscountRequest {
    return new QueryCalculateDiscountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCalculateDiscountRequest {
    return new QueryCalculateDiscountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCalculateDiscountRequest | PlainMessage<QueryCalculateDiscountRequest> | undefined, b: QueryCalculateDiscountRequest | PlainMessage<QueryCalculateDiscountRequest> | undefined): boolean {
    return proto3.util.equals(QueryCalculateDiscountRequest, a, b);
  }
}

/**
 * @generated from message elys.tier.QueryCalculateDiscountResponse
 */
export class QueryCalculateDiscountResponse extends Message<QueryCalculateDiscountResponse> {
  /**
   * @generated from field: string discount = 1;
   */
  discount = "";

  /**
   * @generated from field: string tier = 2;
   */
  tier = "";

  /**
   * @generated from field: string portfolio = 3;
   */
  portfolio = "";

  constructor(data?: PartialMessage<QueryCalculateDiscountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.tier.QueryCalculateDiscountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "discount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "portfolio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCalculateDiscountResponse {
    return new QueryCalculateDiscountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCalculateDiscountResponse {
    return new QueryCalculateDiscountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCalculateDiscountResponse {
    return new QueryCalculateDiscountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCalculateDiscountResponse | PlainMessage<QueryCalculateDiscountResponse> | undefined, b: QueryCalculateDiscountResponse | PlainMessage<QueryCalculateDiscountResponse> | undefined): boolean {
    return proto3.util.equals(QueryCalculateDiscountResponse, a, b);
  }
}

/**
 * @generated from message elys.tier.QueryLeverageLpTotalRequest
 */
export class QueryLeverageLpTotalRequest extends Message<QueryLeverageLpTotalRequest> {
  /**
   * @generated from field: string user = 1;
   */
  user = "";

  constructor(data?: PartialMessage<QueryLeverageLpTotalRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.tier.QueryLeverageLpTotalRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLeverageLpTotalRequest {
    return new QueryLeverageLpTotalRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLeverageLpTotalRequest {
    return new QueryLeverageLpTotalRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLeverageLpTotalRequest {
    return new QueryLeverageLpTotalRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLeverageLpTotalRequest | PlainMessage<QueryLeverageLpTotalRequest> | undefined, b: QueryLeverageLpTotalRequest | PlainMessage<QueryLeverageLpTotalRequest> | undefined): boolean {
    return proto3.util.equals(QueryLeverageLpTotalRequest, a, b);
  }
}

/**
 * @generated from message elys.tier.QueryLeverageLpTotalResponse
 */
export class QueryLeverageLpTotalResponse extends Message<QueryLeverageLpTotalResponse> {
  /**
   * @generated from field: string total = 1;
   */
  total = "";

  constructor(data?: PartialMessage<QueryLeverageLpTotalResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.tier.QueryLeverageLpTotalResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLeverageLpTotalResponse {
    return new QueryLeverageLpTotalResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLeverageLpTotalResponse {
    return new QueryLeverageLpTotalResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLeverageLpTotalResponse {
    return new QueryLeverageLpTotalResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLeverageLpTotalResponse | PlainMessage<QueryLeverageLpTotalResponse> | undefined, b: QueryLeverageLpTotalResponse | PlainMessage<QueryLeverageLpTotalResponse> | undefined): boolean {
    return proto3.util.equals(QueryLeverageLpTotalResponse, a, b);
  }
}

/**
 * @generated from message elys.tier.QueryRewardsTotalRequest
 */
export class QueryRewardsTotalRequest extends Message<QueryRewardsTotalRequest> {
  /**
   * @generated from field: string user = 1;
   */
  user = "";

  constructor(data?: PartialMessage<QueryRewardsTotalRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.tier.QueryRewardsTotalRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRewardsTotalRequest {
    return new QueryRewardsTotalRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRewardsTotalRequest {
    return new QueryRewardsTotalRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRewardsTotalRequest {
    return new QueryRewardsTotalRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRewardsTotalRequest | PlainMessage<QueryRewardsTotalRequest> | undefined, b: QueryRewardsTotalRequest | PlainMessage<QueryRewardsTotalRequest> | undefined): boolean {
    return proto3.util.equals(QueryRewardsTotalRequest, a, b);
  }
}

/**
 * @generated from message elys.tier.QueryRewardsTotalResponse
 */
export class QueryRewardsTotalResponse extends Message<QueryRewardsTotalResponse> {
  /**
   * @generated from field: string total = 1;
   */
  total = "";

  constructor(data?: PartialMessage<QueryRewardsTotalResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.tier.QueryRewardsTotalResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRewardsTotalResponse {
    return new QueryRewardsTotalResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRewardsTotalResponse {
    return new QueryRewardsTotalResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRewardsTotalResponse {
    return new QueryRewardsTotalResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRewardsTotalResponse | PlainMessage<QueryRewardsTotalResponse> | undefined, b: QueryRewardsTotalResponse | PlainMessage<QueryRewardsTotalResponse> | undefined): boolean {
    return proto3.util.equals(QueryRewardsTotalResponse, a, b);
  }
}

/**
 * @generated from message elys.tier.QueryStakedPoolRequest
 */
export class QueryStakedPoolRequest extends Message<QueryStakedPoolRequest> {
  /**
   * @generated from field: string user = 1;
   */
  user = "";

  constructor(data?: PartialMessage<QueryStakedPoolRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.tier.QueryStakedPoolRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryStakedPoolRequest {
    return new QueryStakedPoolRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryStakedPoolRequest {
    return new QueryStakedPoolRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryStakedPoolRequest {
    return new QueryStakedPoolRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryStakedPoolRequest | PlainMessage<QueryStakedPoolRequest> | undefined, b: QueryStakedPoolRequest | PlainMessage<QueryStakedPoolRequest> | undefined): boolean {
    return proto3.util.equals(QueryStakedPoolRequest, a, b);
  }
}

/**
 * @generated from message elys.tier.QueryStakedPoolResponse
 */
export class QueryStakedPoolResponse extends Message<QueryStakedPoolResponse> {
  /**
   * @generated from field: string total = 1;
   */
  total = "";

  constructor(data?: PartialMessage<QueryStakedPoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.tier.QueryStakedPoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryStakedPoolResponse {
    return new QueryStakedPoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryStakedPoolResponse {
    return new QueryStakedPoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryStakedPoolResponse {
    return new QueryStakedPoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryStakedPoolResponse | PlainMessage<QueryStakedPoolResponse> | undefined, b: QueryStakedPoolResponse | PlainMessage<QueryStakedPoolResponse> | undefined): boolean {
    return proto3.util.equals(QueryStakedPoolResponse, a, b);
  }
}

/**
 * @generated from message elys.tier.QueryPerpetualRequest
 */
export class QueryPerpetualRequest extends Message<QueryPerpetualRequest> {
  /**
   * @generated from field: string user = 1;
   */
  user = "";

  constructor(data?: PartialMessage<QueryPerpetualRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.tier.QueryPerpetualRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPerpetualRequest {
    return new QueryPerpetualRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPerpetualRequest {
    return new QueryPerpetualRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPerpetualRequest {
    return new QueryPerpetualRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPerpetualRequest | PlainMessage<QueryPerpetualRequest> | undefined, b: QueryPerpetualRequest | PlainMessage<QueryPerpetualRequest> | undefined): boolean {
    return proto3.util.equals(QueryPerpetualRequest, a, b);
  }
}

/**
 * @generated from message elys.tier.QueryPerpetualResponse
 */
export class QueryPerpetualResponse extends Message<QueryPerpetualResponse> {
  /**
   * @generated from field: string total = 1;
   */
  total = "";

  constructor(data?: PartialMessage<QueryPerpetualResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.tier.QueryPerpetualResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPerpetualResponse {
    return new QueryPerpetualResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPerpetualResponse {
    return new QueryPerpetualResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPerpetualResponse {
    return new QueryPerpetualResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPerpetualResponse | PlainMessage<QueryPerpetualResponse> | undefined, b: QueryPerpetualResponse | PlainMessage<QueryPerpetualResponse> | undefined): boolean {
    return proto3.util.equals(QueryPerpetualResponse, a, b);
  }
}

/**
 * @generated from message elys.tier.QueryLiquidTotalRequest
 */
export class QueryLiquidTotalRequest extends Message<QueryLiquidTotalRequest> {
  /**
   * @generated from field: string user = 1;
   */
  user = "";

  constructor(data?: PartialMessage<QueryLiquidTotalRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.tier.QueryLiquidTotalRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLiquidTotalRequest {
    return new QueryLiquidTotalRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLiquidTotalRequest {
    return new QueryLiquidTotalRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLiquidTotalRequest {
    return new QueryLiquidTotalRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLiquidTotalRequest | PlainMessage<QueryLiquidTotalRequest> | undefined, b: QueryLiquidTotalRequest | PlainMessage<QueryLiquidTotalRequest> | undefined): boolean {
    return proto3.util.equals(QueryLiquidTotalRequest, a, b);
  }
}

/**
 * @generated from message elys.tier.QueryLiquidTotalResponse
 */
export class QueryLiquidTotalResponse extends Message<QueryLiquidTotalResponse> {
  /**
   * @generated from field: string total = 1;
   */
  total = "";

  constructor(data?: PartialMessage<QueryLiquidTotalResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.tier.QueryLiquidTotalResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLiquidTotalResponse {
    return new QueryLiquidTotalResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLiquidTotalResponse {
    return new QueryLiquidTotalResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLiquidTotalResponse {
    return new QueryLiquidTotalResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLiquidTotalResponse | PlainMessage<QueryLiquidTotalResponse> | undefined, b: QueryLiquidTotalResponse | PlainMessage<QueryLiquidTotalResponse> | undefined): boolean {
    return proto3.util.equals(QueryLiquidTotalResponse, a, b);
  }
}

/**
 * @generated from message elys.tier.QueryGetAmmPriceRequest
 */
export class QueryGetAmmPriceRequest extends Message<QueryGetAmmPriceRequest> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * @generated from field: int32 decimal = 2;
   */
  decimal = 0;

  constructor(data?: PartialMessage<QueryGetAmmPriceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.tier.QueryGetAmmPriceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "decimal", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetAmmPriceRequest {
    return new QueryGetAmmPriceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetAmmPriceRequest {
    return new QueryGetAmmPriceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetAmmPriceRequest {
    return new QueryGetAmmPriceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetAmmPriceRequest | PlainMessage<QueryGetAmmPriceRequest> | undefined, b: QueryGetAmmPriceRequest | PlainMessage<QueryGetAmmPriceRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetAmmPriceRequest, a, b);
  }
}

/**
 * @generated from message elys.tier.QueryGetAmmPriceResponse
 */
export class QueryGetAmmPriceResponse extends Message<QueryGetAmmPriceResponse> {
  /**
   * @generated from field: string total = 1;
   */
  total = "";

  constructor(data?: PartialMessage<QueryGetAmmPriceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.tier.QueryGetAmmPriceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetAmmPriceResponse {
    return new QueryGetAmmPriceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetAmmPriceResponse {
    return new QueryGetAmmPriceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetAmmPriceResponse {
    return new QueryGetAmmPriceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetAmmPriceResponse | PlainMessage<QueryGetAmmPriceResponse> | undefined, b: QueryGetAmmPriceResponse | PlainMessage<QueryGetAmmPriceResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetAmmPriceResponse, a, b);
  }
}

