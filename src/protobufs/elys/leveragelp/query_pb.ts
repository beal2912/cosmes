// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file elys/leveragelp/query.proto (package elys.leveragelp, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { PageRequest, PageResponse } from "../../cosmos/base/query/v1beta1/pagination_pb.js";
import { PositionAndInterest, QueryPosition } from "./types_pb.js";
import { Pool } from "./pool_pb.js";
import { Coin } from "../../cosmos/base/v1beta1/coin_pb.js";

/**
 * ParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from message elys.leveragelp.ParamsRequest
 */
export class ParamsRequest extends Message<ParamsRequest> {
  constructor(data?: PartialMessage<ParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.leveragelp.ParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParamsRequest {
    return new ParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParamsRequest {
    return new ParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParamsRequest {
    return new ParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ParamsRequest | PlainMessage<ParamsRequest> | undefined, b: ParamsRequest | PlainMessage<ParamsRequest> | undefined): boolean {
    return proto3.util.equals(ParamsRequest, a, b);
  }
}

/**
 * ParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from message elys.leveragelp.ParamsResponse
 */
export class ParamsResponse extends Message<ParamsResponse> {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: elys.leveragelp.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<ParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.leveragelp.ParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParamsResponse {
    return new ParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParamsResponse {
    return new ParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParamsResponse {
    return new ParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ParamsResponse | PlainMessage<ParamsResponse> | undefined, b: ParamsResponse | PlainMessage<ParamsResponse> | undefined): boolean {
    return proto3.util.equals(ParamsResponse, a, b);
  }
}

/**
 * @generated from message elys.leveragelp.PositionsRequest
 */
export class PositionsRequest extends Message<PositionsRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<PositionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.leveragelp.PositionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PositionsRequest {
    return new PositionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PositionsRequest {
    return new PositionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PositionsRequest {
    return new PositionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PositionsRequest | PlainMessage<PositionsRequest> | undefined, b: PositionsRequest | PlainMessage<PositionsRequest> | undefined): boolean {
    return proto3.util.equals(PositionsRequest, a, b);
  }
}

/**
 * @generated from message elys.leveragelp.PositionsResponse
 */
export class PositionsResponse extends Message<PositionsResponse> {
  /**
   * @generated from field: repeated elys.leveragelp.QueryPosition positions = 1;
   */
  positions: QueryPosition[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<PositionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.leveragelp.PositionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "positions", kind: "message", T: QueryPosition, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PositionsResponse {
    return new PositionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PositionsResponse {
    return new PositionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PositionsResponse {
    return new PositionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PositionsResponse | PlainMessage<PositionsResponse> | undefined, b: PositionsResponse | PlainMessage<PositionsResponse> | undefined): boolean {
    return proto3.util.equals(PositionsResponse, a, b);
  }
}

/**
 * @generated from message elys.leveragelp.PositionsByPoolRequest
 */
export class PositionsByPoolRequest extends Message<PositionsByPoolRequest> {
  /**
   * @generated from field: uint64 amm_pool_id = 1;
   */
  ammPoolId = protoInt64.zero;

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<PositionsByPoolRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.leveragelp.PositionsByPoolRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amm_pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PositionsByPoolRequest {
    return new PositionsByPoolRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PositionsByPoolRequest {
    return new PositionsByPoolRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PositionsByPoolRequest {
    return new PositionsByPoolRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PositionsByPoolRequest | PlainMessage<PositionsByPoolRequest> | undefined, b: PositionsByPoolRequest | PlainMessage<PositionsByPoolRequest> | undefined): boolean {
    return proto3.util.equals(PositionsByPoolRequest, a, b);
  }
}

/**
 * @generated from message elys.leveragelp.PositionsByPoolResponse
 */
export class PositionsByPoolResponse extends Message<PositionsByPoolResponse> {
  /**
   * @generated from field: repeated elys.leveragelp.QueryPosition positions = 1;
   */
  positions: QueryPosition[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<PositionsByPoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.leveragelp.PositionsByPoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "positions", kind: "message", T: QueryPosition, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PositionsByPoolResponse {
    return new PositionsByPoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PositionsByPoolResponse {
    return new PositionsByPoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PositionsByPoolResponse {
    return new PositionsByPoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PositionsByPoolResponse | PlainMessage<PositionsByPoolResponse> | undefined, b: PositionsByPoolResponse | PlainMessage<PositionsByPoolResponse> | undefined): boolean {
    return proto3.util.equals(PositionsByPoolResponse, a, b);
  }
}

/**
 * @generated from message elys.leveragelp.StatusRequest
 */
export class StatusRequest extends Message<StatusRequest> {
  constructor(data?: PartialMessage<StatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.leveragelp.StatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatusRequest {
    return new StatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatusRequest {
    return new StatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatusRequest {
    return new StatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StatusRequest | PlainMessage<StatusRequest> | undefined, b: StatusRequest | PlainMessage<StatusRequest> | undefined): boolean {
    return proto3.util.equals(StatusRequest, a, b);
  }
}

/**
 * @generated from message elys.leveragelp.StatusResponse
 */
export class StatusResponse extends Message<StatusResponse> {
  /**
   * @generated from field: uint64 open_position_count = 1;
   */
  openPositionCount = protoInt64.zero;

  /**
   * @generated from field: uint64 lifetime_position_count = 2;
   */
  lifetimePositionCount = protoInt64.zero;

  constructor(data?: PartialMessage<StatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.leveragelp.StatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "open_position_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "lifetime_position_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatusResponse {
    return new StatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatusResponse {
    return new StatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatusResponse {
    return new StatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StatusResponse | PlainMessage<StatusResponse> | undefined, b: StatusResponse | PlainMessage<StatusResponse> | undefined): boolean {
    return proto3.util.equals(StatusResponse, a, b);
  }
}

/**
 * @generated from message elys.leveragelp.PositionsForAddressRequest
 */
export class PositionsForAddressRequest extends Message<PositionsForAddressRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<PositionsForAddressRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.leveragelp.PositionsForAddressRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PositionsForAddressRequest {
    return new PositionsForAddressRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PositionsForAddressRequest {
    return new PositionsForAddressRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PositionsForAddressRequest {
    return new PositionsForAddressRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PositionsForAddressRequest | PlainMessage<PositionsForAddressRequest> | undefined, b: PositionsForAddressRequest | PlainMessage<PositionsForAddressRequest> | undefined): boolean {
    return proto3.util.equals(PositionsForAddressRequest, a, b);
  }
}

/**
 * @generated from message elys.leveragelp.PositionsForAddressResponse
 */
export class PositionsForAddressResponse extends Message<PositionsForAddressResponse> {
  /**
   * @generated from field: repeated elys.leveragelp.PositionAndInterest positions = 1;
   */
  positions: PositionAndInterest[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<PositionsForAddressResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.leveragelp.PositionsForAddressResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "positions", kind: "message", T: PositionAndInterest, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PositionsForAddressResponse {
    return new PositionsForAddressResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PositionsForAddressResponse {
    return new PositionsForAddressResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PositionsForAddressResponse {
    return new PositionsForAddressResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PositionsForAddressResponse | PlainMessage<PositionsForAddressResponse> | undefined, b: PositionsForAddressResponse | PlainMessage<PositionsForAddressResponse> | undefined): boolean {
    return proto3.util.equals(PositionsForAddressResponse, a, b);
  }
}

/**
 * @generated from message elys.leveragelp.WhitelistRequest
 */
export class WhitelistRequest extends Message<WhitelistRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<WhitelistRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.leveragelp.WhitelistRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WhitelistRequest {
    return new WhitelistRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WhitelistRequest {
    return new WhitelistRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WhitelistRequest {
    return new WhitelistRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WhitelistRequest | PlainMessage<WhitelistRequest> | undefined, b: WhitelistRequest | PlainMessage<WhitelistRequest> | undefined): boolean {
    return proto3.util.equals(WhitelistRequest, a, b);
  }
}

/**
 * @generated from message elys.leveragelp.WhitelistResponse
 */
export class WhitelistResponse extends Message<WhitelistResponse> {
  /**
   * @generated from field: repeated string whitelist = 1;
   */
  whitelist: string[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<WhitelistResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.leveragelp.WhitelistResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "whitelist", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WhitelistResponse {
    return new WhitelistResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WhitelistResponse {
    return new WhitelistResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WhitelistResponse {
    return new WhitelistResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WhitelistResponse | PlainMessage<WhitelistResponse> | undefined, b: WhitelistResponse | PlainMessage<WhitelistResponse> | undefined): boolean {
    return proto3.util.equals(WhitelistResponse, a, b);
  }
}

/**
 * @generated from message elys.leveragelp.IsWhitelistedRequest
 */
export class IsWhitelistedRequest extends Message<IsWhitelistedRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  constructor(data?: PartialMessage<IsWhitelistedRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.leveragelp.IsWhitelistedRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IsWhitelistedRequest {
    return new IsWhitelistedRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IsWhitelistedRequest {
    return new IsWhitelistedRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IsWhitelistedRequest {
    return new IsWhitelistedRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IsWhitelistedRequest | PlainMessage<IsWhitelistedRequest> | undefined, b: IsWhitelistedRequest | PlainMessage<IsWhitelistedRequest> | undefined): boolean {
    return proto3.util.equals(IsWhitelistedRequest, a, b);
  }
}

/**
 * @generated from message elys.leveragelp.IsWhitelistedResponse
 */
export class IsWhitelistedResponse extends Message<IsWhitelistedResponse> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: bool is_whitelisted = 2;
   */
  isWhitelisted = false;

  constructor(data?: PartialMessage<IsWhitelistedResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.leveragelp.IsWhitelistedResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "is_whitelisted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IsWhitelistedResponse {
    return new IsWhitelistedResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IsWhitelistedResponse {
    return new IsWhitelistedResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IsWhitelistedResponse {
    return new IsWhitelistedResponse().fromJsonString(jsonString, options);
  }

  static equals(a: IsWhitelistedResponse | PlainMessage<IsWhitelistedResponse> | undefined, b: IsWhitelistedResponse | PlainMessage<IsWhitelistedResponse> | undefined): boolean {
    return proto3.util.equals(IsWhitelistedResponse, a, b);
  }
}

/**
 * @generated from message elys.leveragelp.QueryGetPoolRequest
 */
export class QueryGetPoolRequest extends Message<QueryGetPoolRequest> {
  /**
   * @generated from field: uint64 index = 1;
   */
  index = protoInt64.zero;

  constructor(data?: PartialMessage<QueryGetPoolRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.leveragelp.QueryGetPoolRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "index", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetPoolRequest {
    return new QueryGetPoolRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetPoolRequest {
    return new QueryGetPoolRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetPoolRequest {
    return new QueryGetPoolRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetPoolRequest | PlainMessage<QueryGetPoolRequest> | undefined, b: QueryGetPoolRequest | PlainMessage<QueryGetPoolRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetPoolRequest, a, b);
  }
}

/**
 * @generated from message elys.leveragelp.QueryGetPoolResponse
 */
export class QueryGetPoolResponse extends Message<QueryGetPoolResponse> {
  /**
   * @generated from field: elys.leveragelp.Pool pool = 1;
   */
  pool?: Pool;

  constructor(data?: PartialMessage<QueryGetPoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.leveragelp.QueryGetPoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool", kind: "message", T: Pool },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetPoolResponse {
    return new QueryGetPoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetPoolResponse {
    return new QueryGetPoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetPoolResponse {
    return new QueryGetPoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetPoolResponse | PlainMessage<QueryGetPoolResponse> | undefined, b: QueryGetPoolResponse | PlainMessage<QueryGetPoolResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetPoolResponse, a, b);
  }
}

/**
 * @generated from message elys.leveragelp.QueryAllPoolRequest
 */
export class QueryAllPoolRequest extends Message<QueryAllPoolRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryAllPoolRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.leveragelp.QueryAllPoolRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllPoolRequest {
    return new QueryAllPoolRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllPoolRequest {
    return new QueryAllPoolRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllPoolRequest {
    return new QueryAllPoolRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllPoolRequest | PlainMessage<QueryAllPoolRequest> | undefined, b: QueryAllPoolRequest | PlainMessage<QueryAllPoolRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllPoolRequest, a, b);
  }
}

/**
 * @generated from message elys.leveragelp.QueryAllPoolResponse
 */
export class QueryAllPoolResponse extends Message<QueryAllPoolResponse> {
  /**
   * @generated from field: repeated elys.leveragelp.Pool pool = 1;
   */
  pool: Pool[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryAllPoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.leveragelp.QueryAllPoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool", kind: "message", T: Pool, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllPoolResponse {
    return new QueryAllPoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllPoolResponse {
    return new QueryAllPoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllPoolResponse {
    return new QueryAllPoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllPoolResponse | PlainMessage<QueryAllPoolResponse> | undefined, b: QueryAllPoolResponse | PlainMessage<QueryAllPoolResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllPoolResponse, a, b);
  }
}

/**
 * @generated from message elys.leveragelp.PositionResponse
 */
export class PositionResponse extends Message<PositionResponse> {
  /**
   * @generated from field: elys.leveragelp.QueryPosition position = 1;
   */
  position?: QueryPosition;

  /**
   * @generated from field: string locked_lp_token = 2;
   */
  lockedLpToken = "";

  constructor(data?: PartialMessage<PositionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.leveragelp.PositionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "position", kind: "message", T: QueryPosition },
    { no: 2, name: "locked_lp_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PositionResponse {
    return new PositionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PositionResponse {
    return new PositionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PositionResponse {
    return new PositionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PositionResponse | PlainMessage<PositionResponse> | undefined, b: PositionResponse | PlainMessage<PositionResponse> | undefined): boolean {
    return proto3.util.equals(PositionResponse, a, b);
  }
}

/**
 * @generated from message elys.leveragelp.QueryLiquidationPriceRequest
 */
export class QueryLiquidationPriceRequest extends Message<QueryLiquidationPriceRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: uint64 position_id = 2;
   */
  positionId = protoInt64.zero;

  constructor(data?: PartialMessage<QueryLiquidationPriceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.leveragelp.QueryLiquidationPriceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "position_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLiquidationPriceRequest {
    return new QueryLiquidationPriceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLiquidationPriceRequest {
    return new QueryLiquidationPriceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLiquidationPriceRequest {
    return new QueryLiquidationPriceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLiquidationPriceRequest | PlainMessage<QueryLiquidationPriceRequest> | undefined, b: QueryLiquidationPriceRequest | PlainMessage<QueryLiquidationPriceRequest> | undefined): boolean {
    return proto3.util.equals(QueryLiquidationPriceRequest, a, b);
  }
}

/**
 * @generated from message elys.leveragelp.QueryLiquidationPriceResponse
 */
export class QueryLiquidationPriceResponse extends Message<QueryLiquidationPriceResponse> {
  /**
   * @generated from field: string price = 1;
   */
  price = "";

  constructor(data?: PartialMessage<QueryLiquidationPriceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.leveragelp.QueryLiquidationPriceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLiquidationPriceResponse {
    return new QueryLiquidationPriceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLiquidationPriceResponse {
    return new QueryLiquidationPriceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLiquidationPriceResponse {
    return new QueryLiquidationPriceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLiquidationPriceResponse | PlainMessage<QueryLiquidationPriceResponse> | undefined, b: QueryLiquidationPriceResponse | PlainMessage<QueryLiquidationPriceResponse> | undefined): boolean {
    return proto3.util.equals(QueryLiquidationPriceResponse, a, b);
  }
}

/**
 * @generated from message elys.leveragelp.QueryOpenEstRequest
 */
export class QueryOpenEstRequest extends Message<QueryOpenEstRequest> {
  /**
   * @generated from field: string collateral_asset = 1;
   */
  collateralAsset = "";

  /**
   * @generated from field: string collateral_amount = 2;
   */
  collateralAmount = "";

  /**
   * @generated from field: uint64 amm_pool_id = 3;
   */
  ammPoolId = protoInt64.zero;

  /**
   * @generated from field: string leverage = 4;
   */
  leverage = "";

  constructor(data?: PartialMessage<QueryOpenEstRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.leveragelp.QueryOpenEstRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collateral_asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "collateral_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amm_pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "leverage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOpenEstRequest {
    return new QueryOpenEstRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOpenEstRequest {
    return new QueryOpenEstRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOpenEstRequest {
    return new QueryOpenEstRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOpenEstRequest | PlainMessage<QueryOpenEstRequest> | undefined, b: QueryOpenEstRequest | PlainMessage<QueryOpenEstRequest> | undefined): boolean {
    return proto3.util.equals(QueryOpenEstRequest, a, b);
  }
}

/**
 * @generated from message elys.leveragelp.QueryOpenEstResponse
 */
export class QueryOpenEstResponse extends Message<QueryOpenEstResponse> {
  /**
   * @generated from field: string position_size = 1;
   */
  positionSize = "";

  /**
   * @generated from field: string weight_balance_ratio = 2;
   */
  weightBalanceRatio = "";

  /**
   * @generated from field: string borrow_fee = 3;
   */
  borrowFee = "";

  constructor(data?: PartialMessage<QueryOpenEstResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.leveragelp.QueryOpenEstResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "position_size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "weight_balance_ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "borrow_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOpenEstResponse {
    return new QueryOpenEstResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOpenEstResponse {
    return new QueryOpenEstResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOpenEstResponse {
    return new QueryOpenEstResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOpenEstResponse | PlainMessage<QueryOpenEstResponse> | undefined, b: QueryOpenEstResponse | PlainMessage<QueryOpenEstResponse> | undefined): boolean {
    return proto3.util.equals(QueryOpenEstResponse, a, b);
  }
}

/**
 * @generated from message elys.leveragelp.QueryCloseEstRequest
 */
export class QueryCloseEstRequest extends Message<QueryCloseEstRequest> {
  /**
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string lp_amount = 3;
   */
  lpAmount = "";

  constructor(data?: PartialMessage<QueryCloseEstRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.leveragelp.QueryCloseEstRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "lp_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCloseEstRequest {
    return new QueryCloseEstRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCloseEstRequest {
    return new QueryCloseEstRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCloseEstRequest {
    return new QueryCloseEstRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCloseEstRequest | PlainMessage<QueryCloseEstRequest> | undefined, b: QueryCloseEstRequest | PlainMessage<QueryCloseEstRequest> | undefined): boolean {
    return proto3.util.equals(QueryCloseEstRequest, a, b);
  }
}

/**
 * @generated from message elys.leveragelp.QueryRewardsRequest
 */
export class QueryRewardsRequest extends Message<QueryRewardsRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: repeated uint64 ids = 2;
   */
  ids: bigint[] = [];

  constructor(data?: PartialMessage<QueryRewardsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.leveragelp.QueryRewardsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ids", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRewardsRequest {
    return new QueryRewardsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRewardsRequest {
    return new QueryRewardsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRewardsRequest {
    return new QueryRewardsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRewardsRequest | PlainMessage<QueryRewardsRequest> | undefined, b: QueryRewardsRequest | PlainMessage<QueryRewardsRequest> | undefined): boolean {
    return proto3.util.equals(QueryRewardsRequest, a, b);
  }
}

/**
 * @generated from message elys.leveragelp.RewardInfo
 */
export class RewardInfo extends Message<RewardInfo> {
  /**
   * @generated from field: uint64 position_id = 1;
   */
  positionId = protoInt64.zero;

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin reward = 2;
   */
  reward: Coin[] = [];

  constructor(data?: PartialMessage<RewardInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.leveragelp.RewardInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "position_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "reward", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RewardInfo {
    return new RewardInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RewardInfo {
    return new RewardInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RewardInfo {
    return new RewardInfo().fromJsonString(jsonString, options);
  }

  static equals(a: RewardInfo | PlainMessage<RewardInfo> | undefined, b: RewardInfo | PlainMessage<RewardInfo> | undefined): boolean {
    return proto3.util.equals(RewardInfo, a, b);
  }
}

/**
 * @generated from message elys.leveragelp.QueryRewardsResponse
 */
export class QueryRewardsResponse extends Message<QueryRewardsResponse> {
  /**
   * @generated from field: repeated elys.leveragelp.RewardInfo rewards = 1;
   */
  rewards: RewardInfo[] = [];

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin total_rewards = 2;
   */
  totalRewards: Coin[] = [];

  constructor(data?: PartialMessage<QueryRewardsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.leveragelp.QueryRewardsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rewards", kind: "message", T: RewardInfo, repeated: true },
    { no: 2, name: "total_rewards", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRewardsResponse {
    return new QueryRewardsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRewardsResponse {
    return new QueryRewardsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRewardsResponse {
    return new QueryRewardsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRewardsResponse | PlainMessage<QueryRewardsResponse> | undefined, b: QueryRewardsResponse | PlainMessage<QueryRewardsResponse> | undefined): boolean {
    return proto3.util.equals(QueryRewardsResponse, a, b);
  }
}

/**
 * @generated from message elys.leveragelp.QueryCloseEstResponse
 */
export class QueryCloseEstResponse extends Message<QueryCloseEstResponse> {
  /**
   * @generated from field: string liability = 1;
   */
  liability = "";

  /**
   * @generated from field: string weight_balance_ratio = 2;
   */
  weightBalanceRatio = "";

  /**
   * @generated from field: string amount_returned = 3;
   */
  amountReturned = "";

  constructor(data?: PartialMessage<QueryCloseEstResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.leveragelp.QueryCloseEstResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "liability", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "weight_balance_ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount_returned", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCloseEstResponse {
    return new QueryCloseEstResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCloseEstResponse {
    return new QueryCloseEstResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCloseEstResponse {
    return new QueryCloseEstResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCloseEstResponse | PlainMessage<QueryCloseEstResponse> | undefined, b: QueryCloseEstResponse | PlainMessage<QueryCloseEstResponse> | undefined): boolean {
    return proto3.util.equals(QueryCloseEstResponse, a, b);
  }
}

/**
 * @generated from message elys.leveragelp.QueryCommittedTokensLockedRequest
 */
export class QueryCommittedTokensLockedRequest extends Message<QueryCommittedTokensLockedRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  constructor(data?: PartialMessage<QueryCommittedTokensLockedRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.leveragelp.QueryCommittedTokensLockedRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCommittedTokensLockedRequest {
    return new QueryCommittedTokensLockedRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCommittedTokensLockedRequest {
    return new QueryCommittedTokensLockedRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCommittedTokensLockedRequest {
    return new QueryCommittedTokensLockedRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCommittedTokensLockedRequest | PlainMessage<QueryCommittedTokensLockedRequest> | undefined, b: QueryCommittedTokensLockedRequest | PlainMessage<QueryCommittedTokensLockedRequest> | undefined): boolean {
    return proto3.util.equals(QueryCommittedTokensLockedRequest, a, b);
  }
}

/**
 * @generated from message elys.leveragelp.QueryCommittedTokensLockedResponse
 */
export class QueryCommittedTokensLockedResponse extends Message<QueryCommittedTokensLockedResponse> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin locked_committed = 2;
   */
  lockedCommitted: Coin[] = [];

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin total_committed = 3;
   */
  totalCommitted: Coin[] = [];

  constructor(data?: PartialMessage<QueryCommittedTokensLockedResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.leveragelp.QueryCommittedTokensLockedResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "locked_committed", kind: "message", T: Coin, repeated: true },
    { no: 3, name: "total_committed", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCommittedTokensLockedResponse {
    return new QueryCommittedTokensLockedResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCommittedTokensLockedResponse {
    return new QueryCommittedTokensLockedResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCommittedTokensLockedResponse {
    return new QueryCommittedTokensLockedResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCommittedTokensLockedResponse | PlainMessage<QueryCommittedTokensLockedResponse> | undefined, b: QueryCommittedTokensLockedResponse | PlainMessage<QueryCommittedTokensLockedResponse> | undefined): boolean {
    return proto3.util.equals(QueryCommittedTokensLockedResponse, a, b);
  }
}

