// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file elys/leveragelp/types.proto (package elys.leveragelp, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Coin } from "../../cosmos/base/v1beta1/coin_pb.js";

/**
 * @generated from message elys.leveragelp.PositionRequest
 */
export class PositionRequest extends Message<PositionRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<PositionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.leveragelp.PositionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PositionRequest {
    return new PositionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PositionRequest {
    return new PositionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PositionRequest {
    return new PositionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PositionRequest | PlainMessage<PositionRequest> | undefined, b: PositionRequest | PlainMessage<PositionRequest> | undefined): boolean {
    return proto3.util.equals(PositionRequest, a, b);
  }
}

/**
 * @generated from message elys.leveragelp.Position
 */
export class Position extends Message<Position> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin collateral = 2;
   */
  collateral?: Coin;

  /**
   * For recording
   *
   * @generated from field: string liabilities = 3;
   */
  liabilities = "";

  /**
   * @generated from field: string leveraged_lp_amount = 4;
   */
  leveragedLpAmount = "";

  /**
   * @generated from field: string position_health = 5;
   */
  positionHealth = "";

  /**
   * @generated from field: uint64 id = 6;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: uint64 amm_pool_id = 7;
   */
  ammPoolId = protoInt64.zero;

  /**
   * @generated from field: string stop_loss_price = 8;
   */
  stopLossPrice = "";

  /**
   * @generated from field: uint64 borrow_pool_id = 9;
   */
  borrowPoolId = protoInt64.zero;

  constructor(data?: PartialMessage<Position>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.leveragelp.Position";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "collateral", kind: "message", T: Coin },
    { no: 3, name: "liabilities", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "leveraged_lp_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "position_health", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "amm_pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "stop_loss_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "borrow_pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Position {
    return new Position().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Position {
    return new Position().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Position {
    return new Position().fromJsonString(jsonString, options);
  }

  static equals(a: Position | PlainMessage<Position> | undefined, b: Position | PlainMessage<Position> | undefined): boolean {
    return proto3.util.equals(Position, a, b);
  }
}

/**
 * @generated from message elys.leveragelp.QueryPosition
 */
export class QueryPosition extends Message<QueryPosition> {
  /**
   * @generated from field: elys.leveragelp.Position position = 1;
   */
  position?: Position;

  /**
   * @generated from field: string updated_leverage = 2;
   */
  updatedLeverage = "";

  /**
   * @generated from field: string position_usd_value = 3;
   */
  positionUsdValue = "";

  constructor(data?: PartialMessage<QueryPosition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.leveragelp.QueryPosition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "position", kind: "message", T: Position },
    { no: 2, name: "updated_leverage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "position_usd_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPosition {
    return new QueryPosition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPosition {
    return new QueryPosition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPosition {
    return new QueryPosition().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPosition | PlainMessage<QueryPosition> | undefined, b: QueryPosition | PlainMessage<QueryPosition> | undefined): boolean {
    return proto3.util.equals(QueryPosition, a, b);
  }
}

/**
 * @generated from message elys.leveragelp.PositionAndInterest
 */
export class PositionAndInterest extends Message<PositionAndInterest> {
  /**
   * @generated from field: elys.leveragelp.QueryPosition position = 1;
   */
  position?: QueryPosition;

  /**
   * @generated from field: string interest_rate_hour = 2;
   */
  interestRateHour = "";

  /**
   * @generated from field: string interest_rate_hour_usd = 3;
   */
  interestRateHourUsd = "";

  constructor(data?: PartialMessage<PositionAndInterest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.leveragelp.PositionAndInterest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "position", kind: "message", T: QueryPosition },
    { no: 2, name: "interest_rate_hour", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "interest_rate_hour_usd", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PositionAndInterest {
    return new PositionAndInterest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PositionAndInterest {
    return new PositionAndInterest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PositionAndInterest {
    return new PositionAndInterest().fromJsonString(jsonString, options);
  }

  static equals(a: PositionAndInterest | PlainMessage<PositionAndInterest> | undefined, b: PositionAndInterest | PlainMessage<PositionAndInterest> | undefined): boolean {
    return proto3.util.equals(PositionAndInterest, a, b);
  }
}

