// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file elys/tradeshield/types.proto (package elys.tradeshield, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Coin } from "../../cosmos/base/v1beta1/coin_pb.js";

/**
 * Spot order
 *
 * @generated from enum elys.tradeshield.SpotOrderType
 */
export enum SpotOrderType {
  /**
   * @generated from enum value: STOPLOSS = 0;
   */
  STOPLOSS = 0,

  /**
   * @generated from enum value: LIMITSELL = 1;
   */
  LIMITSELL = 1,

  /**
   * @generated from enum value: LIMITBUY = 2;
   */
  LIMITBUY = 2,

  /**
   * @generated from enum value: MARKETBUY = 3;
   */
  MARKETBUY = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(SpotOrderType)
proto3.util.setEnumType(SpotOrderType, "elys.tradeshield.SpotOrderType", [
  { no: 0, name: "STOPLOSS" },
  { no: 1, name: "LIMITSELL" },
  { no: 2, name: "LIMITBUY" },
  { no: 3, name: "MARKETBUY" },
]);

/**
 * @generated from enum elys.tradeshield.Status
 */
export enum Status {
  /**
   * @generated from enum value: PENDING = 0;
   */
  PENDING = 0,

  /**
   * @generated from enum value: EXECUTED = 1;
   */
  EXECUTED = 1,

  /**
   * @generated from enum value: CANCLED = 2;
   */
  CANCLED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Status)
proto3.util.setEnumType(Status, "elys.tradeshield.Status", [
  { no: 0, name: "PENDING" },
  { no: 1, name: "EXECUTED" },
  { no: 2, name: "CANCLED" },
]);

/**
 * Perpetual Order
 *
 * @generated from enum elys.tradeshield.PerpetualOrderType
 */
export enum PerpetualOrderType {
  /**
   * @generated from enum value: LIMITOPEN = 0;
   */
  LIMITOPEN = 0,

  /**
   * @generated from enum value: LIMITCLOSE = 1;
   */
  LIMITCLOSE = 1,

  /**
   * @generated from enum value: MARKETOPEN = 2;
   */
  MARKETOPEN = 2,

  /**
   * @generated from enum value: MARKETCLOSE = 3;
   */
  MARKETCLOSE = 3,

  /**
   * @generated from enum value: STOPLOSSPERP = 4;
   */
  STOPLOSSPERP = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(PerpetualOrderType)
proto3.util.setEnumType(PerpetualOrderType, "elys.tradeshield.PerpetualOrderType", [
  { no: 0, name: "LIMITOPEN" },
  { no: 1, name: "LIMITCLOSE" },
  { no: 2, name: "MARKETOPEN" },
  { no: 3, name: "MARKETCLOSE" },
  { no: 4, name: "STOPLOSSPERP" },
]);

/**
 * @generated from enum elys.tradeshield.PerpetualPosition
 */
export enum PerpetualPosition {
  /**
   * @generated from enum value: UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: LONG = 1;
   */
  LONG = 1,

  /**
   * @generated from enum value: SHORT = 2;
   */
  SHORT = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(PerpetualPosition)
proto3.util.setEnumType(PerpetualPosition, "elys.tradeshield.PerpetualPosition", [
  { no: 0, name: "UNSPECIFIED" },
  { no: 1, name: "LONG" },
  { no: 2, name: "SHORT" },
]);

/**
 * @generated from message elys.tradeshield.OrderPrice
 */
export class OrderPrice extends Message<OrderPrice> {
  /**
   * @generated from field: string base_denom = 1;
   */
  baseDenom = "";

  /**
   * @generated from field: string quote_denom = 2;
   */
  quoteDenom = "";

  /**
   * @generated from field: string rate = 3;
   */
  rate = "";

  constructor(data?: PartialMessage<OrderPrice>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.tradeshield.OrderPrice";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "base_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "quote_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrderPrice {
    return new OrderPrice().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrderPrice {
    return new OrderPrice().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrderPrice {
    return new OrderPrice().fromJsonString(jsonString, options);
  }

  static equals(a: OrderPrice | PlainMessage<OrderPrice> | undefined, b: OrderPrice | PlainMessage<OrderPrice> | undefined): boolean {
    return proto3.util.equals(OrderPrice, a, b);
  }
}

/**
 * @generated from message elys.tradeshield.Date
 */
export class Date extends Message<Date> {
  /**
   * @generated from field: uint64 height = 1;
   */
  height = protoInt64.zero;

  /**
   * @generated from field: uint64 timestamp = 2;
   */
  timestamp = protoInt64.zero;

  constructor(data?: PartialMessage<Date>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.tradeshield.Date";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Date {
    return new Date().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Date {
    return new Date().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Date {
    return new Date().fromJsonString(jsonString, options);
  }

  static equals(a: Date | PlainMessage<Date> | undefined, b: Date | PlainMessage<Date> | undefined): boolean {
    return proto3.util.equals(Date, a, b);
  }
}

/**
 * @generated from message elys.tradeshield.SpotOrder
 */
export class SpotOrder extends Message<SpotOrder> {
  /**
   * @generated from field: elys.tradeshield.SpotOrderType order_type = 1;
   */
  orderType = SpotOrderType.STOPLOSS;

  /**
   * @generated from field: uint64 order_id = 2;
   */
  orderId = protoInt64.zero;

  /**
   * @generated from field: elys.tradeshield.OrderPrice order_price = 3;
   */
  orderPrice?: OrderPrice;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin order_amount = 4;
   */
  orderAmount?: Coin;

  /**
   * @generated from field: string owner_address = 5;
   */
  ownerAddress = "";

  /**
   * @generated from field: string order_target_denom = 6;
   */
  orderTargetDenom = "";

  /**
   * @generated from field: elys.tradeshield.Status status = 7;
   */
  status = Status.PENDING;

  /**
   * @generated from field: elys.tradeshield.Date date = 8;
   */
  date?: Date;

  constructor(data?: PartialMessage<SpotOrder>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.tradeshield.SpotOrder";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order_type", kind: "enum", T: proto3.getEnumType(SpotOrderType) },
    { no: 2, name: "order_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "order_price", kind: "message", T: OrderPrice },
    { no: 4, name: "order_amount", kind: "message", T: Coin },
    { no: 5, name: "owner_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "order_target_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "status", kind: "enum", T: proto3.getEnumType(Status) },
    { no: 8, name: "date", kind: "message", T: Date },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpotOrder {
    return new SpotOrder().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpotOrder {
    return new SpotOrder().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpotOrder {
    return new SpotOrder().fromJsonString(jsonString, options);
  }

  static equals(a: SpotOrder | PlainMessage<SpotOrder> | undefined, b: SpotOrder | PlainMessage<SpotOrder> | undefined): boolean {
    return proto3.util.equals(SpotOrder, a, b);
  }
}

/**
 * @generated from message elys.tradeshield.PerpetualOrder
 */
export class PerpetualOrder extends Message<PerpetualOrder> {
  /**
   * @generated from field: uint64 order_id = 1;
   */
  orderId = protoInt64.zero;

  /**
   * @generated from field: string owner_address = 2;
   */
  ownerAddress = "";

  /**
   * @generated from field: elys.tradeshield.PerpetualOrderType perpetual_order_type = 3;
   */
  perpetualOrderType = PerpetualOrderType.LIMITOPEN;

  /**
   * @generated from field: elys.tradeshield.PerpetualPosition position = 4;
   */
  position = PerpetualPosition.UNSPECIFIED;

  /**
   * @generated from field: elys.tradeshield.OrderPrice trigger_price = 5;
   */
  triggerPrice?: OrderPrice;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin collateral = 6;
   */
  collateral?: Coin;

  /**
   * @generated from field: string trading_asset = 7;
   */
  tradingAsset = "";

  /**
   * @generated from field: string leverage = 8;
   */
  leverage = "";

  /**
   * @generated from field: string take_profit_price = 9;
   */
  takeProfitPrice = "";

  /**
   * @generated from field: uint64 position_id = 10;
   */
  positionId = protoInt64.zero;

  /**
   * @generated from field: elys.tradeshield.Status status = 11;
   */
  status = Status.PENDING;

  /**
   * @generated from field: string stop_loss_price = 12;
   */
  stopLossPrice = "";

  constructor(data?: PartialMessage<PerpetualOrder>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.tradeshield.PerpetualOrder";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "owner_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "perpetual_order_type", kind: "enum", T: proto3.getEnumType(PerpetualOrderType) },
    { no: 4, name: "position", kind: "enum", T: proto3.getEnumType(PerpetualPosition) },
    { no: 5, name: "trigger_price", kind: "message", T: OrderPrice },
    { no: 6, name: "collateral", kind: "message", T: Coin },
    { no: 7, name: "trading_asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "leverage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "take_profit_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "position_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "status", kind: "enum", T: proto3.getEnumType(Status) },
    { no: 12, name: "stop_loss_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PerpetualOrder {
    return new PerpetualOrder().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PerpetualOrder {
    return new PerpetualOrder().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PerpetualOrder {
    return new PerpetualOrder().fromJsonString(jsonString, options);
  }

  static equals(a: PerpetualOrder | PlainMessage<PerpetualOrder> | undefined, b: PerpetualOrder | PlainMessage<PerpetualOrder> | undefined): boolean {
    return proto3.util.equals(PerpetualOrder, a, b);
  }
}

