// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file elys/stablestake/query.proto (package elys.stablestake, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { AmmPool } from "./pool_pb.js";

/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from message elys.stablestake.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.stablestake.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from message elys.stablestake.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: elys.stablestake.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.stablestake.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * @generated from message elys.stablestake.QueryAmmPoolRequest
 */
export class QueryAmmPoolRequest extends Message<QueryAmmPoolRequest> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<QueryAmmPoolRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.stablestake.QueryAmmPoolRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAmmPoolRequest {
    return new QueryAmmPoolRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAmmPoolRequest {
    return new QueryAmmPoolRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAmmPoolRequest {
    return new QueryAmmPoolRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAmmPoolRequest | PlainMessage<QueryAmmPoolRequest> | undefined, b: QueryAmmPoolRequest | PlainMessage<QueryAmmPoolRequest> | undefined): boolean {
    return proto3.util.equals(QueryAmmPoolRequest, a, b);
  }
}

/**
 * @generated from message elys.stablestake.QueryAmmPoolResponse
 */
export class QueryAmmPoolResponse extends Message<QueryAmmPoolResponse> {
  /**
   * @generated from field: elys.stablestake.AmmPool amm_pool = 1;
   */
  ammPool?: AmmPool;

  constructor(data?: PartialMessage<QueryAmmPoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.stablestake.QueryAmmPoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amm_pool", kind: "message", T: AmmPool },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAmmPoolResponse {
    return new QueryAmmPoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAmmPoolResponse {
    return new QueryAmmPoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAmmPoolResponse {
    return new QueryAmmPoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAmmPoolResponse | PlainMessage<QueryAmmPoolResponse> | undefined, b: QueryAmmPoolResponse | PlainMessage<QueryAmmPoolResponse> | undefined): boolean {
    return proto3.util.equals(QueryAmmPoolResponse, a, b);
  }
}

/**
 * @generated from message elys.stablestake.QueryAllAmmPoolsRequest
 */
export class QueryAllAmmPoolsRequest extends Message<QueryAllAmmPoolsRequest> {
  constructor(data?: PartialMessage<QueryAllAmmPoolsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.stablestake.QueryAllAmmPoolsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllAmmPoolsRequest {
    return new QueryAllAmmPoolsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllAmmPoolsRequest {
    return new QueryAllAmmPoolsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllAmmPoolsRequest {
    return new QueryAllAmmPoolsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllAmmPoolsRequest | PlainMessage<QueryAllAmmPoolsRequest> | undefined, b: QueryAllAmmPoolsRequest | PlainMessage<QueryAllAmmPoolsRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllAmmPoolsRequest, a, b);
  }
}

/**
 * @generated from message elys.stablestake.QueryAllAmmPoolsResponse
 */
export class QueryAllAmmPoolsResponse extends Message<QueryAllAmmPoolsResponse> {
  /**
   * @generated from field: repeated elys.stablestake.AmmPool amm_pools = 1;
   */
  ammPools: AmmPool[] = [];

  constructor(data?: PartialMessage<QueryAllAmmPoolsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.stablestake.QueryAllAmmPoolsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amm_pools", kind: "message", T: AmmPool, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllAmmPoolsResponse {
    return new QueryAllAmmPoolsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllAmmPoolsResponse {
    return new QueryAllAmmPoolsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllAmmPoolsResponse {
    return new QueryAllAmmPoolsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllAmmPoolsResponse | PlainMessage<QueryAllAmmPoolsResponse> | undefined, b: QueryAllAmmPoolsResponse | PlainMessage<QueryAllAmmPoolsResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllAmmPoolsResponse, a, b);
  }
}

/**
 * QueryBorrowRatioRequest is request type for the Query/BorrowRatio RPC method.
 *
 * @generated from message elys.stablestake.QueryBorrowRatioRequest
 */
export class QueryBorrowRatioRequest extends Message<QueryBorrowRatioRequest> {
  constructor(data?: PartialMessage<QueryBorrowRatioRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.stablestake.QueryBorrowRatioRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBorrowRatioRequest {
    return new QueryBorrowRatioRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBorrowRatioRequest {
    return new QueryBorrowRatioRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBorrowRatioRequest {
    return new QueryBorrowRatioRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBorrowRatioRequest | PlainMessage<QueryBorrowRatioRequest> | undefined, b: QueryBorrowRatioRequest | PlainMessage<QueryBorrowRatioRequest> | undefined): boolean {
    return proto3.util.equals(QueryBorrowRatioRequest, a, b);
  }
}

/**
 * QueryBorrowRatioResponse is response type for the Query/BorrowRatio RPC
 * method.
 *
 * @generated from message elys.stablestake.QueryBorrowRatioResponse
 */
export class QueryBorrowRatioResponse extends Message<QueryBorrowRatioResponse> {
  /**
   * @generated from field: string total_deposit = 1;
   */
  totalDeposit = "";

  /**
   * @generated from field: string total_borrow = 2;
   */
  totalBorrow = "";

  /**
   * @generated from field: string borrow_ratio = 3;
   */
  borrowRatio = "";

  constructor(data?: PartialMessage<QueryBorrowRatioResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.stablestake.QueryBorrowRatioResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total_deposit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "total_borrow", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "borrow_ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBorrowRatioResponse {
    return new QueryBorrowRatioResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBorrowRatioResponse {
    return new QueryBorrowRatioResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBorrowRatioResponse {
    return new QueryBorrowRatioResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBorrowRatioResponse | PlainMessage<QueryBorrowRatioResponse> | undefined, b: QueryBorrowRatioResponse | PlainMessage<QueryBorrowRatioResponse> | undefined): boolean {
    return proto3.util.equals(QueryBorrowRatioResponse, a, b);
  }
}

