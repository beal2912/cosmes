// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file elys/stablestake/query.proto (package elys.stablestake, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { AmmPool } from "./pool_pb.js";
import { PageRequest, PageResponse } from "../../cosmos/base/query/v1beta1/pagination_pb.js";
import { Debt } from "./debt_pb.js";
import { InterestBlock } from "./types_pb.js";

/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from message elys.stablestake.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.stablestake.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from message elys.stablestake.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: elys.stablestake.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.stablestake.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * @generated from message elys.stablestake.QueryAmmPoolRequest
 */
export class QueryAmmPoolRequest extends Message<QueryAmmPoolRequest> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<QueryAmmPoolRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.stablestake.QueryAmmPoolRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAmmPoolRequest {
    return new QueryAmmPoolRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAmmPoolRequest {
    return new QueryAmmPoolRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAmmPoolRequest {
    return new QueryAmmPoolRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAmmPoolRequest | PlainMessage<QueryAmmPoolRequest> | undefined, b: QueryAmmPoolRequest | PlainMessage<QueryAmmPoolRequest> | undefined): boolean {
    return proto3.util.equals(QueryAmmPoolRequest, a, b);
  }
}

/**
 * @generated from message elys.stablestake.QueryAmmPoolResponse
 */
export class QueryAmmPoolResponse extends Message<QueryAmmPoolResponse> {
  /**
   * @generated from field: elys.stablestake.AmmPool amm_pool = 1;
   */
  ammPool?: AmmPool;

  constructor(data?: PartialMessage<QueryAmmPoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.stablestake.QueryAmmPoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amm_pool", kind: "message", T: AmmPool },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAmmPoolResponse {
    return new QueryAmmPoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAmmPoolResponse {
    return new QueryAmmPoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAmmPoolResponse {
    return new QueryAmmPoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAmmPoolResponse | PlainMessage<QueryAmmPoolResponse> | undefined, b: QueryAmmPoolResponse | PlainMessage<QueryAmmPoolResponse> | undefined): boolean {
    return proto3.util.equals(QueryAmmPoolResponse, a, b);
  }
}

/**
 * @generated from message elys.stablestake.QueryAllAmmPoolsRequest
 */
export class QueryAllAmmPoolsRequest extends Message<QueryAllAmmPoolsRequest> {
  constructor(data?: PartialMessage<QueryAllAmmPoolsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.stablestake.QueryAllAmmPoolsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllAmmPoolsRequest {
    return new QueryAllAmmPoolsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllAmmPoolsRequest {
    return new QueryAllAmmPoolsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllAmmPoolsRequest {
    return new QueryAllAmmPoolsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllAmmPoolsRequest | PlainMessage<QueryAllAmmPoolsRequest> | undefined, b: QueryAllAmmPoolsRequest | PlainMessage<QueryAllAmmPoolsRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllAmmPoolsRequest, a, b);
  }
}

/**
 * @generated from message elys.stablestake.QueryAllAmmPoolsResponse
 */
export class QueryAllAmmPoolsResponse extends Message<QueryAllAmmPoolsResponse> {
  /**
   * @generated from field: repeated elys.stablestake.AmmPool amm_pools = 1;
   */
  ammPools: AmmPool[] = [];

  constructor(data?: PartialMessage<QueryAllAmmPoolsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.stablestake.QueryAllAmmPoolsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amm_pools", kind: "message", T: AmmPool, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllAmmPoolsResponse {
    return new QueryAllAmmPoolsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllAmmPoolsResponse {
    return new QueryAllAmmPoolsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllAmmPoolsResponse {
    return new QueryAllAmmPoolsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllAmmPoolsResponse | PlainMessage<QueryAllAmmPoolsResponse> | undefined, b: QueryAllAmmPoolsResponse | PlainMessage<QueryAllAmmPoolsResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllAmmPoolsResponse, a, b);
  }
}

/**
 * QueryBorrowRatioRequest is request type for the Query/BorrowRatio RPC method.
 *
 * @generated from message elys.stablestake.QueryBorrowRatioRequest
 */
export class QueryBorrowRatioRequest extends Message<QueryBorrowRatioRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  constructor(data?: PartialMessage<QueryBorrowRatioRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.stablestake.QueryBorrowRatioRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBorrowRatioRequest {
    return new QueryBorrowRatioRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBorrowRatioRequest {
    return new QueryBorrowRatioRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBorrowRatioRequest {
    return new QueryBorrowRatioRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBorrowRatioRequest | PlainMessage<QueryBorrowRatioRequest> | undefined, b: QueryBorrowRatioRequest | PlainMessage<QueryBorrowRatioRequest> | undefined): boolean {
    return proto3.util.equals(QueryBorrowRatioRequest, a, b);
  }
}

/**
 * QueryBorrowRatioResponse is response type for the Query/BorrowRatio RPC
 * method.
 *
 * @generated from message elys.stablestake.QueryBorrowRatioResponse
 */
export class QueryBorrowRatioResponse extends Message<QueryBorrowRatioResponse> {
  /**
   * @generated from field: string net_amount = 1;
   */
  netAmount = "";

  /**
   * @generated from field: string total_borrow = 2;
   */
  totalBorrow = "";

  /**
   * @generated from field: string borrow_ratio = 3;
   */
  borrowRatio = "";

  constructor(data?: PartialMessage<QueryBorrowRatioResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.stablestake.QueryBorrowRatioResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "net_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "total_borrow", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "borrow_ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBorrowRatioResponse {
    return new QueryBorrowRatioResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBorrowRatioResponse {
    return new QueryBorrowRatioResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBorrowRatioResponse {
    return new QueryBorrowRatioResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBorrowRatioResponse | PlainMessage<QueryBorrowRatioResponse> | undefined, b: QueryBorrowRatioResponse | PlainMessage<QueryBorrowRatioResponse> | undefined): boolean {
    return proto3.util.equals(QueryBorrowRatioResponse, a, b);
  }
}

/**
 * @generated from message elys.stablestake.QueryGetPoolRequest
 */
export class QueryGetPoolRequest extends Message<QueryGetPoolRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  constructor(data?: PartialMessage<QueryGetPoolRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.stablestake.QueryGetPoolRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetPoolRequest {
    return new QueryGetPoolRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetPoolRequest {
    return new QueryGetPoolRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetPoolRequest {
    return new QueryGetPoolRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetPoolRequest | PlainMessage<QueryGetPoolRequest> | undefined, b: QueryGetPoolRequest | PlainMessage<QueryGetPoolRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetPoolRequest, a, b);
  }
}

/**
 * @generated from message elys.stablestake.QueryGetPoolResponse
 */
export class QueryGetPoolResponse extends Message<QueryGetPoolResponse> {
  /**
   * @generated from field: elys.stablestake.PoolResponse pool = 1;
   */
  pool?: PoolResponse;

  constructor(data?: PartialMessage<QueryGetPoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.stablestake.QueryGetPoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool", kind: "message", T: PoolResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetPoolResponse {
    return new QueryGetPoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetPoolResponse {
    return new QueryGetPoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetPoolResponse {
    return new QueryGetPoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetPoolResponse | PlainMessage<QueryGetPoolResponse> | undefined, b: QueryGetPoolResponse | PlainMessage<QueryGetPoolResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetPoolResponse, a, b);
  }
}

/**
 * @generated from message elys.stablestake.QueryAllPoolRequest
 */
export class QueryAllPoolRequest extends Message<QueryAllPoolRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryAllPoolRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.stablestake.QueryAllPoolRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllPoolRequest {
    return new QueryAllPoolRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllPoolRequest {
    return new QueryAllPoolRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllPoolRequest {
    return new QueryAllPoolRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllPoolRequest | PlainMessage<QueryAllPoolRequest> | undefined, b: QueryAllPoolRequest | PlainMessage<QueryAllPoolRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllPoolRequest, a, b);
  }
}

/**
 * @generated from message elys.stablestake.QueryAllPoolResponse
 */
export class QueryAllPoolResponse extends Message<QueryAllPoolResponse> {
  /**
   * @generated from field: repeated elys.stablestake.PoolResponse pools = 1;
   */
  pools: PoolResponse[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryAllPoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.stablestake.QueryAllPoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pools", kind: "message", T: PoolResponse, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllPoolResponse {
    return new QueryAllPoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllPoolResponse {
    return new QueryAllPoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllPoolResponse {
    return new QueryAllPoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllPoolResponse | PlainMessage<QueryAllPoolResponse> | undefined, b: QueryAllPoolResponse | PlainMessage<QueryAllPoolResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllPoolResponse, a, b);
  }
}

/**
 * @generated from message elys.stablestake.PoolResponse
 */
export class PoolResponse extends Message<PoolResponse> {
  /**
   * @generated from field: string deposit_denom = 1;
   */
  depositDenom = "";

  /**
   * @generated from field: string redemption_rate = 2;
   */
  redemptionRate = "";

  /**
   * @generated from field: string interest_rate = 3;
   */
  interestRate = "";

  /**
   * @generated from field: string interest_rate_max = 4;
   */
  interestRateMax = "";

  /**
   * @generated from field: string interest_rate_min = 5;
   */
  interestRateMin = "";

  /**
   * @generated from field: string interest_rate_increase = 6;
   */
  interestRateIncrease = "";

  /**
   * @generated from field: string interest_rate_decrease = 7;
   */
  interestRateDecrease = "";

  /**
   * @generated from field: string health_gain_factor = 8;
   */
  healthGainFactor = "";

  /**
   * @generated from field: string total_value = 9;
   */
  totalValue = "";

  /**
   * @generated from field: string max_leverage_ratio = 10;
   */
  maxLeverageRatio = "";

  /**
   * @generated from field: uint64 pool_id = 11;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: string net_amount = 12;
   */
  netAmount = "";

  /**
   * @generated from field: string total_borrow = 13;
   */
  totalBorrow = "";

  /**
   * @generated from field: string borrow_ratio = 14;
   */
  borrowRatio = "";

  /**
   * @generated from field: string max_withdraw_ratio = 15;
   */
  maxWithdrawRatio = "";

  constructor(data?: PartialMessage<PoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.stablestake.PoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deposit_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "redemption_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "interest_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "interest_rate_max", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "interest_rate_min", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "interest_rate_increase", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "interest_rate_decrease", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "health_gain_factor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "total_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "max_leverage_ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "net_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "total_borrow", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "borrow_ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "max_withdraw_ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolResponse {
    return new PoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolResponse {
    return new PoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolResponse {
    return new PoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PoolResponse | PlainMessage<PoolResponse> | undefined, b: PoolResponse | PlainMessage<PoolResponse> | undefined): boolean {
    return proto3.util.equals(PoolResponse, a, b);
  }
}

/**
 * @generated from message elys.stablestake.QueryDebtRequest
 */
export class QueryDebtRequest extends Message<QueryDebtRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: string address = 2;
   */
  address = "";

  constructor(data?: PartialMessage<QueryDebtRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.stablestake.QueryDebtRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDebtRequest {
    return new QueryDebtRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDebtRequest {
    return new QueryDebtRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDebtRequest {
    return new QueryDebtRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDebtRequest | PlainMessage<QueryDebtRequest> | undefined, b: QueryDebtRequest | PlainMessage<QueryDebtRequest> | undefined): boolean {
    return proto3.util.equals(QueryDebtRequest, a, b);
  }
}

/**
 * @generated from message elys.stablestake.QueryDebtResponse
 */
export class QueryDebtResponse extends Message<QueryDebtResponse> {
  /**
   * @generated from field: elys.stablestake.Debt debt = 1;
   */
  debt?: Debt;

  constructor(data?: PartialMessage<QueryDebtResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.stablestake.QueryDebtResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "debt", kind: "message", T: Debt },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDebtResponse {
    return new QueryDebtResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDebtResponse {
    return new QueryDebtResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDebtResponse {
    return new QueryDebtResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDebtResponse | PlainMessage<QueryDebtResponse> | undefined, b: QueryDebtResponse | PlainMessage<QueryDebtResponse> | undefined): boolean {
    return proto3.util.equals(QueryDebtResponse, a, b);
  }
}

/**
 * @generated from message elys.stablestake.QueryGetInterestRequest
 */
export class QueryGetInterestRequest extends Message<QueryGetInterestRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: uint64 block_height = 2;
   */
  blockHeight = protoInt64.zero;

  constructor(data?: PartialMessage<QueryGetInterestRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.stablestake.QueryGetInterestRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetInterestRequest {
    return new QueryGetInterestRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetInterestRequest {
    return new QueryGetInterestRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetInterestRequest {
    return new QueryGetInterestRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetInterestRequest | PlainMessage<QueryGetInterestRequest> | undefined, b: QueryGetInterestRequest | PlainMessage<QueryGetInterestRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetInterestRequest, a, b);
  }
}

/**
 * @generated from message elys.stablestake.QueryGetInterestResponse
 */
export class QueryGetInterestResponse extends Message<QueryGetInterestResponse> {
  /**
   * @generated from field: elys.stablestake.InterestBlock interest_block = 1;
   */
  interestBlock?: InterestBlock;

  constructor(data?: PartialMessage<QueryGetInterestResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.stablestake.QueryGetInterestResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "interest_block", kind: "message", T: InterestBlock },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetInterestResponse {
    return new QueryGetInterestResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetInterestResponse {
    return new QueryGetInterestResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetInterestResponse {
    return new QueryGetInterestResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetInterestResponse | PlainMessage<QueryGetInterestResponse> | undefined, b: QueryGetInterestResponse | PlainMessage<QueryGetInterestResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetInterestResponse, a, b);
  }
}

/**
 * @generated from message elys.stablestake.MaxBondableAmountRequest
 */
export class MaxBondableAmountRequest extends Message<MaxBondableAmountRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  constructor(data?: PartialMessage<MaxBondableAmountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.stablestake.MaxBondableAmountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MaxBondableAmountRequest {
    return new MaxBondableAmountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MaxBondableAmountRequest {
    return new MaxBondableAmountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MaxBondableAmountRequest {
    return new MaxBondableAmountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MaxBondableAmountRequest | PlainMessage<MaxBondableAmountRequest> | undefined, b: MaxBondableAmountRequest | PlainMessage<MaxBondableAmountRequest> | undefined): boolean {
    return proto3.util.equals(MaxBondableAmountRequest, a, b);
  }
}

/**
 * @generated from message elys.stablestake.MaxBondableAmountResponse
 */
export class MaxBondableAmountResponse extends Message<MaxBondableAmountResponse> {
  /**
   * @generated from field: string amount = 1;
   */
  amount = "";

  constructor(data?: PartialMessage<MaxBondableAmountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.stablestake.MaxBondableAmountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MaxBondableAmountResponse {
    return new MaxBondableAmountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MaxBondableAmountResponse {
    return new MaxBondableAmountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MaxBondableAmountResponse {
    return new MaxBondableAmountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MaxBondableAmountResponse | PlainMessage<MaxBondableAmountResponse> | undefined, b: MaxBondableAmountResponse | PlainMessage<MaxBondableAmountResponse> | undefined): boolean {
    return proto3.util.equals(MaxBondableAmountResponse, a, b);
  }
}

