// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file elys/vaults/tx.proto (package elys.vaults, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { Coin } from "../../cosmos/base/v1beta1/coin_pb.js";

/**
 * MsgUpdateParams is the Msg/UpdateParams request type.
 *
 * @generated from message elys.vaults.MsgUpdateParams
 */
export class MsgUpdateParams extends Message<MsgUpdateParams> {
  /**
   * authority is the address that controls the module (defaults to x/gov unless
   * overwritten).
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * params defines the module parameters to update.
   *
   * NOTE: All parameters must be supplied.
   *
   * @generated from field: elys.vaults.Params params = 2;
   */
  params?: Params;

  constructor(data?: PartialMessage<MsgUpdateParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.MsgUpdateParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined, b: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParams, a, b);
  }
}

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 *
 * @generated from message elys.vaults.MsgUpdateParamsResponse
 */
export class MsgUpdateParamsResponse extends Message<MsgUpdateParamsResponse> {
  constructor(data?: PartialMessage<MsgUpdateParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.MsgUpdateParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined, b: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParamsResponse, a, b);
  }
}

/**
 * MsgDeposit is the MsgDeposit request type.
 *
 * @generated from message elys.vaults.MsgDeposit
 */
export class MsgDeposit extends Message<MsgDeposit> {
  /**
   * depositor is the address of the user depositing the funds.
   *
   * @generated from field: string depositor = 1;
   */
  depositor = "";

  /**
   * vault_id is the ID of the vault to deposit into.
   *
   * @generated from field: uint64 vault_id = 2;
   */
  vaultId = protoInt64.zero;

  /**
   * amount is the amount of tokens to deposit.
   *
   * @generated from field: cosmos.base.v1beta1.Coin amount = 3;
   */
  amount?: Coin;

  constructor(data?: PartialMessage<MsgDeposit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.MsgDeposit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "depositor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "vault_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDeposit {
    return new MsgDeposit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDeposit {
    return new MsgDeposit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDeposit {
    return new MsgDeposit().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDeposit | PlainMessage<MsgDeposit> | undefined, b: MsgDeposit | PlainMessage<MsgDeposit> | undefined): boolean {
    return proto3.util.equals(MsgDeposit, a, b);
  }
}

/**
 * MsgDepositResponse defines the response structure for deposit
 *
 * @generated from message elys.vaults.MsgDepositResponse
 */
export class MsgDepositResponse extends Message<MsgDepositResponse> {
  /**
   * vault_id is the ID of the vault that the deposit was made into.
   *
   * @generated from field: uint64 vault_id = 1;
   */
  vaultId = protoInt64.zero;

  /**
   * @generated from field: string shares = 2;
   */
  shares = "";

  constructor(data?: PartialMessage<MsgDepositResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.MsgDepositResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vault_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "shares", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDepositResponse {
    return new MsgDepositResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDepositResponse {
    return new MsgDepositResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDepositResponse {
    return new MsgDepositResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDepositResponse | PlainMessage<MsgDepositResponse> | undefined, b: MsgDepositResponse | PlainMessage<MsgDepositResponse> | undefined): boolean {
    return proto3.util.equals(MsgDepositResponse, a, b);
  }
}

/**
 * MsgWithdraw is the MsgWithdraw request type.
 *
 * @generated from message elys.vaults.MsgWithdraw
 */
export class MsgWithdraw extends Message<MsgWithdraw> {
  /**
   * withdrawer is the address of the user withdrawing the funds.
   *
   * @generated from field: string withdrawer = 1;
   */
  withdrawer = "";

  /**
   * vault_id is the ID of the vault to withdraw from.
   *
   * @generated from field: uint64 vault_id = 2;
   */
  vaultId = protoInt64.zero;

  /**
   * @generated from field: string shares = 3;
   */
  shares = "";

  /**
   * @generated from field: bool swap_to_deposit_denom = 4;
   */
  swapToDepositDenom = false;

  constructor(data?: PartialMessage<MsgWithdraw>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.MsgWithdraw";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "withdrawer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "vault_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "shares", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "swap_to_deposit_denom", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgWithdraw {
    return new MsgWithdraw().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgWithdraw {
    return new MsgWithdraw().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgWithdraw {
    return new MsgWithdraw().fromJsonString(jsonString, options);
  }

  static equals(a: MsgWithdraw | PlainMessage<MsgWithdraw> | undefined, b: MsgWithdraw | PlainMessage<MsgWithdraw> | undefined): boolean {
    return proto3.util.equals(MsgWithdraw, a, b);
  }
}

/**
 * MsgWithdrawResponse defines the response structure for withdrawal
 *
 * @generated from message elys.vaults.MsgWithdrawResponse
 */
export class MsgWithdrawResponse extends Message<MsgWithdrawResponse> {
  /**
   * vault_id is the ID of the vault that the withdrawal was made from.
   *
   * @generated from field: uint64 vault_id = 1;
   */
  vaultId = protoInt64.zero;

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 2;
   */
  amount: Coin[] = [];

  constructor(data?: PartialMessage<MsgWithdrawResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.MsgWithdrawResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vault_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "amount", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgWithdrawResponse {
    return new MsgWithdrawResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgWithdrawResponse {
    return new MsgWithdrawResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgWithdrawResponse {
    return new MsgWithdrawResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgWithdrawResponse | PlainMessage<MsgWithdrawResponse> | undefined, b: MsgWithdrawResponse | PlainMessage<MsgWithdrawResponse> | undefined): boolean {
    return proto3.util.equals(MsgWithdrawResponse, a, b);
  }
}

/**
 * MsgAddVault is the MsgAddVault request type.
 *
 * @generated from message elys.vaults.MsgAddVault
 */
export class MsgAddVault extends Message<MsgAddVault> {
  /**
   * creator is the address of the user creating the vault.
   *
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string deposit_denom = 2;
   */
  depositDenom = "";

  /**
   * Max amount vault can hold in USD
   *
   * @generated from field: string max_amount_usd = 3;
   */
  maxAmountUsd = "";

  /**
   * Coins allowed to trade in the vault
   *
   * @generated from field: repeated string allowed_coins = 4;
   */
  allowedCoins: string[] = [];

  /**
   * @generated from field: repeated string reward_coins = 5;
   */
  rewardCoins: string[] = [];

  /**
   * @generated from field: string benchmark_coin = 6;
   */
  benchmarkCoin = "";

  /**
   * @generated from field: string manager = 7;
   */
  manager = "";

  /**
   * @generated from field: string management_fee = 8;
   */
  managementFee = "";

  /**
   * @generated from field: string performance_fee = 9;
   */
  performanceFee = "";

  /**
   * @generated from field: string protocol_fee_share = 10;
   */
  protocolFeeShare = "";

  /**
   * in seconds
   *
   * @generated from field: uint64 lockup_period = 11;
   */
  lockupPeriod = protoInt64.zero;

  /**
   * @generated from field: string description = 12;
   */
  description = "";

  /**
   * TODO: enable checks in v1.5
   *
   * @generated from field: repeated string allowed_actions = 13;
   */
  allowedActions: string[] = [];

  constructor(data?: PartialMessage<MsgAddVault>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.MsgAddVault";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "deposit_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "max_amount_usd", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "allowed_coins", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "reward_coins", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "benchmark_coin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "manager", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "management_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "performance_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "protocol_fee_share", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "lockup_period", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "allowed_actions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgAddVault {
    return new MsgAddVault().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgAddVault {
    return new MsgAddVault().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgAddVault {
    return new MsgAddVault().fromJsonString(jsonString, options);
  }

  static equals(a: MsgAddVault | PlainMessage<MsgAddVault> | undefined, b: MsgAddVault | PlainMessage<MsgAddVault> | undefined): boolean {
    return proto3.util.equals(MsgAddVault, a, b);
  }
}

/**
 * MsgAddVaultResponse defines the response structure for adding vault
 *
 * @generated from message elys.vaults.MsgAddVaultResponse
 */
export class MsgAddVaultResponse extends Message<MsgAddVaultResponse> {
  /**
   * vault_id is the ID of the vault that was created.
   *
   * @generated from field: uint64 vault_id = 1;
   */
  vaultId = protoInt64.zero;

  constructor(data?: PartialMessage<MsgAddVaultResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.MsgAddVaultResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vault_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgAddVaultResponse {
    return new MsgAddVaultResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgAddVaultResponse {
    return new MsgAddVaultResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgAddVaultResponse {
    return new MsgAddVaultResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgAddVaultResponse | PlainMessage<MsgAddVaultResponse> | undefined, b: MsgAddVaultResponse | PlainMessage<MsgAddVaultResponse> | undefined): boolean {
    return proto3.util.equals(MsgAddVaultResponse, a, b);
  }
}

/**
 * @generated from message elys.vaults.MsgPerformActionResponse
 */
export class MsgPerformActionResponse extends Message<MsgPerformActionResponse> {
  constructor(data?: PartialMessage<MsgPerformActionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.MsgPerformActionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgPerformActionResponse {
    return new MsgPerformActionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgPerformActionResponse {
    return new MsgPerformActionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgPerformActionResponse {
    return new MsgPerformActionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgPerformActionResponse | PlainMessage<MsgPerformActionResponse> | undefined, b: MsgPerformActionResponse | PlainMessage<MsgPerformActionResponse> | undefined): boolean {
    return proto3.util.equals(MsgPerformActionResponse, a, b);
  }
}

/**
 * @generated from message elys.vaults.MsgPerformActionJoinPool
 */
export class MsgPerformActionJoinPool extends Message<MsgPerformActionJoinPool> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: uint64 vault_id = 2;
   */
  vaultId = protoInt64.zero;

  /**
   * @generated from field: uint64 pool_id = 3;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin max_amounts_in = 4;
   */
  maxAmountsIn: Coin[] = [];

  /**
   * @generated from field: string share_amount_out = 5;
   */
  shareAmountOut = "";

  constructor(data?: PartialMessage<MsgPerformActionJoinPool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.MsgPerformActionJoinPool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "vault_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "max_amounts_in", kind: "message", T: Coin, repeated: true },
    { no: 5, name: "share_amount_out", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgPerformActionJoinPool {
    return new MsgPerformActionJoinPool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgPerformActionJoinPool {
    return new MsgPerformActionJoinPool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgPerformActionJoinPool {
    return new MsgPerformActionJoinPool().fromJsonString(jsonString, options);
  }

  static equals(a: MsgPerformActionJoinPool | PlainMessage<MsgPerformActionJoinPool> | undefined, b: MsgPerformActionJoinPool | PlainMessage<MsgPerformActionJoinPool> | undefined): boolean {
    return proto3.util.equals(MsgPerformActionJoinPool, a, b);
  }
}

/**
 * @generated from message elys.vaults.MsgPerformActionJoinPoolResponse
 */
export class MsgPerformActionJoinPoolResponse extends Message<MsgPerformActionJoinPoolResponse> {
  /**
   * @generated from field: string share_amount_out = 1;
   */
  shareAmountOut = "";

  constructor(data?: PartialMessage<MsgPerformActionJoinPoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.MsgPerformActionJoinPoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "share_amount_out", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgPerformActionJoinPoolResponse {
    return new MsgPerformActionJoinPoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgPerformActionJoinPoolResponse {
    return new MsgPerformActionJoinPoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgPerformActionJoinPoolResponse {
    return new MsgPerformActionJoinPoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgPerformActionJoinPoolResponse | PlainMessage<MsgPerformActionJoinPoolResponse> | undefined, b: MsgPerformActionJoinPoolResponse | PlainMessage<MsgPerformActionJoinPoolResponse> | undefined): boolean {
    return proto3.util.equals(MsgPerformActionJoinPoolResponse, a, b);
  }
}

/**
 * @generated from message elys.vaults.MsgPerformActionExitPool
 */
export class MsgPerformActionExitPool extends Message<MsgPerformActionExitPool> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: uint64 vault_id = 2;
   */
  vaultId = protoInt64.zero;

  /**
   * @generated from field: uint64 pool_id = 3;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin min_amounts_out = 4;
   */
  minAmountsOut: Coin[] = [];

  /**
   * @generated from field: string share_amount_in = 5;
   */
  shareAmountIn = "";

  /**
   * @generated from field: string token_out_denom = 6;
   */
  tokenOutDenom = "";

  constructor(data?: PartialMessage<MsgPerformActionExitPool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.MsgPerformActionExitPool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "vault_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "min_amounts_out", kind: "message", T: Coin, repeated: true },
    { no: 5, name: "share_amount_in", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "token_out_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgPerformActionExitPool {
    return new MsgPerformActionExitPool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgPerformActionExitPool {
    return new MsgPerformActionExitPool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgPerformActionExitPool {
    return new MsgPerformActionExitPool().fromJsonString(jsonString, options);
  }

  static equals(a: MsgPerformActionExitPool | PlainMessage<MsgPerformActionExitPool> | undefined, b: MsgPerformActionExitPool | PlainMessage<MsgPerformActionExitPool> | undefined): boolean {
    return proto3.util.equals(MsgPerformActionExitPool, a, b);
  }
}

/**
 * @generated from message elys.vaults.MsgPerformActionExitPoolResponse
 */
export class MsgPerformActionExitPoolResponse extends Message<MsgPerformActionExitPoolResponse> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin token_out = 1;
   */
  tokenOut: Coin[] = [];

  /**
   * @generated from field: string weight_balance_ratio = 2;
   */
  weightBalanceRatio = "";

  /**
   * @generated from field: string slippage = 3;
   */
  slippage = "";

  constructor(data?: PartialMessage<MsgPerformActionExitPoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.MsgPerformActionExitPoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token_out", kind: "message", T: Coin, repeated: true },
    { no: 2, name: "weight_balance_ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "slippage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgPerformActionExitPoolResponse {
    return new MsgPerformActionExitPoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgPerformActionExitPoolResponse {
    return new MsgPerformActionExitPoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgPerformActionExitPoolResponse {
    return new MsgPerformActionExitPoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgPerformActionExitPoolResponse | PlainMessage<MsgPerformActionExitPoolResponse> | undefined, b: MsgPerformActionExitPoolResponse | PlainMessage<MsgPerformActionExitPoolResponse> | undefined): boolean {
    return proto3.util.equals(MsgPerformActionExitPoolResponse, a, b);
  }
}

/**
 * @generated from message elys.vaults.MsgPerformActionSwapByDenom
 */
export class MsgPerformActionSwapByDenom extends Message<MsgPerformActionSwapByDenom> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: uint64 vault_id = 2;
   */
  vaultId = protoInt64.zero;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 3;
   */
  amount?: Coin;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin min_amount = 4;
   */
  minAmount?: Coin;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin max_amount = 5;
   */
  maxAmount?: Coin;

  /**
   * @generated from field: string denom_in = 6;
   */
  denomIn = "";

  /**
   * @generated from field: string denom_out = 7;
   */
  denomOut = "";

  constructor(data?: PartialMessage<MsgPerformActionSwapByDenom>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.MsgPerformActionSwapByDenom";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "vault_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "amount", kind: "message", T: Coin },
    { no: 4, name: "min_amount", kind: "message", T: Coin },
    { no: 5, name: "max_amount", kind: "message", T: Coin },
    { no: 6, name: "denom_in", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "denom_out", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgPerformActionSwapByDenom {
    return new MsgPerformActionSwapByDenom().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgPerformActionSwapByDenom {
    return new MsgPerformActionSwapByDenom().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgPerformActionSwapByDenom {
    return new MsgPerformActionSwapByDenom().fromJsonString(jsonString, options);
  }

  static equals(a: MsgPerformActionSwapByDenom | PlainMessage<MsgPerformActionSwapByDenom> | undefined, b: MsgPerformActionSwapByDenom | PlainMessage<MsgPerformActionSwapByDenom> | undefined): boolean {
    return proto3.util.equals(MsgPerformActionSwapByDenom, a, b);
  }
}

/**
 * @generated from message elys.vaults.MsgPerformActionSwapByDenomResponse
 */
export class MsgPerformActionSwapByDenomResponse extends Message<MsgPerformActionSwapByDenomResponse> {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin out_amount = 1;
   */
  outAmount?: Coin;

  constructor(data?: PartialMessage<MsgPerformActionSwapByDenomResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.MsgPerformActionSwapByDenomResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "out_amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgPerformActionSwapByDenomResponse {
    return new MsgPerformActionSwapByDenomResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgPerformActionSwapByDenomResponse {
    return new MsgPerformActionSwapByDenomResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgPerformActionSwapByDenomResponse {
    return new MsgPerformActionSwapByDenomResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgPerformActionSwapByDenomResponse | PlainMessage<MsgPerformActionSwapByDenomResponse> | undefined, b: MsgPerformActionSwapByDenomResponse | PlainMessage<MsgPerformActionSwapByDenomResponse> | undefined): boolean {
    return proto3.util.equals(MsgPerformActionSwapByDenomResponse, a, b);
  }
}

/**
 * @generated from message elys.vaults.MsgUpdateVaultCoins
 */
export class MsgUpdateVaultCoins extends Message<MsgUpdateVaultCoins> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: uint64 vault_id = 2;
   */
  vaultId = protoInt64.zero;

  /**
   * @generated from field: repeated string allowed_coins = 3;
   */
  allowedCoins: string[] = [];

  /**
   * @generated from field: repeated string reward_coins = 4;
   */
  rewardCoins: string[] = [];

  constructor(data?: PartialMessage<MsgUpdateVaultCoins>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.MsgUpdateVaultCoins";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "vault_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "allowed_coins", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "reward_coins", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateVaultCoins {
    return new MsgUpdateVaultCoins().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateVaultCoins {
    return new MsgUpdateVaultCoins().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateVaultCoins {
    return new MsgUpdateVaultCoins().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateVaultCoins | PlainMessage<MsgUpdateVaultCoins> | undefined, b: MsgUpdateVaultCoins | PlainMessage<MsgUpdateVaultCoins> | undefined): boolean {
    return proto3.util.equals(MsgUpdateVaultCoins, a, b);
  }
}

/**
 * @generated from message elys.vaults.MsgUpdateVaultCoinsResponse
 */
export class MsgUpdateVaultCoinsResponse extends Message<MsgUpdateVaultCoinsResponse> {
  constructor(data?: PartialMessage<MsgUpdateVaultCoinsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.MsgUpdateVaultCoinsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateVaultCoinsResponse {
    return new MsgUpdateVaultCoinsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateVaultCoinsResponse {
    return new MsgUpdateVaultCoinsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateVaultCoinsResponse {
    return new MsgUpdateVaultCoinsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateVaultCoinsResponse | PlainMessage<MsgUpdateVaultCoinsResponse> | undefined, b: MsgUpdateVaultCoinsResponse | PlainMessage<MsgUpdateVaultCoinsResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateVaultCoinsResponse, a, b);
  }
}

/**
 * @generated from message elys.vaults.MsgUpdateVaultFees
 */
export class MsgUpdateVaultFees extends Message<MsgUpdateVaultFees> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: uint64 vault_id = 2;
   */
  vaultId = protoInt64.zero;

  /**
   * @generated from field: string management_fee = 3;
   */
  managementFee = "";

  /**
   * @generated from field: string performance_fee = 4;
   */
  performanceFee = "";

  /**
   * @generated from field: string protocol_fee_share = 5;
   */
  protocolFeeShare = "";

  constructor(data?: PartialMessage<MsgUpdateVaultFees>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.MsgUpdateVaultFees";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "vault_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "management_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "performance_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "protocol_fee_share", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateVaultFees {
    return new MsgUpdateVaultFees().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateVaultFees {
    return new MsgUpdateVaultFees().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateVaultFees {
    return new MsgUpdateVaultFees().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateVaultFees | PlainMessage<MsgUpdateVaultFees> | undefined, b: MsgUpdateVaultFees | PlainMessage<MsgUpdateVaultFees> | undefined): boolean {
    return proto3.util.equals(MsgUpdateVaultFees, a, b);
  }
}

/**
 * @generated from message elys.vaults.MsgUpdateVaultFeesResponse
 */
export class MsgUpdateVaultFeesResponse extends Message<MsgUpdateVaultFeesResponse> {
  constructor(data?: PartialMessage<MsgUpdateVaultFeesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.MsgUpdateVaultFeesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateVaultFeesResponse {
    return new MsgUpdateVaultFeesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateVaultFeesResponse {
    return new MsgUpdateVaultFeesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateVaultFeesResponse {
    return new MsgUpdateVaultFeesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateVaultFeesResponse | PlainMessage<MsgUpdateVaultFeesResponse> | undefined, b: MsgUpdateVaultFeesResponse | PlainMessage<MsgUpdateVaultFeesResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateVaultFeesResponse, a, b);
  }
}

/**
 * @generated from message elys.vaults.MsgUpdateVaultLockupPeriod
 */
export class MsgUpdateVaultLockupPeriod extends Message<MsgUpdateVaultLockupPeriod> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: uint64 vault_id = 2;
   */
  vaultId = protoInt64.zero;

  /**
   * @generated from field: uint64 lockup_period = 3;
   */
  lockupPeriod = protoInt64.zero;

  constructor(data?: PartialMessage<MsgUpdateVaultLockupPeriod>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.MsgUpdateVaultLockupPeriod";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "vault_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "lockup_period", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateVaultLockupPeriod {
    return new MsgUpdateVaultLockupPeriod().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateVaultLockupPeriod {
    return new MsgUpdateVaultLockupPeriod().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateVaultLockupPeriod {
    return new MsgUpdateVaultLockupPeriod().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateVaultLockupPeriod | PlainMessage<MsgUpdateVaultLockupPeriod> | undefined, b: MsgUpdateVaultLockupPeriod | PlainMessage<MsgUpdateVaultLockupPeriod> | undefined): boolean {
    return proto3.util.equals(MsgUpdateVaultLockupPeriod, a, b);
  }
}

/**
 * @generated from message elys.vaults.MsgUpdateVaultLockupPeriodResponse
 */
export class MsgUpdateVaultLockupPeriodResponse extends Message<MsgUpdateVaultLockupPeriodResponse> {
  constructor(data?: PartialMessage<MsgUpdateVaultLockupPeriodResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.MsgUpdateVaultLockupPeriodResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateVaultLockupPeriodResponse {
    return new MsgUpdateVaultLockupPeriodResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateVaultLockupPeriodResponse {
    return new MsgUpdateVaultLockupPeriodResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateVaultLockupPeriodResponse {
    return new MsgUpdateVaultLockupPeriodResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateVaultLockupPeriodResponse | PlainMessage<MsgUpdateVaultLockupPeriodResponse> | undefined, b: MsgUpdateVaultLockupPeriodResponse | PlainMessage<MsgUpdateVaultLockupPeriodResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateVaultLockupPeriodResponse, a, b);
  }
}

/**
 * @generated from message elys.vaults.MsgUpdateVaultMaxAmountUsd
 */
export class MsgUpdateVaultMaxAmountUsd extends Message<MsgUpdateVaultMaxAmountUsd> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: uint64 vault_id = 2;
   */
  vaultId = protoInt64.zero;

  /**
   * @generated from field: string max_amount_usd = 3;
   */
  maxAmountUsd = "";

  constructor(data?: PartialMessage<MsgUpdateVaultMaxAmountUsd>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.MsgUpdateVaultMaxAmountUsd";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "vault_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "max_amount_usd", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateVaultMaxAmountUsd {
    return new MsgUpdateVaultMaxAmountUsd().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateVaultMaxAmountUsd {
    return new MsgUpdateVaultMaxAmountUsd().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateVaultMaxAmountUsd {
    return new MsgUpdateVaultMaxAmountUsd().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateVaultMaxAmountUsd | PlainMessage<MsgUpdateVaultMaxAmountUsd> | undefined, b: MsgUpdateVaultMaxAmountUsd | PlainMessage<MsgUpdateVaultMaxAmountUsd> | undefined): boolean {
    return proto3.util.equals(MsgUpdateVaultMaxAmountUsd, a, b);
  }
}

/**
 * @generated from message elys.vaults.MsgUpdateVaultMaxAmountUsdResponse
 */
export class MsgUpdateVaultMaxAmountUsdResponse extends Message<MsgUpdateVaultMaxAmountUsdResponse> {
  constructor(data?: PartialMessage<MsgUpdateVaultMaxAmountUsdResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.MsgUpdateVaultMaxAmountUsdResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateVaultMaxAmountUsdResponse {
    return new MsgUpdateVaultMaxAmountUsdResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateVaultMaxAmountUsdResponse {
    return new MsgUpdateVaultMaxAmountUsdResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateVaultMaxAmountUsdResponse {
    return new MsgUpdateVaultMaxAmountUsdResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateVaultMaxAmountUsdResponse | PlainMessage<MsgUpdateVaultMaxAmountUsdResponse> | undefined, b: MsgUpdateVaultMaxAmountUsdResponse | PlainMessage<MsgUpdateVaultMaxAmountUsdResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateVaultMaxAmountUsdResponse, a, b);
  }
}

/**
 * @generated from message elys.vaults.MsgClaimRewards
 */
export class MsgClaimRewards extends Message<MsgClaimRewards> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: repeated uint64 vault_ids = 2;
   */
  vaultIds: bigint[] = [];

  constructor(data?: PartialMessage<MsgClaimRewards>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.MsgClaimRewards";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "vault_ids", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgClaimRewards {
    return new MsgClaimRewards().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgClaimRewards {
    return new MsgClaimRewards().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgClaimRewards {
    return new MsgClaimRewards().fromJsonString(jsonString, options);
  }

  static equals(a: MsgClaimRewards | PlainMessage<MsgClaimRewards> | undefined, b: MsgClaimRewards | PlainMessage<MsgClaimRewards> | undefined): boolean {
    return proto3.util.equals(MsgClaimRewards, a, b);
  }
}

/**
 * @generated from message elys.vaults.MsgClaimRewardsResponse
 */
export class MsgClaimRewardsResponse extends Message<MsgClaimRewardsResponse> {
  constructor(data?: PartialMessage<MsgClaimRewardsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.MsgClaimRewardsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgClaimRewardsResponse {
    return new MsgClaimRewardsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgClaimRewardsResponse {
    return new MsgClaimRewardsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgClaimRewardsResponse {
    return new MsgClaimRewardsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgClaimRewardsResponse | PlainMessage<MsgClaimRewardsResponse> | undefined, b: MsgClaimRewardsResponse | PlainMessage<MsgClaimRewardsResponse> | undefined): boolean {
    return proto3.util.equals(MsgClaimRewardsResponse, a, b);
  }
}

/**
 * @generated from message elys.vaults.MsgUpdateVaultAllowedActions
 */
export class MsgUpdateVaultAllowedActions extends Message<MsgUpdateVaultAllowedActions> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: uint64 vault_id = 2;
   */
  vaultId = protoInt64.zero;

  /**
   * @generated from field: repeated string allowed_actions = 3;
   */
  allowedActions: string[] = [];

  constructor(data?: PartialMessage<MsgUpdateVaultAllowedActions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.MsgUpdateVaultAllowedActions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "vault_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "allowed_actions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateVaultAllowedActions {
    return new MsgUpdateVaultAllowedActions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateVaultAllowedActions {
    return new MsgUpdateVaultAllowedActions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateVaultAllowedActions {
    return new MsgUpdateVaultAllowedActions().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateVaultAllowedActions | PlainMessage<MsgUpdateVaultAllowedActions> | undefined, b: MsgUpdateVaultAllowedActions | PlainMessage<MsgUpdateVaultAllowedActions> | undefined): boolean {
    return proto3.util.equals(MsgUpdateVaultAllowedActions, a, b);
  }
}

/**
 * @generated from message elys.vaults.MsgUpdateVaultAllowedActionsResponse
 */
export class MsgUpdateVaultAllowedActionsResponse extends Message<MsgUpdateVaultAllowedActionsResponse> {
  constructor(data?: PartialMessage<MsgUpdateVaultAllowedActionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.MsgUpdateVaultAllowedActionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateVaultAllowedActionsResponse {
    return new MsgUpdateVaultAllowedActionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateVaultAllowedActionsResponse {
    return new MsgUpdateVaultAllowedActionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateVaultAllowedActionsResponse {
    return new MsgUpdateVaultAllowedActionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateVaultAllowedActionsResponse | PlainMessage<MsgUpdateVaultAllowedActionsResponse> | undefined, b: MsgUpdateVaultAllowedActionsResponse | PlainMessage<MsgUpdateVaultAllowedActionsResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateVaultAllowedActionsResponse, a, b);
  }
}

