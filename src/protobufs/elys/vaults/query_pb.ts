// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file elys/vaults/query.proto (package elys.vaults, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Vault } from "./vault_pb.js";
import { Params } from "./params_pb.js";

/**
 * @generated from message elys.vaults.VaultAndData
 */
export class VaultAndData extends Message<VaultAndData> {
  /**
   * @generated from field: elys.vaults.Vault vault = 1;
   */
  vault?: Vault;

  /**
   * @generated from field: string eden_apr = 2;
   */
  edenApr = "";

  /**
   * @generated from field: string pnl_usd = 3;
   */
  pnlUsd = "";

  /**
   * @generated from field: string total_deposits_usd = 4;
   */
  totalDepositsUsd = "";

  /**
   * @generated from field: string deposits_used = 5;
   */
  depositsUsed = "";

  /**
   * @generated from field: repeated elys.vaults.PositionToken positions = 6;
   */
  positions: PositionToken[] = [];

  constructor(data?: PartialMessage<VaultAndData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.VaultAndData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vault", kind: "message", T: Vault },
    { no: 2, name: "eden_apr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pnl_usd", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "total_deposits_usd", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "deposits_used", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "positions", kind: "message", T: PositionToken, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VaultAndData {
    return new VaultAndData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VaultAndData {
    return new VaultAndData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VaultAndData {
    return new VaultAndData().fromJsonString(jsonString, options);
  }

  static equals(a: VaultAndData | PlainMessage<VaultAndData> | undefined, b: VaultAndData | PlainMessage<VaultAndData> | undefined): boolean {
    return proto3.util.equals(VaultAndData, a, b);
  }
}

/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from message elys.vaults.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from message elys.vaults.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: elys.vaults.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * @generated from message elys.vaults.QueryVaultRequest
 */
export class QueryVaultRequest extends Message<QueryVaultRequest> {
  /**
   * @generated from field: uint64 vault_id = 1;
   */
  vaultId = protoInt64.zero;

  /**
   * @generated from field: uint64 days = 2;
   */
  days = protoInt64.zero;

  constructor(data?: PartialMessage<QueryVaultRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.QueryVaultRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vault_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "days", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVaultRequest {
    return new QueryVaultRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVaultRequest {
    return new QueryVaultRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVaultRequest {
    return new QueryVaultRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVaultRequest | PlainMessage<QueryVaultRequest> | undefined, b: QueryVaultRequest | PlainMessage<QueryVaultRequest> | undefined): boolean {
    return proto3.util.equals(QueryVaultRequest, a, b);
  }
}

/**
 * @generated from message elys.vaults.QueryVaultResponse
 */
export class QueryVaultResponse extends Message<QueryVaultResponse> {
  /**
   * @generated from field: elys.vaults.VaultAndData vault = 1;
   */
  vault?: VaultAndData;

  constructor(data?: PartialMessage<QueryVaultResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.QueryVaultResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vault", kind: "message", T: VaultAndData },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVaultResponse {
    return new QueryVaultResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVaultResponse {
    return new QueryVaultResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVaultResponse {
    return new QueryVaultResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVaultResponse | PlainMessage<QueryVaultResponse> | undefined, b: QueryVaultResponse | PlainMessage<QueryVaultResponse> | undefined): boolean {
    return proto3.util.equals(QueryVaultResponse, a, b);
  }
}

/**
 * @generated from message elys.vaults.QueryVaultsRequest
 */
export class QueryVaultsRequest extends Message<QueryVaultsRequest> {
  /**
   * @generated from field: uint64 days = 1;
   */
  days = protoInt64.zero;

  constructor(data?: PartialMessage<QueryVaultsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.QueryVaultsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "days", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVaultsRequest {
    return new QueryVaultsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVaultsRequest {
    return new QueryVaultsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVaultsRequest {
    return new QueryVaultsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVaultsRequest | PlainMessage<QueryVaultsRequest> | undefined, b: QueryVaultsRequest | PlainMessage<QueryVaultsRequest> | undefined): boolean {
    return proto3.util.equals(QueryVaultsRequest, a, b);
  }
}

/**
 * @generated from message elys.vaults.QueryVaultsResponse
 */
export class QueryVaultsResponse extends Message<QueryVaultsResponse> {
  /**
   * @generated from field: repeated elys.vaults.VaultAndData vaults = 1;
   */
  vaults: VaultAndData[] = [];

  constructor(data?: PartialMessage<QueryVaultsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.QueryVaultsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vaults", kind: "message", T: VaultAndData, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVaultsResponse {
    return new QueryVaultsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVaultsResponse {
    return new QueryVaultsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVaultsResponse {
    return new QueryVaultsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVaultsResponse | PlainMessage<QueryVaultsResponse> | undefined, b: QueryVaultsResponse | PlainMessage<QueryVaultsResponse> | undefined): boolean {
    return proto3.util.equals(QueryVaultsResponse, a, b);
  }
}

/**
 * @generated from message elys.vaults.QueryVaultValue
 */
export class QueryVaultValue extends Message<QueryVaultValue> {
  /**
   * @generated from field: uint64 vault_id = 1;
   */
  vaultId = protoInt64.zero;

  constructor(data?: PartialMessage<QueryVaultValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.QueryVaultValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vault_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVaultValue {
    return new QueryVaultValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVaultValue {
    return new QueryVaultValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVaultValue {
    return new QueryVaultValue().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVaultValue | PlainMessage<QueryVaultValue> | undefined, b: QueryVaultValue | PlainMessage<QueryVaultValue> | undefined): boolean {
    return proto3.util.equals(QueryVaultValue, a, b);
  }
}

/**
 * @generated from message elys.vaults.QueryVaultValueResponse
 */
export class QueryVaultValueResponse extends Message<QueryVaultValueResponse> {
  /**
   * @generated from field: string usd_value = 1;
   */
  usdValue = "";

  constructor(data?: PartialMessage<QueryVaultValueResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.QueryVaultValueResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "usd_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVaultValueResponse {
    return new QueryVaultValueResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVaultValueResponse {
    return new QueryVaultValueResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVaultValueResponse {
    return new QueryVaultValueResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVaultValueResponse | PlainMessage<QueryVaultValueResponse> | undefined, b: QueryVaultValueResponse | PlainMessage<QueryVaultValueResponse> | undefined): boolean {
    return proto3.util.equals(QueryVaultValueResponse, a, b);
  }
}

/**
 * @generated from message elys.vaults.PositionToken
 */
export class PositionToken extends Message<PositionToken> {
  /**
   * @generated from field: string token_denom = 1;
   */
  tokenDenom = "";

  /**
   * @generated from field: string token_amount = 2;
   */
  tokenAmount = "";

  /**
   * @generated from field: string token_usd_value = 3;
   */
  tokenUsdValue = "";

  constructor(data?: PartialMessage<PositionToken>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.PositionToken";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "token_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "token_usd_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PositionToken {
    return new PositionToken().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PositionToken {
    return new PositionToken().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PositionToken {
    return new PositionToken().fromJsonString(jsonString, options);
  }

  static equals(a: PositionToken | PlainMessage<PositionToken> | undefined, b: PositionToken | PlainMessage<PositionToken> | undefined): boolean {
    return proto3.util.equals(PositionToken, a, b);
  }
}

/**
 * @generated from message elys.vaults.QueryVaultPositionsRequest
 */
export class QueryVaultPositionsRequest extends Message<QueryVaultPositionsRequest> {
  /**
   * @generated from field: uint64 vault_id = 1;
   */
  vaultId = protoInt64.zero;

  constructor(data?: PartialMessage<QueryVaultPositionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.QueryVaultPositionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vault_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVaultPositionsRequest {
    return new QueryVaultPositionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVaultPositionsRequest {
    return new QueryVaultPositionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVaultPositionsRequest {
    return new QueryVaultPositionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVaultPositionsRequest | PlainMessage<QueryVaultPositionsRequest> | undefined, b: QueryVaultPositionsRequest | PlainMessage<QueryVaultPositionsRequest> | undefined): boolean {
    return proto3.util.equals(QueryVaultPositionsRequest, a, b);
  }
}

/**
 * @generated from message elys.vaults.QueryVaultPositionsResponse
 */
export class QueryVaultPositionsResponse extends Message<QueryVaultPositionsResponse> {
  /**
   * @generated from field: repeated elys.vaults.PositionToken positions = 1;
   */
  positions: PositionToken[] = [];

  constructor(data?: PartialMessage<QueryVaultPositionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.QueryVaultPositionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "positions", kind: "message", T: PositionToken, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVaultPositionsResponse {
    return new QueryVaultPositionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVaultPositionsResponse {
    return new QueryVaultPositionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVaultPositionsResponse {
    return new QueryVaultPositionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVaultPositionsResponse | PlainMessage<QueryVaultPositionsResponse> | undefined, b: QueryVaultPositionsResponse | PlainMessage<QueryVaultPositionsResponse> | undefined): boolean {
    return proto3.util.equals(QueryVaultPositionsResponse, a, b);
  }
}

/**
 * @generated from message elys.vaults.QueryDepositEstimationRequest
 */
export class QueryDepositEstimationRequest extends Message<QueryDepositEstimationRequest> {
  /**
   * @generated from field: uint64 vault_id = 1;
   */
  vaultId = protoInt64.zero;

  /**
   * @generated from field: string amount = 2;
   */
  amount = "";

  constructor(data?: PartialMessage<QueryDepositEstimationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.QueryDepositEstimationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vault_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDepositEstimationRequest {
    return new QueryDepositEstimationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDepositEstimationRequest {
    return new QueryDepositEstimationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDepositEstimationRequest {
    return new QueryDepositEstimationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDepositEstimationRequest | PlainMessage<QueryDepositEstimationRequest> | undefined, b: QueryDepositEstimationRequest | PlainMessage<QueryDepositEstimationRequest> | undefined): boolean {
    return proto3.util.equals(QueryDepositEstimationRequest, a, b);
  }
}

/**
 * @generated from message elys.vaults.QueryDepositEstimationResponse
 */
export class QueryDepositEstimationResponse extends Message<QueryDepositEstimationResponse> {
  /**
   * @generated from field: string shares_amount = 1;
   */
  sharesAmount = "";

  /**
   * @generated from field: string shares_usd_value = 2;
   */
  sharesUsdValue = "";

  constructor(data?: PartialMessage<QueryDepositEstimationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.QueryDepositEstimationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "shares_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "shares_usd_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDepositEstimationResponse {
    return new QueryDepositEstimationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDepositEstimationResponse {
    return new QueryDepositEstimationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDepositEstimationResponse {
    return new QueryDepositEstimationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDepositEstimationResponse | PlainMessage<QueryDepositEstimationResponse> | undefined, b: QueryDepositEstimationResponse | PlainMessage<QueryDepositEstimationResponse> | undefined): boolean {
    return proto3.util.equals(QueryDepositEstimationResponse, a, b);
  }
}

/**
 * @generated from message elys.vaults.QueryWithdrawEstimationRequest
 */
export class QueryWithdrawEstimationRequest extends Message<QueryWithdrawEstimationRequest> {
  /**
   * @generated from field: uint64 vault_id = 1;
   */
  vaultId = protoInt64.zero;

  /**
   * @generated from field: string shares_amount = 2;
   */
  sharesAmount = "";

  constructor(data?: PartialMessage<QueryWithdrawEstimationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.QueryWithdrawEstimationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vault_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "shares_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryWithdrawEstimationRequest {
    return new QueryWithdrawEstimationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryWithdrawEstimationRequest {
    return new QueryWithdrawEstimationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryWithdrawEstimationRequest {
    return new QueryWithdrawEstimationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryWithdrawEstimationRequest | PlainMessage<QueryWithdrawEstimationRequest> | undefined, b: QueryWithdrawEstimationRequest | PlainMessage<QueryWithdrawEstimationRequest> | undefined): boolean {
    return proto3.util.equals(QueryWithdrawEstimationRequest, a, b);
  }
}

/**
 * @generated from message elys.vaults.QueryWithdrawEstimationResponse
 */
export class QueryWithdrawEstimationResponse extends Message<QueryWithdrawEstimationResponse> {
  /**
   * @generated from field: string amount = 1;
   */
  amount = "";

  /**
   * @generated from field: string usd_value = 2;
   */
  usdValue = "";

  constructor(data?: PartialMessage<QueryWithdrawEstimationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.QueryWithdrawEstimationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "usd_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryWithdrawEstimationResponse {
    return new QueryWithdrawEstimationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryWithdrawEstimationResponse {
    return new QueryWithdrawEstimationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryWithdrawEstimationResponse {
    return new QueryWithdrawEstimationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryWithdrawEstimationResponse | PlainMessage<QueryWithdrawEstimationResponse> | undefined, b: QueryWithdrawEstimationResponse | PlainMessage<QueryWithdrawEstimationResponse> | undefined): boolean {
    return proto3.util.equals(QueryWithdrawEstimationResponse, a, b);
  }
}

