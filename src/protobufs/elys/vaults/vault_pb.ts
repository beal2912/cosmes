// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file elys/vaults/vault.proto (package elys.vaults, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * Vault is a structure that defines a vault
 *
 * @generated from message elys.vaults.Vault
 */
export class Vault extends Message<Vault> {
  /**
   * @generated from field: string deposit_denom = 1;
   */
  depositDenom = "";

  /**
   * Max amount vault can hold in USD
   *
   * @generated from field: string max_amount_usd = 2;
   */
  maxAmountUsd = "";

  /**
   * Coins allowed to trade in the vault
   *
   * @generated from field: repeated string allowed_coins = 3;
   */
  allowedCoins: string[] = [];

  /**
   * @generated from field: repeated string reward_coins = 4;
   */
  rewardCoins: string[] = [];

  /**
   * @generated from field: string benchmark_coin = 5;
   */
  benchmarkCoin = "";

  /**
   * @generated from field: string manager = 6;
   */
  manager = "";

  /**
   * @generated from field: uint64 id = 7;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string management_fee = 8;
   */
  managementFee = "";

  /**
   * @generated from field: string performance_fee = 9;
   */
  performanceFee = "";

  /**
   * @generated from field: string protocol_fee_share = 10;
   */
  protocolFeeShare = "";

  /**
   * in seconds
   *
   * @generated from field: uint64 lockup_period = 11;
   */
  lockupPeriod = protoInt64.zero;

  /**
   * @generated from field: string sum_of_deposits_usd_value = 12;
   */
  sumOfDepositsUsdValue = "";

  /**
   * @generated from field: string withdrawal_usd_value = 13;
   */
  withdrawalUsdValue = "";

  /**
   * @generated from field: string address = 14;
   */
  address = "";

  /**
   * @generated from field: string cumulative_management_fee = 15;
   */
  cumulativeManagementFee = "";

  /**
   * @generated from field: string cumulative_performance_fee = 16;
   */
  cumulativePerformanceFee = "";

  /**
   * @generated from field: string description = 17;
   */
  description = "";

  /**
   * @generated from field: repeated string allowed_actions = 18;
   */
  allowedActions: string[] = [];

  constructor(data?: PartialMessage<Vault>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.Vault";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deposit_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "max_amount_usd", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "allowed_coins", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "reward_coins", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "benchmark_coin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "manager", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "management_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "performance_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "protocol_fee_share", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "lockup_period", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "sum_of_deposits_usd_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "withdrawal_usd_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "cumulative_management_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "cumulative_performance_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 17, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 18, name: "allowed_actions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Vault {
    return new Vault().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Vault {
    return new Vault().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Vault {
    return new Vault().fromJsonString(jsonString, options);
  }

  static equals(a: Vault | PlainMessage<Vault> | undefined, b: Vault | PlainMessage<Vault> | undefined): boolean {
    return proto3.util.equals(Vault, a, b);
  }
}

/**
 * @generated from message elys.vaults.UserData
 */
export class UserData extends Message<UserData> {
  /**
   * @generated from field: string total_deposits_usd = 1;
   */
  totalDepositsUsd = "";

  /**
   * @generated from field: string total_withdrawals_usd = 2;
   */
  totalWithdrawalsUsd = "";

  /**
   * @generated from field: string eden_usd_value = 3;
   */
  edenUsdValue = "";

  /**
   * @generated from field: string eden_amount = 4;
   */
  edenAmount = "";

  constructor(data?: PartialMessage<UserData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.UserData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total_deposits_usd", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "total_withdrawals_usd", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "eden_usd_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "eden_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserData {
    return new UserData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserData {
    return new UserData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserData {
    return new UserData().fromJsonString(jsonString, options);
  }

  static equals(a: UserData | PlainMessage<UserData> | undefined, b: UserData | PlainMessage<UserData> | undefined): boolean {
    return proto3.util.equals(UserData, a, b);
  }
}

/**
 * @generated from message elys.vaults.VaultPnL
 */
export class VaultPnL extends Message<VaultPnL> {
  /**
   * @generated from field: string vault_id = 1;
   */
  vaultId = "";

  /**
   * @generated from field: string pnl_usd = 2;
   */
  pnlUsd = "";

  /**
   * @generated from field: string date = 3;
   */
  date = "";

  constructor(data?: PartialMessage<VaultPnL>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.vaults.VaultPnL";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vault_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pnl_usd", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VaultPnL {
    return new VaultPnL().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VaultPnL {
    return new VaultPnL().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VaultPnL {
    return new VaultPnL().fromJsonString(jsonString, options);
  }

  static equals(a: VaultPnL | PlainMessage<VaultPnL> | undefined, b: VaultPnL | PlainMessage<VaultPnL> | undefined): boolean {
    return proto3.util.equals(VaultPnL, a, b);
  }
}

