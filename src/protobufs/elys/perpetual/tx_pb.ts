// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file elys/perpetual/tx.proto (package elys.perpetual, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Position, PositionRequest } from "./types_pb.js";
import { Coin } from "../../cosmos/base/v1beta1/coin_pb.js";
import { Params } from "./params_pb.js";

/**
 * @generated from message elys.perpetual.MsgOpen
 */
export class MsgOpen extends Message<MsgOpen> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: elys.perpetual.Position position = 2;
   */
  position = Position.UNSPECIFIED;

  /**
   * @generated from field: string leverage = 3;
   */
  leverage = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin collateral = 4;
   */
  collateral?: Coin;

  /**
   * @generated from field: string take_profit_price = 5;
   */
  takeProfitPrice = "";

  /**
   * @generated from field: string stop_loss_price = 6;
   */
  stopLossPrice = "";

  /**
   * @generated from field: uint64 pool_id = 7;
   */
  poolId = protoInt64.zero;

  constructor(data?: PartialMessage<MsgOpen>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.MsgOpen";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "position", kind: "enum", T: proto3.getEnumType(Position) },
    { no: 3, name: "leverage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "collateral", kind: "message", T: Coin },
    { no: 5, name: "take_profit_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "stop_loss_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgOpen {
    return new MsgOpen().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgOpen {
    return new MsgOpen().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgOpen {
    return new MsgOpen().fromJsonString(jsonString, options);
  }

  static equals(a: MsgOpen | PlainMessage<MsgOpen> | undefined, b: MsgOpen | PlainMessage<MsgOpen> | undefined): boolean {
    return proto3.util.equals(MsgOpen, a, b);
  }
}

/**
 * @generated from message elys.perpetual.MsgOpenResponse
 */
export class MsgOpenResponse extends Message<MsgOpenResponse> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<MsgOpenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.MsgOpenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgOpenResponse {
    return new MsgOpenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgOpenResponse {
    return new MsgOpenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgOpenResponse {
    return new MsgOpenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgOpenResponse | PlainMessage<MsgOpenResponse> | undefined, b: MsgOpenResponse | PlainMessage<MsgOpenResponse> | undefined): boolean {
    return proto3.util.equals(MsgOpenResponse, a, b);
  }
}

/**
 * @generated from message elys.perpetual.MsgClose
 */
export class MsgClose extends Message<MsgClose> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string amount = 3;
   */
  amount = "";

  /**
   * @generated from field: uint64 pool_id = 4;
   */
  poolId = protoInt64.zero;

  constructor(data?: PartialMessage<MsgClose>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.MsgClose";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgClose {
    return new MsgClose().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgClose {
    return new MsgClose().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgClose {
    return new MsgClose().fromJsonString(jsonString, options);
  }

  static equals(a: MsgClose | PlainMessage<MsgClose> | undefined, b: MsgClose | PlainMessage<MsgClose> | undefined): boolean {
    return proto3.util.equals(MsgClose, a, b);
  }
}

/**
 * @generated from message elys.perpetual.MsgCloseResponse
 */
export class MsgCloseResponse extends Message<MsgCloseResponse> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string amount = 2;
   */
  amount = "";

  constructor(data?: PartialMessage<MsgCloseResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.MsgCloseResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCloseResponse {
    return new MsgCloseResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCloseResponse {
    return new MsgCloseResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCloseResponse {
    return new MsgCloseResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCloseResponse | PlainMessage<MsgCloseResponse> | undefined, b: MsgCloseResponse | PlainMessage<MsgCloseResponse> | undefined): boolean {
    return proto3.util.equals(MsgCloseResponse, a, b);
  }
}

/**
 * @generated from message elys.perpetual.MsgUpdateParams
 */
export class MsgUpdateParams extends Message<MsgUpdateParams> {
  /**
   * authority is the address that controls the module (defaults to x/gov unless
   * overwritten).
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * NOTE: All parameters must be supplied.
   *
   * @generated from field: elys.perpetual.Params params = 2;
   */
  params?: Params;

  constructor(data?: PartialMessage<MsgUpdateParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.MsgUpdateParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined, b: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParams, a, b);
  }
}

/**
 * @generated from message elys.perpetual.MsgUpdateParamsResponse
 */
export class MsgUpdateParamsResponse extends Message<MsgUpdateParamsResponse> {
  constructor(data?: PartialMessage<MsgUpdateParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.MsgUpdateParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined, b: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParamsResponse, a, b);
  }
}

/**
 * @generated from message elys.perpetual.MsgWhitelist
 */
export class MsgWhitelist extends Message<MsgWhitelist> {
  /**
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * @generated from field: string whitelisted_address = 2;
   */
  whitelistedAddress = "";

  constructor(data?: PartialMessage<MsgWhitelist>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.MsgWhitelist";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "whitelisted_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgWhitelist {
    return new MsgWhitelist().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgWhitelist {
    return new MsgWhitelist().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgWhitelist {
    return new MsgWhitelist().fromJsonString(jsonString, options);
  }

  static equals(a: MsgWhitelist | PlainMessage<MsgWhitelist> | undefined, b: MsgWhitelist | PlainMessage<MsgWhitelist> | undefined): boolean {
    return proto3.util.equals(MsgWhitelist, a, b);
  }
}

/**
 * @generated from message elys.perpetual.MsgWhitelistResponse
 */
export class MsgWhitelistResponse extends Message<MsgWhitelistResponse> {
  constructor(data?: PartialMessage<MsgWhitelistResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.MsgWhitelistResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgWhitelistResponse {
    return new MsgWhitelistResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgWhitelistResponse {
    return new MsgWhitelistResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgWhitelistResponse {
    return new MsgWhitelistResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgWhitelistResponse | PlainMessage<MsgWhitelistResponse> | undefined, b: MsgWhitelistResponse | PlainMessage<MsgWhitelistResponse> | undefined): boolean {
    return proto3.util.equals(MsgWhitelistResponse, a, b);
  }
}

/**
 * @generated from message elys.perpetual.MsgDewhitelist
 */
export class MsgDewhitelist extends Message<MsgDewhitelist> {
  /**
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * @generated from field: string whitelisted_address = 2;
   */
  whitelistedAddress = "";

  constructor(data?: PartialMessage<MsgDewhitelist>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.MsgDewhitelist";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "whitelisted_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDewhitelist {
    return new MsgDewhitelist().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDewhitelist {
    return new MsgDewhitelist().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDewhitelist {
    return new MsgDewhitelist().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDewhitelist | PlainMessage<MsgDewhitelist> | undefined, b: MsgDewhitelist | PlainMessage<MsgDewhitelist> | undefined): boolean {
    return proto3.util.equals(MsgDewhitelist, a, b);
  }
}

/**
 * @generated from message elys.perpetual.MsgDewhitelistResponse
 */
export class MsgDewhitelistResponse extends Message<MsgDewhitelistResponse> {
  constructor(data?: PartialMessage<MsgDewhitelistResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.MsgDewhitelistResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDewhitelistResponse {
    return new MsgDewhitelistResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDewhitelistResponse {
    return new MsgDewhitelistResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDewhitelistResponse {
    return new MsgDewhitelistResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDewhitelistResponse | PlainMessage<MsgDewhitelistResponse> | undefined, b: MsgDewhitelistResponse | PlainMessage<MsgDewhitelistResponse> | undefined): boolean {
    return proto3.util.equals(MsgDewhitelistResponse, a, b);
  }
}

/**
 * @generated from message elys.perpetual.MsgClosePositions
 */
export class MsgClosePositions extends Message<MsgClosePositions> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: repeated elys.perpetual.PositionRequest liquidate = 2;
   */
  liquidate: PositionRequest[] = [];

  /**
   * @generated from field: repeated elys.perpetual.PositionRequest stop_loss = 3;
   */
  stopLoss: PositionRequest[] = [];

  /**
   * @generated from field: repeated elys.perpetual.PositionRequest take_profit = 4;
   */
  takeProfit: PositionRequest[] = [];

  constructor(data?: PartialMessage<MsgClosePositions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.MsgClosePositions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "liquidate", kind: "message", T: PositionRequest, repeated: true },
    { no: 3, name: "stop_loss", kind: "message", T: PositionRequest, repeated: true },
    { no: 4, name: "take_profit", kind: "message", T: PositionRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgClosePositions {
    return new MsgClosePositions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgClosePositions {
    return new MsgClosePositions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgClosePositions {
    return new MsgClosePositions().fromJsonString(jsonString, options);
  }

  static equals(a: MsgClosePositions | PlainMessage<MsgClosePositions> | undefined, b: MsgClosePositions | PlainMessage<MsgClosePositions> | undefined): boolean {
    return proto3.util.equals(MsgClosePositions, a, b);
  }
}

/**
 * @generated from message elys.perpetual.MsgClosePositionsResponse
 */
export class MsgClosePositionsResponse extends Message<MsgClosePositionsResponse> {
  constructor(data?: PartialMessage<MsgClosePositionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.MsgClosePositionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgClosePositionsResponse {
    return new MsgClosePositionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgClosePositionsResponse {
    return new MsgClosePositionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgClosePositionsResponse {
    return new MsgClosePositionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgClosePositionsResponse | PlainMessage<MsgClosePositionsResponse> | undefined, b: MsgClosePositionsResponse | PlainMessage<MsgClosePositionsResponse> | undefined): boolean {
    return proto3.util.equals(MsgClosePositionsResponse, a, b);
  }
}

/**
 * @generated from message elys.perpetual.MsgUpdateStopLoss
 */
export class MsgUpdateStopLoss extends Message<MsgUpdateStopLoss> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string price = 3;
   */
  price = "";

  /**
   * @generated from field: uint64 pool_id = 4;
   */
  poolId = protoInt64.zero;

  constructor(data?: PartialMessage<MsgUpdateStopLoss>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.MsgUpdateStopLoss";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateStopLoss {
    return new MsgUpdateStopLoss().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateStopLoss {
    return new MsgUpdateStopLoss().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateStopLoss {
    return new MsgUpdateStopLoss().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateStopLoss | PlainMessage<MsgUpdateStopLoss> | undefined, b: MsgUpdateStopLoss | PlainMessage<MsgUpdateStopLoss> | undefined): boolean {
    return proto3.util.equals(MsgUpdateStopLoss, a, b);
  }
}

/**
 * @generated from message elys.perpetual.MsgUpdateStopLossResponse
 */
export class MsgUpdateStopLossResponse extends Message<MsgUpdateStopLossResponse> {
  constructor(data?: PartialMessage<MsgUpdateStopLossResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.MsgUpdateStopLossResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateStopLossResponse {
    return new MsgUpdateStopLossResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateStopLossResponse {
    return new MsgUpdateStopLossResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateStopLossResponse {
    return new MsgUpdateStopLossResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateStopLossResponse | PlainMessage<MsgUpdateStopLossResponse> | undefined, b: MsgUpdateStopLossResponse | PlainMessage<MsgUpdateStopLossResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateStopLossResponse, a, b);
  }
}

/**
 * @generated from message elys.perpetual.MsgUpdateTakeProfitPrice
 */
export class MsgUpdateTakeProfitPrice extends Message<MsgUpdateTakeProfitPrice> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string price = 3;
   */
  price = "";

  /**
   * @generated from field: uint64 pool_id = 4;
   */
  poolId = protoInt64.zero;

  constructor(data?: PartialMessage<MsgUpdateTakeProfitPrice>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.MsgUpdateTakeProfitPrice";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateTakeProfitPrice {
    return new MsgUpdateTakeProfitPrice().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateTakeProfitPrice {
    return new MsgUpdateTakeProfitPrice().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateTakeProfitPrice {
    return new MsgUpdateTakeProfitPrice().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateTakeProfitPrice | PlainMessage<MsgUpdateTakeProfitPrice> | undefined, b: MsgUpdateTakeProfitPrice | PlainMessage<MsgUpdateTakeProfitPrice> | undefined): boolean {
    return proto3.util.equals(MsgUpdateTakeProfitPrice, a, b);
  }
}

/**
 * @generated from message elys.perpetual.MsgUpdateTakeProfitPriceResponse
 */
export class MsgUpdateTakeProfitPriceResponse extends Message<MsgUpdateTakeProfitPriceResponse> {
  constructor(data?: PartialMessage<MsgUpdateTakeProfitPriceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.MsgUpdateTakeProfitPriceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateTakeProfitPriceResponse {
    return new MsgUpdateTakeProfitPriceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateTakeProfitPriceResponse {
    return new MsgUpdateTakeProfitPriceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateTakeProfitPriceResponse {
    return new MsgUpdateTakeProfitPriceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateTakeProfitPriceResponse | PlainMessage<MsgUpdateTakeProfitPriceResponse> | undefined, b: MsgUpdateTakeProfitPriceResponse | PlainMessage<MsgUpdateTakeProfitPriceResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateTakeProfitPriceResponse, a, b);
  }
}

/**
 * @generated from message elys.perpetual.MsgUpdateMaxLeverageForPool
 */
export class MsgUpdateMaxLeverageForPool extends Message<MsgUpdateMaxLeverageForPool> {
  /**
   * authority is the address that controls the module (defaults to x/gov unless
   * overwritten).
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * @generated from field: uint64 pool_id = 2;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: string leverage_max = 3;
   */
  leverageMax = "";

  constructor(data?: PartialMessage<MsgUpdateMaxLeverageForPool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.MsgUpdateMaxLeverageForPool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "leverage_max", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateMaxLeverageForPool {
    return new MsgUpdateMaxLeverageForPool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateMaxLeverageForPool {
    return new MsgUpdateMaxLeverageForPool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateMaxLeverageForPool {
    return new MsgUpdateMaxLeverageForPool().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateMaxLeverageForPool | PlainMessage<MsgUpdateMaxLeverageForPool> | undefined, b: MsgUpdateMaxLeverageForPool | PlainMessage<MsgUpdateMaxLeverageForPool> | undefined): boolean {
    return proto3.util.equals(MsgUpdateMaxLeverageForPool, a, b);
  }
}

/**
 * @generated from message elys.perpetual.MsgUpdateMaxLeverageForPoolResponse
 */
export class MsgUpdateMaxLeverageForPoolResponse extends Message<MsgUpdateMaxLeverageForPoolResponse> {
  constructor(data?: PartialMessage<MsgUpdateMaxLeverageForPoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.MsgUpdateMaxLeverageForPoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateMaxLeverageForPoolResponse {
    return new MsgUpdateMaxLeverageForPoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateMaxLeverageForPoolResponse {
    return new MsgUpdateMaxLeverageForPoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateMaxLeverageForPoolResponse {
    return new MsgUpdateMaxLeverageForPoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateMaxLeverageForPoolResponse | PlainMessage<MsgUpdateMaxLeverageForPoolResponse> | undefined, b: MsgUpdateMaxLeverageForPoolResponse | PlainMessage<MsgUpdateMaxLeverageForPoolResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateMaxLeverageForPoolResponse, a, b);
  }
}

/**
 * @generated from message elys.perpetual.PoolParams
 */
export class PoolParams extends Message<PoolParams> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: string mtp_safety_factor = 2;
   */
  mtpSafetyFactor = "";

  /**
   * @generated from field: string leverage_max = 3;
   */
  leverageMax = "";

  constructor(data?: PartialMessage<PoolParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.PoolParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "mtp_safety_factor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "leverage_max", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolParams {
    return new PoolParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolParams {
    return new PoolParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolParams {
    return new PoolParams().fromJsonString(jsonString, options);
  }

  static equals(a: PoolParams | PlainMessage<PoolParams> | undefined, b: PoolParams | PlainMessage<PoolParams> | undefined): boolean {
    return proto3.util.equals(PoolParams, a, b);
  }
}

/**
 * @generated from message elys.perpetual.MsgUpdateEnabledPools
 */
export class MsgUpdateEnabledPools extends Message<MsgUpdateEnabledPools> {
  /**
   * authority is the address that controls the module (defaults to x/gov unless
   * overwritten).
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * @generated from field: repeated uint64 enabled_pools = 2;
   */
  enabledPools: bigint[] = [];

  /**
   * @generated from field: repeated uint64 add_pools = 3;
   */
  addPools: bigint[] = [];

  /**
   * @generated from field: repeated uint64 remove_pools = 4;
   */
  removePools: bigint[] = [];

  /**
   * @generated from field: repeated elys.perpetual.PoolParams update_pool_params = 5;
   */
  updatePoolParams: PoolParams[] = [];

  constructor(data?: PartialMessage<MsgUpdateEnabledPools>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.MsgUpdateEnabledPools";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "enabled_pools", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
    { no: 3, name: "add_pools", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
    { no: 4, name: "remove_pools", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
    { no: 5, name: "update_pool_params", kind: "message", T: PoolParams, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateEnabledPools {
    return new MsgUpdateEnabledPools().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateEnabledPools {
    return new MsgUpdateEnabledPools().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateEnabledPools {
    return new MsgUpdateEnabledPools().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateEnabledPools | PlainMessage<MsgUpdateEnabledPools> | undefined, b: MsgUpdateEnabledPools | PlainMessage<MsgUpdateEnabledPools> | undefined): boolean {
    return proto3.util.equals(MsgUpdateEnabledPools, a, b);
  }
}

/**
 * @generated from message elys.perpetual.MsgUpdateEnabledPoolsResponse
 */
export class MsgUpdateEnabledPoolsResponse extends Message<MsgUpdateEnabledPoolsResponse> {
  constructor(data?: PartialMessage<MsgUpdateEnabledPoolsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.MsgUpdateEnabledPoolsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateEnabledPoolsResponse {
    return new MsgUpdateEnabledPoolsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateEnabledPoolsResponse {
    return new MsgUpdateEnabledPoolsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateEnabledPoolsResponse {
    return new MsgUpdateEnabledPoolsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateEnabledPoolsResponse | PlainMessage<MsgUpdateEnabledPoolsResponse> | undefined, b: MsgUpdateEnabledPoolsResponse | PlainMessage<MsgUpdateEnabledPoolsResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateEnabledPoolsResponse, a, b);
  }
}

/**
 * @generated from message elys.perpetual.MsgAddCollateral
 */
export class MsgAddCollateral extends Message<MsgAddCollateral> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin add_collateral = 3;
   */
  addCollateral?: Coin;

  /**
   * @generated from field: uint64 pool_id = 4;
   */
  poolId = protoInt64.zero;

  constructor(data?: PartialMessage<MsgAddCollateral>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.MsgAddCollateral";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "add_collateral", kind: "message", T: Coin },
    { no: 4, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgAddCollateral {
    return new MsgAddCollateral().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgAddCollateral {
    return new MsgAddCollateral().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgAddCollateral {
    return new MsgAddCollateral().fromJsonString(jsonString, options);
  }

  static equals(a: MsgAddCollateral | PlainMessage<MsgAddCollateral> | undefined, b: MsgAddCollateral | PlainMessage<MsgAddCollateral> | undefined): boolean {
    return proto3.util.equals(MsgAddCollateral, a, b);
  }
}

/**
 * @generated from message elys.perpetual.MsgAddCollateralResponse
 */
export class MsgAddCollateralResponse extends Message<MsgAddCollateralResponse> {
  constructor(data?: PartialMessage<MsgAddCollateralResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.MsgAddCollateralResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgAddCollateralResponse {
    return new MsgAddCollateralResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgAddCollateralResponse {
    return new MsgAddCollateralResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgAddCollateralResponse {
    return new MsgAddCollateralResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgAddCollateralResponse | PlainMessage<MsgAddCollateralResponse> | undefined, b: MsgAddCollateralResponse | PlainMessage<MsgAddCollateralResponse> | undefined): boolean {
    return proto3.util.equals(MsgAddCollateralResponse, a, b);
  }
}

