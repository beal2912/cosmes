// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file elys/perpetual/query.proto (package elys.perpetual, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { MTP, Position } from "./types_pb.js";
import { Coin } from "../../cosmos/base/v1beta1/coin_pb.js";
import { Params } from "./params_pb.js";
import { PageRequest, PageResponse } from "../../cosmos/base/query/v1beta1/pagination_pb.js";
import { PoolAsset } from "./pool_pb.js";

/**
 * @generated from message elys.perpetual.Fees
 */
export class Fees extends Message<Fees> {
  /**
   * @generated from field: string total_fees_base_currency = 1;
   */
  totalFeesBaseCurrency = "";

  /**
   * @generated from field: string borrow_interest_fees_liability_asset = 2;
   */
  borrowInterestFeesLiabilityAsset = "";

  /**
   * @generated from field: string borrow_interest_fees_base_currency = 3;
   */
  borrowInterestFeesBaseCurrency = "";

  /**
   * @generated from field: string funding_fees_liquidity_asset = 4;
   */
  fundingFeesLiquidityAsset = "";

  /**
   * @generated from field: string funding_fees_base_currency = 5;
   */
  fundingFeesBaseCurrency = "";

  constructor(data?: PartialMessage<Fees>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.Fees";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total_fees_base_currency", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "borrow_interest_fees_liability_asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "borrow_interest_fees_base_currency", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "funding_fees_liquidity_asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "funding_fees_base_currency", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Fees {
    return new Fees().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Fees {
    return new Fees().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Fees {
    return new Fees().fromJsonString(jsonString, options);
  }

  static equals(a: Fees | PlainMessage<Fees> | undefined, b: Fees | PlainMessage<Fees> | undefined): boolean {
    return proto3.util.equals(Fees, a, b);
  }
}

/**
 * @generated from message elys.perpetual.MtpAndPrice
 */
export class MtpAndPrice extends Message<MtpAndPrice> {
  /**
   * @generated from field: elys.perpetual.MTP mtp = 1;
   */
  mtp?: MTP;

  /**
   * @generated from field: string trading_asset_price = 2;
   */
  tradingAssetPrice = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin pnl = 3;
   */
  pnl?: Coin;

  /**
   * @generated from field: string effective_leverage = 4;
   */
  effectiveLeverage = "";

  /**
   * @generated from field: string liquidation_price = 5;
   */
  liquidationPrice = "";

  /**
   * @generated from field: elys.perpetual.Fees fees = 6;
   */
  fees?: Fees;

  constructor(data?: PartialMessage<MtpAndPrice>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.MtpAndPrice";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "mtp", kind: "message", T: MTP },
    { no: 2, name: "trading_asset_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pnl", kind: "message", T: Coin },
    { no: 4, name: "effective_leverage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "liquidation_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "fees", kind: "message", T: Fees },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MtpAndPrice {
    return new MtpAndPrice().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MtpAndPrice {
    return new MtpAndPrice().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MtpAndPrice {
    return new MtpAndPrice().fromJsonString(jsonString, options);
  }

  static equals(a: MtpAndPrice | PlainMessage<MtpAndPrice> | undefined, b: MtpAndPrice | PlainMessage<MtpAndPrice> | undefined): boolean {
    return proto3.util.equals(MtpAndPrice, a, b);
  }
}

/**
 * ParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from message elys.perpetual.ParamsRequest
 */
export class ParamsRequest extends Message<ParamsRequest> {
  constructor(data?: PartialMessage<ParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.ParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParamsRequest {
    return new ParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParamsRequest {
    return new ParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParamsRequest {
    return new ParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ParamsRequest | PlainMessage<ParamsRequest> | undefined, b: ParamsRequest | PlainMessage<ParamsRequest> | undefined): boolean {
    return proto3.util.equals(ParamsRequest, a, b);
  }
}

/**
 * ParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from message elys.perpetual.ParamsResponse
 */
export class ParamsResponse extends Message<ParamsResponse> {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: elys.perpetual.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<ParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.ParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParamsResponse {
    return new ParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParamsResponse {
    return new ParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParamsResponse {
    return new ParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ParamsResponse | PlainMessage<ParamsResponse> | undefined, b: ParamsResponse | PlainMessage<ParamsResponse> | undefined): boolean {
    return proto3.util.equals(ParamsResponse, a, b);
  }
}

/**
 * @generated from message elys.perpetual.PositionsRequest
 */
export class PositionsRequest extends Message<PositionsRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<PositionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.PositionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PositionsRequest {
    return new PositionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PositionsRequest {
    return new PositionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PositionsRequest {
    return new PositionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PositionsRequest | PlainMessage<PositionsRequest> | undefined, b: PositionsRequest | PlainMessage<PositionsRequest> | undefined): boolean {
    return proto3.util.equals(PositionsRequest, a, b);
  }
}

/**
 * @generated from message elys.perpetual.PositionsResponse
 */
export class PositionsResponse extends Message<PositionsResponse> {
  /**
   * @generated from field: repeated elys.perpetual.MtpAndPrice mtps = 1;
   */
  mtps: MtpAndPrice[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<PositionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.PositionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "mtps", kind: "message", T: MtpAndPrice, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PositionsResponse {
    return new PositionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PositionsResponse {
    return new PositionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PositionsResponse {
    return new PositionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PositionsResponse | PlainMessage<PositionsResponse> | undefined, b: PositionsResponse | PlainMessage<PositionsResponse> | undefined): boolean {
    return proto3.util.equals(PositionsResponse, a, b);
  }
}

/**
 * @generated from message elys.perpetual.PositionsByPoolRequest
 */
export class PositionsByPoolRequest extends Message<PositionsByPoolRequest> {
  /**
   * @generated from field: uint64 amm_pool_id = 1;
   */
  ammPoolId = protoInt64.zero;

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<PositionsByPoolRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.PositionsByPoolRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amm_pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PositionsByPoolRequest {
    return new PositionsByPoolRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PositionsByPoolRequest {
    return new PositionsByPoolRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PositionsByPoolRequest {
    return new PositionsByPoolRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PositionsByPoolRequest | PlainMessage<PositionsByPoolRequest> | undefined, b: PositionsByPoolRequest | PlainMessage<PositionsByPoolRequest> | undefined): boolean {
    return proto3.util.equals(PositionsByPoolRequest, a, b);
  }
}

/**
 * @generated from message elys.perpetual.PositionsByPoolResponse
 */
export class PositionsByPoolResponse extends Message<PositionsByPoolResponse> {
  /**
   * @generated from field: repeated elys.perpetual.MtpAndPrice mtps = 1;
   */
  mtps: MtpAndPrice[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<PositionsByPoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.PositionsByPoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "mtps", kind: "message", T: MtpAndPrice, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PositionsByPoolResponse {
    return new PositionsByPoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PositionsByPoolResponse {
    return new PositionsByPoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PositionsByPoolResponse {
    return new PositionsByPoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PositionsByPoolResponse | PlainMessage<PositionsByPoolResponse> | undefined, b: PositionsByPoolResponse | PlainMessage<PositionsByPoolResponse> | undefined): boolean {
    return proto3.util.equals(PositionsByPoolResponse, a, b);
  }
}

/**
 * @generated from message elys.perpetual.StatusRequest
 */
export class StatusRequest extends Message<StatusRequest> {
  constructor(data?: PartialMessage<StatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.StatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatusRequest {
    return new StatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatusRequest {
    return new StatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatusRequest {
    return new StatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StatusRequest | PlainMessage<StatusRequest> | undefined, b: StatusRequest | PlainMessage<StatusRequest> | undefined): boolean {
    return proto3.util.equals(StatusRequest, a, b);
  }
}

/**
 * @generated from message elys.perpetual.StatusResponse
 */
export class StatusResponse extends Message<StatusResponse> {
  /**
   * @generated from field: uint64 open_mtp_count = 1;
   */
  openMtpCount = protoInt64.zero;

  /**
   * @generated from field: uint64 lifetime_mtp_count = 2;
   */
  lifetimeMtpCount = protoInt64.zero;

  constructor(data?: PartialMessage<StatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.StatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "open_mtp_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "lifetime_mtp_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatusResponse {
    return new StatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatusResponse {
    return new StatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatusResponse {
    return new StatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StatusResponse | PlainMessage<StatusResponse> | undefined, b: StatusResponse | PlainMessage<StatusResponse> | undefined): boolean {
    return proto3.util.equals(StatusResponse, a, b);
  }
}

/**
 * @generated from message elys.perpetual.PositionsForAddressRequest
 */
export class PositionsForAddressRequest extends Message<PositionsForAddressRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<PositionsForAddressRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.PositionsForAddressRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PositionsForAddressRequest {
    return new PositionsForAddressRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PositionsForAddressRequest {
    return new PositionsForAddressRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PositionsForAddressRequest {
    return new PositionsForAddressRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PositionsForAddressRequest | PlainMessage<PositionsForAddressRequest> | undefined, b: PositionsForAddressRequest | PlainMessage<PositionsForAddressRequest> | undefined): boolean {
    return proto3.util.equals(PositionsForAddressRequest, a, b);
  }
}

/**
 * @generated from message elys.perpetual.PositionsForAddressResponse
 */
export class PositionsForAddressResponse extends Message<PositionsForAddressResponse> {
  /**
   * @generated from field: repeated elys.perpetual.MtpAndPrice mtps = 1;
   */
  mtps: MtpAndPrice[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<PositionsForAddressResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.PositionsForAddressResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "mtps", kind: "message", T: MtpAndPrice, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PositionsForAddressResponse {
    return new PositionsForAddressResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PositionsForAddressResponse {
    return new PositionsForAddressResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PositionsForAddressResponse {
    return new PositionsForAddressResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PositionsForAddressResponse | PlainMessage<PositionsForAddressResponse> | undefined, b: PositionsForAddressResponse | PlainMessage<PositionsForAddressResponse> | undefined): boolean {
    return proto3.util.equals(PositionsForAddressResponse, a, b);
  }
}

/**
 * @generated from message elys.perpetual.WhitelistRequest
 */
export class WhitelistRequest extends Message<WhitelistRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<WhitelistRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.WhitelistRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WhitelistRequest {
    return new WhitelistRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WhitelistRequest {
    return new WhitelistRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WhitelistRequest {
    return new WhitelistRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WhitelistRequest | PlainMessage<WhitelistRequest> | undefined, b: WhitelistRequest | PlainMessage<WhitelistRequest> | undefined): boolean {
    return proto3.util.equals(WhitelistRequest, a, b);
  }
}

/**
 * @generated from message elys.perpetual.WhitelistResponse
 */
export class WhitelistResponse extends Message<WhitelistResponse> {
  /**
   * @generated from field: repeated string whitelist = 1;
   */
  whitelist: string[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<WhitelistResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.WhitelistResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "whitelist", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WhitelistResponse {
    return new WhitelistResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WhitelistResponse {
    return new WhitelistResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WhitelistResponse {
    return new WhitelistResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WhitelistResponse | PlainMessage<WhitelistResponse> | undefined, b: WhitelistResponse | PlainMessage<WhitelistResponse> | undefined): boolean {
    return proto3.util.equals(WhitelistResponse, a, b);
  }
}

/**
 * @generated from message elys.perpetual.IsWhitelistedRequest
 */
export class IsWhitelistedRequest extends Message<IsWhitelistedRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  constructor(data?: PartialMessage<IsWhitelistedRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.IsWhitelistedRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IsWhitelistedRequest {
    return new IsWhitelistedRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IsWhitelistedRequest {
    return new IsWhitelistedRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IsWhitelistedRequest {
    return new IsWhitelistedRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IsWhitelistedRequest | PlainMessage<IsWhitelistedRequest> | undefined, b: IsWhitelistedRequest | PlainMessage<IsWhitelistedRequest> | undefined): boolean {
    return proto3.util.equals(IsWhitelistedRequest, a, b);
  }
}

/**
 * @generated from message elys.perpetual.IsWhitelistedResponse
 */
export class IsWhitelistedResponse extends Message<IsWhitelistedResponse> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: bool is_whitelisted = 2;
   */
  isWhitelisted = false;

  constructor(data?: PartialMessage<IsWhitelistedResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.IsWhitelistedResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "is_whitelisted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IsWhitelistedResponse {
    return new IsWhitelistedResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IsWhitelistedResponse {
    return new IsWhitelistedResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IsWhitelistedResponse {
    return new IsWhitelistedResponse().fromJsonString(jsonString, options);
  }

  static equals(a: IsWhitelistedResponse | PlainMessage<IsWhitelistedResponse> | undefined, b: IsWhitelistedResponse | PlainMessage<IsWhitelistedResponse> | undefined): boolean {
    return proto3.util.equals(IsWhitelistedResponse, a, b);
  }
}

/**
 * @generated from message elys.perpetual.QueryGetPoolRequest
 */
export class QueryGetPoolRequest extends Message<QueryGetPoolRequest> {
  /**
   * @generated from field: uint64 index = 1;
   */
  index = protoInt64.zero;

  constructor(data?: PartialMessage<QueryGetPoolRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.QueryGetPoolRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "index", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetPoolRequest {
    return new QueryGetPoolRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetPoolRequest {
    return new QueryGetPoolRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetPoolRequest {
    return new QueryGetPoolRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetPoolRequest | PlainMessage<QueryGetPoolRequest> | undefined, b: QueryGetPoolRequest | PlainMessage<QueryGetPoolRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetPoolRequest, a, b);
  }
}

/**
 * @generated from message elys.perpetual.QueryGetPoolResponse
 */
export class QueryGetPoolResponse extends Message<QueryGetPoolResponse> {
  /**
   * @generated from field: elys.perpetual.PoolResponse pool = 1;
   */
  pool?: PoolResponse;

  constructor(data?: PartialMessage<QueryGetPoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.QueryGetPoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool", kind: "message", T: PoolResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetPoolResponse {
    return new QueryGetPoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetPoolResponse {
    return new QueryGetPoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetPoolResponse {
    return new QueryGetPoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetPoolResponse | PlainMessage<QueryGetPoolResponse> | undefined, b: QueryGetPoolResponse | PlainMessage<QueryGetPoolResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetPoolResponse, a, b);
  }
}

/**
 * @generated from message elys.perpetual.QueryAllPoolRequest
 */
export class QueryAllPoolRequest extends Message<QueryAllPoolRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryAllPoolRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.QueryAllPoolRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllPoolRequest {
    return new QueryAllPoolRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllPoolRequest {
    return new QueryAllPoolRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllPoolRequest {
    return new QueryAllPoolRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllPoolRequest | PlainMessage<QueryAllPoolRequest> | undefined, b: QueryAllPoolRequest | PlainMessage<QueryAllPoolRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllPoolRequest, a, b);
  }
}

/**
 * @generated from message elys.perpetual.QueryAllPoolResponse
 */
export class QueryAllPoolResponse extends Message<QueryAllPoolResponse> {
  /**
   * @generated from field: repeated elys.perpetual.PoolResponse pool = 1;
   */
  pool: PoolResponse[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryAllPoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.QueryAllPoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool", kind: "message", T: PoolResponse, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllPoolResponse {
    return new QueryAllPoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllPoolResponse {
    return new QueryAllPoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllPoolResponse {
    return new QueryAllPoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllPoolResponse | PlainMessage<QueryAllPoolResponse> | undefined, b: QueryAllPoolResponse | PlainMessage<QueryAllPoolResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllPoolResponse, a, b);
  }
}

/**
 * @generated from message elys.perpetual.MTPRequest
 */
export class MTPRequest extends Message<MTPRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<MTPRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.MTPRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MTPRequest {
    return new MTPRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MTPRequest {
    return new MTPRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MTPRequest {
    return new MTPRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MTPRequest | PlainMessage<MTPRequest> | undefined, b: MTPRequest | PlainMessage<MTPRequest> | undefined): boolean {
    return proto3.util.equals(MTPRequest, a, b);
  }
}

/**
 * @generated from message elys.perpetual.MTPResponse
 */
export class MTPResponse extends Message<MTPResponse> {
  /**
   * @generated from field: elys.perpetual.MtpAndPrice mtp = 1;
   */
  mtp?: MtpAndPrice;

  constructor(data?: PartialMessage<MTPResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.MTPResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "mtp", kind: "message", T: MtpAndPrice },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MTPResponse {
    return new MTPResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MTPResponse {
    return new MTPResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MTPResponse {
    return new MTPResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MTPResponse | PlainMessage<MTPResponse> | undefined, b: MTPResponse | PlainMessage<MTPResponse> | undefined): boolean {
    return proto3.util.equals(MTPResponse, a, b);
  }
}

/**
 * @generated from message elys.perpetual.QueryOpenEstimationRequest
 */
export class QueryOpenEstimationRequest extends Message<QueryOpenEstimationRequest> {
  /**
   * @generated from field: elys.perpetual.Position position = 1;
   */
  position = Position.UNSPECIFIED;

  /**
   * @generated from field: string leverage = 2;
   */
  leverage = "";

  /**
   * @generated from field: string trading_asset = 3;
   */
  tradingAsset = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin collateral = 4;
   */
  collateral?: Coin;

  /**
   * @generated from field: string address = 5;
   */
  address = "";

  /**
   * @generated from field: string take_profit_price = 6;
   */
  takeProfitPrice = "";

  /**
   * @generated from field: uint64 poolId = 7;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: string limit_price = 8;
   */
  limitPrice = "";

  constructor(data?: PartialMessage<QueryOpenEstimationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.QueryOpenEstimationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "position", kind: "enum", T: proto3.getEnumType(Position) },
    { no: 2, name: "leverage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "trading_asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "collateral", kind: "message", T: Coin },
    { no: 5, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "take_profit_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "poolId", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "limit_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOpenEstimationRequest {
    return new QueryOpenEstimationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOpenEstimationRequest {
    return new QueryOpenEstimationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOpenEstimationRequest {
    return new QueryOpenEstimationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOpenEstimationRequest | PlainMessage<QueryOpenEstimationRequest> | undefined, b: QueryOpenEstimationRequest | PlainMessage<QueryOpenEstimationRequest> | undefined): boolean {
    return proto3.util.equals(QueryOpenEstimationRequest, a, b);
  }
}

/**
 * @generated from message elys.perpetual.QueryOpenEstimationResponse
 */
export class QueryOpenEstimationResponse extends Message<QueryOpenEstimationResponse> {
  /**
   * @generated from field: elys.perpetual.Position position = 1;
   */
  position = Position.UNSPECIFIED;

  /**
   * @generated from field: string effective_leverage = 2;
   */
  effectiveLeverage = "";

  /**
   * @generated from field: string trading_asset = 3;
   */
  tradingAsset = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin collateral = 4;
   */
  collateral?: Coin;

  /**
   * @generated from field: string hourly_interest_rate = 5;
   */
  hourlyInterestRate = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin position_size = 6;
   */
  positionSize?: Coin;

  /**
   * @generated from field: string open_price = 7;
   */
  openPrice = "";

  /**
   * @generated from field: string take_profit_price = 8;
   */
  takeProfitPrice = "";

  /**
   * @generated from field: string liquidation_price = 9;
   */
  liquidationPrice = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin estimated_pnl = 10;
   */
  estimatedPnl?: Coin;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin available_liquidity = 11;
   */
  availableLiquidity?: Coin;

  /**
   * @generated from field: string slippage = 12;
   */
  slippage = "";

  /**
   * @generated from field: string borrow_interest_rate = 13;
   */
  borrowInterestRate = "";

  /**
   * @generated from field: string funding_rate = 14;
   */
  fundingRate = "";

  /**
   * @generated from field: string price_impact = 15;
   */
  priceImpact = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin custody = 16;
   */
  custody?: Coin;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin liabilities = 17;
   */
  liabilities?: Coin;

  /**
   * @generated from field: string limit_price = 18;
   */
  limitPrice = "";

  /**
   * @generated from field: string weight_breaking_fee = 19;
   */
  weightBreakingFee = "";

  constructor(data?: PartialMessage<QueryOpenEstimationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.QueryOpenEstimationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "position", kind: "enum", T: proto3.getEnumType(Position) },
    { no: 2, name: "effective_leverage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "trading_asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "collateral", kind: "message", T: Coin },
    { no: 5, name: "hourly_interest_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "position_size", kind: "message", T: Coin },
    { no: 7, name: "open_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "take_profit_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "liquidation_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "estimated_pnl", kind: "message", T: Coin },
    { no: 11, name: "available_liquidity", kind: "message", T: Coin },
    { no: 12, name: "slippage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "borrow_interest_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "funding_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "price_impact", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "custody", kind: "message", T: Coin },
    { no: 17, name: "liabilities", kind: "message", T: Coin },
    { no: 18, name: "limit_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 19, name: "weight_breaking_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOpenEstimationResponse {
    return new QueryOpenEstimationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOpenEstimationResponse {
    return new QueryOpenEstimationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOpenEstimationResponse {
    return new QueryOpenEstimationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOpenEstimationResponse | PlainMessage<QueryOpenEstimationResponse> | undefined, b: QueryOpenEstimationResponse | PlainMessage<QueryOpenEstimationResponse> | undefined): boolean {
    return proto3.util.equals(QueryOpenEstimationResponse, a, b);
  }
}

/**
 * @generated from message elys.perpetual.PoolResponse
 */
export class PoolResponse extends Message<PoolResponse> {
  /**
   * @generated from field: uint64 amm_pool_id = 1;
   */
  ammPoolId = protoInt64.zero;

  /**
   * @generated from field: string health = 2;
   */
  health = "";

  /**
   * @generated from field: string borrow_interest_rate = 3;
   */
  borrowInterestRate = "";

  /**
   * @generated from field: repeated elys.perpetual.PoolAsset pool_assets_long = 4;
   */
  poolAssetsLong: PoolAsset[] = [];

  /**
   * @generated from field: repeated elys.perpetual.PoolAsset pool_assets_short = 5;
   */
  poolAssetsShort: PoolAsset[] = [];

  /**
   * @generated from field: int64 last_height_borrow_interest_rate_computed = 6;
   */
  lastHeightBorrowInterestRateComputed = protoInt64.zero;

  /**
   * funding rate, if positive longs pay shorts, if negative shorts pay longs
   *
   * @generated from field: string funding_rate = 7;
   */
  fundingRate = "";

  /**
   * @generated from field: string net_open_interest = 8;
   */
  netOpenInterest = "";

  /**
   * Rate at which long pays/receive from short
   * if negative longs pay, if positive long receives
   *
   * @generated from field: string long_rate = 9;
   */
  longRate = "";

  /**
   * @generated from field: string short_rate = 10;
   */
  shortRate = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin total_liabilities = 11;
   */
  totalLiabilities?: Coin;

  /**
   * @generated from field: string total_long_open_interest = 12;
   */
  totalLongOpenInterest = "";

  /**
   * @generated from field: string total_short_open_interest = 13;
   */
  totalShortOpenInterest = "";

  /**
   * @generated from field: string leverage_max = 14;
   */
  leverageMax = "";

  constructor(data?: PartialMessage<PoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.PoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amm_pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "health", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "borrow_interest_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "pool_assets_long", kind: "message", T: PoolAsset, repeated: true },
    { no: 5, name: "pool_assets_short", kind: "message", T: PoolAsset, repeated: true },
    { no: 6, name: "last_height_borrow_interest_rate_computed", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "funding_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "net_open_interest", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "long_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "short_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "total_liabilities", kind: "message", T: Coin },
    { no: 12, name: "total_long_open_interest", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "total_short_open_interest", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "leverage_max", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolResponse {
    return new PoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolResponse {
    return new PoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolResponse {
    return new PoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PoolResponse | PlainMessage<PoolResponse> | undefined, b: PoolResponse | PlainMessage<PoolResponse> | undefined): boolean {
    return proto3.util.equals(PoolResponse, a, b);
  }
}

/**
 * @generated from message elys.perpetual.QueryCloseEstimationRequest
 */
export class QueryCloseEstimationRequest extends Message<QueryCloseEstimationRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: uint64 position_id = 2;
   */
  positionId = protoInt64.zero;

  /**
   * @generated from field: string close_amount = 3;
   */
  closeAmount = "";

  constructor(data?: PartialMessage<QueryCloseEstimationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.QueryCloseEstimationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "position_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "close_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCloseEstimationRequest {
    return new QueryCloseEstimationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCloseEstimationRequest {
    return new QueryCloseEstimationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCloseEstimationRequest {
    return new QueryCloseEstimationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCloseEstimationRequest | PlainMessage<QueryCloseEstimationRequest> | undefined, b: QueryCloseEstimationRequest | PlainMessage<QueryCloseEstimationRequest> | undefined): boolean {
    return proto3.util.equals(QueryCloseEstimationRequest, a, b);
  }
}

/**
 * @generated from message elys.perpetual.QueryCloseEstimationResponse
 */
export class QueryCloseEstimationResponse extends Message<QueryCloseEstimationResponse> {
  /**
   * @generated from field: elys.perpetual.Position position = 1;
   */
  position = Position.UNSPECIFIED;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin position_size = 2;
   */
  positionSize?: Coin;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin liabilities = 3;
   */
  liabilities?: Coin;

  /**
   * @generated from field: string price_impact = 4;
   */
  priceImpact = "";

  /**
   * @generated from field: string liquidation_price = 5;
   */
  liquidationPrice = "";

  /**
   * @generated from field: string max_close_amount = 6;
   */
  maxCloseAmount = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin borrow_interest_unpaid_liability = 7;
   */
  borrowInterestUnpaidLiability?: Coin;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin returning_amount = 8;
   */
  returningAmount?: Coin;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin paying_liabilities = 9;
   */
  payingLiabilities?: Coin;

  /**
   * @generated from field: string closing_price = 10;
   */
  closingPrice = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin custody = 11;
   */
  custody?: Coin;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin collateral = 12;
   */
  collateral?: Coin;

  /**
   * @generated from field: string weight_breaking_fee = 13;
   */
  weightBreakingFee = "";

  /**
   * @generated from field: string slippage = 14;
   */
  slippage = "";

  constructor(data?: PartialMessage<QueryCloseEstimationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.QueryCloseEstimationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "position", kind: "enum", T: proto3.getEnumType(Position) },
    { no: 2, name: "position_size", kind: "message", T: Coin },
    { no: 3, name: "liabilities", kind: "message", T: Coin },
    { no: 4, name: "price_impact", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "liquidation_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "max_close_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "borrow_interest_unpaid_liability", kind: "message", T: Coin },
    { no: 8, name: "returning_amount", kind: "message", T: Coin },
    { no: 9, name: "paying_liabilities", kind: "message", T: Coin },
    { no: 10, name: "closing_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "custody", kind: "message", T: Coin },
    { no: 12, name: "collateral", kind: "message", T: Coin },
    { no: 13, name: "weight_breaking_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "slippage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCloseEstimationResponse {
    return new QueryCloseEstimationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCloseEstimationResponse {
    return new QueryCloseEstimationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCloseEstimationResponse {
    return new QueryCloseEstimationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCloseEstimationResponse | PlainMessage<QueryCloseEstimationResponse> | undefined, b: QueryCloseEstimationResponse | PlainMessage<QueryCloseEstimationResponse> | undefined): boolean {
    return proto3.util.equals(QueryCloseEstimationResponse, a, b);
  }
}

