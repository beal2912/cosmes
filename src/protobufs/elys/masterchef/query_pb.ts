// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file elys/masterchef/query.proto (package elys.masterchef, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { ExternalIncentive } from "./external_incentive_pb.js";
import { PoolInfo, PoolRewardInfo, UserRewardInfo } from "./pool_pb.js";
import { Coin } from "../../cosmos/base/v1beta1/coin_pb.js";
import { FeeInfo } from "./types_pb.js";
import { EarnType } from "../commitment/params_pb.js";
import { PageRequest } from "../../cosmos/base/query/v1beta1/pagination_pb.js";

/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from message elys.masterchef.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.masterchef.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from message elys.masterchef.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: elys.masterchef.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.masterchef.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * @generated from message elys.masterchef.QueryExternalIncentiveRequest
 */
export class QueryExternalIncentiveRequest extends Message<QueryExternalIncentiveRequest> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<QueryExternalIncentiveRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.masterchef.QueryExternalIncentiveRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryExternalIncentiveRequest {
    return new QueryExternalIncentiveRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryExternalIncentiveRequest {
    return new QueryExternalIncentiveRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryExternalIncentiveRequest {
    return new QueryExternalIncentiveRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryExternalIncentiveRequest | PlainMessage<QueryExternalIncentiveRequest> | undefined, b: QueryExternalIncentiveRequest | PlainMessage<QueryExternalIncentiveRequest> | undefined): boolean {
    return proto3.util.equals(QueryExternalIncentiveRequest, a, b);
  }
}

/**
 * @generated from message elys.masterchef.QueryExternalIncentiveResponse
 */
export class QueryExternalIncentiveResponse extends Message<QueryExternalIncentiveResponse> {
  /**
   * @generated from field: elys.masterchef.ExternalIncentive external_incentive = 1;
   */
  externalIncentive?: ExternalIncentive;

  constructor(data?: PartialMessage<QueryExternalIncentiveResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.masterchef.QueryExternalIncentiveResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "external_incentive", kind: "message", T: ExternalIncentive },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryExternalIncentiveResponse {
    return new QueryExternalIncentiveResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryExternalIncentiveResponse {
    return new QueryExternalIncentiveResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryExternalIncentiveResponse {
    return new QueryExternalIncentiveResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryExternalIncentiveResponse | PlainMessage<QueryExternalIncentiveResponse> | undefined, b: QueryExternalIncentiveResponse | PlainMessage<QueryExternalIncentiveResponse> | undefined): boolean {
    return proto3.util.equals(QueryExternalIncentiveResponse, a, b);
  }
}

/**
 * @generated from message elys.masterchef.QueryPoolInfoRequest
 */
export class QueryPoolInfoRequest extends Message<QueryPoolInfoRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  constructor(data?: PartialMessage<QueryPoolInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.masterchef.QueryPoolInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolInfoRequest {
    return new QueryPoolInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolInfoRequest {
    return new QueryPoolInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolInfoRequest {
    return new QueryPoolInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolInfoRequest | PlainMessage<QueryPoolInfoRequest> | undefined, b: QueryPoolInfoRequest | PlainMessage<QueryPoolInfoRequest> | undefined): boolean {
    return proto3.util.equals(QueryPoolInfoRequest, a, b);
  }
}

/**
 * @generated from message elys.masterchef.QueryPoolInfoResponse
 */
export class QueryPoolInfoResponse extends Message<QueryPoolInfoResponse> {
  /**
   * @generated from field: elys.masterchef.PoolInfo pool_info = 1;
   */
  poolInfo?: PoolInfo;

  constructor(data?: PartialMessage<QueryPoolInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.masterchef.QueryPoolInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_info", kind: "message", T: PoolInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolInfoResponse {
    return new QueryPoolInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolInfoResponse {
    return new QueryPoolInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolInfoResponse {
    return new QueryPoolInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolInfoResponse | PlainMessage<QueryPoolInfoResponse> | undefined, b: QueryPoolInfoResponse | PlainMessage<QueryPoolInfoResponse> | undefined): boolean {
    return proto3.util.equals(QueryPoolInfoResponse, a, b);
  }
}

/**
 * @generated from message elys.masterchef.QueryPoolRewardInfoRequest
 */
export class QueryPoolRewardInfoRequest extends Message<QueryPoolRewardInfoRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: string reward_denom = 2;
   */
  rewardDenom = "";

  constructor(data?: PartialMessage<QueryPoolRewardInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.masterchef.QueryPoolRewardInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "reward_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolRewardInfoRequest {
    return new QueryPoolRewardInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolRewardInfoRequest {
    return new QueryPoolRewardInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolRewardInfoRequest {
    return new QueryPoolRewardInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolRewardInfoRequest | PlainMessage<QueryPoolRewardInfoRequest> | undefined, b: QueryPoolRewardInfoRequest | PlainMessage<QueryPoolRewardInfoRequest> | undefined): boolean {
    return proto3.util.equals(QueryPoolRewardInfoRequest, a, b);
  }
}

/**
 * @generated from message elys.masterchef.QueryPoolRewardInfoResponse
 */
export class QueryPoolRewardInfoResponse extends Message<QueryPoolRewardInfoResponse> {
  /**
   * @generated from field: elys.masterchef.PoolRewardInfo pool_reward_info = 1;
   */
  poolRewardInfo?: PoolRewardInfo;

  constructor(data?: PartialMessage<QueryPoolRewardInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.masterchef.QueryPoolRewardInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_reward_info", kind: "message", T: PoolRewardInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolRewardInfoResponse {
    return new QueryPoolRewardInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolRewardInfoResponse {
    return new QueryPoolRewardInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolRewardInfoResponse {
    return new QueryPoolRewardInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolRewardInfoResponse | PlainMessage<QueryPoolRewardInfoResponse> | undefined, b: QueryPoolRewardInfoResponse | PlainMessage<QueryPoolRewardInfoResponse> | undefined): boolean {
    return proto3.util.equals(QueryPoolRewardInfoResponse, a, b);
  }
}

/**
 * @generated from message elys.masterchef.QueryUserRewardInfoRequest
 */
export class QueryUserRewardInfoRequest extends Message<QueryUserRewardInfoRequest> {
  /**
   * @generated from field: string user = 1;
   */
  user = "";

  /**
   * @generated from field: uint64 pool_id = 2;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: string reward_denom = 3;
   */
  rewardDenom = "";

  constructor(data?: PartialMessage<QueryUserRewardInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.masterchef.QueryUserRewardInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "reward_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryUserRewardInfoRequest {
    return new QueryUserRewardInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryUserRewardInfoRequest {
    return new QueryUserRewardInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryUserRewardInfoRequest {
    return new QueryUserRewardInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryUserRewardInfoRequest | PlainMessage<QueryUserRewardInfoRequest> | undefined, b: QueryUserRewardInfoRequest | PlainMessage<QueryUserRewardInfoRequest> | undefined): boolean {
    return proto3.util.equals(QueryUserRewardInfoRequest, a, b);
  }
}

/**
 * @generated from message elys.masterchef.QueryUserRewardInfoResponse
 */
export class QueryUserRewardInfoResponse extends Message<QueryUserRewardInfoResponse> {
  /**
   * @generated from field: elys.masterchef.UserRewardInfo user_reward_info = 1;
   */
  userRewardInfo?: UserRewardInfo;

  constructor(data?: PartialMessage<QueryUserRewardInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.masterchef.QueryUserRewardInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_reward_info", kind: "message", T: UserRewardInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryUserRewardInfoResponse {
    return new QueryUserRewardInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryUserRewardInfoResponse {
    return new QueryUserRewardInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryUserRewardInfoResponse {
    return new QueryUserRewardInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryUserRewardInfoResponse | PlainMessage<QueryUserRewardInfoResponse> | undefined, b: QueryUserRewardInfoResponse | PlainMessage<QueryUserRewardInfoResponse> | undefined): boolean {
    return proto3.util.equals(QueryUserRewardInfoResponse, a, b);
  }
}

/**
 * @generated from message elys.masterchef.QueryUserPendingRewardRequest
 */
export class QueryUserPendingRewardRequest extends Message<QueryUserPendingRewardRequest> {
  /**
   * @generated from field: string user = 1;
   */
  user = "";

  constructor(data?: PartialMessage<QueryUserPendingRewardRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.masterchef.QueryUserPendingRewardRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryUserPendingRewardRequest {
    return new QueryUserPendingRewardRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryUserPendingRewardRequest {
    return new QueryUserPendingRewardRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryUserPendingRewardRequest {
    return new QueryUserPendingRewardRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryUserPendingRewardRequest | PlainMessage<QueryUserPendingRewardRequest> | undefined, b: QueryUserPendingRewardRequest | PlainMessage<QueryUserPendingRewardRequest> | undefined): boolean {
    return proto3.util.equals(QueryUserPendingRewardRequest, a, b);
  }
}

/**
 * @generated from message elys.masterchef.RewardInfo
 */
export class RewardInfo extends Message<RewardInfo> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin reward = 2;
   */
  reward: Coin[] = [];

  constructor(data?: PartialMessage<RewardInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.masterchef.RewardInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "reward", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RewardInfo {
    return new RewardInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RewardInfo {
    return new RewardInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RewardInfo {
    return new RewardInfo().fromJsonString(jsonString, options);
  }

  static equals(a: RewardInfo | PlainMessage<RewardInfo> | undefined, b: RewardInfo | PlainMessage<RewardInfo> | undefined): boolean {
    return proto3.util.equals(RewardInfo, a, b);
  }
}

/**
 * @generated from message elys.masterchef.QueryUserPendingRewardResponse
 */
export class QueryUserPendingRewardResponse extends Message<QueryUserPendingRewardResponse> {
  /**
   * @generated from field: repeated elys.masterchef.RewardInfo rewards = 1;
   */
  rewards: RewardInfo[] = [];

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin total_rewards = 2;
   */
  totalRewards: Coin[] = [];

  constructor(data?: PartialMessage<QueryUserPendingRewardResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.masterchef.QueryUserPendingRewardResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rewards", kind: "message", T: RewardInfo, repeated: true },
    { no: 2, name: "total_rewards", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryUserPendingRewardResponse {
    return new QueryUserPendingRewardResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryUserPendingRewardResponse {
    return new QueryUserPendingRewardResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryUserPendingRewardResponse {
    return new QueryUserPendingRewardResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryUserPendingRewardResponse | PlainMessage<QueryUserPendingRewardResponse> | undefined, b: QueryUserPendingRewardResponse | PlainMessage<QueryUserPendingRewardResponse> | undefined): boolean {
    return proto3.util.equals(QueryUserPendingRewardResponse, a, b);
  }
}

/**
 * @generated from message elys.masterchef.QueryStableStakeAprRequest
 */
export class QueryStableStakeAprRequest extends Message<QueryStableStakeAprRequest> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  constructor(data?: PartialMessage<QueryStableStakeAprRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.masterchef.QueryStableStakeAprRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryStableStakeAprRequest {
    return new QueryStableStakeAprRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryStableStakeAprRequest {
    return new QueryStableStakeAprRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryStableStakeAprRequest {
    return new QueryStableStakeAprRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryStableStakeAprRequest | PlainMessage<QueryStableStakeAprRequest> | undefined, b: QueryStableStakeAprRequest | PlainMessage<QueryStableStakeAprRequest> | undefined): boolean {
    return proto3.util.equals(QueryStableStakeAprRequest, a, b);
  }
}

/**
 * @generated from message elys.masterchef.QueryStableStakeAprResponse
 */
export class QueryStableStakeAprResponse extends Message<QueryStableStakeAprResponse> {
  /**
   * @generated from field: string apr = 1;
   */
  apr = "";

  constructor(data?: PartialMessage<QueryStableStakeAprResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.masterchef.QueryStableStakeAprResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "apr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryStableStakeAprResponse {
    return new QueryStableStakeAprResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryStableStakeAprResponse {
    return new QueryStableStakeAprResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryStableStakeAprResponse {
    return new QueryStableStakeAprResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryStableStakeAprResponse | PlainMessage<QueryStableStakeAprResponse> | undefined, b: QueryStableStakeAprResponse | PlainMessage<QueryStableStakeAprResponse> | undefined): boolean {
    return proto3.util.equals(QueryStableStakeAprResponse, a, b);
  }
}

/**
 * @generated from message elys.masterchef.QueryPoolAprsRequest
 */
export class QueryPoolAprsRequest extends Message<QueryPoolAprsRequest> {
  /**
   * @generated from field: repeated uint64 pool_ids = 1;
   */
  poolIds: bigint[] = [];

  constructor(data?: PartialMessage<QueryPoolAprsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.masterchef.QueryPoolAprsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_ids", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolAprsRequest {
    return new QueryPoolAprsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolAprsRequest {
    return new QueryPoolAprsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolAprsRequest {
    return new QueryPoolAprsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolAprsRequest | PlainMessage<QueryPoolAprsRequest> | undefined, b: QueryPoolAprsRequest | PlainMessage<QueryPoolAprsRequest> | undefined): boolean {
    return proto3.util.equals(QueryPoolAprsRequest, a, b);
  }
}

/**
 * @generated from message elys.masterchef.QueryPoolAprsResponse
 */
export class QueryPoolAprsResponse extends Message<QueryPoolAprsResponse> {
  /**
   * @generated from field: repeated elys.masterchef.PoolApr data = 1;
   */
  data: PoolApr[] = [];

  constructor(data?: PartialMessage<QueryPoolAprsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.masterchef.QueryPoolAprsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: PoolApr, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolAprsResponse {
    return new QueryPoolAprsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolAprsResponse {
    return new QueryPoolAprsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolAprsResponse {
    return new QueryPoolAprsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolAprsResponse | PlainMessage<QueryPoolAprsResponse> | undefined, b: QueryPoolAprsResponse | PlainMessage<QueryPoolAprsResponse> | undefined): boolean {
    return proto3.util.equals(QueryPoolAprsResponse, a, b);
  }
}

/**
 * @generated from message elys.masterchef.PoolApr
 */
export class PoolApr extends Message<PoolApr> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: string eden_apr = 2;
   */
  edenApr = "";

  /**
   * @generated from field: string usdc_apr = 3;
   */
  usdcApr = "";

  /**
   * @generated from field: string total_apr = 4;
   */
  totalApr = "";

  constructor(data?: PartialMessage<PoolApr>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.masterchef.PoolApr";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "eden_apr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "usdc_apr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "total_apr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolApr {
    return new PoolApr().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolApr {
    return new PoolApr().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolApr {
    return new PoolApr().fromJsonString(jsonString, options);
  }

  static equals(a: PoolApr | PlainMessage<PoolApr> | undefined, b: PoolApr | PlainMessage<PoolApr> | undefined): boolean {
    return proto3.util.equals(PoolApr, a, b);
  }
}

/**
 * @generated from message elys.masterchef.QueryShowFeeInfoRequest
 */
export class QueryShowFeeInfoRequest extends Message<QueryShowFeeInfoRequest> {
  /**
   * @generated from field: string date = 1;
   */
  date = "";

  constructor(data?: PartialMessage<QueryShowFeeInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.masterchef.QueryShowFeeInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryShowFeeInfoRequest {
    return new QueryShowFeeInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryShowFeeInfoRequest {
    return new QueryShowFeeInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryShowFeeInfoRequest {
    return new QueryShowFeeInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryShowFeeInfoRequest | PlainMessage<QueryShowFeeInfoRequest> | undefined, b: QueryShowFeeInfoRequest | PlainMessage<QueryShowFeeInfoRequest> | undefined): boolean {
    return proto3.util.equals(QueryShowFeeInfoRequest, a, b);
  }
}

/**
 * @generated from message elys.masterchef.QueryShowFeeInfoResponse
 */
export class QueryShowFeeInfoResponse extends Message<QueryShowFeeInfoResponse> {
  /**
   * @generated from field: elys.masterchef.FeeInfo fee_info = 1;
   */
  feeInfo?: FeeInfo;

  constructor(data?: PartialMessage<QueryShowFeeInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.masterchef.QueryShowFeeInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fee_info", kind: "message", T: FeeInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryShowFeeInfoResponse {
    return new QueryShowFeeInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryShowFeeInfoResponse {
    return new QueryShowFeeInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryShowFeeInfoResponse {
    return new QueryShowFeeInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryShowFeeInfoResponse | PlainMessage<QueryShowFeeInfoResponse> | undefined, b: QueryShowFeeInfoResponse | PlainMessage<QueryShowFeeInfoResponse> | undefined): boolean {
    return proto3.util.equals(QueryShowFeeInfoResponse, a, b);
  }
}

/**
 * @generated from message elys.masterchef.QueryListFeeInfoRequest
 */
export class QueryListFeeInfoRequest extends Message<QueryListFeeInfoRequest> {
  constructor(data?: PartialMessage<QueryListFeeInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.masterchef.QueryListFeeInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryListFeeInfoRequest {
    return new QueryListFeeInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryListFeeInfoRequest {
    return new QueryListFeeInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryListFeeInfoRequest {
    return new QueryListFeeInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryListFeeInfoRequest | PlainMessage<QueryListFeeInfoRequest> | undefined, b: QueryListFeeInfoRequest | PlainMessage<QueryListFeeInfoRequest> | undefined): boolean {
    return proto3.util.equals(QueryListFeeInfoRequest, a, b);
  }
}

/**
 * @generated from message elys.masterchef.QueryListFeeInfoResponse
 */
export class QueryListFeeInfoResponse extends Message<QueryListFeeInfoResponse> {
  /**
   * @generated from field: repeated elys.masterchef.FeeInfo fee_info = 1;
   */
  feeInfo: FeeInfo[] = [];

  constructor(data?: PartialMessage<QueryListFeeInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.masterchef.QueryListFeeInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fee_info", kind: "message", T: FeeInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryListFeeInfoResponse {
    return new QueryListFeeInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryListFeeInfoResponse {
    return new QueryListFeeInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryListFeeInfoResponse {
    return new QueryListFeeInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryListFeeInfoResponse | PlainMessage<QueryListFeeInfoResponse> | undefined, b: QueryListFeeInfoResponse | PlainMessage<QueryListFeeInfoResponse> | undefined): boolean {
    return proto3.util.equals(QueryListFeeInfoResponse, a, b);
  }
}

/**
 * @generated from message elys.masterchef.QueryAprRequest
 */
export class QueryAprRequest extends Message<QueryAprRequest> {
  /**
   * @generated from field: elys.commitment.EarnType withdraw_type = 1;
   */
  withdrawType = EarnType.ALL_PROGRAM;

  /**
   * @generated from field: string denom = 2;
   */
  denom = "";

  constructor(data?: PartialMessage<QueryAprRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.masterchef.QueryAprRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "withdraw_type", kind: "enum", T: proto3.getEnumType(EarnType) },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAprRequest {
    return new QueryAprRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAprRequest {
    return new QueryAprRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAprRequest {
    return new QueryAprRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAprRequest | PlainMessage<QueryAprRequest> | undefined, b: QueryAprRequest | PlainMessage<QueryAprRequest> | undefined): boolean {
    return proto3.util.equals(QueryAprRequest, a, b);
  }
}

/**
 * @generated from message elys.masterchef.QueryAprResponse
 */
export class QueryAprResponse extends Message<QueryAprResponse> {
  /**
   * @generated from field: string apr = 1;
   */
  apr = "";

  constructor(data?: PartialMessage<QueryAprResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.masterchef.QueryAprResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "apr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAprResponse {
    return new QueryAprResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAprResponse {
    return new QueryAprResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAprResponse {
    return new QueryAprResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAprResponse | PlainMessage<QueryAprResponse> | undefined, b: QueryAprResponse | PlainMessage<QueryAprResponse> | undefined): boolean {
    return proto3.util.equals(QueryAprResponse, a, b);
  }
}

/**
 * @generated from message elys.masterchef.QueryAprsRequest
 */
export class QueryAprsRequest extends Message<QueryAprsRequest> {
  constructor(data?: PartialMessage<QueryAprsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.masterchef.QueryAprsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAprsRequest {
    return new QueryAprsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAprsRequest {
    return new QueryAprsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAprsRequest {
    return new QueryAprsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAprsRequest | PlainMessage<QueryAprsRequest> | undefined, b: QueryAprsRequest | PlainMessage<QueryAprsRequest> | undefined): boolean {
    return proto3.util.equals(QueryAprsRequest, a, b);
  }
}

/**
 * @generated from message elys.masterchef.QueryAprsResponse
 */
export class QueryAprsResponse extends Message<QueryAprsResponse> {
  /**
   * @generated from field: string usdc_apr_usdc = 1;
   */
  usdcAprUsdc = "";

  /**
   * @generated from field: string eden_apr_usdc = 2;
   */
  edenAprUsdc = "";

  /**
   * @generated from field: string usdc_apr_edenb = 3;
   */
  usdcAprEdenb = "";

  /**
   * @generated from field: string eden_apr_edenb = 4;
   */
  edenAprEdenb = "";

  /**
   * @generated from field: string usdc_apr_eden = 5;
   */
  usdcAprEden = "";

  /**
   * @generated from field: string eden_apr_eden = 6;
   */
  edenAprEden = "";

  /**
   * @generated from field: string edenb_apr_eden = 7;
   */
  edenbAprEden = "";

  /**
   * @generated from field: string usdc_apr_elys = 8;
   */
  usdcAprElys = "";

  /**
   * @generated from field: string eden_apr_elys = 9;
   */
  edenAprElys = "";

  /**
   * @generated from field: string edenb_apr_elys = 10;
   */
  edenbAprElys = "";

  constructor(data?: PartialMessage<QueryAprsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.masterchef.QueryAprsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "usdc_apr_usdc", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "eden_apr_usdc", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "usdc_apr_edenb", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "eden_apr_edenb", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "usdc_apr_eden", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "eden_apr_eden", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "edenb_apr_eden", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "usdc_apr_elys", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "eden_apr_elys", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "edenb_apr_elys", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAprsResponse {
    return new QueryAprsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAprsResponse {
    return new QueryAprsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAprsResponse {
    return new QueryAprsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAprsResponse | PlainMessage<QueryAprsResponse> | undefined, b: QueryAprsResponse | PlainMessage<QueryAprsResponse> | undefined): boolean {
    return proto3.util.equals(QueryAprsResponse, a, b);
  }
}

/**
 * @generated from message elys.masterchef.QueryPoolRewardsRequest
 */
export class QueryPoolRewardsRequest extends Message<QueryPoolRewardsRequest> {
  /**
   * @generated from field: repeated uint64 pool_ids = 1;
   */
  poolIds: bigint[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryPoolRewardsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.masterchef.QueryPoolRewardsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_ids", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolRewardsRequest {
    return new QueryPoolRewardsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolRewardsRequest {
    return new QueryPoolRewardsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolRewardsRequest {
    return new QueryPoolRewardsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolRewardsRequest | PlainMessage<QueryPoolRewardsRequest> | undefined, b: QueryPoolRewardsRequest | PlainMessage<QueryPoolRewardsRequest> | undefined): boolean {
    return proto3.util.equals(QueryPoolRewardsRequest, a, b);
  }
}

/**
 * @generated from message elys.masterchef.PoolRewards
 */
export class PoolRewards extends Message<PoolRewards> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: string rewards_usd = 2;
   */
  rewardsUsd = "";

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin reward_coins = 3;
   */
  rewardCoins: Coin[] = [];

  /**
   * @generated from field: cosmos.base.v1beta1.Coin eden_forward = 4;
   */
  edenForward?: Coin;

  /**
   * @generated from field: string rewards_usd_apr = 5;
   */
  rewardsUsdApr = "";

  /**
   * @generated from field: string external_rewards_apr = 6;
   */
  externalRewardsApr = "";

  constructor(data?: PartialMessage<PoolRewards>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.masterchef.PoolRewards";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "rewards_usd", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "reward_coins", kind: "message", T: Coin, repeated: true },
    { no: 4, name: "eden_forward", kind: "message", T: Coin },
    { no: 5, name: "rewards_usd_apr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "external_rewards_apr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolRewards {
    return new PoolRewards().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolRewards {
    return new PoolRewards().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolRewards {
    return new PoolRewards().fromJsonString(jsonString, options);
  }

  static equals(a: PoolRewards | PlainMessage<PoolRewards> | undefined, b: PoolRewards | PlainMessage<PoolRewards> | undefined): boolean {
    return proto3.util.equals(PoolRewards, a, b);
  }
}

/**
 * @generated from message elys.masterchef.QueryPoolRewardsResponse
 */
export class QueryPoolRewardsResponse extends Message<QueryPoolRewardsResponse> {
  /**
   * @generated from field: repeated elys.masterchef.PoolRewards pools = 1;
   */
  pools: PoolRewards[] = [];

  constructor(data?: PartialMessage<QueryPoolRewardsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.masterchef.QueryPoolRewardsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pools", kind: "message", T: PoolRewards, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolRewardsResponse {
    return new QueryPoolRewardsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolRewardsResponse {
    return new QueryPoolRewardsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolRewardsResponse {
    return new QueryPoolRewardsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolRewardsResponse | PlainMessage<QueryPoolRewardsResponse> | undefined, b: QueryPoolRewardsResponse | PlainMessage<QueryPoolRewardsResponse> | undefined): boolean {
    return proto3.util.equals(QueryPoolRewardsResponse, a, b);
  }
}

