// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file gaia/liquid/v1beta1/genesis.proto (package gaia.liquid.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Params, TokenizeShareRecord } from "./liquid_pb.js";

/**
 * GenesisState defines the liquid module's genesis state.
 *
 * @generated from message gaia.liquid.v1beta1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * params defines all the parameters of related to deposit.
   *
   * @generated from field: gaia.liquid.v1beta1.Params params = 1;
   */
  params?: Params;

  /**
   * store tokenize share records to provide reward to record owners
   *
   * @generated from field: repeated gaia.liquid.v1beta1.TokenizeShareRecord tokenize_share_records = 9;
   */
  tokenizeShareRecords: TokenizeShareRecord[] = [];

  /**
   * last tokenize share record id, used for next share record id calculation
   *
   * @generated from field: uint64 last_tokenize_share_record_id = 10;
   */
  lastTokenizeShareRecordId = protoInt64.zero;

  /**
   * total number of liquid staked tokens at genesis
   *
   * @generated from field: bytes total_liquid_staked_tokens = 11;
   */
  totalLiquidStakedTokens = new Uint8Array(0);

  /**
   * tokenize shares locks at genesis
   *
   * @generated from field: repeated gaia.liquid.v1beta1.TokenizeShareLock tokenize_share_locks = 12;
   */
  tokenizeShareLocks: TokenizeShareLock[] = [];

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gaia.liquid.v1beta1.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
    { no: 9, name: "tokenize_share_records", kind: "message", T: TokenizeShareRecord, repeated: true },
    { no: 10, name: "last_tokenize_share_record_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "total_liquid_staked_tokens", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 12, name: "tokenize_share_locks", kind: "message", T: TokenizeShareLock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

/**
 * TokenizeSharesLock required for specifying account locks at genesis
 *
 * @generated from message gaia.liquid.v1beta1.TokenizeShareLock
 */
export class TokenizeShareLock extends Message<TokenizeShareLock> {
  /**
   * Address of the account that is locked
   *
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * Status of the lock (LOCKED or LOCK_EXPIRING)
   *
   * @generated from field: string status = 2;
   */
  status = "";

  /**
   * Completion time if the lock is expiring
   *
   * @generated from field: google.protobuf.Timestamp completion_time = 3;
   */
  completionTime?: Timestamp;

  constructor(data?: PartialMessage<TokenizeShareLock>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gaia.liquid.v1beta1.TokenizeShareLock";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "completion_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TokenizeShareLock {
    return new TokenizeShareLock().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TokenizeShareLock {
    return new TokenizeShareLock().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TokenizeShareLock {
    return new TokenizeShareLock().fromJsonString(jsonString, options);
  }

  static equals(a: TokenizeShareLock | PlainMessage<TokenizeShareLock> | undefined, b: TokenizeShareLock | PlainMessage<TokenizeShareLock> | undefined): boolean {
    return proto3.util.equals(TokenizeShareLock, a, b);
  }
}

