// @generated by protoc-gen-cosmes v0.0.1 with parameter "target=ts"
// @generated from file gaia/liquid/v1beta1/query.proto (package gaia.liquid.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { QueryAllTokenizeShareRecordsRequest, QueryAllTokenizeShareRecordsResponse, QueryLastTokenizeShareRecordIdRequest, QueryLastTokenizeShareRecordIdResponse, QueryLiquidValidatorRequest, QueryLiquidValidatorResponse, QueryLiquidValidatorsRequest, QueryLiquidValidatorsResponse, QueryParamsRequest, QueryParamsResponse, QueryTokenizeShareLockInfo, QueryTokenizeShareLockInfoResponse, QueryTokenizeShareRecordByDenomRequest, QueryTokenizeShareRecordByDenomResponse, QueryTokenizeShareRecordByIdRequest, QueryTokenizeShareRecordByIdResponse, QueryTokenizeShareRecordRewardRequest, QueryTokenizeShareRecordRewardResponse, QueryTokenizeShareRecordsOwnedRequest, QueryTokenizeShareRecordsOwnedResponse, QueryTotalLiquidStaked, QueryTotalLiquidStakedResponse, QueryTotalTokenizeSharedAssetsRequest, QueryTotalTokenizeSharedAssetsResponse } from "./query_pb.js";

const TYPE_NAME = "gaia.liquid.v1beta1.Query";

/**
 * LiquidValidators queries all liquid validators.
 *
 * When called from another module, this query might consume a high amount of
 * gas if the pagination field is incorrectly set.
 *
 * @generated from rpc gaia.liquid.v1beta1.Query.LiquidValidators
 */
export const QueryLiquidValidatorsService = {
  typeName: TYPE_NAME,
  method: "LiquidValidators",
  Request: QueryLiquidValidatorsRequest,
  Response: QueryLiquidValidatorsResponse,
} as const;

/**
 * Query for an individual liquid validator by validator address
 *
 * @generated from rpc gaia.liquid.v1beta1.Query.LiquidValidator
 */
export const QueryLiquidValidatorService = {
  typeName: TYPE_NAME,
  method: "LiquidValidator",
  Request: QueryLiquidValidatorRequest,
  Response: QueryLiquidValidatorResponse,
} as const;

/**
 * Query for individual tokenize share record information by share by id
 *
 * @generated from rpc gaia.liquid.v1beta1.Query.TokenizeShareRecordById
 */
export const QueryTokenizeShareRecordByIdService = {
  typeName: TYPE_NAME,
  method: "TokenizeShareRecordById",
  Request: QueryTokenizeShareRecordByIdRequest,
  Response: QueryTokenizeShareRecordByIdResponse,
} as const;

/**
 * Query for individual tokenize share record information by share denom
 *
 * @generated from rpc gaia.liquid.v1beta1.Query.TokenizeShareRecordByDenom
 */
export const QueryTokenizeShareRecordByDenomService = {
  typeName: TYPE_NAME,
  method: "TokenizeShareRecordByDenom",
  Request: QueryTokenizeShareRecordByDenomRequest,
  Response: QueryTokenizeShareRecordByDenomResponse,
} as const;

/**
 * Query tokenize share records by address
 *
 * @generated from rpc gaia.liquid.v1beta1.Query.TokenizeShareRecordsOwned
 */
export const QueryTokenizeShareRecordsOwnedService = {
  typeName: TYPE_NAME,
  method: "TokenizeShareRecordsOwned",
  Request: QueryTokenizeShareRecordsOwnedRequest,
  Response: QueryTokenizeShareRecordsOwnedResponse,
} as const;

/**
 * Query for all tokenize share records
 *
 * @generated from rpc gaia.liquid.v1beta1.Query.AllTokenizeShareRecords
 */
export const QueryAllTokenizeShareRecordsService = {
  typeName: TYPE_NAME,
  method: "AllTokenizeShareRecords",
  Request: QueryAllTokenizeShareRecordsRequest,
  Response: QueryAllTokenizeShareRecordsResponse,
} as const;

/**
 * Query for last tokenize share record id
 *
 * @generated from rpc gaia.liquid.v1beta1.Query.LastTokenizeShareRecordId
 */
export const QueryLastTokenizeShareRecordIdService = {
  typeName: TYPE_NAME,
  method: "LastTokenizeShareRecordId",
  Request: QueryLastTokenizeShareRecordIdRequest,
  Response: QueryLastTokenizeShareRecordIdResponse,
} as const;

/**
 * Query for total tokenized staked assets
 *
 * @generated from rpc gaia.liquid.v1beta1.Query.TotalTokenizeSharedAssets
 */
export const QueryTotalTokenizeSharedAssetsService = {
  typeName: TYPE_NAME,
  method: "TotalTokenizeSharedAssets",
  Request: QueryTotalTokenizeSharedAssetsRequest,
  Response: QueryTotalTokenizeSharedAssetsResponse,
} as const;

/**
 * Query for total liquid staked (including tokenized shares or owned by an
 * liquid staking provider)
 *
 * @generated from rpc gaia.liquid.v1beta1.Query.TotalLiquidStaked
 */
export const QueryTotalLiquidStakedService = {
  typeName: TYPE_NAME,
  method: "TotalLiquidStaked",
  Request: QueryTotalLiquidStaked,
  Response: QueryTotalLiquidStakedResponse,
} as const;

/**
 * Query tokenize share locks
 *
 * @generated from rpc gaia.liquid.v1beta1.Query.TokenizeShareLockInfo
 */
export const QueryTokenizeShareLockInfoService = {
  typeName: TYPE_NAME,
  method: "TokenizeShareLockInfo",
  Request: QueryTokenizeShareLockInfo,
  Response: QueryTokenizeShareLockInfoResponse,
} as const;

/**
 * Parameters queries the liquid parameters.
 *
 * @generated from rpc gaia.liquid.v1beta1.Query.Params
 */
export const QueryParamsService = {
  typeName: TYPE_NAME,
  method: "Params",
  Request: QueryParamsRequest,
  Response: QueryParamsResponse,
} as const;

/**
 * TokenizeShareRecordReward queries the tokenize share record rewards
 *
 * @generated from rpc gaia.liquid.v1beta1.Query.TokenizeShareRecordReward
 */
export const QueryTokenizeShareRecordRewardService = {
  typeName: TYPE_NAME,
  method: "TokenizeShareRecordReward",
  Request: QueryTokenizeShareRecordRewardRequest,
  Response: QueryTokenizeShareRecordRewardResponse,
} as const;

