// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file gaia/liquid/v1beta1/query.proto (package gaia.liquid.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { LiquidValidator, Params, TokenizeShareRecord, TokenizeShareRecordReward } from "./liquid_pb.js";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination_pb.js";
import { Coin, DecCoin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * QueryLiquidValidatorRequest is the request type for the Query/LiquidValidator
 * RPC method.
 *
 * @generated from message gaia.liquid.v1beta1.QueryLiquidValidatorRequest
 */
export class QueryLiquidValidatorRequest extends Message<QueryLiquidValidatorRequest> {
  /**
   * @generated from field: string validator_addr = 1;
   */
  validatorAddr = "";

  constructor(data?: PartialMessage<QueryLiquidValidatorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gaia.liquid.v1beta1.QueryLiquidValidatorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validator_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLiquidValidatorRequest {
    return new QueryLiquidValidatorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLiquidValidatorRequest {
    return new QueryLiquidValidatorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLiquidValidatorRequest {
    return new QueryLiquidValidatorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLiquidValidatorRequest | PlainMessage<QueryLiquidValidatorRequest> | undefined, b: QueryLiquidValidatorRequest | PlainMessage<QueryLiquidValidatorRequest> | undefined): boolean {
    return proto3.util.equals(QueryLiquidValidatorRequest, a, b);
  }
}

/**
 * QueryLiquidValidatorResponse is the response type for the
 * Query/LiquidValidator RPC method.
 *
 * @generated from message gaia.liquid.v1beta1.QueryLiquidValidatorResponse
 */
export class QueryLiquidValidatorResponse extends Message<QueryLiquidValidatorResponse> {
  /**
   * @generated from field: gaia.liquid.v1beta1.LiquidValidator liquid_validator = 1;
   */
  liquidValidator?: LiquidValidator;

  constructor(data?: PartialMessage<QueryLiquidValidatorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gaia.liquid.v1beta1.QueryLiquidValidatorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "liquid_validator", kind: "message", T: LiquidValidator },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLiquidValidatorResponse {
    return new QueryLiquidValidatorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLiquidValidatorResponse {
    return new QueryLiquidValidatorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLiquidValidatorResponse {
    return new QueryLiquidValidatorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLiquidValidatorResponse | PlainMessage<QueryLiquidValidatorResponse> | undefined, b: QueryLiquidValidatorResponse | PlainMessage<QueryLiquidValidatorResponse> | undefined): boolean {
    return proto3.util.equals(QueryLiquidValidatorResponse, a, b);
  }
}

/**
 * QueryLiquidValidatorsRequest is request type for the
 * Query/QueryLiquidValidators RPC method.
 *
 * @generated from message gaia.liquid.v1beta1.QueryLiquidValidatorsRequest
 */
export class QueryLiquidValidatorsRequest extends Message<QueryLiquidValidatorsRequest> {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryLiquidValidatorsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gaia.liquid.v1beta1.QueryLiquidValidatorsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLiquidValidatorsRequest {
    return new QueryLiquidValidatorsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLiquidValidatorsRequest {
    return new QueryLiquidValidatorsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLiquidValidatorsRequest {
    return new QueryLiquidValidatorsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLiquidValidatorsRequest | PlainMessage<QueryLiquidValidatorsRequest> | undefined, b: QueryLiquidValidatorsRequest | PlainMessage<QueryLiquidValidatorsRequest> | undefined): boolean {
    return proto3.util.equals(QueryLiquidValidatorsRequest, a, b);
  }
}

/**
 * QueryLiquidValidatorsResponse is response type for the
 * Query/QueryLiquidValidators RPC method.
 *
 * @generated from message gaia.liquid.v1beta1.QueryLiquidValidatorsResponse
 */
export class QueryLiquidValidatorsResponse extends Message<QueryLiquidValidatorsResponse> {
  /**
   * @generated from field: repeated gaia.liquid.v1beta1.LiquidValidator liquid_validators = 1;
   */
  liquidValidators: LiquidValidator[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryLiquidValidatorsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gaia.liquid.v1beta1.QueryLiquidValidatorsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "liquid_validators", kind: "message", T: LiquidValidator, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLiquidValidatorsResponse {
    return new QueryLiquidValidatorsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLiquidValidatorsResponse {
    return new QueryLiquidValidatorsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLiquidValidatorsResponse {
    return new QueryLiquidValidatorsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLiquidValidatorsResponse | PlainMessage<QueryLiquidValidatorsResponse> | undefined, b: QueryLiquidValidatorsResponse | PlainMessage<QueryLiquidValidatorsResponse> | undefined): boolean {
    return proto3.util.equals(QueryLiquidValidatorsResponse, a, b);
  }
}

/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from message gaia.liquid.v1beta1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gaia.liquid.v1beta1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from message gaia.liquid.v1beta1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: gaia.liquid.v1beta1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gaia.liquid.v1beta1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * QueryTokenizeShareRecordByIdRequest is request type for the
 * Query/QueryTokenizeShareRecordById RPC method.
 *
 * @generated from message gaia.liquid.v1beta1.QueryTokenizeShareRecordByIdRequest
 */
export class QueryTokenizeShareRecordByIdRequest extends Message<QueryTokenizeShareRecordByIdRequest> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<QueryTokenizeShareRecordByIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gaia.liquid.v1beta1.QueryTokenizeShareRecordByIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTokenizeShareRecordByIdRequest {
    return new QueryTokenizeShareRecordByIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTokenizeShareRecordByIdRequest {
    return new QueryTokenizeShareRecordByIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTokenizeShareRecordByIdRequest {
    return new QueryTokenizeShareRecordByIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTokenizeShareRecordByIdRequest | PlainMessage<QueryTokenizeShareRecordByIdRequest> | undefined, b: QueryTokenizeShareRecordByIdRequest | PlainMessage<QueryTokenizeShareRecordByIdRequest> | undefined): boolean {
    return proto3.util.equals(QueryTokenizeShareRecordByIdRequest, a, b);
  }
}

/**
 * QueryTokenizeShareRecordByIdRequest is response type for the
 * Query/QueryTokenizeShareRecordById RPC method.
 *
 * @generated from message gaia.liquid.v1beta1.QueryTokenizeShareRecordByIdResponse
 */
export class QueryTokenizeShareRecordByIdResponse extends Message<QueryTokenizeShareRecordByIdResponse> {
  /**
   * @generated from field: gaia.liquid.v1beta1.TokenizeShareRecord record = 1;
   */
  record?: TokenizeShareRecord;

  constructor(data?: PartialMessage<QueryTokenizeShareRecordByIdResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gaia.liquid.v1beta1.QueryTokenizeShareRecordByIdResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "record", kind: "message", T: TokenizeShareRecord },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTokenizeShareRecordByIdResponse {
    return new QueryTokenizeShareRecordByIdResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTokenizeShareRecordByIdResponse {
    return new QueryTokenizeShareRecordByIdResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTokenizeShareRecordByIdResponse {
    return new QueryTokenizeShareRecordByIdResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTokenizeShareRecordByIdResponse | PlainMessage<QueryTokenizeShareRecordByIdResponse> | undefined, b: QueryTokenizeShareRecordByIdResponse | PlainMessage<QueryTokenizeShareRecordByIdResponse> | undefined): boolean {
    return proto3.util.equals(QueryTokenizeShareRecordByIdResponse, a, b);
  }
}

/**
 * QueryTokenizeShareRecordByDenomRequest is request type for the
 * Query/QueryTokenizeShareRecordByDenom RPC method.
 *
 * @generated from message gaia.liquid.v1beta1.QueryTokenizeShareRecordByDenomRequest
 */
export class QueryTokenizeShareRecordByDenomRequest extends Message<QueryTokenizeShareRecordByDenomRequest> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  constructor(data?: PartialMessage<QueryTokenizeShareRecordByDenomRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gaia.liquid.v1beta1.QueryTokenizeShareRecordByDenomRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTokenizeShareRecordByDenomRequest {
    return new QueryTokenizeShareRecordByDenomRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTokenizeShareRecordByDenomRequest {
    return new QueryTokenizeShareRecordByDenomRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTokenizeShareRecordByDenomRequest {
    return new QueryTokenizeShareRecordByDenomRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTokenizeShareRecordByDenomRequest | PlainMessage<QueryTokenizeShareRecordByDenomRequest> | undefined, b: QueryTokenizeShareRecordByDenomRequest | PlainMessage<QueryTokenizeShareRecordByDenomRequest> | undefined): boolean {
    return proto3.util.equals(QueryTokenizeShareRecordByDenomRequest, a, b);
  }
}

/**
 * QueryTokenizeShareRecordByDenomResponse is response type for the
 * Query/QueryTokenizeShareRecordByDenom RPC method.
 *
 * @generated from message gaia.liquid.v1beta1.QueryTokenizeShareRecordByDenomResponse
 */
export class QueryTokenizeShareRecordByDenomResponse extends Message<QueryTokenizeShareRecordByDenomResponse> {
  /**
   * @generated from field: gaia.liquid.v1beta1.TokenizeShareRecord record = 1;
   */
  record?: TokenizeShareRecord;

  constructor(data?: PartialMessage<QueryTokenizeShareRecordByDenomResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gaia.liquid.v1beta1.QueryTokenizeShareRecordByDenomResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "record", kind: "message", T: TokenizeShareRecord },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTokenizeShareRecordByDenomResponse {
    return new QueryTokenizeShareRecordByDenomResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTokenizeShareRecordByDenomResponse {
    return new QueryTokenizeShareRecordByDenomResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTokenizeShareRecordByDenomResponse {
    return new QueryTokenizeShareRecordByDenomResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTokenizeShareRecordByDenomResponse | PlainMessage<QueryTokenizeShareRecordByDenomResponse> | undefined, b: QueryTokenizeShareRecordByDenomResponse | PlainMessage<QueryTokenizeShareRecordByDenomResponse> | undefined): boolean {
    return proto3.util.equals(QueryTokenizeShareRecordByDenomResponse, a, b);
  }
}

/**
 * QueryTokenizeShareRecordsOwnedRequest is request type for the
 * Query/QueryTokenizeShareRecordsOwned RPC method.
 *
 * @generated from message gaia.liquid.v1beta1.QueryTokenizeShareRecordsOwnedRequest
 */
export class QueryTokenizeShareRecordsOwnedRequest extends Message<QueryTokenizeShareRecordsOwnedRequest> {
  /**
   * @generated from field: string owner = 1;
   */
  owner = "";

  constructor(data?: PartialMessage<QueryTokenizeShareRecordsOwnedRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gaia.liquid.v1beta1.QueryTokenizeShareRecordsOwnedRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTokenizeShareRecordsOwnedRequest {
    return new QueryTokenizeShareRecordsOwnedRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTokenizeShareRecordsOwnedRequest {
    return new QueryTokenizeShareRecordsOwnedRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTokenizeShareRecordsOwnedRequest {
    return new QueryTokenizeShareRecordsOwnedRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTokenizeShareRecordsOwnedRequest | PlainMessage<QueryTokenizeShareRecordsOwnedRequest> | undefined, b: QueryTokenizeShareRecordsOwnedRequest | PlainMessage<QueryTokenizeShareRecordsOwnedRequest> | undefined): boolean {
    return proto3.util.equals(QueryTokenizeShareRecordsOwnedRequest, a, b);
  }
}

/**
 * QueryTokenizeShareRecordsOwnedResponse is response type for the
 * Query/QueryTokenizeShareRecordsOwned RPC method.
 *
 * @generated from message gaia.liquid.v1beta1.QueryTokenizeShareRecordsOwnedResponse
 */
export class QueryTokenizeShareRecordsOwnedResponse extends Message<QueryTokenizeShareRecordsOwnedResponse> {
  /**
   * @generated from field: repeated gaia.liquid.v1beta1.TokenizeShareRecord records = 1;
   */
  records: TokenizeShareRecord[] = [];

  constructor(data?: PartialMessage<QueryTokenizeShareRecordsOwnedResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gaia.liquid.v1beta1.QueryTokenizeShareRecordsOwnedResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "records", kind: "message", T: TokenizeShareRecord, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTokenizeShareRecordsOwnedResponse {
    return new QueryTokenizeShareRecordsOwnedResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTokenizeShareRecordsOwnedResponse {
    return new QueryTokenizeShareRecordsOwnedResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTokenizeShareRecordsOwnedResponse {
    return new QueryTokenizeShareRecordsOwnedResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTokenizeShareRecordsOwnedResponse | PlainMessage<QueryTokenizeShareRecordsOwnedResponse> | undefined, b: QueryTokenizeShareRecordsOwnedResponse | PlainMessage<QueryTokenizeShareRecordsOwnedResponse> | undefined): boolean {
    return proto3.util.equals(QueryTokenizeShareRecordsOwnedResponse, a, b);
  }
}

/**
 * QueryAllTokenizeShareRecordsRequest is request type for the
 * Query/QueryAllTokenizeShareRecords RPC method.
 *
 * @generated from message gaia.liquid.v1beta1.QueryAllTokenizeShareRecordsRequest
 */
export class QueryAllTokenizeShareRecordsRequest extends Message<QueryAllTokenizeShareRecordsRequest> {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryAllTokenizeShareRecordsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gaia.liquid.v1beta1.QueryAllTokenizeShareRecordsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllTokenizeShareRecordsRequest {
    return new QueryAllTokenizeShareRecordsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllTokenizeShareRecordsRequest {
    return new QueryAllTokenizeShareRecordsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllTokenizeShareRecordsRequest {
    return new QueryAllTokenizeShareRecordsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllTokenizeShareRecordsRequest | PlainMessage<QueryAllTokenizeShareRecordsRequest> | undefined, b: QueryAllTokenizeShareRecordsRequest | PlainMessage<QueryAllTokenizeShareRecordsRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllTokenizeShareRecordsRequest, a, b);
  }
}

/**
 * QueryAllTokenizeShareRecordsResponse is response type for the
 * Query/QueryAllTokenizeShareRecords RPC method.
 *
 * @generated from message gaia.liquid.v1beta1.QueryAllTokenizeShareRecordsResponse
 */
export class QueryAllTokenizeShareRecordsResponse extends Message<QueryAllTokenizeShareRecordsResponse> {
  /**
   * @generated from field: repeated gaia.liquid.v1beta1.TokenizeShareRecord records = 1;
   */
  records: TokenizeShareRecord[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryAllTokenizeShareRecordsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gaia.liquid.v1beta1.QueryAllTokenizeShareRecordsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "records", kind: "message", T: TokenizeShareRecord, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllTokenizeShareRecordsResponse {
    return new QueryAllTokenizeShareRecordsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllTokenizeShareRecordsResponse {
    return new QueryAllTokenizeShareRecordsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllTokenizeShareRecordsResponse {
    return new QueryAllTokenizeShareRecordsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllTokenizeShareRecordsResponse | PlainMessage<QueryAllTokenizeShareRecordsResponse> | undefined, b: QueryAllTokenizeShareRecordsResponse | PlainMessage<QueryAllTokenizeShareRecordsResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllTokenizeShareRecordsResponse, a, b);
  }
}

/**
 * QueryLastTokenizeShareRecordIdRequest is request type for the
 * Query/QueryLastTokenizeShareRecordId RPC method.
 *
 * @generated from message gaia.liquid.v1beta1.QueryLastTokenizeShareRecordIdRequest
 */
export class QueryLastTokenizeShareRecordIdRequest extends Message<QueryLastTokenizeShareRecordIdRequest> {
  constructor(data?: PartialMessage<QueryLastTokenizeShareRecordIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gaia.liquid.v1beta1.QueryLastTokenizeShareRecordIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLastTokenizeShareRecordIdRequest {
    return new QueryLastTokenizeShareRecordIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLastTokenizeShareRecordIdRequest {
    return new QueryLastTokenizeShareRecordIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLastTokenizeShareRecordIdRequest {
    return new QueryLastTokenizeShareRecordIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLastTokenizeShareRecordIdRequest | PlainMessage<QueryLastTokenizeShareRecordIdRequest> | undefined, b: QueryLastTokenizeShareRecordIdRequest | PlainMessage<QueryLastTokenizeShareRecordIdRequest> | undefined): boolean {
    return proto3.util.equals(QueryLastTokenizeShareRecordIdRequest, a, b);
  }
}

/**
 * QueryLastTokenizeShareRecordIdResponse is response type for the
 * Query/QueryLastTokenizeShareRecordId RPC method.
 *
 * @generated from message gaia.liquid.v1beta1.QueryLastTokenizeShareRecordIdResponse
 */
export class QueryLastTokenizeShareRecordIdResponse extends Message<QueryLastTokenizeShareRecordIdResponse> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<QueryLastTokenizeShareRecordIdResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gaia.liquid.v1beta1.QueryLastTokenizeShareRecordIdResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLastTokenizeShareRecordIdResponse {
    return new QueryLastTokenizeShareRecordIdResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLastTokenizeShareRecordIdResponse {
    return new QueryLastTokenizeShareRecordIdResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLastTokenizeShareRecordIdResponse {
    return new QueryLastTokenizeShareRecordIdResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLastTokenizeShareRecordIdResponse | PlainMessage<QueryLastTokenizeShareRecordIdResponse> | undefined, b: QueryLastTokenizeShareRecordIdResponse | PlainMessage<QueryLastTokenizeShareRecordIdResponse> | undefined): boolean {
    return proto3.util.equals(QueryLastTokenizeShareRecordIdResponse, a, b);
  }
}

/**
 * QueryTotalTokenizeSharedAssetsRequest is request type for the
 * Query/QueryTotalTokenizeSharedAssets RPC method.
 *
 * @generated from message gaia.liquid.v1beta1.QueryTotalTokenizeSharedAssetsRequest
 */
export class QueryTotalTokenizeSharedAssetsRequest extends Message<QueryTotalTokenizeSharedAssetsRequest> {
  constructor(data?: PartialMessage<QueryTotalTokenizeSharedAssetsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gaia.liquid.v1beta1.QueryTotalTokenizeSharedAssetsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTotalTokenizeSharedAssetsRequest {
    return new QueryTotalTokenizeSharedAssetsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTotalTokenizeSharedAssetsRequest {
    return new QueryTotalTokenizeSharedAssetsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTotalTokenizeSharedAssetsRequest {
    return new QueryTotalTokenizeSharedAssetsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTotalTokenizeSharedAssetsRequest | PlainMessage<QueryTotalTokenizeSharedAssetsRequest> | undefined, b: QueryTotalTokenizeSharedAssetsRequest | PlainMessage<QueryTotalTokenizeSharedAssetsRequest> | undefined): boolean {
    return proto3.util.equals(QueryTotalTokenizeSharedAssetsRequest, a, b);
  }
}

/**
 * QueryTotalTokenizeSharedAssetsResponse is response type for the
 * Query/QueryTotalTokenizeSharedAssets RPC method.
 *
 * @generated from message gaia.liquid.v1beta1.QueryTotalTokenizeSharedAssetsResponse
 */
export class QueryTotalTokenizeSharedAssetsResponse extends Message<QueryTotalTokenizeSharedAssetsResponse> {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin value = 1;
   */
  value?: Coin;

  constructor(data?: PartialMessage<QueryTotalTokenizeSharedAssetsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gaia.liquid.v1beta1.QueryTotalTokenizeSharedAssetsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTotalTokenizeSharedAssetsResponse {
    return new QueryTotalTokenizeSharedAssetsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTotalTokenizeSharedAssetsResponse {
    return new QueryTotalTokenizeSharedAssetsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTotalTokenizeSharedAssetsResponse {
    return new QueryTotalTokenizeSharedAssetsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTotalTokenizeSharedAssetsResponse | PlainMessage<QueryTotalTokenizeSharedAssetsResponse> | undefined, b: QueryTotalTokenizeSharedAssetsResponse | PlainMessage<QueryTotalTokenizeSharedAssetsResponse> | undefined): boolean {
    return proto3.util.equals(QueryTotalTokenizeSharedAssetsResponse, a, b);
  }
}

/**
 * QueryTotalLiquidStakedRequest is request type for the
 * Query/QueryQueryTotalLiquidStaked RPC method.
 *
 * @generated from message gaia.liquid.v1beta1.QueryTotalLiquidStaked
 */
export class QueryTotalLiquidStaked extends Message<QueryTotalLiquidStaked> {
  constructor(data?: PartialMessage<QueryTotalLiquidStaked>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gaia.liquid.v1beta1.QueryTotalLiquidStaked";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTotalLiquidStaked {
    return new QueryTotalLiquidStaked().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTotalLiquidStaked {
    return new QueryTotalLiquidStaked().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTotalLiquidStaked {
    return new QueryTotalLiquidStaked().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTotalLiquidStaked | PlainMessage<QueryTotalLiquidStaked> | undefined, b: QueryTotalLiquidStaked | PlainMessage<QueryTotalLiquidStaked> | undefined): boolean {
    return proto3.util.equals(QueryTotalLiquidStaked, a, b);
  }
}

/**
 * QueryTotalLiquidStakedResponse is response type for the
 * Query/QueryQueryTotalLiquidStaked RPC method.
 *
 * @generated from message gaia.liquid.v1beta1.QueryTotalLiquidStakedResponse
 */
export class QueryTotalLiquidStakedResponse extends Message<QueryTotalLiquidStakedResponse> {
  /**
   * @generated from field: string tokens = 1;
   */
  tokens = "";

  constructor(data?: PartialMessage<QueryTotalLiquidStakedResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gaia.liquid.v1beta1.QueryTotalLiquidStakedResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tokens", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTotalLiquidStakedResponse {
    return new QueryTotalLiquidStakedResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTotalLiquidStakedResponse {
    return new QueryTotalLiquidStakedResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTotalLiquidStakedResponse {
    return new QueryTotalLiquidStakedResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTotalLiquidStakedResponse | PlainMessage<QueryTotalLiquidStakedResponse> | undefined, b: QueryTotalLiquidStakedResponse | PlainMessage<QueryTotalLiquidStakedResponse> | undefined): boolean {
    return proto3.util.equals(QueryTotalLiquidStakedResponse, a, b);
  }
}

/**
 * QueryTokenizeShareLockInfo queries the tokenize share lock information
 * associated with given account
 *
 * @generated from message gaia.liquid.v1beta1.QueryTokenizeShareLockInfo
 */
export class QueryTokenizeShareLockInfo extends Message<QueryTokenizeShareLockInfo> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  constructor(data?: PartialMessage<QueryTokenizeShareLockInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gaia.liquid.v1beta1.QueryTokenizeShareLockInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTokenizeShareLockInfo {
    return new QueryTokenizeShareLockInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTokenizeShareLockInfo {
    return new QueryTokenizeShareLockInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTokenizeShareLockInfo {
    return new QueryTokenizeShareLockInfo().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTokenizeShareLockInfo | PlainMessage<QueryTokenizeShareLockInfo> | undefined, b: QueryTokenizeShareLockInfo | PlainMessage<QueryTokenizeShareLockInfo> | undefined): boolean {
    return proto3.util.equals(QueryTokenizeShareLockInfo, a, b);
  }
}

/**
 * QueryTokenizeShareLockInfoResponse is the response from the
 * QueryTokenizeShareLockInfo query
 *
 * @generated from message gaia.liquid.v1beta1.QueryTokenizeShareLockInfoResponse
 */
export class QueryTokenizeShareLockInfoResponse extends Message<QueryTokenizeShareLockInfoResponse> {
  /**
   * @generated from field: string status = 1;
   */
  status = "";

  /**
   * @generated from field: string expiration_time = 2;
   */
  expirationTime = "";

  constructor(data?: PartialMessage<QueryTokenizeShareLockInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gaia.liquid.v1beta1.QueryTokenizeShareLockInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "expiration_time", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTokenizeShareLockInfoResponse {
    return new QueryTokenizeShareLockInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTokenizeShareLockInfoResponse {
    return new QueryTokenizeShareLockInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTokenizeShareLockInfoResponse {
    return new QueryTokenizeShareLockInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTokenizeShareLockInfoResponse | PlainMessage<QueryTokenizeShareLockInfoResponse> | undefined, b: QueryTokenizeShareLockInfoResponse | PlainMessage<QueryTokenizeShareLockInfoResponse> | undefined): boolean {
    return proto3.util.equals(QueryTokenizeShareLockInfoResponse, a, b);
  }
}

/**
 * QueryTokenizeShareRecordRewardRequest is the request type for the
 * Query/TokenizeShareRecordReward RPC method.
 *
 * @generated from message gaia.liquid.v1beta1.QueryTokenizeShareRecordRewardRequest
 */
export class QueryTokenizeShareRecordRewardRequest extends Message<QueryTokenizeShareRecordRewardRequest> {
  /**
   * @generated from field: string owner_address = 1;
   */
  ownerAddress = "";

  constructor(data?: PartialMessage<QueryTokenizeShareRecordRewardRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gaia.liquid.v1beta1.QueryTokenizeShareRecordRewardRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTokenizeShareRecordRewardRequest {
    return new QueryTokenizeShareRecordRewardRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTokenizeShareRecordRewardRequest {
    return new QueryTokenizeShareRecordRewardRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTokenizeShareRecordRewardRequest {
    return new QueryTokenizeShareRecordRewardRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTokenizeShareRecordRewardRequest | PlainMessage<QueryTokenizeShareRecordRewardRequest> | undefined, b: QueryTokenizeShareRecordRewardRequest | PlainMessage<QueryTokenizeShareRecordRewardRequest> | undefined): boolean {
    return proto3.util.equals(QueryTokenizeShareRecordRewardRequest, a, b);
  }
}

/**
 * QueryTokenizeShareRecordRewardResponse is the response type for the
 * Query/TokenizeShareRecordReward RPC method.
 *
 * @generated from message gaia.liquid.v1beta1.QueryTokenizeShareRecordRewardResponse
 */
export class QueryTokenizeShareRecordRewardResponse extends Message<QueryTokenizeShareRecordRewardResponse> {
  /**
   * rewards defines all the rewards accrued by a delegator.
   *
   * @generated from field: repeated gaia.liquid.v1beta1.TokenizeShareRecordReward rewards = 1;
   */
  rewards: TokenizeShareRecordReward[] = [];

  /**
   * total defines the sum of all the rewards.
   *
   * @generated from field: repeated cosmos.base.v1beta1.DecCoin total = 2;
   */
  total: DecCoin[] = [];

  constructor(data?: PartialMessage<QueryTokenizeShareRecordRewardResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gaia.liquid.v1beta1.QueryTokenizeShareRecordRewardResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rewards", kind: "message", T: TokenizeShareRecordReward, repeated: true },
    { no: 2, name: "total", kind: "message", T: DecCoin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTokenizeShareRecordRewardResponse {
    return new QueryTokenizeShareRecordRewardResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTokenizeShareRecordRewardResponse {
    return new QueryTokenizeShareRecordRewardResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTokenizeShareRecordRewardResponse {
    return new QueryTokenizeShareRecordRewardResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTokenizeShareRecordRewardResponse | PlainMessage<QueryTokenizeShareRecordRewardResponse> | undefined, b: QueryTokenizeShareRecordRewardResponse | PlainMessage<QueryTokenizeShareRecordRewardResponse> | undefined): boolean {
    return proto3.util.equals(QueryTokenizeShareRecordRewardResponse, a, b);
  }
}

