// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file gaia/liquid/v1beta1/tx.proto (package gaia.liquid.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Params } from "./liquid_pb.js";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * MsgUpdateParams is the Msg/UpdateParams request type.
 *
 * @generated from message gaia.liquid.v1beta1.MsgUpdateParams
 */
export class MsgUpdateParams extends Message<MsgUpdateParams> {
  /**
   * authority is the address that controls the module (defaults to x/gov unless
   * overwritten).
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * params defines the x/liquid parameters to update.
   *
   * NOTE: All parameters must be supplied.
   *
   * @generated from field: gaia.liquid.v1beta1.Params params = 2;
   */
  params?: Params;

  constructor(data?: PartialMessage<MsgUpdateParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gaia.liquid.v1beta1.MsgUpdateParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined, b: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParams, a, b);
  }
}

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 *
 * @generated from message gaia.liquid.v1beta1.MsgUpdateParamsResponse
 */
export class MsgUpdateParamsResponse extends Message<MsgUpdateParamsResponse> {
  constructor(data?: PartialMessage<MsgUpdateParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gaia.liquid.v1beta1.MsgUpdateParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined, b: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParamsResponse, a, b);
  }
}

/**
 * MsgTokenizeShares tokenizes a delegation
 *
 * @generated from message gaia.liquid.v1beta1.MsgTokenizeShares
 */
export class MsgTokenizeShares extends Message<MsgTokenizeShares> {
  /**
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress = "";

  /**
   * @generated from field: string validator_address = 2;
   */
  validatorAddress = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 3;
   */
  amount?: Coin;

  /**
   * @generated from field: string tokenized_share_owner = 4;
   */
  tokenizedShareOwner = "";

  constructor(data?: PartialMessage<MsgTokenizeShares>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gaia.liquid.v1beta1.MsgTokenizeShares";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "message", T: Coin },
    { no: 4, name: "tokenized_share_owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgTokenizeShares {
    return new MsgTokenizeShares().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgTokenizeShares {
    return new MsgTokenizeShares().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgTokenizeShares {
    return new MsgTokenizeShares().fromJsonString(jsonString, options);
  }

  static equals(a: MsgTokenizeShares | PlainMessage<MsgTokenizeShares> | undefined, b: MsgTokenizeShares | PlainMessage<MsgTokenizeShares> | undefined): boolean {
    return proto3.util.equals(MsgTokenizeShares, a, b);
  }
}

/**
 * MsgTokenizeSharesResponse defines the Msg/MsgTokenizeShares response type.
 *
 * @generated from message gaia.liquid.v1beta1.MsgTokenizeSharesResponse
 */
export class MsgTokenizeSharesResponse extends Message<MsgTokenizeSharesResponse> {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 1;
   */
  amount?: Coin;

  constructor(data?: PartialMessage<MsgTokenizeSharesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gaia.liquid.v1beta1.MsgTokenizeSharesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgTokenizeSharesResponse {
    return new MsgTokenizeSharesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgTokenizeSharesResponse {
    return new MsgTokenizeSharesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgTokenizeSharesResponse {
    return new MsgTokenizeSharesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgTokenizeSharesResponse | PlainMessage<MsgTokenizeSharesResponse> | undefined, b: MsgTokenizeSharesResponse | PlainMessage<MsgTokenizeSharesResponse> | undefined): boolean {
    return proto3.util.equals(MsgTokenizeSharesResponse, a, b);
  }
}

/**
 * MsgRedeemTokensForShares redeems a tokenized share back into a native
 * delegation
 *
 * @generated from message gaia.liquid.v1beta1.MsgRedeemTokensForShares
 */
export class MsgRedeemTokensForShares extends Message<MsgRedeemTokensForShares> {
  /**
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 2;
   */
  amount?: Coin;

  constructor(data?: PartialMessage<MsgRedeemTokensForShares>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gaia.liquid.v1beta1.MsgRedeemTokensForShares";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRedeemTokensForShares {
    return new MsgRedeemTokensForShares().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRedeemTokensForShares {
    return new MsgRedeemTokensForShares().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRedeemTokensForShares {
    return new MsgRedeemTokensForShares().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRedeemTokensForShares | PlainMessage<MsgRedeemTokensForShares> | undefined, b: MsgRedeemTokensForShares | PlainMessage<MsgRedeemTokensForShares> | undefined): boolean {
    return proto3.util.equals(MsgRedeemTokensForShares, a, b);
  }
}

/**
 * MsgRedeemTokensForSharesResponse defines the Msg/MsgRedeemTokensForShares
 * response type.
 *
 * @generated from message gaia.liquid.v1beta1.MsgRedeemTokensForSharesResponse
 */
export class MsgRedeemTokensForSharesResponse extends Message<MsgRedeemTokensForSharesResponse> {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 1;
   */
  amount?: Coin;

  constructor(data?: PartialMessage<MsgRedeemTokensForSharesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gaia.liquid.v1beta1.MsgRedeemTokensForSharesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRedeemTokensForSharesResponse {
    return new MsgRedeemTokensForSharesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRedeemTokensForSharesResponse {
    return new MsgRedeemTokensForSharesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRedeemTokensForSharesResponse {
    return new MsgRedeemTokensForSharesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRedeemTokensForSharesResponse | PlainMessage<MsgRedeemTokensForSharesResponse> | undefined, b: MsgRedeemTokensForSharesResponse | PlainMessage<MsgRedeemTokensForSharesResponse> | undefined): boolean {
    return proto3.util.equals(MsgRedeemTokensForSharesResponse, a, b);
  }
}

/**
 * MsgTransferTokenizeShareRecord transfer a tokenize share record
 *
 * @generated from message gaia.liquid.v1beta1.MsgTransferTokenizeShareRecord
 */
export class MsgTransferTokenizeShareRecord extends Message<MsgTransferTokenizeShareRecord> {
  /**
   * @generated from field: uint64 tokenize_share_record_id = 1;
   */
  tokenizeShareRecordId = protoInt64.zero;

  /**
   * @generated from field: string sender = 2;
   */
  sender = "";

  /**
   * @generated from field: string new_owner = 3;
   */
  newOwner = "";

  constructor(data?: PartialMessage<MsgTransferTokenizeShareRecord>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gaia.liquid.v1beta1.MsgTransferTokenizeShareRecord";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tokenize_share_record_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "new_owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgTransferTokenizeShareRecord {
    return new MsgTransferTokenizeShareRecord().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgTransferTokenizeShareRecord {
    return new MsgTransferTokenizeShareRecord().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgTransferTokenizeShareRecord {
    return new MsgTransferTokenizeShareRecord().fromJsonString(jsonString, options);
  }

  static equals(a: MsgTransferTokenizeShareRecord | PlainMessage<MsgTransferTokenizeShareRecord> | undefined, b: MsgTransferTokenizeShareRecord | PlainMessage<MsgTransferTokenizeShareRecord> | undefined): boolean {
    return proto3.util.equals(MsgTransferTokenizeShareRecord, a, b);
  }
}

/**
 * MsgTransferTokenizeShareRecordResponse defines the
 * Msg/MsgTransferTokenizeShareRecord response type.
 *
 * @generated from message gaia.liquid.v1beta1.MsgTransferTokenizeShareRecordResponse
 */
export class MsgTransferTokenizeShareRecordResponse extends Message<MsgTransferTokenizeShareRecordResponse> {
  constructor(data?: PartialMessage<MsgTransferTokenizeShareRecordResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gaia.liquid.v1beta1.MsgTransferTokenizeShareRecordResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgTransferTokenizeShareRecordResponse {
    return new MsgTransferTokenizeShareRecordResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgTransferTokenizeShareRecordResponse {
    return new MsgTransferTokenizeShareRecordResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgTransferTokenizeShareRecordResponse {
    return new MsgTransferTokenizeShareRecordResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgTransferTokenizeShareRecordResponse | PlainMessage<MsgTransferTokenizeShareRecordResponse> | undefined, b: MsgTransferTokenizeShareRecordResponse | PlainMessage<MsgTransferTokenizeShareRecordResponse> | undefined): boolean {
    return proto3.util.equals(MsgTransferTokenizeShareRecordResponse, a, b);
  }
}

/**
 * MsgDisableTokenizeShares prevents the tokenization of shares for a given
 * address
 *
 * @generated from message gaia.liquid.v1beta1.MsgDisableTokenizeShares
 */
export class MsgDisableTokenizeShares extends Message<MsgDisableTokenizeShares> {
  /**
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress = "";

  constructor(data?: PartialMessage<MsgDisableTokenizeShares>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gaia.liquid.v1beta1.MsgDisableTokenizeShares";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDisableTokenizeShares {
    return new MsgDisableTokenizeShares().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDisableTokenizeShares {
    return new MsgDisableTokenizeShares().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDisableTokenizeShares {
    return new MsgDisableTokenizeShares().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDisableTokenizeShares | PlainMessage<MsgDisableTokenizeShares> | undefined, b: MsgDisableTokenizeShares | PlainMessage<MsgDisableTokenizeShares> | undefined): boolean {
    return proto3.util.equals(MsgDisableTokenizeShares, a, b);
  }
}

/**
 * MsgDisableTokenizeSharesResponse defines the Msg/DisableTokenizeShares
 * response type.
 *
 * @generated from message gaia.liquid.v1beta1.MsgDisableTokenizeSharesResponse
 */
export class MsgDisableTokenizeSharesResponse extends Message<MsgDisableTokenizeSharesResponse> {
  constructor(data?: PartialMessage<MsgDisableTokenizeSharesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gaia.liquid.v1beta1.MsgDisableTokenizeSharesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDisableTokenizeSharesResponse {
    return new MsgDisableTokenizeSharesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDisableTokenizeSharesResponse {
    return new MsgDisableTokenizeSharesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDisableTokenizeSharesResponse {
    return new MsgDisableTokenizeSharesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDisableTokenizeSharesResponse | PlainMessage<MsgDisableTokenizeSharesResponse> | undefined, b: MsgDisableTokenizeSharesResponse | PlainMessage<MsgDisableTokenizeSharesResponse> | undefined): boolean {
    return proto3.util.equals(MsgDisableTokenizeSharesResponse, a, b);
  }
}

/**
 * MsgEnableTokenizeShares re-enables tokenization of shares for a given address
 *
 * @generated from message gaia.liquid.v1beta1.MsgEnableTokenizeShares
 */
export class MsgEnableTokenizeShares extends Message<MsgEnableTokenizeShares> {
  /**
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress = "";

  constructor(data?: PartialMessage<MsgEnableTokenizeShares>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gaia.liquid.v1beta1.MsgEnableTokenizeShares";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgEnableTokenizeShares {
    return new MsgEnableTokenizeShares().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgEnableTokenizeShares {
    return new MsgEnableTokenizeShares().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgEnableTokenizeShares {
    return new MsgEnableTokenizeShares().fromJsonString(jsonString, options);
  }

  static equals(a: MsgEnableTokenizeShares | PlainMessage<MsgEnableTokenizeShares> | undefined, b: MsgEnableTokenizeShares | PlainMessage<MsgEnableTokenizeShares> | undefined): boolean {
    return proto3.util.equals(MsgEnableTokenizeShares, a, b);
  }
}

/**
 * MsgEnableTokenizeSharesResponse defines the Msg/EnableTokenizeShares response
 * type.
 *
 * @generated from message gaia.liquid.v1beta1.MsgEnableTokenizeSharesResponse
 */
export class MsgEnableTokenizeSharesResponse extends Message<MsgEnableTokenizeSharesResponse> {
  /**
   * @generated from field: google.protobuf.Timestamp completion_time = 1;
   */
  completionTime?: Timestamp;

  constructor(data?: PartialMessage<MsgEnableTokenizeSharesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gaia.liquid.v1beta1.MsgEnableTokenizeSharesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "completion_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgEnableTokenizeSharesResponse {
    return new MsgEnableTokenizeSharesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgEnableTokenizeSharesResponse {
    return new MsgEnableTokenizeSharesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgEnableTokenizeSharesResponse {
    return new MsgEnableTokenizeSharesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgEnableTokenizeSharesResponse | PlainMessage<MsgEnableTokenizeSharesResponse> | undefined, b: MsgEnableTokenizeSharesResponse | PlainMessage<MsgEnableTokenizeSharesResponse> | undefined): boolean {
    return proto3.util.equals(MsgEnableTokenizeSharesResponse, a, b);
  }
}

/**
 * MsgWithdrawTokenizeShareRecordReward withdraws tokenize share rewards for a
 * specific record
 *
 * @generated from message gaia.liquid.v1beta1.MsgWithdrawTokenizeShareRecordReward
 */
export class MsgWithdrawTokenizeShareRecordReward extends Message<MsgWithdrawTokenizeShareRecordReward> {
  /**
   * @generated from field: string owner_address = 1;
   */
  ownerAddress = "";

  /**
   * @generated from field: uint64 record_id = 2;
   */
  recordId = protoInt64.zero;

  constructor(data?: PartialMessage<MsgWithdrawTokenizeShareRecordReward>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gaia.liquid.v1beta1.MsgWithdrawTokenizeShareRecordReward";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "record_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgWithdrawTokenizeShareRecordReward {
    return new MsgWithdrawTokenizeShareRecordReward().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgWithdrawTokenizeShareRecordReward {
    return new MsgWithdrawTokenizeShareRecordReward().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgWithdrawTokenizeShareRecordReward {
    return new MsgWithdrawTokenizeShareRecordReward().fromJsonString(jsonString, options);
  }

  static equals(a: MsgWithdrawTokenizeShareRecordReward | PlainMessage<MsgWithdrawTokenizeShareRecordReward> | undefined, b: MsgWithdrawTokenizeShareRecordReward | PlainMessage<MsgWithdrawTokenizeShareRecordReward> | undefined): boolean {
    return proto3.util.equals(MsgWithdrawTokenizeShareRecordReward, a, b);
  }
}

/**
 * MsgWithdrawTokenizeShareRecordReward defines the
 * Msg/WithdrawTokenizeShareRecordReward response type.
 *
 * @generated from message gaia.liquid.v1beta1.MsgWithdrawTokenizeShareRecordRewardResponse
 */
export class MsgWithdrawTokenizeShareRecordRewardResponse extends Message<MsgWithdrawTokenizeShareRecordRewardResponse> {
  constructor(data?: PartialMessage<MsgWithdrawTokenizeShareRecordRewardResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gaia.liquid.v1beta1.MsgWithdrawTokenizeShareRecordRewardResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgWithdrawTokenizeShareRecordRewardResponse {
    return new MsgWithdrawTokenizeShareRecordRewardResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgWithdrawTokenizeShareRecordRewardResponse {
    return new MsgWithdrawTokenizeShareRecordRewardResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgWithdrawTokenizeShareRecordRewardResponse {
    return new MsgWithdrawTokenizeShareRecordRewardResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgWithdrawTokenizeShareRecordRewardResponse | PlainMessage<MsgWithdrawTokenizeShareRecordRewardResponse> | undefined, b: MsgWithdrawTokenizeShareRecordRewardResponse | PlainMessage<MsgWithdrawTokenizeShareRecordRewardResponse> | undefined): boolean {
    return proto3.util.equals(MsgWithdrawTokenizeShareRecordRewardResponse, a, b);
  }
}

/**
 * MsgWithdrawAllTokenizeShareRecordReward withdraws tokenize share rewards or
 * all records owned by the designated owner
 *
 * @generated from message gaia.liquid.v1beta1.MsgWithdrawAllTokenizeShareRecordReward
 */
export class MsgWithdrawAllTokenizeShareRecordReward extends Message<MsgWithdrawAllTokenizeShareRecordReward> {
  /**
   * @generated from field: string owner_address = 1;
   */
  ownerAddress = "";

  constructor(data?: PartialMessage<MsgWithdrawAllTokenizeShareRecordReward>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gaia.liquid.v1beta1.MsgWithdrawAllTokenizeShareRecordReward";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgWithdrawAllTokenizeShareRecordReward {
    return new MsgWithdrawAllTokenizeShareRecordReward().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgWithdrawAllTokenizeShareRecordReward {
    return new MsgWithdrawAllTokenizeShareRecordReward().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgWithdrawAllTokenizeShareRecordReward {
    return new MsgWithdrawAllTokenizeShareRecordReward().fromJsonString(jsonString, options);
  }

  static equals(a: MsgWithdrawAllTokenizeShareRecordReward | PlainMessage<MsgWithdrawAllTokenizeShareRecordReward> | undefined, b: MsgWithdrawAllTokenizeShareRecordReward | PlainMessage<MsgWithdrawAllTokenizeShareRecordReward> | undefined): boolean {
    return proto3.util.equals(MsgWithdrawAllTokenizeShareRecordReward, a, b);
  }
}

/**
 * MsgWithdrawAllTokenizeShareRecordRewardResponse defines the
 * Msg/WithdrawTokenizeShareRecordReward response type.
 *
 * @generated from message gaia.liquid.v1beta1.MsgWithdrawAllTokenizeShareRecordRewardResponse
 */
export class MsgWithdrawAllTokenizeShareRecordRewardResponse extends Message<MsgWithdrawAllTokenizeShareRecordRewardResponse> {
  constructor(data?: PartialMessage<MsgWithdrawAllTokenizeShareRecordRewardResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gaia.liquid.v1beta1.MsgWithdrawAllTokenizeShareRecordRewardResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgWithdrawAllTokenizeShareRecordRewardResponse {
    return new MsgWithdrawAllTokenizeShareRecordRewardResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgWithdrawAllTokenizeShareRecordRewardResponse {
    return new MsgWithdrawAllTokenizeShareRecordRewardResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgWithdrawAllTokenizeShareRecordRewardResponse {
    return new MsgWithdrawAllTokenizeShareRecordRewardResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgWithdrawAllTokenizeShareRecordRewardResponse | PlainMessage<MsgWithdrawAllTokenizeShareRecordRewardResponse> | undefined, b: MsgWithdrawAllTokenizeShareRecordRewardResponse | PlainMessage<MsgWithdrawAllTokenizeShareRecordRewardResponse> | undefined): boolean {
    return proto3.util.equals(MsgWithdrawAllTokenizeShareRecordRewardResponse, a, b);
  }
}

