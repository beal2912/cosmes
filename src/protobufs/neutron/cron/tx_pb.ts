// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file neutron/cron/tx.proto (package neutron.cron, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { ExecutionStage, MsgExecuteContract } from "./schedule_pb.js";
import { Params } from "./params_pb.js";

/**
 * The MsgAddSchedule request type.
 *
 * @generated from message neutron.cron.MsgAddSchedule
 */
export class MsgAddSchedule extends Message<MsgAddSchedule> {
  /**
   * The address of the governance account.
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * Name of the schedule
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * Period in blocks
   *
   * @generated from field: uint64 period = 3;
   */
  period = protoInt64.zero;

  /**
   * Msgs that will be executed every certain number of blocks, specified in the `period` field
   *
   * @generated from field: repeated neutron.cron.MsgExecuteContract msgs = 4;
   */
  msgs: MsgExecuteContract[] = [];

  /**
   * Stage when messages will be executed
   *
   * @generated from field: neutron.cron.ExecutionStage execution_stage = 5;
   */
  executionStage = ExecutionStage.END_BLOCKER;

  constructor(data?: PartialMessage<MsgAddSchedule>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.cron.MsgAddSchedule";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "period", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "msgs", kind: "message", T: MsgExecuteContract, repeated: true },
    { no: 5, name: "execution_stage", kind: "enum", T: proto3.getEnumType(ExecutionStage) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgAddSchedule {
    return new MsgAddSchedule().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgAddSchedule {
    return new MsgAddSchedule().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgAddSchedule {
    return new MsgAddSchedule().fromJsonString(jsonString, options);
  }

  static equals(a: MsgAddSchedule | PlainMessage<MsgAddSchedule> | undefined, b: MsgAddSchedule | PlainMessage<MsgAddSchedule> | undefined): boolean {
    return proto3.util.equals(MsgAddSchedule, a, b);
  }
}

/**
 * Defines the response structure for executing a MsgAddSchedule message.
 *
 * @generated from message neutron.cron.MsgAddScheduleResponse
 */
export class MsgAddScheduleResponse extends Message<MsgAddScheduleResponse> {
  constructor(data?: PartialMessage<MsgAddScheduleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.cron.MsgAddScheduleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgAddScheduleResponse {
    return new MsgAddScheduleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgAddScheduleResponse {
    return new MsgAddScheduleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgAddScheduleResponse {
    return new MsgAddScheduleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgAddScheduleResponse | PlainMessage<MsgAddScheduleResponse> | undefined, b: MsgAddScheduleResponse | PlainMessage<MsgAddScheduleResponse> | undefined): boolean {
    return proto3.util.equals(MsgAddScheduleResponse, a, b);
  }
}

/**
 * The MsgRemoveSchedule request type.
 *
 * @generated from message neutron.cron.MsgRemoveSchedule
 */
export class MsgRemoveSchedule extends Message<MsgRemoveSchedule> {
  /**
   * The address of the governance account.
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * Name of the schedule
   *
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<MsgRemoveSchedule>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.cron.MsgRemoveSchedule";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRemoveSchedule {
    return new MsgRemoveSchedule().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRemoveSchedule {
    return new MsgRemoveSchedule().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRemoveSchedule {
    return new MsgRemoveSchedule().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRemoveSchedule | PlainMessage<MsgRemoveSchedule> | undefined, b: MsgRemoveSchedule | PlainMessage<MsgRemoveSchedule> | undefined): boolean {
    return proto3.util.equals(MsgRemoveSchedule, a, b);
  }
}

/**
 * Defines the response structure for executing a MsgRemoveSchedule message.
 *
 * @generated from message neutron.cron.MsgRemoveScheduleResponse
 */
export class MsgRemoveScheduleResponse extends Message<MsgRemoveScheduleResponse> {
  constructor(data?: PartialMessage<MsgRemoveScheduleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.cron.MsgRemoveScheduleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRemoveScheduleResponse {
    return new MsgRemoveScheduleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRemoveScheduleResponse {
    return new MsgRemoveScheduleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRemoveScheduleResponse {
    return new MsgRemoveScheduleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRemoveScheduleResponse | PlainMessage<MsgRemoveScheduleResponse> | undefined, b: MsgRemoveScheduleResponse | PlainMessage<MsgRemoveScheduleResponse> | undefined): boolean {
    return proto3.util.equals(MsgRemoveScheduleResponse, a, b);
  }
}

/**
 * The MsgUpdateParams request type.
 *
 * Since: 0.47
 *
 * @generated from message neutron.cron.MsgUpdateParams
 */
export class MsgUpdateParams extends Message<MsgUpdateParams> {
  /**
   * The address of the governance account.
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * Defines the x/cron parameters to update.
   *
   * NOTE: All parameters must be supplied.
   *
   * @generated from field: neutron.cron.Params params = 2;
   */
  params?: Params;

  constructor(data?: PartialMessage<MsgUpdateParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.cron.MsgUpdateParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined, b: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParams, a, b);
  }
}

/**
 * Defines the response structure for executing a MsgUpdateParams message.
 *
 * Since: 0.47
 *
 * @generated from message neutron.cron.MsgUpdateParamsResponse
 */
export class MsgUpdateParamsResponse extends Message<MsgUpdateParamsResponse> {
  constructor(data?: PartialMessage<MsgUpdateParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.cron.MsgUpdateParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined, b: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParamsResponse, a, b);
  }
}

