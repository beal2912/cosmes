// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file neutron/cron/schedule.proto (package neutron.cron, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * Defines when messages will be executed in the block
 *
 * @generated from enum neutron.cron.ExecutionStage
 */
export enum ExecutionStage {
  /**
   * Execution at the end of the block
   *
   * @generated from enum value: EXECUTION_STAGE_END_BLOCKER = 0;
   */
  END_BLOCKER = 0,

  /**
   * Execution at the beginning of the block
   *
   * @generated from enum value: EXECUTION_STAGE_BEGIN_BLOCKER = 1;
   */
  BEGIN_BLOCKER = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(ExecutionStage)
proto3.util.setEnumType(ExecutionStage, "neutron.cron.ExecutionStage", [
  { no: 0, name: "EXECUTION_STAGE_END_BLOCKER" },
  { no: 1, name: "EXECUTION_STAGE_BEGIN_BLOCKER" },
]);

/**
 * Defines the schedule for execution
 *
 * @generated from message neutron.cron.Schedule
 */
export class Schedule extends Message<Schedule> {
  /**
   * Name of schedule
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Period in blocks
   *
   * @generated from field: uint64 period = 2;
   */
  period = protoInt64.zero;

  /**
   * Msgs that will be executed every certain number of blocks, specified in the `period` field
   *
   * @generated from field: repeated neutron.cron.MsgExecuteContract msgs = 3;
   */
  msgs: MsgExecuteContract[] = [];

  /**
   * Last execution's block height
   *
   * @generated from field: uint64 last_execute_height = 4;
   */
  lastExecuteHeight = protoInt64.zero;

  /**
   * Stage when messages will be executed
   *
   * @generated from field: neutron.cron.ExecutionStage execution_stage = 5;
   */
  executionStage = ExecutionStage.END_BLOCKER;

  constructor(data?: PartialMessage<Schedule>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.cron.Schedule";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "period", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "msgs", kind: "message", T: MsgExecuteContract, repeated: true },
    { no: 4, name: "last_execute_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "execution_stage", kind: "enum", T: proto3.getEnumType(ExecutionStage) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Schedule {
    return new Schedule().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Schedule {
    return new Schedule().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Schedule {
    return new Schedule().fromJsonString(jsonString, options);
  }

  static equals(a: Schedule | PlainMessage<Schedule> | undefined, b: Schedule | PlainMessage<Schedule> | undefined): boolean {
    return proto3.util.equals(Schedule, a, b);
  }
}

/**
 * Defines the contract and the message to pass
 *
 * @generated from message neutron.cron.MsgExecuteContract
 */
export class MsgExecuteContract extends Message<MsgExecuteContract> {
  /**
   * The address of the smart contract
   *
   * @generated from field: string contract = 1;
   */
  contract = "";

  /**
   * JSON encoded message to be passed to the contract
   *
   * @generated from field: string msg = 2;
   */
  msg = "";

  constructor(data?: PartialMessage<MsgExecuteContract>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.cron.MsgExecuteContract";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgExecuteContract {
    return new MsgExecuteContract().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgExecuteContract {
    return new MsgExecuteContract().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgExecuteContract {
    return new MsgExecuteContract().fromJsonString(jsonString, options);
  }

  static equals(a: MsgExecuteContract | PlainMessage<MsgExecuteContract> | undefined, b: MsgExecuteContract | PlainMessage<MsgExecuteContract> | undefined): boolean {
    return proto3.util.equals(MsgExecuteContract, a, b);
  }
}

/**
 * Defines the number of current schedules
 *
 * @generated from message neutron.cron.ScheduleCount
 */
export class ScheduleCount extends Message<ScheduleCount> {
  /**
   * The number of current schedules
   *
   * @generated from field: int32 count = 1;
   */
  count = 0;

  constructor(data?: PartialMessage<ScheduleCount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.cron.ScheduleCount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScheduleCount {
    return new ScheduleCount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScheduleCount {
    return new ScheduleCount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScheduleCount {
    return new ScheduleCount().fromJsonString(jsonString, options);
  }

  static equals(a: ScheduleCount | PlainMessage<ScheduleCount> | undefined, b: ScheduleCount | PlainMessage<ScheduleCount> | undefined): boolean {
    return proto3.util.equals(ScheduleCount, a, b);
  }
}

