// @generated by protoc-gen-cosmes v0.0.1 with parameter "target=ts"
// @generated from file neutron/interchainqueries/tx.proto (package neutron.interchainqueries, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { MsgRegisterInterchainQuery, MsgRegisterInterchainQueryResponse, MsgRemoveInterchainQueryRequest, MsgRemoveInterchainQueryResponse, MsgSubmitQueryResult, MsgSubmitQueryResultResponse, MsgUpdateInterchainQueryRequest, MsgUpdateInterchainQueryResponse, MsgUpdateParams, MsgUpdateParamsResponse } from "./tx_pb.js";

const TYPE_NAME = "neutron.interchainqueries.Msg";

/**
 * Registers a new Interchain Query in the `interchainqueries` module. This message should only
 * be issued by a smart contract. The calling contract is automatically charged a query
 * registration deposit, based on the module's query deposit parameter. The deposit is refunded
 * when the query is removed. Ensure the contract's account has sufficient assets at the time of
 * message execution.
 *
 * The response includes the ID assigned to the registered query. Use a reply handler to process
 * this response and utilize the query ID.
 *
 * @generated from rpc neutron.interchainqueries.Msg.RegisterInterchainQuery
 */
export const MsgRegisterInterchainQueryService = {
  typeName: TYPE_NAME,
  method: "RegisterInterchainQuery",
  Request: MsgRegisterInterchainQuery,
  Response: MsgRegisterInterchainQueryResponse,
} as const;

/**
 * Submits the result of an Interchain Query execution to the chain. Handling this message may
 * involve forwarding the result to the smart contract that owns the query for processing, which
 * could require significant gas usage.
 *
 * @generated from rpc neutron.interchainqueries.Msg.SubmitQueryResult
 */
export const MsgSubmitQueryResultService = {
  typeName: TYPE_NAME,
  method: "SubmitQueryResult",
  Request: MsgSubmitQueryResult,
  Response: MsgSubmitQueryResultResponse,
} as const;

/**
 * Removes a specific Interchain Query and its results from the module. The query can only be
 * removed by its owner during the query's submit timeout. After the timeout, anyone can remove
 * it. Upon successful removal, the query deposit is refunded to the caller.
 *
 * @generated from rpc neutron.interchainqueries.Msg.RemoveInterchainQuery
 */
export const MsgRemoveInterchainQueryService = {
  typeName: TYPE_NAME,
  method: "RemoveInterchainQuery",
  Request: MsgRemoveInterchainQueryRequest,
  Response: MsgRemoveInterchainQueryResponse,
} as const;

/**
 * Updates the parameters of a registered Interchain Query. This action can only be performed by
 * the query's owner.
 *
 * @generated from rpc neutron.interchainqueries.Msg.UpdateInterchainQuery
 */
export const MsgUpdateInterchainQueryService = {
  typeName: TYPE_NAME,
  method: "UpdateInterchainQuery",
  Request: MsgUpdateInterchainQueryRequest,
  Response: MsgUpdateInterchainQueryResponse,
} as const;

/**
 * Updates the parameters of the `interchainqueries` module. This action can only be performed
 * by the module's authority.
 *
 * @generated from rpc neutron.interchainqueries.Msg.UpdateParams
 */
export const MsgUpdateParamsService = {
  typeName: TYPE_NAME,
  method: "UpdateParams",
  Request: MsgUpdateParams,
  Response: MsgUpdateParamsResponse,
} as const;

