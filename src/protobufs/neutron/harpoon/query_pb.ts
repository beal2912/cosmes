// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file neutron/harpoon/query.proto (package neutron.harpoon, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { HookType } from "./hooks_pb.js";

/**
 * Request type for the Query/SubscribedContracts RPC method.
 *
 * @generated from message neutron.harpoon.QuerySubscribedContractsRequest
 */
export class QuerySubscribedContractsRequest extends Message<QuerySubscribedContractsRequest> {
  /**
   * The response will include only contract addresses for this hook type.
   *
   * @generated from field: neutron.harpoon.HookType hook_type = 1;
   */
  hookType = HookType.UNSPECIFIED;

  constructor(data?: PartialMessage<QuerySubscribedContractsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.harpoon.QuerySubscribedContractsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hook_type", kind: "enum", T: proto3.getEnumType(HookType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuerySubscribedContractsRequest {
    return new QuerySubscribedContractsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuerySubscribedContractsRequest {
    return new QuerySubscribedContractsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuerySubscribedContractsRequest {
    return new QuerySubscribedContractsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QuerySubscribedContractsRequest | PlainMessage<QuerySubscribedContractsRequest> | undefined, b: QuerySubscribedContractsRequest | PlainMessage<QuerySubscribedContractsRequest> | undefined): boolean {
    return proto3.util.equals(QuerySubscribedContractsRequest, a, b);
  }
}

/**
 * Response type for the Query/SubscribedContracts RPC method.
 *
 * @generated from message neutron.harpoon.QuerySubscribedContractsResponse
 */
export class QuerySubscribedContractsResponse extends Message<QuerySubscribedContractsResponse> {
  /**
   * List of contract addresses subscribed to a specific hook.
   *
   * @generated from field: repeated string contract_addresses = 1;
   */
  contractAddresses: string[] = [];

  constructor(data?: PartialMessage<QuerySubscribedContractsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.harpoon.QuerySubscribedContractsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contract_addresses", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuerySubscribedContractsResponse {
    return new QuerySubscribedContractsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuerySubscribedContractsResponse {
    return new QuerySubscribedContractsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuerySubscribedContractsResponse {
    return new QuerySubscribedContractsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QuerySubscribedContractsResponse | PlainMessage<QuerySubscribedContractsResponse> | undefined, b: QuerySubscribedContractsResponse | PlainMessage<QuerySubscribedContractsResponse> | undefined): boolean {
    return proto3.util.equals(QuerySubscribedContractsResponse, a, b);
  }
}

