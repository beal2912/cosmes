// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file neutron/harpoon/tx.proto (package neutron.harpoon, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { HookType } from "./hooks_pb.js";

/**
 * Defines the Msg/ManageHookSubscription request type.
 *
 * @generated from message neutron.harpoon.MsgManageHookSubscription
 */
export class MsgManageHookSubscription extends Message<MsgManageHookSubscription> {
  /**
   * Address of the governance account.
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * Hook subscription to be updated.
   *
   * @generated from field: neutron.harpoon.HookSubscription hook_subscription = 2;
   */
  hookSubscription?: HookSubscription;

  constructor(data?: PartialMessage<MsgManageHookSubscription>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.harpoon.MsgManageHookSubscription";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "hook_subscription", kind: "message", T: HookSubscription },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgManageHookSubscription {
    return new MsgManageHookSubscription().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgManageHookSubscription {
    return new MsgManageHookSubscription().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgManageHookSubscription {
    return new MsgManageHookSubscription().fromJsonString(jsonString, options);
  }

  static equals(a: MsgManageHookSubscription | PlainMessage<MsgManageHookSubscription> | undefined, b: MsgManageHookSubscription | PlainMessage<MsgManageHookSubscription> | undefined): boolean {
    return proto3.util.equals(MsgManageHookSubscription, a, b);
  }
}

/**
 * Defines the response structure for executing a MsgManageHookSubscription message.
 *
 * @generated from message neutron.harpoon.MsgManageHookSubscriptionResponse
 */
export class MsgManageHookSubscriptionResponse extends Message<MsgManageHookSubscriptionResponse> {
  constructor(data?: PartialMessage<MsgManageHookSubscriptionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.harpoon.MsgManageHookSubscriptionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgManageHookSubscriptionResponse {
    return new MsgManageHookSubscriptionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgManageHookSubscriptionResponse {
    return new MsgManageHookSubscriptionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgManageHookSubscriptionResponse {
    return new MsgManageHookSubscriptionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgManageHookSubscriptionResponse | PlainMessage<MsgManageHookSubscriptionResponse> | undefined, b: MsgManageHookSubscriptionResponse | PlainMessage<MsgManageHookSubscriptionResponse> | undefined): boolean {
    return proto3.util.equals(MsgManageHookSubscriptionResponse, a, b);
  }
}

/**
 * Specifies new hook subscriptions for the contract_address.
 *
 * @generated from message neutron.harpoon.HookSubscription
 */
export class HookSubscription extends Message<HookSubscription> {
  /**
   * Contract address to update subscriptions for.
   *
   * @generated from field: string contract_address = 2;
   */
  contractAddress = "";

  /**
   * List of hooks to subscribe to. Hooks not listed here will be removed.
   *
   * @generated from field: repeated neutron.harpoon.HookType hooks = 3;
   */
  hooks: HookType[] = [];

  constructor(data?: PartialMessage<HookSubscription>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.harpoon.HookSubscription";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "contract_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "hooks", kind: "enum", T: proto3.getEnumType(HookType), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HookSubscription {
    return new HookSubscription().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HookSubscription {
    return new HookSubscription().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HookSubscription {
    return new HookSubscription().fromJsonString(jsonString, options);
  }

  static equals(a: HookSubscription | PlainMessage<HookSubscription> | undefined, b: HookSubscription | PlainMessage<HookSubscription> | undefined): boolean {
    return proto3.util.equals(HookSubscription, a, b);
  }
}

