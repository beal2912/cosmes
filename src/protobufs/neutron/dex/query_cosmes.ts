// @generated by protoc-gen-cosmes v0.0.1 with parameter "target=ts"
// @generated from file neutron/dex/query.proto (package neutron.dex, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { QueryAllInactiveLimitOrderTrancheRequest, QueryAllInactiveLimitOrderTrancheResponse, QueryAllLimitOrderTrancheRequest, QueryAllLimitOrderTrancheResponse, QueryAllLimitOrderTrancheUserByAddressRequest, QueryAllLimitOrderTrancheUserByAddressResponse, QueryAllLimitOrderTrancheUserRequest, QueryAllLimitOrderTrancheUserResponse, QueryAllPoolMetadataRequest, QueryAllPoolMetadataResponse, QueryAllPoolReservesRequest, QueryAllPoolReservesResponse, QueryAllTickLiquidityRequest, QueryAllTickLiquidityResponse, QueryAllUserDepositsRequest, QueryAllUserDepositsResponse, QueryEstimateMultiHopSwapRequest, QueryEstimateMultiHopSwapResponse, QueryEstimatePlaceLimitOrderRequest, QueryEstimatePlaceLimitOrderResponse, QueryGetInactiveLimitOrderTrancheRequest, QueryGetInactiveLimitOrderTrancheResponse, QueryGetLimitOrderTrancheRequest, QueryGetLimitOrderTrancheResponse, QueryGetLimitOrderTrancheUserRequest, QueryGetLimitOrderTrancheUserResponse, QueryGetPoolMetadataRequest, QueryGetPoolMetadataResponse, QueryGetPoolReservesRequest, QueryGetPoolReservesResponse, QueryParamsRequest, QueryParamsResponse, QueryPoolByIDRequest, QueryPoolRequest, QueryPoolResponse, QuerySimulateCancelLimitOrderRequest, QuerySimulateCancelLimitOrderResponse, QuerySimulateDepositRequest, QuerySimulateDepositResponse, QuerySimulateMultiHopSwapRequest, QuerySimulateMultiHopSwapResponse, QuerySimulatePlaceLimitOrderRequest, QuerySimulatePlaceLimitOrderResponse, QuerySimulateWithdrawalRequest, QuerySimulateWithdrawalResponse, QuerySimulateWithdrawFilledLimitOrderRequest, QuerySimulateWithdrawFilledLimitOrderResponse } from "./query_pb.js";

const TYPE_NAME = "neutron.dex.Query";

/**
 * Parameters queries the parameters of the module.
 *
 * @generated from rpc neutron.dex.Query.Params
 */
export const QueryParamsService = {
  typeName: TYPE_NAME,
  method: "Params",
  Request: QueryParamsRequest,
  Response: QueryParamsResponse,
} as const;

/**
 * Queries a LimitOrderTrancheUser by index.
 *
 * @generated from rpc neutron.dex.Query.LimitOrderTrancheUser
 */
export const QueryLimitOrderTrancheUserService = {
  typeName: TYPE_NAME,
  method: "LimitOrderTrancheUser",
  Request: QueryGetLimitOrderTrancheUserRequest,
  Response: QueryGetLimitOrderTrancheUserResponse,
} as const;

/**
 * Queries a list of LimitOrderTranchUser items.
 *
 * @generated from rpc neutron.dex.Query.LimitOrderTrancheUserAll
 */
export const QueryLimitOrderTrancheUserAllService = {
  typeName: TYPE_NAME,
  method: "LimitOrderTrancheUserAll",
  Request: QueryAllLimitOrderTrancheUserRequest,
  Response: QueryAllLimitOrderTrancheUserResponse,
} as const;

/**
 * Queries a list of LimitOrderTrancheUser items for a given address.
 *
 * @generated from rpc neutron.dex.Query.LimitOrderTrancheUserAllByAddress
 */
export const QueryLimitOrderTrancheUserAllByAddressService = {
  typeName: TYPE_NAME,
  method: "LimitOrderTrancheUserAllByAddress",
  Request: QueryAllLimitOrderTrancheUserByAddressRequest,
  Response: QueryAllLimitOrderTrancheUserByAddressResponse,
} as const;

/**
 * Queries a LimitOrderTranche by index.
 *
 * @generated from rpc neutron.dex.Query.LimitOrderTranche
 */
export const QueryLimitOrderTrancheService = {
  typeName: TYPE_NAME,
  method: "LimitOrderTranche",
  Request: QueryGetLimitOrderTrancheRequest,
  Response: QueryGetLimitOrderTrancheResponse,
} as const;

/**
 * Queries a list of LimitOrderTranche items for a given pairID / TokenIn
 * combination.
 *
 * @generated from rpc neutron.dex.Query.LimitOrderTrancheAll
 */
export const QueryLimitOrderTrancheAllService = {
  typeName: TYPE_NAME,
  method: "LimitOrderTrancheAll",
  Request: QueryAllLimitOrderTrancheRequest,
  Response: QueryAllLimitOrderTrancheResponse,
} as const;

/**
 * Queries a list of UserDeposits items.
 *
 * @generated from rpc neutron.dex.Query.UserDepositsAll
 */
export const QueryUserDepositsAllService = {
  typeName: TYPE_NAME,
  method: "UserDepositsAll",
  Request: QueryAllUserDepositsRequest,
  Response: QueryAllUserDepositsResponse,
} as const;

/**
 * Queries a list of TickLiquidity items.
 *
 * @generated from rpc neutron.dex.Query.TickLiquidityAll
 */
export const QueryTickLiquidityAllService = {
  typeName: TYPE_NAME,
  method: "TickLiquidityAll",
  Request: QueryAllTickLiquidityRequest,
  Response: QueryAllTickLiquidityResponse,
} as const;

/**
 * Queries a InactiveLimitOrderTranche by index.
 *
 * @generated from rpc neutron.dex.Query.InactiveLimitOrderTranche
 */
export const QueryInactiveLimitOrderTrancheService = {
  typeName: TYPE_NAME,
  method: "InactiveLimitOrderTranche",
  Request: QueryGetInactiveLimitOrderTrancheRequest,
  Response: QueryGetInactiveLimitOrderTrancheResponse,
} as const;

/**
 * Queries a list of InactiveLimitOrderTranche items.
 *
 * @generated from rpc neutron.dex.Query.InactiveLimitOrderTrancheAll
 */
export const QueryInactiveLimitOrderTrancheAllService = {
  typeName: TYPE_NAME,
  method: "InactiveLimitOrderTrancheAll",
  Request: QueryAllInactiveLimitOrderTrancheRequest,
  Response: QueryAllInactiveLimitOrderTrancheResponse,
} as const;

/**
 * Queries a list of PoolReserves items.
 *
 * @generated from rpc neutron.dex.Query.PoolReservesAll
 */
export const QueryPoolReservesAllService = {
  typeName: TYPE_NAME,
  method: "PoolReservesAll",
  Request: QueryAllPoolReservesRequest,
  Response: QueryAllPoolReservesResponse,
} as const;

/**
 * Queries a PoolReserve by index
 *
 * @generated from rpc neutron.dex.Query.PoolReserves
 */
export const QueryPoolReservesService = {
  typeName: TYPE_NAME,
  method: "PoolReserves",
  Request: QueryGetPoolReservesRequest,
  Response: QueryGetPoolReservesResponse,
} as const;

/**
 * DEPRECATED Queries the simulated result of a multihop swap
 *
 * @generated from rpc neutron.dex.Query.EstimateMultiHopSwap
 * @deprecated
 */
export const QueryEstimateMultiHopSwapService = {
  typeName: TYPE_NAME,
  method: "EstimateMultiHopSwap",
  Request: QueryEstimateMultiHopSwapRequest,
  Response: QueryEstimateMultiHopSwapResponse,
} as const;

/**
 * DEPRECATED Queries the simulated result of a PlaceLimit order
 *
 * @generated from rpc neutron.dex.Query.EstimatePlaceLimitOrder
 * @deprecated
 */
export const QueryEstimatePlaceLimitOrderService = {
  typeName: TYPE_NAME,
  method: "EstimatePlaceLimitOrder",
  Request: QueryEstimatePlaceLimitOrderRequest,
  Response: QueryEstimatePlaceLimitOrderResponse,
} as const;

/**
 * Queries a pool by pair, tick and fee
 *
 * @generated from rpc neutron.dex.Query.Pool
 */
export const QueryPoolService = {
  typeName: TYPE_NAME,
  method: "Pool",
  Request: QueryPoolRequest,
  Response: QueryPoolResponse,
} as const;

/**
 * Queries a pool by ID
 *
 * @generated from rpc neutron.dex.Query.PoolByID
 */
export const QueryPoolByIDService = {
  typeName: TYPE_NAME,
  method: "PoolByID",
  Request: QueryPoolByIDRequest,
  Response: QueryPoolResponse,
} as const;

/**
 * Queries a PoolMetadata by ID
 *
 * @generated from rpc neutron.dex.Query.PoolMetadata
 */
export const QueryPoolMetadataService = {
  typeName: TYPE_NAME,
  method: "PoolMetadata",
  Request: QueryGetPoolMetadataRequest,
  Response: QueryGetPoolMetadataResponse,
} as const;

/**
 * Queries a list of PoolMetadata items.
 *
 * @generated from rpc neutron.dex.Query.PoolMetadataAll
 */
export const QueryPoolMetadataAllService = {
  typeName: TYPE_NAME,
  method: "PoolMetadataAll",
  Request: QueryAllPoolMetadataRequest,
  Response: QueryAllPoolMetadataResponse,
} as const;

/**
 * Simulates MsgDeposit
 *
 * @generated from rpc neutron.dex.Query.SimulateDeposit
 */
export const QuerySimulateDepositService = {
  typeName: TYPE_NAME,
  method: "SimulateDeposit",
  Request: QuerySimulateDepositRequest,
  Response: QuerySimulateDepositResponse,
} as const;

/**
 * Simulates MsgWithdrawal
 *
 * @generated from rpc neutron.dex.Query.SimulateWithdrawal
 */
export const QuerySimulateWithdrawalService = {
  typeName: TYPE_NAME,
  method: "SimulateWithdrawal",
  Request: QuerySimulateWithdrawalRequest,
  Response: QuerySimulateWithdrawalResponse,
} as const;

/**
 * Simulates MsgPlaceLimitOrder
 *
 * @generated from rpc neutron.dex.Query.SimulatePlaceLimitOrder
 */
export const QuerySimulatePlaceLimitOrderService = {
  typeName: TYPE_NAME,
  method: "SimulatePlaceLimitOrder",
  Request: QuerySimulatePlaceLimitOrderRequest,
  Response: QuerySimulatePlaceLimitOrderResponse,
} as const;

/**
 * Simulates MsgWithdrawFilledLimitOrder
 *
 * @generated from rpc neutron.dex.Query.SimulateWithdrawFilledLimitOrder
 */
export const QuerySimulateWithdrawFilledLimitOrderService = {
  typeName: TYPE_NAME,
  method: "SimulateWithdrawFilledLimitOrder",
  Request: QuerySimulateWithdrawFilledLimitOrderRequest,
  Response: QuerySimulateWithdrawFilledLimitOrderResponse,
} as const;

/**
 * Simulates MsgCancelLimitOrder
 *
 * @generated from rpc neutron.dex.Query.SimulateCancelLimitOrder
 */
export const QuerySimulateCancelLimitOrderService = {
  typeName: TYPE_NAME,
  method: "SimulateCancelLimitOrder",
  Request: QuerySimulateCancelLimitOrderRequest,
  Response: QuerySimulateCancelLimitOrderResponse,
} as const;

/**
 * Simulates MsgMultiHopSwap
 *
 * @generated from rpc neutron.dex.Query.SimulateMultiHopSwap
 */
export const QuerySimulateMultiHopSwapService = {
  typeName: TYPE_NAME,
  method: "SimulateMultiHopSwap",
  Request: QuerySimulateMultiHopSwapRequest,
  Response: QuerySimulateMultiHopSwapResponse,
} as const;

