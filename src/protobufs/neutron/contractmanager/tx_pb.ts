// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file neutron/contractmanager/tx.proto (package neutron.contractmanager, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";

/**
 * MsgUpdateParams is the MsgUpdateParams request type.
 *
 * Since: 0.47
 *
 * @generated from message neutron.contractmanager.MsgUpdateParams
 */
export class MsgUpdateParams extends Message<MsgUpdateParams> {
  /**
   * Authority is the address of the governance account.
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * params defines the x/contractmanager parameters to update.
   *
   * NOTE: All parameters must be supplied.
   *
   * @generated from field: neutron.contractmanager.Params params = 2;
   */
  params?: Params;

  constructor(data?: PartialMessage<MsgUpdateParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.contractmanager.MsgUpdateParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined, b: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParams, a, b);
  }
}

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 *
 * Since: 0.47
 *
 * @generated from message neutron.contractmanager.MsgUpdateParamsResponse
 */
export class MsgUpdateParamsResponse extends Message<MsgUpdateParamsResponse> {
  constructor(data?: PartialMessage<MsgUpdateParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.contractmanager.MsgUpdateParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined, b: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParamsResponse, a, b);
  }
}

/**
 * MsgResubmitFailure - contract that has failed acknowledgement can resubmit its failure
 *
 * @generated from message neutron.contractmanager.MsgResubmitFailure
 */
export class MsgResubmitFailure extends Message<MsgResubmitFailure> {
  /**
   * sender is the contract which failure to acknowledge is resubmitted.
   *
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * failure_id is id of failure to resubmit
   *
   * @generated from field: uint64 failure_id = 2;
   */
  failureId = protoInt64.zero;

  constructor(data?: PartialMessage<MsgResubmitFailure>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.contractmanager.MsgResubmitFailure";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "failure_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgResubmitFailure {
    return new MsgResubmitFailure().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgResubmitFailure {
    return new MsgResubmitFailure().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgResubmitFailure {
    return new MsgResubmitFailure().fromJsonString(jsonString, options);
  }

  static equals(a: MsgResubmitFailure | PlainMessage<MsgResubmitFailure> | undefined, b: MsgResubmitFailure | PlainMessage<MsgResubmitFailure> | undefined): boolean {
    return proto3.util.equals(MsgResubmitFailure, a, b);
  }
}

/**
 * @generated from message neutron.contractmanager.MsgResubmitFailureResponse
 */
export class MsgResubmitFailureResponse extends Message<MsgResubmitFailureResponse> {
  constructor(data?: PartialMessage<MsgResubmitFailureResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.contractmanager.MsgResubmitFailureResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgResubmitFailureResponse {
    return new MsgResubmitFailureResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgResubmitFailureResponse {
    return new MsgResubmitFailureResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgResubmitFailureResponse {
    return new MsgResubmitFailureResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgResubmitFailureResponse | PlainMessage<MsgResubmitFailureResponse> | undefined, b: MsgResubmitFailureResponse | PlainMessage<MsgResubmitFailureResponse> | undefined): boolean {
    return proto3.util.equals(MsgResubmitFailureResponse, a, b);
  }
}

