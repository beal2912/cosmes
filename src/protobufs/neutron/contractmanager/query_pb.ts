// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file neutron/contractmanager/query.proto (package neutron.contractmanager, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { PageRequest, PageResponse } from "../../cosmos/base/query/v1beta1/pagination_pb.js";
import { Failure } from "./failure_pb.js";

/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from message neutron.contractmanager.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.contractmanager.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from message neutron.contractmanager.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: neutron.contractmanager.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.contractmanager.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * QueryFailuresRequest is request type for the Query/Failures RPC method.
 *
 * @generated from message neutron.contractmanager.QueryFailuresRequest
 */
export class QueryFailuresRequest extends Message<QueryFailuresRequest> {
  /**
   * address of the contract which Sudo call failed.
   *
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 3;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryFailuresRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.contractmanager.QueryFailuresRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFailuresRequest {
    return new QueryFailuresRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFailuresRequest {
    return new QueryFailuresRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFailuresRequest {
    return new QueryFailuresRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryFailuresRequest | PlainMessage<QueryFailuresRequest> | undefined, b: QueryFailuresRequest | PlainMessage<QueryFailuresRequest> | undefined): boolean {
    return proto3.util.equals(QueryFailuresRequest, a, b);
  }
}

/**
 * QueryFailureRequest is request type for the Query/Failures RPC method.
 *
 * @generated from message neutron.contractmanager.QueryFailureRequest
 */
export class QueryFailureRequest extends Message<QueryFailureRequest> {
  /**
   * address of the contract which Sudo call failed.
   *
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * ID of the failure for the given contract.
   *
   * @generated from field: uint64 failure_id = 2;
   */
  failureId = protoInt64.zero;

  constructor(data?: PartialMessage<QueryFailureRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.contractmanager.QueryFailureRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "failure_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFailureRequest {
    return new QueryFailureRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFailureRequest {
    return new QueryFailureRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFailureRequest {
    return new QueryFailureRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryFailureRequest | PlainMessage<QueryFailureRequest> | undefined, b: QueryFailureRequest | PlainMessage<QueryFailureRequest> | undefined): boolean {
    return proto3.util.equals(QueryFailureRequest, a, b);
  }
}

/**
 * QueryFailureResponse is response type for the Query/Failure RPC method.
 *
 * @generated from message neutron.contractmanager.QueryFailureResponse
 */
export class QueryFailureResponse extends Message<QueryFailureResponse> {
  /**
   * @generated from field: neutron.contractmanager.Failure failure = 1;
   */
  failure?: Failure;

  constructor(data?: PartialMessage<QueryFailureResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.contractmanager.QueryFailureResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "failure", kind: "message", T: Failure },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFailureResponse {
    return new QueryFailureResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFailureResponse {
    return new QueryFailureResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFailureResponse {
    return new QueryFailureResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryFailureResponse | PlainMessage<QueryFailureResponse> | undefined, b: QueryFailureResponse | PlainMessage<QueryFailureResponse> | undefined): boolean {
    return proto3.util.equals(QueryFailureResponse, a, b);
  }
}

/**
 * QueryFailuresResponse is response type for the Query/Failures RPC method.
 *
 * @generated from message neutron.contractmanager.QueryFailuresResponse
 */
export class QueryFailuresResponse extends Message<QueryFailuresResponse> {
  /**
   * @generated from field: repeated neutron.contractmanager.Failure failures = 1;
   */
  failures: Failure[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryFailuresResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.contractmanager.QueryFailuresResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "failures", kind: "message", T: Failure, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFailuresResponse {
    return new QueryFailuresResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFailuresResponse {
    return new QueryFailuresResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFailuresResponse {
    return new QueryFailuresResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryFailuresResponse | PlainMessage<QueryFailuresResponse> | undefined, b: QueryFailuresResponse | PlainMessage<QueryFailuresResponse> | undefined): boolean {
    return proto3.util.equals(QueryFailuresResponse, a, b);
  }
}

