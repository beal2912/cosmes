// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file neutron/state_verifier/v1/query.proto (package neutron.state_verifier.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { StorageValue } from "../../interchainqueries/tx_pb.js";
import { ConsensusState } from "./genesis_pb.js";

/**
 * Describes a structure to verify storage values from the chain state from a particular height in the past
 *
 * @generated from message neutron.state_verifier.v1.QueryVerifyStateValuesRequest
 */
export class QueryVerifyStateValuesRequest extends Message<QueryVerifyStateValuesRequest> {
  /**
   * Refers to the block height to which the storage values belong.
   *
   * @generated from field: uint64 height = 1;
   */
  height = protoInt64.zero;

  /**
   * A slice of neutron.interchainqueries.StorageValue which relate to the specified height and must be verified against
   *
   * @generated from field: repeated neutron.interchainqueries.StorageValue storage_values = 2;
   */
  storageValues: StorageValue[] = [];

  constructor(data?: PartialMessage<QueryVerifyStateValuesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.state_verifier.v1.QueryVerifyStateValuesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "storage_values", kind: "message", T: StorageValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVerifyStateValuesRequest {
    return new QueryVerifyStateValuesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVerifyStateValuesRequest {
    return new QueryVerifyStateValuesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVerifyStateValuesRequest {
    return new QueryVerifyStateValuesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVerifyStateValuesRequest | PlainMessage<QueryVerifyStateValuesRequest> | undefined, b: QueryVerifyStateValuesRequest | PlainMessage<QueryVerifyStateValuesRequest> | undefined): boolean {
    return proto3.util.equals(QueryVerifyStateValuesRequest, a, b);
  }
}

/**
 * Describes a response structure for `VerifyStateValues` query
 *
 * @generated from message neutron.state_verifier.v1.QueryVerifyStateValuesResponse
 */
export class QueryVerifyStateValuesResponse extends Message<QueryVerifyStateValuesResponse> {
  /**
   * The field describes a validity of all the storage values passed to the request at a specific height
   *
   * @generated from field: bool valid = 1;
   */
  valid = false;

  constructor(data?: PartialMessage<QueryVerifyStateValuesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.state_verifier.v1.QueryVerifyStateValuesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "valid", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVerifyStateValuesResponse {
    return new QueryVerifyStateValuesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVerifyStateValuesResponse {
    return new QueryVerifyStateValuesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVerifyStateValuesResponse {
    return new QueryVerifyStateValuesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVerifyStateValuesResponse | PlainMessage<QueryVerifyStateValuesResponse> | undefined, b: QueryVerifyStateValuesResponse | PlainMessage<QueryVerifyStateValuesResponse> | undefined): boolean {
    return proto3.util.equals(QueryVerifyStateValuesResponse, a, b);
  }
}

/**
 * Describes a structure to query ConsensusState by the specified height
 *
 * @generated from message neutron.state_verifier.v1.QueryConsensusStateRequest
 */
export class QueryConsensusStateRequest extends Message<QueryConsensusStateRequest> {
  /**
   * Refers to the block height for which you want to query ConsensusState
   *
   * @generated from field: uint64 height = 1;
   */
  height = protoInt64.zero;

  constructor(data?: PartialMessage<QueryConsensusStateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.state_verifier.v1.QueryConsensusStateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryConsensusStateRequest {
    return new QueryConsensusStateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryConsensusStateRequest {
    return new QueryConsensusStateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryConsensusStateRequest {
    return new QueryConsensusStateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryConsensusStateRequest | PlainMessage<QueryConsensusStateRequest> | undefined, b: QueryConsensusStateRequest | PlainMessage<QueryConsensusStateRequest> | undefined): boolean {
    return proto3.util.equals(QueryConsensusStateRequest, a, b);
  }
}

/**
 * Describes a response structure for `QueryConsensusStateRequest` query
 *
 * @generated from message neutron.state_verifier.v1.QueryConsensusStateResponse
 */
export class QueryConsensusStateResponse extends Message<QueryConsensusStateResponse> {
  /**
   * ConsensusState defines the consensus state from the state-verifier module
   *
   * @generated from field: neutron.state_verifier.v1.ConsensusState cs = 2;
   */
  cs?: ConsensusState;

  constructor(data?: PartialMessage<QueryConsensusStateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.state_verifier.v1.QueryConsensusStateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "cs", kind: "message", T: ConsensusState },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryConsensusStateResponse {
    return new QueryConsensusStateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryConsensusStateResponse {
    return new QueryConsensusStateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryConsensusStateResponse {
    return new QueryConsensusStateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryConsensusStateResponse | PlainMessage<QueryConsensusStateResponse> | undefined, b: QueryConsensusStateResponse | PlainMessage<QueryConsensusStateResponse> | undefined): boolean {
    return proto3.util.equals(QueryConsensusStateResponse, a, b);
  }
}

