// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file pryzm/ystaking/v1/tx.proto (package pryzm.ystaking.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * @generated from message pryzm.ystaking.v1.MsgBond
 */
export class MsgBond extends Message<MsgBond> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 2;
   */
  amount?: Coin;

  constructor(data?: PartialMessage<MsgBond>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.ystaking.v1.MsgBond";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgBond {
    return new MsgBond().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgBond {
    return new MsgBond().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgBond {
    return new MsgBond().fromJsonString(jsonString, options);
  }

  static equals(a: MsgBond | PlainMessage<MsgBond> | undefined, b: MsgBond | PlainMessage<MsgBond> | undefined): boolean {
    return proto3.util.equals(MsgBond, a, b);
  }
}

/**
 * @generated from message pryzm.ystaking.v1.MsgBondResponse
 */
export class MsgBondResponse extends Message<MsgBondResponse> {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin total_bonded_amount = 1;
   */
  totalBondedAmount?: Coin;

  constructor(data?: PartialMessage<MsgBondResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.ystaking.v1.MsgBondResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total_bonded_amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgBondResponse {
    return new MsgBondResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgBondResponse {
    return new MsgBondResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgBondResponse {
    return new MsgBondResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgBondResponse | PlainMessage<MsgBondResponse> | undefined, b: MsgBondResponse | PlainMessage<MsgBondResponse> | undefined): boolean {
    return proto3.util.equals(MsgBondResponse, a, b);
  }
}

/**
 * @generated from message pryzm.ystaking.v1.MsgUnbond
 */
export class MsgUnbond extends Message<MsgUnbond> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 2;
   */
  amount?: Coin;

  constructor(data?: PartialMessage<MsgUnbond>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.ystaking.v1.MsgUnbond";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUnbond {
    return new MsgUnbond().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUnbond {
    return new MsgUnbond().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUnbond {
    return new MsgUnbond().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUnbond | PlainMessage<MsgUnbond> | undefined, b: MsgUnbond | PlainMessage<MsgUnbond> | undefined): boolean {
    return proto3.util.equals(MsgUnbond, a, b);
  }
}

/**
 * @generated from message pryzm.ystaking.v1.MsgUnbondResponse
 */
export class MsgUnbondResponse extends Message<MsgUnbondResponse> {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin remainder_bonded_amount = 1;
   */
  remainderBondedAmount?: Coin;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin accrued_reward = 2;
   */
  accruedReward?: Coin;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin fee = 3;
   */
  fee?: Coin;

  constructor(data?: PartialMessage<MsgUnbondResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.ystaking.v1.MsgUnbondResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "remainder_bonded_amount", kind: "message", T: Coin },
    { no: 2, name: "accrued_reward", kind: "message", T: Coin },
    { no: 3, name: "fee", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUnbondResponse {
    return new MsgUnbondResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUnbondResponse {
    return new MsgUnbondResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUnbondResponse {
    return new MsgUnbondResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUnbondResponse | PlainMessage<MsgUnbondResponse> | undefined, b: MsgUnbondResponse | PlainMessage<MsgUnbondResponse> | undefined): boolean {
    return proto3.util.equals(MsgUnbondResponse, a, b);
  }
}

/**
 * @generated from message pryzm.ystaking.v1.MsgClaimReward
 */
export class MsgClaimReward extends Message<MsgClaimReward> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string denom = 2;
   */
  denom = "";

  constructor(data?: PartialMessage<MsgClaimReward>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.ystaking.v1.MsgClaimReward";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgClaimReward {
    return new MsgClaimReward().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgClaimReward {
    return new MsgClaimReward().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgClaimReward {
    return new MsgClaimReward().fromJsonString(jsonString, options);
  }

  static equals(a: MsgClaimReward | PlainMessage<MsgClaimReward> | undefined, b: MsgClaimReward | PlainMessage<MsgClaimReward> | undefined): boolean {
    return proto3.util.equals(MsgClaimReward, a, b);
  }
}

/**
 * @generated from message pryzm.ystaking.v1.MsgClaimRewardResponse
 */
export class MsgClaimRewardResponse extends Message<MsgClaimRewardResponse> {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin accrued_reward = 1;
   */
  accruedReward?: Coin;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin fee = 2;
   */
  fee?: Coin;

  constructor(data?: PartialMessage<MsgClaimRewardResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.ystaking.v1.MsgClaimRewardResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "accrued_reward", kind: "message", T: Coin },
    { no: 2, name: "fee", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgClaimRewardResponse {
    return new MsgClaimRewardResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgClaimRewardResponse {
    return new MsgClaimRewardResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgClaimRewardResponse {
    return new MsgClaimRewardResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgClaimRewardResponse | PlainMessage<MsgClaimRewardResponse> | undefined, b: MsgClaimRewardResponse | PlainMessage<MsgClaimRewardResponse> | undefined): boolean {
    return proto3.util.equals(MsgClaimRewardResponse, a, b);
  }
}

/**
 * @generated from message pryzm.ystaking.v1.MsgExitPool
 */
export class MsgExitPool extends Message<MsgExitPool> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string denom = 2;
   */
  denom = "";

  constructor(data?: PartialMessage<MsgExitPool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.ystaking.v1.MsgExitPool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgExitPool {
    return new MsgExitPool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgExitPool {
    return new MsgExitPool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgExitPool {
    return new MsgExitPool().fromJsonString(jsonString, options);
  }

  static equals(a: MsgExitPool | PlainMessage<MsgExitPool> | undefined, b: MsgExitPool | PlainMessage<MsgExitPool> | undefined): boolean {
    return proto3.util.equals(MsgExitPool, a, b);
  }
}

/**
 * @generated from message pryzm.ystaking.v1.MsgExitPoolResponse
 */
export class MsgExitPoolResponse extends Message<MsgExitPoolResponse> {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin accrued_reward = 1;
   */
  accruedReward?: Coin;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin fee = 2;
   */
  fee?: Coin;

  constructor(data?: PartialMessage<MsgExitPoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.ystaking.v1.MsgExitPoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "accrued_reward", kind: "message", T: Coin },
    { no: 2, name: "fee", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgExitPoolResponse {
    return new MsgExitPoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgExitPoolResponse {
    return new MsgExitPoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgExitPoolResponse {
    return new MsgExitPoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgExitPoolResponse | PlainMessage<MsgExitPoolResponse> | undefined, b: MsgExitPoolResponse | PlainMessage<MsgExitPoolResponse> | undefined): boolean {
    return proto3.util.equals(MsgExitPoolResponse, a, b);
  }
}

