// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file pryzm/ystaking/v1/user_stake_state.proto (package pryzm.ystaking.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message pryzm.ystaking.v1.UserStakeState
 */
export class UserStakeState extends Message<UserStakeState> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: string asset_id = 2;
   */
  assetId = "";

  /**
   * @generated from field: string maturity_symbol = 3;
   */
  maturitySymbol = "";

  /**
   * @generated from field: string bonded_amount = 4;
   */
  bondedAmount = "";

  /**
   * @generated from field: string user_index = 5;
   */
  userIndex = "";

  /**
   * @generated from field: string pending_reward = 6;
   */
  pendingReward = "";

  constructor(data?: PartialMessage<UserStakeState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.ystaking.v1.UserStakeState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "asset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "maturity_symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "bonded_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "user_index", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "pending_reward", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserStakeState {
    return new UserStakeState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserStakeState {
    return new UserStakeState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserStakeState {
    return new UserStakeState().fromJsonString(jsonString, options);
  }

  static equals(a: UserStakeState | PlainMessage<UserStakeState> | undefined, b: UserStakeState | PlainMessage<UserStakeState> | undefined): boolean {
    return proto3.util.equals(UserStakeState, a, b);
  }
}

