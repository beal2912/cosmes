// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file pryzm/ystaking/v1/event.proto (package pryzm.ystaking.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
import { UserStakeState } from "./user_stake_state_pb.js";
import { AssetMaturityPoolState, AssetPoolState } from "./asset_pool_state_pb.js";

/**
 * @generated from message pryzm.ystaking.v1.EventYStakingBond
 */
export class EventYStakingBond extends Message<EventYStakingBond> {
  /**
   * @generated from field: string account_address = 1;
   */
  accountAddress = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 2;
   */
  amount?: Coin;

  constructor(data?: PartialMessage<EventYStakingBond>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.ystaking.v1.EventYStakingBond";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventYStakingBond {
    return new EventYStakingBond().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventYStakingBond {
    return new EventYStakingBond().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventYStakingBond {
    return new EventYStakingBond().fromJsonString(jsonString, options);
  }

  static equals(a: EventYStakingBond | PlainMessage<EventYStakingBond> | undefined, b: EventYStakingBond | PlainMessage<EventYStakingBond> | undefined): boolean {
    return proto3.util.equals(EventYStakingBond, a, b);
  }
}

/**
 * @generated from message pryzm.ystaking.v1.EventYStakingUnbond
 */
export class EventYStakingUnbond extends Message<EventYStakingUnbond> {
  /**
   * @generated from field: string account_address = 1;
   */
  accountAddress = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 2;
   */
  amount?: Coin;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin accrued_reward = 3;
   */
  accruedReward?: Coin;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin fee = 4;
   */
  fee?: Coin;

  constructor(data?: PartialMessage<EventYStakingUnbond>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.ystaking.v1.EventYStakingUnbond";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "message", T: Coin },
    { no: 3, name: "accrued_reward", kind: "message", T: Coin },
    { no: 4, name: "fee", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventYStakingUnbond {
    return new EventYStakingUnbond().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventYStakingUnbond {
    return new EventYStakingUnbond().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventYStakingUnbond {
    return new EventYStakingUnbond().fromJsonString(jsonString, options);
  }

  static equals(a: EventYStakingUnbond | PlainMessage<EventYStakingUnbond> | undefined, b: EventYStakingUnbond | PlainMessage<EventYStakingUnbond> | undefined): boolean {
    return proto3.util.equals(EventYStakingUnbond, a, b);
  }
}

/**
 * @generated from message pryzm.ystaking.v1.EventYStakingExitPool
 */
export class EventYStakingExitPool extends Message<EventYStakingExitPool> {
  /**
   * @generated from field: string account_address = 1;
   */
  accountAddress = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin accrued_reward = 2;
   */
  accruedReward?: Coin;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin fee = 3;
   */
  fee?: Coin;

  constructor(data?: PartialMessage<EventYStakingExitPool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.ystaking.v1.EventYStakingExitPool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "accrued_reward", kind: "message", T: Coin },
    { no: 3, name: "fee", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventYStakingExitPool {
    return new EventYStakingExitPool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventYStakingExitPool {
    return new EventYStakingExitPool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventYStakingExitPool {
    return new EventYStakingExitPool().fromJsonString(jsonString, options);
  }

  static equals(a: EventYStakingExitPool | PlainMessage<EventYStakingExitPool> | undefined, b: EventYStakingExitPool | PlainMessage<EventYStakingExitPool> | undefined): boolean {
    return proto3.util.equals(EventYStakingExitPool, a, b);
  }
}

/**
 * @generated from message pryzm.ystaking.v1.EventYStakingClaimReward
 */
export class EventYStakingClaimReward extends Message<EventYStakingClaimReward> {
  /**
   * @generated from field: string account_address = 1;
   */
  accountAddress = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin accrued_reward = 2;
   */
  accruedReward?: Coin;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin fee = 3;
   */
  fee?: Coin;

  constructor(data?: PartialMessage<EventYStakingClaimReward>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.ystaking.v1.EventYStakingClaimReward";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "accrued_reward", kind: "message", T: Coin },
    { no: 3, name: "fee", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventYStakingClaimReward {
    return new EventYStakingClaimReward().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventYStakingClaimReward {
    return new EventYStakingClaimReward().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventYStakingClaimReward {
    return new EventYStakingClaimReward().fromJsonString(jsonString, options);
  }

  static equals(a: EventYStakingClaimReward | PlainMessage<EventYStakingClaimReward> | undefined, b: EventYStakingClaimReward | PlainMessage<EventYStakingClaimReward> | undefined): boolean {
    return proto3.util.equals(EventYStakingClaimReward, a, b);
  }
}

/**
 * @generated from message pryzm.ystaking.v1.EventDeactivateYStakingMaturityPool
 */
export class EventDeactivateYStakingMaturityPool extends Message<EventDeactivateYStakingMaturityPool> {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin burnt_bonded_amount = 1;
   */
  burntBondedAmount?: Coin;

  /**
   * @generated from field: string asset_id = 2;
   */
  assetId = "";

  /**
   * @generated from field: string maturity_symbol = 3;
   */
  maturitySymbol = "";

  constructor(data?: PartialMessage<EventDeactivateYStakingMaturityPool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.ystaking.v1.EventDeactivateYStakingMaturityPool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "burnt_bonded_amount", kind: "message", T: Coin },
    { no: 2, name: "asset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "maturity_symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventDeactivateYStakingMaturityPool {
    return new EventDeactivateYStakingMaturityPool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventDeactivateYStakingMaturityPool {
    return new EventDeactivateYStakingMaturityPool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventDeactivateYStakingMaturityPool {
    return new EventDeactivateYStakingMaturityPool().fromJsonString(jsonString, options);
  }

  static equals(a: EventDeactivateYStakingMaturityPool | PlainMessage<EventDeactivateYStakingMaturityPool> | undefined, b: EventDeactivateYStakingMaturityPool | PlainMessage<EventDeactivateYStakingMaturityPool> | undefined): boolean {
    return proto3.util.equals(EventDeactivateYStakingMaturityPool, a, b);
  }
}

/**
 * @generated from message pryzm.ystaking.v1.EventSetUserStakeState
 */
export class EventSetUserStakeState extends Message<EventSetUserStakeState> {
  /**
   * @generated from field: pryzm.ystaking.v1.UserStakeState user_stake_state = 1;
   */
  userStakeState?: UserStakeState;

  constructor(data?: PartialMessage<EventSetUserStakeState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.ystaking.v1.EventSetUserStakeState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_stake_state", kind: "message", T: UserStakeState },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSetUserStakeState {
    return new EventSetUserStakeState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSetUserStakeState {
    return new EventSetUserStakeState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSetUserStakeState {
    return new EventSetUserStakeState().fromJsonString(jsonString, options);
  }

  static equals(a: EventSetUserStakeState | PlainMessage<EventSetUserStakeState> | undefined, b: EventSetUserStakeState | PlainMessage<EventSetUserStakeState> | undefined): boolean {
    return proto3.util.equals(EventSetUserStakeState, a, b);
  }
}

/**
 * @generated from message pryzm.ystaking.v1.EventSetAssetPoolState
 */
export class EventSetAssetPoolState extends Message<EventSetAssetPoolState> {
  /**
   * @generated from field: pryzm.ystaking.v1.AssetPoolState asset_pool_state = 1;
   */
  assetPoolState?: AssetPoolState;

  constructor(data?: PartialMessage<EventSetAssetPoolState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.ystaking.v1.EventSetAssetPoolState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "asset_pool_state", kind: "message", T: AssetPoolState },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSetAssetPoolState {
    return new EventSetAssetPoolState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSetAssetPoolState {
    return new EventSetAssetPoolState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSetAssetPoolState {
    return new EventSetAssetPoolState().fromJsonString(jsonString, options);
  }

  static equals(a: EventSetAssetPoolState | PlainMessage<EventSetAssetPoolState> | undefined, b: EventSetAssetPoolState | PlainMessage<EventSetAssetPoolState> | undefined): boolean {
    return proto3.util.equals(EventSetAssetPoolState, a, b);
  }
}

/**
 * @generated from message pryzm.ystaking.v1.EventSetAssetMaturityPoolState
 */
export class EventSetAssetMaturityPoolState extends Message<EventSetAssetMaturityPoolState> {
  /**
   * @generated from field: pryzm.ystaking.v1.AssetMaturityPoolState asset_maturity_pool_state = 1;
   */
  assetMaturityPoolState?: AssetMaturityPoolState;

  constructor(data?: PartialMessage<EventSetAssetMaturityPoolState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.ystaking.v1.EventSetAssetMaturityPoolState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "asset_maturity_pool_state", kind: "message", T: AssetMaturityPoolState },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSetAssetMaturityPoolState {
    return new EventSetAssetMaturityPoolState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSetAssetMaturityPoolState {
    return new EventSetAssetMaturityPoolState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSetAssetMaturityPoolState {
    return new EventSetAssetMaturityPoolState().fromJsonString(jsonString, options);
  }

  static equals(a: EventSetAssetMaturityPoolState | PlainMessage<EventSetAssetMaturityPoolState> | undefined, b: EventSetAssetMaturityPoolState | PlainMessage<EventSetAssetMaturityPoolState> | undefined): boolean {
    return proto3.util.equals(EventSetAssetMaturityPoolState, a, b);
  }
}

/**
 * @generated from message pryzm.ystaking.v1.EventDeleteUserStakeState
 */
export class EventDeleteUserStakeState extends Message<EventDeleteUserStakeState> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: string asset_id = 2;
   */
  assetId = "";

  /**
   * @generated from field: string maturity_symbol = 3;
   */
  maturitySymbol = "";

  constructor(data?: PartialMessage<EventDeleteUserStakeState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.ystaking.v1.EventDeleteUserStakeState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "asset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "maturity_symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventDeleteUserStakeState {
    return new EventDeleteUserStakeState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventDeleteUserStakeState {
    return new EventDeleteUserStakeState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventDeleteUserStakeState {
    return new EventDeleteUserStakeState().fromJsonString(jsonString, options);
  }

  static equals(a: EventDeleteUserStakeState | PlainMessage<EventDeleteUserStakeState> | undefined, b: EventDeleteUserStakeState | PlainMessage<EventDeleteUserStakeState> | undefined): boolean {
    return proto3.util.equals(EventDeleteUserStakeState, a, b);
  }
}

/**
 * @generated from message pryzm.ystaking.v1.EventDeleteAssetPoolState
 */
export class EventDeleteAssetPoolState extends Message<EventDeleteAssetPoolState> {
  /**
   * @generated from field: string asset_id = 1;
   */
  assetId = "";

  constructor(data?: PartialMessage<EventDeleteAssetPoolState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.ystaking.v1.EventDeleteAssetPoolState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "asset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventDeleteAssetPoolState {
    return new EventDeleteAssetPoolState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventDeleteAssetPoolState {
    return new EventDeleteAssetPoolState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventDeleteAssetPoolState {
    return new EventDeleteAssetPoolState().fromJsonString(jsonString, options);
  }

  static equals(a: EventDeleteAssetPoolState | PlainMessage<EventDeleteAssetPoolState> | undefined, b: EventDeleteAssetPoolState | PlainMessage<EventDeleteAssetPoolState> | undefined): boolean {
    return proto3.util.equals(EventDeleteAssetPoolState, a, b);
  }
}

/**
 * @generated from message pryzm.ystaking.v1.EventDeleteAssetMaturityPoolState
 */
export class EventDeleteAssetMaturityPoolState extends Message<EventDeleteAssetMaturityPoolState> {
  /**
   * @generated from field: string asset_id = 1;
   */
  assetId = "";

  /**
   * @generated from field: string maturity_symbol = 2;
   */
  maturitySymbol = "";

  constructor(data?: PartialMessage<EventDeleteAssetMaturityPoolState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.ystaking.v1.EventDeleteAssetMaturityPoolState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "asset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "maturity_symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventDeleteAssetMaturityPoolState {
    return new EventDeleteAssetMaturityPoolState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventDeleteAssetMaturityPoolState {
    return new EventDeleteAssetMaturityPoolState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventDeleteAssetMaturityPoolState {
    return new EventDeleteAssetMaturityPoolState().fromJsonString(jsonString, options);
  }

  static equals(a: EventDeleteAssetMaturityPoolState | PlainMessage<EventDeleteAssetMaturityPoolState> | undefined, b: EventDeleteAssetMaturityPoolState | PlainMessage<EventDeleteAssetMaturityPoolState> | undefined): boolean {
    return proto3.util.equals(EventDeleteAssetMaturityPoolState, a, b);
  }
}

