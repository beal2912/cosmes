// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file pryzm/amm/v1/event.proto (package pryzm.amm.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Pool } from "./pool_pb.js";
import { DisabledOrderPair, Order } from "./order_pb.js";
import { PoolToken } from "./pool_token_pb.js";
import { WeightedToken } from "./weighted_token_pb.js";
import { WeightUpdateTiming } from "./weight_update_timing_pb.js";
import { WhitelistedRoute } from "./whitelisted_route_pb.js";
import { YammConfiguration } from "./yamm_configuration_pb.js";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
import { ScheduleOrder } from "./schedule_order_pb.js";
import { VirtualBalancePoolToken } from "./virtual_balance_pool_token_pb.js";
import { ExitSummary, ExitType, JoinSummary, JoinType, SwapStep, SwapSummary, SwapType } from "./operations_pb.js";
import { OraclePricePair } from "./oracle_price_pair_pb.js";
import { PendingTokenIntroduction } from "./pending_token_introduction_pb.js";
import { Params } from "./params_pb.js";

/**
 * @generated from enum pryzm.amm.v1.RemoveOrderReason
 */
export enum RemoveOrderReason {
  /**
   * @generated from enum value: ORDER_CANCELED = 0;
   */
  ORDER_CANCELED = 0,

  /**
   * @generated from enum value: ORDER_DEPOSIT_FAILED = 1;
   */
  ORDER_DEPOSIT_FAILED = 1,

  /**
   * @generated from enum value: ORDER_FINISHED = 3;
   */
  ORDER_FINISHED = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(RemoveOrderReason)
proto3.util.setEnumType(RemoveOrderReason, "pryzm.amm.v1.RemoveOrderReason", [
  { no: 0, name: "ORDER_CANCELED" },
  { no: 1, name: "ORDER_DEPOSIT_FAILED" },
  { no: 3, name: "ORDER_FINISHED" },
]);

/**
 * @generated from message pryzm.amm.v1.EventSetPool
 */
export class EventSetPool extends Message<EventSetPool> {
  /**
   * @generated from field: pryzm.amm.v1.Pool pool = 1;
   */
  pool?: Pool;

  constructor(data?: PartialMessage<EventSetPool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.EventSetPool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool", kind: "message", T: Pool },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSetPool {
    return new EventSetPool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSetPool {
    return new EventSetPool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSetPool {
    return new EventSetPool().fromJsonString(jsonString, options);
  }

  static equals(a: EventSetPool | PlainMessage<EventSetPool> | undefined, b: EventSetPool | PlainMessage<EventSetPool> | undefined): boolean {
    return proto3.util.equals(EventSetPool, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.EventSetPoolCount
 */
export class EventSetPoolCount extends Message<EventSetPoolCount> {
  /**
   * @generated from field: uint64 pool_count = 1;
   */
  poolCount = protoInt64.zero;

  constructor(data?: PartialMessage<EventSetPoolCount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.EventSetPoolCount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSetPoolCount {
    return new EventSetPoolCount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSetPoolCount {
    return new EventSetPoolCount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSetPoolCount {
    return new EventSetPoolCount().fromJsonString(jsonString, options);
  }

  static equals(a: EventSetPoolCount | PlainMessage<EventSetPoolCount> | undefined, b: EventSetPoolCount | PlainMessage<EventSetPoolCount> | undefined): boolean {
    return proto3.util.equals(EventSetPoolCount, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.EventSetOrderPairDisabled
 */
export class EventSetOrderPairDisabled extends Message<EventSetOrderPairDisabled> {
  /**
   * note token_in and token_out are bi-directional
   * meaning disabling token_in=x,token_out=y is
   * disabling token_in=y,token_out=x at the same time.
   *
   * @generated from field: pryzm.amm.v1.DisabledOrderPair pair = 1;
   */
  pair?: DisabledOrderPair;

  /**
   * @generated from field: bool disabled = 2;
   */
  disabled = false;

  constructor(data?: PartialMessage<EventSetOrderPairDisabled>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.EventSetOrderPairDisabled";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pair", kind: "message", T: DisabledOrderPair },
    { no: 2, name: "disabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSetOrderPairDisabled {
    return new EventSetOrderPairDisabled().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSetOrderPairDisabled {
    return new EventSetOrderPairDisabled().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSetOrderPairDisabled {
    return new EventSetOrderPairDisabled().fromJsonString(jsonString, options);
  }

  static equals(a: EventSetOrderPairDisabled | PlainMessage<EventSetOrderPairDisabled> | undefined, b: EventSetOrderPairDisabled | PlainMessage<EventSetOrderPairDisabled> | undefined): boolean {
    return proto3.util.equals(EventSetOrderPairDisabled, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.EventSetLpTokenSupply
 */
export class EventSetLpTokenSupply extends Message<EventSetLpTokenSupply> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: string supply = 2;
   */
  supply = "";

  constructor(data?: PartialMessage<EventSetLpTokenSupply>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.EventSetLpTokenSupply";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "supply", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSetLpTokenSupply {
    return new EventSetLpTokenSupply().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSetLpTokenSupply {
    return new EventSetLpTokenSupply().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSetLpTokenSupply {
    return new EventSetLpTokenSupply().fromJsonString(jsonString, options);
  }

  static equals(a: EventSetLpTokenSupply | PlainMessage<EventSetLpTokenSupply> | undefined, b: EventSetLpTokenSupply | PlainMessage<EventSetLpTokenSupply> | undefined): boolean {
    return proto3.util.equals(EventSetLpTokenSupply, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.EventSetPoolToken
 */
export class EventSetPoolToken extends Message<EventSetPoolToken> {
  /**
   * @generated from field: pryzm.amm.v1.PoolToken pool_token = 1;
   */
  poolToken?: PoolToken;

  constructor(data?: PartialMessage<EventSetPoolToken>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.EventSetPoolToken";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_token", kind: "message", T: PoolToken },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSetPoolToken {
    return new EventSetPoolToken().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSetPoolToken {
    return new EventSetPoolToken().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSetPoolToken {
    return new EventSetPoolToken().fromJsonString(jsonString, options);
  }

  static equals(a: EventSetPoolToken | PlainMessage<EventSetPoolToken> | undefined, b: EventSetPoolToken | PlainMessage<EventSetPoolToken> | undefined): boolean {
    return proto3.util.equals(EventSetPoolToken, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.EventRemovePoolToken
 */
export class EventRemovePoolToken extends Message<EventRemovePoolToken> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: string denom = 2;
   */
  denom = "";

  constructor(data?: PartialMessage<EventRemovePoolToken>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.EventRemovePoolToken";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventRemovePoolToken {
    return new EventRemovePoolToken().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventRemovePoolToken {
    return new EventRemovePoolToken().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventRemovePoolToken {
    return new EventRemovePoolToken().fromJsonString(jsonString, options);
  }

  static equals(a: EventRemovePoolToken | PlainMessage<EventRemovePoolToken> | undefined, b: EventRemovePoolToken | PlainMessage<EventRemovePoolToken> | undefined): boolean {
    return proto3.util.equals(EventRemovePoolToken, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.EventSetWeightedToken
 */
export class EventSetWeightedToken extends Message<EventSetWeightedToken> {
  /**
   * @generated from field: pryzm.amm.v1.WeightedToken weighted_token = 1;
   */
  weightedToken?: WeightedToken;

  constructor(data?: PartialMessage<EventSetWeightedToken>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.EventSetWeightedToken";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "weighted_token", kind: "message", T: WeightedToken },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSetWeightedToken {
    return new EventSetWeightedToken().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSetWeightedToken {
    return new EventSetWeightedToken().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSetWeightedToken {
    return new EventSetWeightedToken().fromJsonString(jsonString, options);
  }

  static equals(a: EventSetWeightedToken | PlainMessage<EventSetWeightedToken> | undefined, b: EventSetWeightedToken | PlainMessage<EventSetWeightedToken> | undefined): boolean {
    return proto3.util.equals(EventSetWeightedToken, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.EventRemoveWeightedToken
 */
export class EventRemoveWeightedToken extends Message<EventRemoveWeightedToken> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: string denom = 2;
   */
  denom = "";

  constructor(data?: PartialMessage<EventRemoveWeightedToken>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.EventRemoveWeightedToken";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventRemoveWeightedToken {
    return new EventRemoveWeightedToken().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventRemoveWeightedToken {
    return new EventRemoveWeightedToken().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventRemoveWeightedToken {
    return new EventRemoveWeightedToken().fromJsonString(jsonString, options);
  }

  static equals(a: EventRemoveWeightedToken | PlainMessage<EventRemoveWeightedToken> | undefined, b: EventRemoveWeightedToken | PlainMessage<EventRemoveWeightedToken> | undefined): boolean {
    return proto3.util.equals(EventRemoveWeightedToken, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.EventSetWeightUpdateTiming
 */
export class EventSetWeightUpdateTiming extends Message<EventSetWeightUpdateTiming> {
  /**
   * @generated from field: pryzm.amm.v1.WeightUpdateTiming weight_update_timing = 1;
   */
  weightUpdateTiming?: WeightUpdateTiming;

  constructor(data?: PartialMessage<EventSetWeightUpdateTiming>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.EventSetWeightUpdateTiming";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "weight_update_timing", kind: "message", T: WeightUpdateTiming },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSetWeightUpdateTiming {
    return new EventSetWeightUpdateTiming().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSetWeightUpdateTiming {
    return new EventSetWeightUpdateTiming().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSetWeightUpdateTiming {
    return new EventSetWeightUpdateTiming().fromJsonString(jsonString, options);
  }

  static equals(a: EventSetWeightUpdateTiming | PlainMessage<EventSetWeightUpdateTiming> | undefined, b: EventSetWeightUpdateTiming | PlainMessage<EventSetWeightUpdateTiming> | undefined): boolean {
    return proto3.util.equals(EventSetWeightUpdateTiming, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.EventSetWhitelistedRoute
 */
export class EventSetWhitelistedRoute extends Message<EventSetWhitelistedRoute> {
  /**
   * @generated from field: pryzm.amm.v1.WhitelistedRoute whitelisted_route = 1;
   */
  whitelistedRoute?: WhitelistedRoute;

  constructor(data?: PartialMessage<EventSetWhitelistedRoute>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.EventSetWhitelistedRoute";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "whitelisted_route", kind: "message", T: WhitelistedRoute },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSetWhitelistedRoute {
    return new EventSetWhitelistedRoute().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSetWhitelistedRoute {
    return new EventSetWhitelistedRoute().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSetWhitelistedRoute {
    return new EventSetWhitelistedRoute().fromJsonString(jsonString, options);
  }

  static equals(a: EventSetWhitelistedRoute | PlainMessage<EventSetWhitelistedRoute> | undefined, b: EventSetWhitelistedRoute | PlainMessage<EventSetWhitelistedRoute> | undefined): boolean {
    return proto3.util.equals(EventSetWhitelistedRoute, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.EventSetYammConfiguration
 */
export class EventSetYammConfiguration extends Message<EventSetYammConfiguration> {
  /**
   * @generated from field: pryzm.amm.v1.YammConfiguration yamm_configuration = 1;
   */
  yammConfiguration?: YammConfiguration;

  constructor(data?: PartialMessage<EventSetYammConfiguration>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.EventSetYammConfiguration";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "yamm_configuration", kind: "message", T: YammConfiguration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSetYammConfiguration {
    return new EventSetYammConfiguration().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSetYammConfiguration {
    return new EventSetYammConfiguration().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSetYammConfiguration {
    return new EventSetYammConfiguration().fromJsonString(jsonString, options);
  }

  static equals(a: EventSetYammConfiguration | PlainMessage<EventSetYammConfiguration> | undefined, b: EventSetYammConfiguration | PlainMessage<EventSetYammConfiguration> | undefined): boolean {
    return proto3.util.equals(EventSetYammConfiguration, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.EventSetOrder
 */
export class EventSetOrder extends Message<EventSetOrder> {
  /**
   * @generated from field: pryzm.amm.v1.Order order = 1;
   */
  order?: Order;

  constructor(data?: PartialMessage<EventSetOrder>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.EventSetOrder";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order", kind: "message", T: Order },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSetOrder {
    return new EventSetOrder().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSetOrder {
    return new EventSetOrder().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSetOrder {
    return new EventSetOrder().fromJsonString(jsonString, options);
  }

  static equals(a: EventSetOrder | PlainMessage<EventSetOrder> | undefined, b: EventSetOrder | PlainMessage<EventSetOrder> | undefined): boolean {
    return proto3.util.equals(EventSetOrder, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.EventSetOrderCount
 */
export class EventSetOrderCount extends Message<EventSetOrderCount> {
  /**
   * @generated from field: uint64 order_count = 1;
   */
  orderCount = protoInt64.zero;

  constructor(data?: PartialMessage<EventSetOrderCount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.EventSetOrderCount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSetOrderCount {
    return new EventSetOrderCount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSetOrderCount {
    return new EventSetOrderCount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSetOrderCount {
    return new EventSetOrderCount().fromJsonString(jsonString, options);
  }

  static equals(a: EventSetOrderCount | PlainMessage<EventSetOrderCount> | undefined, b: EventSetOrderCount | PlainMessage<EventSetOrderCount> | undefined): boolean {
    return proto3.util.equals(EventSetOrderCount, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.EventRemoveOrder
 */
export class EventRemoveOrder extends Message<EventRemoveOrder> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: pryzm.amm.v1.RemoveOrderReason reason = 2;
   */
  reason = RemoveOrderReason.ORDER_CANCELED;

  constructor(data?: PartialMessage<EventRemoveOrder>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.EventRemoveOrder";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "reason", kind: "enum", T: proto3.getEnumType(RemoveOrderReason) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventRemoveOrder {
    return new EventRemoveOrder().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventRemoveOrder {
    return new EventRemoveOrder().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventRemoveOrder {
    return new EventRemoveOrder().fromJsonString(jsonString, options);
  }

  static equals(a: EventRemoveOrder | PlainMessage<EventRemoveOrder> | undefined, b: EventRemoveOrder | PlainMessage<EventRemoveOrder> | undefined): boolean {
    return proto3.util.equals(EventRemoveOrder, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.EventCancelOrder
 */
export class EventCancelOrder extends Message<EventCancelOrder> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin withdrawn_amount = 2;
   */
  withdrawnAmount?: Coin;

  constructor(data?: PartialMessage<EventCancelOrder>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.EventCancelOrder";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "withdrawn_amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventCancelOrder {
    return new EventCancelOrder().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventCancelOrder {
    return new EventCancelOrder().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventCancelOrder {
    return new EventCancelOrder().fromJsonString(jsonString, options);
  }

  static equals(a: EventCancelOrder | PlainMessage<EventCancelOrder> | undefined, b: EventCancelOrder | PlainMessage<EventCancelOrder> | undefined): boolean {
    return proto3.util.equals(EventCancelOrder, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.EventSetScheduleOrder
 */
export class EventSetScheduleOrder extends Message<EventSetScheduleOrder> {
  /**
   * @generated from field: pryzm.amm.v1.ScheduleOrder schedule_order = 1;
   */
  scheduleOrder?: ScheduleOrder;

  constructor(data?: PartialMessage<EventSetScheduleOrder>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.EventSetScheduleOrder";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schedule_order", kind: "message", T: ScheduleOrder },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSetScheduleOrder {
    return new EventSetScheduleOrder().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSetScheduleOrder {
    return new EventSetScheduleOrder().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSetScheduleOrder {
    return new EventSetScheduleOrder().fromJsonString(jsonString, options);
  }

  static equals(a: EventSetScheduleOrder | PlainMessage<EventSetScheduleOrder> | undefined, b: EventSetScheduleOrder | PlainMessage<EventSetScheduleOrder> | undefined): boolean {
    return proto3.util.equals(EventSetScheduleOrder, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.EventRemoveScheduleOrder
 */
export class EventRemoveScheduleOrder extends Message<EventRemoveScheduleOrder> {
  /**
   * @generated from field: uint64 order_id = 1;
   */
  orderId = protoInt64.zero;

  /**
   * @generated from field: int64 time_millis = 2;
   */
  timeMillis = protoInt64.zero;

  constructor(data?: PartialMessage<EventRemoveScheduleOrder>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.EventRemoveScheduleOrder";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "time_millis", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventRemoveScheduleOrder {
    return new EventRemoveScheduleOrder().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventRemoveScheduleOrder {
    return new EventRemoveScheduleOrder().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventRemoveScheduleOrder {
    return new EventRemoveScheduleOrder().fromJsonString(jsonString, options);
  }

  static equals(a: EventRemoveScheduleOrder | PlainMessage<EventRemoveScheduleOrder> | undefined, b: EventRemoveScheduleOrder | PlainMessage<EventRemoveScheduleOrder> | undefined): boolean {
    return proto3.util.equals(EventRemoveScheduleOrder, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.EventSetExecutableOrder
 */
export class EventSetExecutableOrder extends Message<EventSetExecutableOrder> {
  /**
   * @generated from field: uint64 order_id = 1;
   */
  orderId = protoInt64.zero;

  constructor(data?: PartialMessage<EventSetExecutableOrder>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.EventSetExecutableOrder";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSetExecutableOrder {
    return new EventSetExecutableOrder().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSetExecutableOrder {
    return new EventSetExecutableOrder().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSetExecutableOrder {
    return new EventSetExecutableOrder().fromJsonString(jsonString, options);
  }

  static equals(a: EventSetExecutableOrder | PlainMessage<EventSetExecutableOrder> | undefined, b: EventSetExecutableOrder | PlainMessage<EventSetExecutableOrder> | undefined): boolean {
    return proto3.util.equals(EventSetExecutableOrder, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.EventRemoveExecutableOrder
 */
export class EventRemoveExecutableOrder extends Message<EventRemoveExecutableOrder> {
  /**
   * @generated from field: uint64 order_id = 1;
   */
  orderId = protoInt64.zero;

  constructor(data?: PartialMessage<EventRemoveExecutableOrder>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.EventRemoveExecutableOrder";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventRemoveExecutableOrder {
    return new EventRemoveExecutableOrder().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventRemoveExecutableOrder {
    return new EventRemoveExecutableOrder().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventRemoveExecutableOrder {
    return new EventRemoveExecutableOrder().fromJsonString(jsonString, options);
  }

  static equals(a: EventRemoveExecutableOrder | PlainMessage<EventRemoveExecutableOrder> | undefined, b: EventRemoveExecutableOrder | PlainMessage<EventRemoveExecutableOrder> | undefined): boolean {
    return proto3.util.equals(EventRemoveExecutableOrder, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.EventSetIntroducingPoolToken
 */
export class EventSetIntroducingPoolToken extends Message<EventSetIntroducingPoolToken> {
  /**
   * @generated from field: pryzm.amm.v1.VirtualBalancePoolToken virtual_balance_token = 1;
   */
  virtualBalanceToken?: VirtualBalancePoolToken;

  constructor(data?: PartialMessage<EventSetIntroducingPoolToken>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.EventSetIntroducingPoolToken";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "virtual_balance_token", kind: "message", T: VirtualBalancePoolToken },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSetIntroducingPoolToken {
    return new EventSetIntroducingPoolToken().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSetIntroducingPoolToken {
    return new EventSetIntroducingPoolToken().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSetIntroducingPoolToken {
    return new EventSetIntroducingPoolToken().fromJsonString(jsonString, options);
  }

  static equals(a: EventSetIntroducingPoolToken | PlainMessage<EventSetIntroducingPoolToken> | undefined, b: EventSetIntroducingPoolToken | PlainMessage<EventSetIntroducingPoolToken> | undefined): boolean {
    return proto3.util.equals(EventSetIntroducingPoolToken, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.EventRemoveIntroducingPoolToken
 */
export class EventRemoveIntroducingPoolToken extends Message<EventRemoveIntroducingPoolToken> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: string denom = 2;
   */
  denom = "";

  constructor(data?: PartialMessage<EventRemoveIntroducingPoolToken>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.EventRemoveIntroducingPoolToken";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventRemoveIntroducingPoolToken {
    return new EventRemoveIntroducingPoolToken().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventRemoveIntroducingPoolToken {
    return new EventRemoveIntroducingPoolToken().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventRemoveIntroducingPoolToken {
    return new EventRemoveIntroducingPoolToken().fromJsonString(jsonString, options);
  }

  static equals(a: EventRemoveIntroducingPoolToken | PlainMessage<EventRemoveIntroducingPoolToken> | undefined, b: EventRemoveIntroducingPoolToken | PlainMessage<EventRemoveIntroducingPoolToken> | undefined): boolean {
    return proto3.util.equals(EventRemoveIntroducingPoolToken, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.EventSetExpiringPoolToken
 */
export class EventSetExpiringPoolToken extends Message<EventSetExpiringPoolToken> {
  /**
   * @generated from field: pryzm.amm.v1.VirtualBalancePoolToken virtual_balance_token = 1;
   */
  virtualBalanceToken?: VirtualBalancePoolToken;

  constructor(data?: PartialMessage<EventSetExpiringPoolToken>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.EventSetExpiringPoolToken";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "virtual_balance_token", kind: "message", T: VirtualBalancePoolToken },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSetExpiringPoolToken {
    return new EventSetExpiringPoolToken().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSetExpiringPoolToken {
    return new EventSetExpiringPoolToken().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSetExpiringPoolToken {
    return new EventSetExpiringPoolToken().fromJsonString(jsonString, options);
  }

  static equals(a: EventSetExpiringPoolToken | PlainMessage<EventSetExpiringPoolToken> | undefined, b: EventSetExpiringPoolToken | PlainMessage<EventSetExpiringPoolToken> | undefined): boolean {
    return proto3.util.equals(EventSetExpiringPoolToken, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.EventRemoveExpiringPoolToken
 */
export class EventRemoveExpiringPoolToken extends Message<EventRemoveExpiringPoolToken> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: string denom = 2;
   */
  denom = "";

  constructor(data?: PartialMessage<EventRemoveExpiringPoolToken>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.EventRemoveExpiringPoolToken";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventRemoveExpiringPoolToken {
    return new EventRemoveExpiringPoolToken().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventRemoveExpiringPoolToken {
    return new EventRemoveExpiringPoolToken().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventRemoveExpiringPoolToken {
    return new EventRemoveExpiringPoolToken().fromJsonString(jsonString, options);
  }

  static equals(a: EventRemoveExpiringPoolToken | PlainMessage<EventRemoveExpiringPoolToken> | undefined, b: EventRemoveExpiringPoolToken | PlainMessage<EventRemoveExpiringPoolToken> | undefined): boolean {
    return proto3.util.equals(EventRemoveExpiringPoolToken, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.EventSetYammPoolForAssetId
 */
export class EventSetYammPoolForAssetId extends Message<EventSetYammPoolForAssetId> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: string asset_id = 2;
   */
  assetId = "";

  constructor(data?: PartialMessage<EventSetYammPoolForAssetId>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.EventSetYammPoolForAssetId";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "asset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSetYammPoolForAssetId {
    return new EventSetYammPoolForAssetId().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSetYammPoolForAssetId {
    return new EventSetYammPoolForAssetId().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSetYammPoolForAssetId {
    return new EventSetYammPoolForAssetId().fromJsonString(jsonString, options);
  }

  static equals(a: EventSetYammPoolForAssetId | PlainMessage<EventSetYammPoolForAssetId> | undefined, b: EventSetYammPoolForAssetId | PlainMessage<EventSetYammPoolForAssetId> | undefined): boolean {
    return proto3.util.equals(EventSetYammPoolForAssetId, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.EventSetVaultPaused
 */
export class EventSetVaultPaused extends Message<EventSetVaultPaused> {
  /**
   * @generated from field: bool paused = 1;
   */
  paused = false;

  constructor(data?: PartialMessage<EventSetVaultPaused>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.EventSetVaultPaused";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "paused", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSetVaultPaused {
    return new EventSetVaultPaused().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSetVaultPaused {
    return new EventSetVaultPaused().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSetVaultPaused {
    return new EventSetVaultPaused().fromJsonString(jsonString, options);
  }

  static equals(a: EventSetVaultPaused | PlainMessage<EventSetVaultPaused> | undefined, b: EventSetVaultPaused | PlainMessage<EventSetVaultPaused> | undefined): boolean {
    return proto3.util.equals(EventSetVaultPaused, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.EventExecuteOrder
 */
export class EventExecuteOrder extends Message<EventExecuteOrder> {
  /**
   * @generated from field: uint64 order_id = 1;
   */
  orderId = protoInt64.zero;

  /**
   * @generated from field: string trade_amount = 2;
   */
  tradeAmount = "";

  /**
   * @generated from field: string match_amount = 3;
   */
  matchAmount = "";

  /**
   * @generated from field: string output_amount = 4;
   */
  outputAmount = "";

  constructor(data?: PartialMessage<EventExecuteOrder>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.EventExecuteOrder";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "trade_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "match_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "output_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventExecuteOrder {
    return new EventExecuteOrder().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventExecuteOrder {
    return new EventExecuteOrder().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventExecuteOrder {
    return new EventExecuteOrder().fromJsonString(jsonString, options);
  }

  static equals(a: EventExecuteOrder | PlainMessage<EventExecuteOrder> | undefined, b: EventExecuteOrder | PlainMessage<EventExecuteOrder> | undefined): boolean {
    return proto3.util.equals(EventExecuteOrder, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.EventExecuteOrdersForPair
 */
export class EventExecuteOrdersForPair extends Message<EventExecuteOrdersForPair> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: string token_in = 2;
   */
  tokenIn = "";

  /**
   * @generated from field: string token_out = 3;
   */
  tokenOut = "";

  /**
   * @generated from field: bool whitelisted_route = 4;
   */
  whitelistedRoute = false;

  /**
   * @generated from field: string buy_price = 5;
   */
  buyPrice = "";

  /**
   * @generated from field: string sell_price = 6;
   */
  sellPrice = "";

  /**
   * @generated from field: repeated pryzm.amm.v1.EventExecuteOrder buy_orders = 7;
   */
  buyOrders: EventExecuteOrder[] = [];

  /**
   * @generated from field: repeated pryzm.amm.v1.EventExecuteOrder sell_orders = 8;
   */
  sellOrders: EventExecuteOrder[] = [];

  /**
   * @generated from field: string buy_trade_amount = 9;
   */
  buyTradeAmount = "";

  /**
   * @generated from field: string buy_match_amount = 10;
   */
  buyMatchAmount = "";

  /**
   * @generated from field: string sell_trade_amount = 11;
   */
  sellTradeAmount = "";

  /**
   * @generated from field: string sell_match_amount = 12;
   */
  sellMatchAmount = "";

  /**
   * @generated from field: string sell_trade_output = 13;
   */
  sellTradeOutput = "";

  /**
   * @generated from field: string buy_trade_output = 14;
   */
  buyTradeOutput = "";

  constructor(data?: PartialMessage<EventExecuteOrdersForPair>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.EventExecuteOrdersForPair";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "token_in", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "token_out", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "whitelisted_route", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "buy_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "sell_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "buy_orders", kind: "message", T: EventExecuteOrder, repeated: true },
    { no: 8, name: "sell_orders", kind: "message", T: EventExecuteOrder, repeated: true },
    { no: 9, name: "buy_trade_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "buy_match_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "sell_trade_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "sell_match_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "sell_trade_output", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "buy_trade_output", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventExecuteOrdersForPair {
    return new EventExecuteOrdersForPair().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventExecuteOrdersForPair {
    return new EventExecuteOrdersForPair().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventExecuteOrdersForPair {
    return new EventExecuteOrdersForPair().fromJsonString(jsonString, options);
  }

  static equals(a: EventExecuteOrdersForPair | PlainMessage<EventExecuteOrdersForPair> | undefined, b: EventExecuteOrdersForPair | PlainMessage<EventExecuteOrdersForPair> | undefined): boolean {
    return proto3.util.equals(EventExecuteOrdersForPair, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.EventExecuteMatchProposalOrder
 */
export class EventExecuteMatchProposalOrder extends Message<EventExecuteMatchProposalOrder> {
  /**
   * Note that if virtual=true, order_id is set to zero and should be ignored,
   * otherwise we still might have order_id=0 referring to an actual order
   *
   * @generated from field: uint64 order_id = 1;
   */
  orderId = protoInt64.zero;

  /**
   * @generated from field: string match_amount = 3;
   */
  matchAmount = "";

  /**
   * @generated from field: string output_amount = 4;
   */
  outputAmount = "";

  /**
   * @generated from field: bool virtual = 5;
   */
  virtual = false;

  constructor(data?: PartialMessage<EventExecuteMatchProposalOrder>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.EventExecuteMatchProposalOrder";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "match_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "output_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "virtual", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventExecuteMatchProposalOrder {
    return new EventExecuteMatchProposalOrder().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventExecuteMatchProposalOrder {
    return new EventExecuteMatchProposalOrder().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventExecuteMatchProposalOrder {
    return new EventExecuteMatchProposalOrder().fromJsonString(jsonString, options);
  }

  static equals(a: EventExecuteMatchProposalOrder | PlainMessage<EventExecuteMatchProposalOrder> | undefined, b: EventExecuteMatchProposalOrder | PlainMessage<EventExecuteMatchProposalOrder> | undefined): boolean {
    return proto3.util.equals(EventExecuteMatchProposalOrder, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.EventExecuteMatchProposalPair
 */
export class EventExecuteMatchProposalPair extends Message<EventExecuteMatchProposalPair> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: string token_in = 2;
   */
  tokenIn = "";

  /**
   * @generated from field: string token_out = 3;
   */
  tokenOut = "";

  /**
   * @generated from field: bool whitelisted_route = 4;
   */
  whitelistedRoute = false;

  /**
   * @generated from field: string buy_price = 5;
   */
  buyPrice = "";

  /**
   * @generated from field: string sell_price = 6;
   */
  sellPrice = "";

  /**
   * @generated from field: repeated pryzm.amm.v1.EventExecuteMatchProposalOrder buy_orders = 7;
   */
  buyOrders: EventExecuteMatchProposalOrder[] = [];

  /**
   * @generated from field: repeated pryzm.amm.v1.EventExecuteMatchProposalOrder sell_orders = 8;
   */
  sellOrders: EventExecuteMatchProposalOrder[] = [];

  /**
   * @generated from field: string buy_match_amount = 9;
   */
  buyMatchAmount = "";

  /**
   * @generated from field: string sell_match_amount = 10;
   */
  sellMatchAmount = "";

  constructor(data?: PartialMessage<EventExecuteMatchProposalPair>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.EventExecuteMatchProposalPair";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "token_in", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "token_out", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "whitelisted_route", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "buy_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "sell_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "buy_orders", kind: "message", T: EventExecuteMatchProposalOrder, repeated: true },
    { no: 8, name: "sell_orders", kind: "message", T: EventExecuteMatchProposalOrder, repeated: true },
    { no: 9, name: "buy_match_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "sell_match_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventExecuteMatchProposalPair {
    return new EventExecuteMatchProposalPair().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventExecuteMatchProposalPair {
    return new EventExecuteMatchProposalPair().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventExecuteMatchProposalPair {
    return new EventExecuteMatchProposalPair().fromJsonString(jsonString, options);
  }

  static equals(a: EventExecuteMatchProposalPair | PlainMessage<EventExecuteMatchProposalPair> | undefined, b: EventExecuteMatchProposalPair | PlainMessage<EventExecuteMatchProposalPair> | undefined): boolean {
    return proto3.util.equals(EventExecuteMatchProposalPair, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.EventExecuteMatchProposal
 */
export class EventExecuteMatchProposal extends Message<EventExecuteMatchProposal> {
  /**
   * @generated from field: string proposer = 1;
   */
  proposer = "";

  /**
   * @generated from field: repeated pryzm.amm.v1.EventExecuteMatchProposalPair pairs = 2;
   */
  pairs: EventExecuteMatchProposalPair[] = [];

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin proposer_reward = 3;
   */
  proposerReward: Coin[] = [];

  constructor(data?: PartialMessage<EventExecuteMatchProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.EventExecuteMatchProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "proposer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pairs", kind: "message", T: EventExecuteMatchProposalPair, repeated: true },
    { no: 3, name: "proposer_reward", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventExecuteMatchProposal {
    return new EventExecuteMatchProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventExecuteMatchProposal {
    return new EventExecuteMatchProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventExecuteMatchProposal {
    return new EventExecuteMatchProposal().fromJsonString(jsonString, options);
  }

  static equals(a: EventExecuteMatchProposal | PlainMessage<EventExecuteMatchProposal> | undefined, b: EventExecuteMatchProposal | PlainMessage<EventExecuteMatchProposal> | undefined): boolean {
    return proto3.util.equals(EventExecuteMatchProposal, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.EventExitPool
 */
export class EventExitPool extends Message<EventExitPool> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: pryzm.amm.v1.ExitSummary summary = 2;
   */
  summary?: ExitSummary;

  constructor(data?: PartialMessage<EventExitPool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.EventExitPool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "summary", kind: "message", T: ExitSummary },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventExitPool {
    return new EventExitPool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventExitPool {
    return new EventExitPool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventExitPool {
    return new EventExitPool().fromJsonString(jsonString, options);
  }

  static equals(a: EventExitPool | PlainMessage<EventExitPool> | undefined, b: EventExitPool | PlainMessage<EventExitPool> | undefined): boolean {
    return proto3.util.equals(EventExitPool, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.EventJoinPool
 */
export class EventJoinPool extends Message<EventJoinPool> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: pryzm.amm.v1.JoinSummary summary = 2;
   */
  summary?: JoinSummary;

  constructor(data?: PartialMessage<EventJoinPool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.EventJoinPool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "summary", kind: "message", T: JoinSummary },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventJoinPool {
    return new EventJoinPool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventJoinPool {
    return new EventJoinPool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventJoinPool {
    return new EventJoinPool().fromJsonString(jsonString, options);
  }

  static equals(a: EventJoinPool | PlainMessage<EventJoinPool> | undefined, b: EventJoinPool | PlainMessage<EventJoinPool> | undefined): boolean {
    return proto3.util.equals(EventJoinPool, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.EventSwap
 */
export class EventSwap extends Message<EventSwap> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: pryzm.amm.v1.SwapSummary summary = 2;
   */
  summary?: SwapSummary;

  constructor(data?: PartialMessage<EventSwap>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.EventSwap";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "summary", kind: "message", T: SwapSummary },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSwap {
    return new EventSwap().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSwap {
    return new EventSwap().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSwap {
    return new EventSwap().fromJsonString(jsonString, options);
  }

  static equals(a: EventSwap | PlainMessage<EventSwap> | undefined, b: EventSwap | PlainMessage<EventSwap> | undefined): boolean {
    return proto3.util.equals(EventSwap, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.EventExitPoolRequest
 */
export class EventExitPoolRequest extends Message<EventExitPoolRequest> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: uint64 pool_id = 2;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin lpt_in = 3;
   */
  lptIn?: Coin;

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin amounts_out = 4;
   */
  amountsOut: Coin[] = [];

  /**
   * @generated from field: cosmos.base.v1beta1.Coin protocol_fee = 5;
   */
  protocolFee?: Coin;

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin swap_fee = 6;
   */
  swapFee: Coin[] = [];

  /**
   * @generated from field: pryzm.amm.v1.ExitType exit_type = 7;
   */
  exitType = ExitType.GIVEN_TOKENS_IN;

  constructor(data?: PartialMessage<EventExitPoolRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.EventExitPoolRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "lpt_in", kind: "message", T: Coin },
    { no: 4, name: "amounts_out", kind: "message", T: Coin, repeated: true },
    { no: 5, name: "protocol_fee", kind: "message", T: Coin },
    { no: 6, name: "swap_fee", kind: "message", T: Coin, repeated: true },
    { no: 7, name: "exit_type", kind: "enum", T: proto3.getEnumType(ExitType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventExitPoolRequest {
    return new EventExitPoolRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventExitPoolRequest {
    return new EventExitPoolRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventExitPoolRequest {
    return new EventExitPoolRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EventExitPoolRequest | PlainMessage<EventExitPoolRequest> | undefined, b: EventExitPoolRequest | PlainMessage<EventExitPoolRequest> | undefined): boolean {
    return proto3.util.equals(EventExitPoolRequest, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.EventJoinPoolRequest
 */
export class EventJoinPoolRequest extends Message<EventJoinPoolRequest> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: uint64 pool_id = 2;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin lpt_out = 3;
   */
  lptOut?: Coin;

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin amounts_in = 4;
   */
  amountsIn: Coin[] = [];

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin protocol_fee = 5;
   */
  protocolFee: Coin[] = [];

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin swap_fee = 6;
   */
  swapFee: Coin[] = [];

  /**
   * @generated from field: pryzm.amm.v1.JoinType join_type = 7;
   */
  joinType = JoinType.GIVEN_TOKENS_IN;

  constructor(data?: PartialMessage<EventJoinPoolRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.EventJoinPoolRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "lpt_out", kind: "message", T: Coin },
    { no: 4, name: "amounts_in", kind: "message", T: Coin, repeated: true },
    { no: 5, name: "protocol_fee", kind: "message", T: Coin, repeated: true },
    { no: 6, name: "swap_fee", kind: "message", T: Coin, repeated: true },
    { no: 7, name: "join_type", kind: "enum", T: proto3.getEnumType(JoinType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventJoinPoolRequest {
    return new EventJoinPoolRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventJoinPoolRequest {
    return new EventJoinPoolRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventJoinPoolRequest {
    return new EventJoinPoolRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EventJoinPoolRequest | PlainMessage<EventJoinPoolRequest> | undefined, b: EventJoinPoolRequest | PlainMessage<EventJoinPoolRequest> | undefined): boolean {
    return proto3.util.equals(EventJoinPoolRequest, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.EventSingleSwapRequest
 */
export class EventSingleSwapRequest extends Message<EventSingleSwapRequest> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: uint64 pool_id = 2;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount_out = 3;
   */
  amountOut?: Coin;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount_in = 4;
   */
  amountIn?: Coin;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin protocol_fee = 5;
   */
  protocolFee?: Coin;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin swap_fee = 6;
   */
  swapFee?: Coin;

  /**
   * @generated from field: pryzm.amm.v1.SwapType swap_type = 7;
   */
  swapType = SwapType.GIVEN_IN;

  constructor(data?: PartialMessage<EventSingleSwapRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.EventSingleSwapRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "amount_out", kind: "message", T: Coin },
    { no: 4, name: "amount_in", kind: "message", T: Coin },
    { no: 5, name: "protocol_fee", kind: "message", T: Coin },
    { no: 6, name: "swap_fee", kind: "message", T: Coin },
    { no: 7, name: "swap_type", kind: "enum", T: proto3.getEnumType(SwapType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSingleSwapRequest {
    return new EventSingleSwapRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSingleSwapRequest {
    return new EventSingleSwapRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSingleSwapRequest {
    return new EventSingleSwapRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EventSingleSwapRequest | PlainMessage<EventSingleSwapRequest> | undefined, b: EventSingleSwapRequest | PlainMessage<EventSingleSwapRequest> | undefined): boolean {
    return proto3.util.equals(EventSingleSwapRequest, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.EventBatchSwapRequest
 */
export class EventBatchSwapRequest extends Message<EventBatchSwapRequest> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: repeated pryzm.amm.v1.SwapStep steps = 2;
   */
  steps: SwapStep[] = [];

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin amounts_in = 3;
   */
  amountsIn: Coin[] = [];

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin amounts_out = 4;
   */
  amountsOut: Coin[] = [];

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin swap_protocol_fee = 5;
   */
  swapProtocolFee: Coin[] = [];

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin join_exit_protocol_fee = 6;
   */
  joinExitProtocolFee: Coin[] = [];

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin swap_fee = 7;
   */
  swapFee: Coin[] = [];

  /**
   * @generated from field: pryzm.amm.v1.SwapType swap_type = 8;
   */
  swapType = SwapType.GIVEN_IN;

  constructor(data?: PartialMessage<EventBatchSwapRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.EventBatchSwapRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "steps", kind: "message", T: SwapStep, repeated: true },
    { no: 3, name: "amounts_in", kind: "message", T: Coin, repeated: true },
    { no: 4, name: "amounts_out", kind: "message", T: Coin, repeated: true },
    { no: 5, name: "swap_protocol_fee", kind: "message", T: Coin, repeated: true },
    { no: 6, name: "join_exit_protocol_fee", kind: "message", T: Coin, repeated: true },
    { no: 7, name: "swap_fee", kind: "message", T: Coin, repeated: true },
    { no: 8, name: "swap_type", kind: "enum", T: proto3.getEnumType(SwapType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventBatchSwapRequest {
    return new EventBatchSwapRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventBatchSwapRequest {
    return new EventBatchSwapRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventBatchSwapRequest {
    return new EventBatchSwapRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EventBatchSwapRequest | PlainMessage<EventBatchSwapRequest> | undefined, b: EventBatchSwapRequest | PlainMessage<EventBatchSwapRequest> | undefined): boolean {
    return proto3.util.equals(EventBatchSwapRequest, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.EventYAssetSwapRefractorAction
 */
export class EventYAssetSwapRefractorAction extends Message<EventYAssetSwapRefractorAction> {
  /**
   * @generated from field: string y_amount = 1;
   */
  yAmount = "";

  /**
   * @generated from field: string c_amount_after_fee = 2;
   */
  cAmountAfterFee = "";

  /**
   * @generated from field: string fee_amount = 3;
   */
  feeAmount = "";

  constructor(data?: PartialMessage<EventYAssetSwapRefractorAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.EventYAssetSwapRefractorAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "y_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "c_amount_after_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "fee_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventYAssetSwapRefractorAction {
    return new EventYAssetSwapRefractorAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventYAssetSwapRefractorAction {
    return new EventYAssetSwapRefractorAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventYAssetSwapRefractorAction {
    return new EventYAssetSwapRefractorAction().fromJsonString(jsonString, options);
  }

  static equals(a: EventYAssetSwapRefractorAction | PlainMessage<EventYAssetSwapRefractorAction> | undefined, b: EventYAssetSwapRefractorAction | PlainMessage<EventYAssetSwapRefractorAction> | undefined): boolean {
    return proto3.util.equals(EventYAssetSwapRefractorAction, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.EventYAssetSwap
 */
export class EventYAssetSwap extends Message<EventYAssetSwap> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: pryzm.amm.v1.SwapSummary summary = 2;
   */
  summary?: SwapSummary;

  /**
   * @generated from field: pryzm.amm.v1.EventYAssetSwapRefractorAction refractor_action = 3;
   */
  refractorAction?: EventYAssetSwapRefractorAction;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin fee = 4;
   */
  fee?: Coin;

  constructor(data?: PartialMessage<EventYAssetSwap>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.EventYAssetSwap";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "summary", kind: "message", T: SwapSummary },
    { no: 3, name: "refractor_action", kind: "message", T: EventYAssetSwapRefractorAction },
    { no: 4, name: "fee", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventYAssetSwap {
    return new EventYAssetSwap().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventYAssetSwap {
    return new EventYAssetSwap().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventYAssetSwap {
    return new EventYAssetSwap().fromJsonString(jsonString, options);
  }

  static equals(a: EventYAssetSwap | PlainMessage<EventYAssetSwap> | undefined, b: EventYAssetSwap | PlainMessage<EventYAssetSwap> | undefined): boolean {
    return proto3.util.equals(EventYAssetSwap, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.EventSetOraclePricePair
 */
export class EventSetOraclePricePair extends Message<EventSetOraclePricePair> {
  /**
   * @generated from field: pryzm.amm.v1.OraclePricePair oracle_price_pair = 1;
   */
  oraclePricePair?: OraclePricePair;

  constructor(data?: PartialMessage<EventSetOraclePricePair>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.EventSetOraclePricePair";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "oracle_price_pair", kind: "message", T: OraclePricePair },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSetOraclePricePair {
    return new EventSetOraclePricePair().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSetOraclePricePair {
    return new EventSetOraclePricePair().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSetOraclePricePair {
    return new EventSetOraclePricePair().fromJsonString(jsonString, options);
  }

  static equals(a: EventSetOraclePricePair | PlainMessage<EventSetOraclePricePair> | undefined, b: EventSetOraclePricePair | PlainMessage<EventSetOraclePricePair> | undefined): boolean {
    return proto3.util.equals(EventSetOraclePricePair, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.EventRemoveOraclePricePair
 */
export class EventRemoveOraclePricePair extends Message<EventRemoveOraclePricePair> {
  /**
   * @generated from field: string asset_id = 1;
   */
  assetId = "";

  constructor(data?: PartialMessage<EventRemoveOraclePricePair>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.EventRemoveOraclePricePair";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "asset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventRemoveOraclePricePair {
    return new EventRemoveOraclePricePair().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventRemoveOraclePricePair {
    return new EventRemoveOraclePricePair().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventRemoveOraclePricePair {
    return new EventRemoveOraclePricePair().fromJsonString(jsonString, options);
  }

  static equals(a: EventRemoveOraclePricePair | PlainMessage<EventRemoveOraclePricePair> | undefined, b: EventRemoveOraclePricePair | PlainMessage<EventRemoveOraclePricePair> | undefined): boolean {
    return proto3.util.equals(EventRemoveOraclePricePair, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.EventSetPendingTokenIntroduction
 */
export class EventSetPendingTokenIntroduction extends Message<EventSetPendingTokenIntroduction> {
  /**
   * @generated from field: pryzm.amm.v1.PendingTokenIntroduction pending_token_introduction = 1;
   */
  pendingTokenIntroduction?: PendingTokenIntroduction;

  constructor(data?: PartialMessage<EventSetPendingTokenIntroduction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.EventSetPendingTokenIntroduction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pending_token_introduction", kind: "message", T: PendingTokenIntroduction },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSetPendingTokenIntroduction {
    return new EventSetPendingTokenIntroduction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSetPendingTokenIntroduction {
    return new EventSetPendingTokenIntroduction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSetPendingTokenIntroduction {
    return new EventSetPendingTokenIntroduction().fromJsonString(jsonString, options);
  }

  static equals(a: EventSetPendingTokenIntroduction | PlainMessage<EventSetPendingTokenIntroduction> | undefined, b: EventSetPendingTokenIntroduction | PlainMessage<EventSetPendingTokenIntroduction> | undefined): boolean {
    return proto3.util.equals(EventSetPendingTokenIntroduction, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.EventRemovePendingTokenIntroduction
 */
export class EventRemovePendingTokenIntroduction extends Message<EventRemovePendingTokenIntroduction> {
  /**
   * @generated from field: string asset_id = 1;
   */
  assetId = "";

  /**
   * @generated from field: uint64 target_pool_id = 2;
   */
  targetPoolId = protoInt64.zero;

  constructor(data?: PartialMessage<EventRemovePendingTokenIntroduction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.EventRemovePendingTokenIntroduction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "asset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "target_pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventRemovePendingTokenIntroduction {
    return new EventRemovePendingTokenIntroduction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventRemovePendingTokenIntroduction {
    return new EventRemovePendingTokenIntroduction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventRemovePendingTokenIntroduction {
    return new EventRemovePendingTokenIntroduction().fromJsonString(jsonString, options);
  }

  static equals(a: EventRemovePendingTokenIntroduction | PlainMessage<EventRemovePendingTokenIntroduction> | undefined, b: EventRemovePendingTokenIntroduction | PlainMessage<EventRemovePendingTokenIntroduction> | undefined): boolean {
    return proto3.util.equals(EventRemovePendingTokenIntroduction, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.EventSetParams
 */
export class EventSetParams extends Message<EventSetParams> {
  /**
   * @generated from field: pryzm.amm.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<EventSetParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.EventSetParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSetParams {
    return new EventSetParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSetParams {
    return new EventSetParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSetParams {
    return new EventSetParams().fromJsonString(jsonString, options);
  }

  static equals(a: EventSetParams | PlainMessage<EventSetParams> | undefined, b: EventSetParams | PlainMessage<EventSetParams> | undefined): boolean {
    return proto3.util.equals(EventSetParams, a, b);
  }
}

