// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file pryzm/amm/v1/pool_token.proto (package pryzm.amm.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message pryzm.amm.v1.CircuitBreaker
 */
export class CircuitBreaker extends Message<CircuitBreaker> {
  /**
   * @generated from field: string reference_lpt_price = 1;
   */
  referenceLptPrice = "";

  /**
   * @generated from field: string lower_bound = 2;
   */
  lowerBound = "";

  /**
   * @generated from field: string upper_bound = 3;
   */
  upperBound = "";

  /**
   * @generated from field: string reference_normalized_weight = 4;
   */
  referenceNormalizedWeight = "";

  /**
   * @generated from field: string adjusted_upper_bound = 5;
   */
  adjustedUpperBound = "";

  /**
   * @generated from field: string adjusted_lower_bound = 6;
   */
  adjustedLowerBound = "";

  constructor(data?: PartialMessage<CircuitBreaker>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.CircuitBreaker";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reference_lpt_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "lower_bound", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "upper_bound", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "reference_normalized_weight", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "adjusted_upper_bound", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "adjusted_lower_bound", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CircuitBreaker {
    return new CircuitBreaker().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CircuitBreaker {
    return new CircuitBreaker().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CircuitBreaker {
    return new CircuitBreaker().fromJsonString(jsonString, options);
  }

  static equals(a: CircuitBreaker | PlainMessage<CircuitBreaker> | undefined, b: CircuitBreaker | PlainMessage<CircuitBreaker> | undefined): boolean {
    return proto3.util.equals(CircuitBreaker, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.PoolToken
 */
export class PoolToken extends Message<PoolToken> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: string denom = 2;
   */
  denom = "";

  /**
   * @generated from field: string balance = 3;
   */
  balance = "";

  /**
   * @generated from field: pryzm.amm.v1.CircuitBreaker circuit_breaker = 4;
   */
  circuitBreaker?: CircuitBreaker;

  constructor(data?: PartialMessage<PoolToken>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.PoolToken";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "balance", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "circuit_breaker", kind: "message", T: CircuitBreaker },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolToken {
    return new PoolToken().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolToken {
    return new PoolToken().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolToken {
    return new PoolToken().fromJsonString(jsonString, options);
  }

  static equals(a: PoolToken | PlainMessage<PoolToken> | undefined, b: PoolToken | PlainMessage<PoolToken> | undefined): boolean {
    return proto3.util.equals(PoolToken, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.TokenAmount
 */
export class TokenAmount extends Message<TokenAmount> {
  /**
   * @generated from field: pryzm.amm.v1.PoolToken token = 1;
   */
  token?: PoolToken;

  /**
   * @generated from field: string amount = 2;
   */
  amount = "";

  constructor(data?: PartialMessage<TokenAmount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.TokenAmount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "message", T: PoolToken },
    { no: 2, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TokenAmount {
    return new TokenAmount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TokenAmount {
    return new TokenAmount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TokenAmount {
    return new TokenAmount().fromJsonString(jsonString, options);
  }

  static equals(a: TokenAmount | PlainMessage<TokenAmount> | undefined, b: TokenAmount | PlainMessage<TokenAmount> | undefined): boolean {
    return proto3.util.equals(TokenAmount, a, b);
  }
}

