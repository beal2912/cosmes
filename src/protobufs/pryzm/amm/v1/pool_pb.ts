// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file pryzm/amm/v1/pool.proto (package pryzm.amm.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * PoolType enumerates the valid types for pool_type.
 *
 * @generated from enum pryzm.amm.v1.PoolType
 */
export enum PoolType {
  /**
   * @generated from enum value: POOL_TYPE_WEIGHTED = 0;
   */
  WEIGHTED = 0,

  /**
   * @generated from enum value: POOL_TYPE_YAMM = 1;
   */
  YAMM = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(PoolType)
proto3.util.setEnumType(PoolType, "pryzm.amm.v1.PoolType", [
  { no: 0, name: "POOL_TYPE_WEIGHTED" },
  { no: 1, name: "POOL_TYPE_YAMM" },
]);

/**
 * @generated from message pryzm.amm.v1.PoolPauseWindow
 */
export class PoolPauseWindow extends Message<PoolPauseWindow> {
  /**
   * @generated from field: int64 pause_window_end_unix_millis = 1;
   */
  pauseWindowEndUnixMillis = protoInt64.zero;

  /**
   * @generated from field: int64 buffer_period_end_unix_millis = 2;
   */
  bufferPeriodEndUnixMillis = protoInt64.zero;

  constructor(data?: PartialMessage<PoolPauseWindow>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.PoolPauseWindow";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pause_window_end_unix_millis", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "buffer_period_end_unix_millis", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolPauseWindow {
    return new PoolPauseWindow().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolPauseWindow {
    return new PoolPauseWindow().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolPauseWindow {
    return new PoolPauseWindow().fromJsonString(jsonString, options);
  }

  static equals(a: PoolPauseWindow | PlainMessage<PoolPauseWindow> | undefined, b: PoolPauseWindow | PlainMessage<PoolPauseWindow> | undefined): boolean {
    return proto3.util.equals(PoolPauseWindow, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.Pool
 */
export class Pool extends Message<Pool> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * this is the constant swap fee ratio, for dynamic swap fees other pools might have other parameters.
   * for example, check yamm configuration
   *
   * @generated from field: string swap_fee_ratio = 3;
   */
  swapFeeRatio = "";

  /**
   * @generated from field: pryzm.amm.v1.PoolType pool_type = 4;
   */
  poolType = PoolType.WEIGHTED;

  /**
   * @generated from field: string creator = 5;
   */
  creator = "";

  /**
   * @generated from field: bool recovery_mode = 6;
   */
  recoveryMode = false;

  /**
   * @generated from field: bool paused_by_gov = 7;
   */
  pausedByGov = false;

  /**
   * @generated from field: bool paused_by_owner = 8;
   */
  pausedByOwner = false;

  /**
   * @generated from field: pryzm.amm.v1.PoolPauseWindow owner_pause_window_timing = 9;
   */
  ownerPauseWindowTiming?: PoolPauseWindow;

  /**
   * if protocol fee parameters are nil, then the values are read from treasury module parameters
   *
   * @generated from field: string swap_protocol_fee_ratio = 10;
   */
  swapProtocolFeeRatio = "";

  /**
   * @generated from field: string join_exit_protocol_fee_ratio = 11;
   */
  joinExitProtocolFeeRatio = "";

  /**
   * if not empty, only these addresses can initialize the pool
   *
   * @generated from field: repeated string initialization_allow_list = 12;
   */
  initializationAllowList: string[] = [];

  /**
   * these have the same permissions as the creator, except for
   * updating the admins list and pausing the pool
   *
   * @generated from field: repeated string admins = 13;
   */
  admins: string[] = [];

  /**
   * @generated from field: repeated string pause_allow_list = 14;
   */
  pauseAllowList: string[] = [];

  constructor(data?: PartialMessage<Pool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.Pool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "swap_fee_ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "pool_type", kind: "enum", T: proto3.getEnumType(PoolType) },
    { no: 5, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "recovery_mode", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "paused_by_gov", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "paused_by_owner", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "owner_pause_window_timing", kind: "message", T: PoolPauseWindow },
    { no: 10, name: "swap_protocol_fee_ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "join_exit_protocol_fee_ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "initialization_allow_list", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 13, name: "admins", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 14, name: "pause_allow_list", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pool {
    return new Pool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pool {
    return new Pool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pool {
    return new Pool().fromJsonString(jsonString, options);
  }

  static equals(a: Pool | PlainMessage<Pool> | undefined, b: Pool | PlainMessage<Pool> | undefined): boolean {
    return proto3.util.equals(Pool, a, b);
  }
}

