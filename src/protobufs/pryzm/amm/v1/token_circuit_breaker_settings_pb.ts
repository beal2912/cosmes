// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file pryzm/amm/v1/token_circuit_breaker_settings.proto (package pryzm.amm.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message pryzm.amm.v1.TokenCircuitBreakerSettings
 */
export class TokenCircuitBreakerSettings extends Message<TokenCircuitBreakerSettings> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * @generated from field: pryzm.amm.v1.CircuitBreakerSettings circuit_breaker = 2;
   */
  circuitBreaker?: CircuitBreakerSettings;

  constructor(data?: PartialMessage<TokenCircuitBreakerSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.TokenCircuitBreakerSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "circuit_breaker", kind: "message", T: CircuitBreakerSettings },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TokenCircuitBreakerSettings {
    return new TokenCircuitBreakerSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TokenCircuitBreakerSettings {
    return new TokenCircuitBreakerSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TokenCircuitBreakerSettings {
    return new TokenCircuitBreakerSettings().fromJsonString(jsonString, options);
  }

  static equals(a: TokenCircuitBreakerSettings | PlainMessage<TokenCircuitBreakerSettings> | undefined, b: TokenCircuitBreakerSettings | PlainMessage<TokenCircuitBreakerSettings> | undefined): boolean {
    return proto3.util.equals(TokenCircuitBreakerSettings, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.CircuitBreakerSettings
 */
export class CircuitBreakerSettings extends Message<CircuitBreakerSettings> {
  /**
   * @generated from field: string reference_lpt_price = 1;
   */
  referenceLptPrice = "";

  /**
   * @generated from field: string lower_bound = 2;
   */
  lowerBound = "";

  /**
   * @generated from field: string upper_bound = 3;
   */
  upperBound = "";

  constructor(data?: PartialMessage<CircuitBreakerSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.CircuitBreakerSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reference_lpt_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "lower_bound", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "upper_bound", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CircuitBreakerSettings {
    return new CircuitBreakerSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CircuitBreakerSettings {
    return new CircuitBreakerSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CircuitBreakerSettings {
    return new CircuitBreakerSettings().fromJsonString(jsonString, options);
  }

  static equals(a: CircuitBreakerSettings | PlainMessage<CircuitBreakerSettings> | undefined, b: CircuitBreakerSettings | PlainMessage<CircuitBreakerSettings> | undefined): boolean {
    return proto3.util.equals(CircuitBreakerSettings, a, b);
  }
}

