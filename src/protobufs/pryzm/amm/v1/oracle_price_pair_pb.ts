// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file pryzm/amm/v1/oracle_price_pair.proto (package pryzm.amm.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * TwapAlgorithm enumerates the valid algorithms for twap_algorithm.
 *
 * @generated from enum pryzm.amm.v1.TwapAlgorithm
 */
export enum TwapAlgorithm {
  /**
   * @generated from enum value: TWAP_ALGORITHM_ARITHMETIC = 0;
   */
  ARITHMETIC = 0,

  /**
   * @generated from enum value: TWAP_ALGORITHM_GEOMETRIC = 1;
   */
  GEOMETRIC = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(TwapAlgorithm)
proto3.util.setEnumType(TwapAlgorithm, "pryzm.amm.v1.TwapAlgorithm", [
  { no: 0, name: "TWAP_ALGORITHM_ARITHMETIC" },
  { no: 1, name: "TWAP_ALGORITHM_GEOMETRIC" },
]);

/**
 * @generated from message pryzm.amm.v1.Pair
 */
export class Pair extends Message<Pair> {
  /**
   * @generated from field: string base = 1;
   */
  base = "";

  /**
   * @generated from field: string quote = 2;
   */
  quote = "";

  /**
   * refers to the data source pool (e.g. osmosis gamm pool)
   *
   * @generated from field: string pool_id = 3;
   */
  poolId = "";

  /**
   * @generated from field: string data_source = 4;
   */
  dataSource = "";

  constructor(data?: PartialMessage<Pair>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.Pair";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "base", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "quote", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pool_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "data_source", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pair {
    return new Pair().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pair {
    return new Pair().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pair {
    return new Pair().fromJsonString(jsonString, options);
  }

  static equals(a: Pair | PlainMessage<Pair> | undefined, b: Pair | PlainMessage<Pair> | undefined): boolean {
    return proto3.util.equals(Pair, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.OraclePricePair
 */
export class OraclePricePair extends Message<OraclePricePair> {
  /**
   * @generated from field: string asset_id = 1;
   */
  assetId = "";

  /**
   * this is the token denom which should exist in the target weighted pool in pryzm chain
   * the reason for adding this property and not using the pairs, is that the token denom in various chains might be different
   * for example usdc token might have contract or ibc denom on different chains with different channel and ids
   *
   * @generated from field: string quote_token = 2;
   */
  quoteToken = "";

  /**
   * @generated from field: uint64 twap_duration_millis = 3;
   */
  twapDurationMillis = protoInt64.zero;

  /**
   * @generated from field: pryzm.amm.v1.TwapAlgorithm twap_algorithm = 4;
   */
  twapAlgorithm = TwapAlgorithm.ARITHMETIC;

  /**
   * @generated from field: bool disabled = 5;
   */
  disabled = false;

  /**
   * @generated from field: repeated pryzm.amm.v1.Pair pairs = 6;
   */
  pairs: Pair[] = [];

  /**
   * this is the denom of the base token on this chain
   * should be ibc denom for most cases
   *
   * @generated from field: string base_denom = 7;
   */
  baseDenom = "";

  constructor(data?: PartialMessage<OraclePricePair>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.OraclePricePair";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "asset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "quote_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "twap_duration_millis", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "twap_algorithm", kind: "enum", T: proto3.getEnumType(TwapAlgorithm) },
    { no: 5, name: "disabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "pairs", kind: "message", T: Pair, repeated: true },
    { no: 7, name: "base_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OraclePricePair {
    return new OraclePricePair().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OraclePricePair {
    return new OraclePricePair().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OraclePricePair {
    return new OraclePricePair().fromJsonString(jsonString, options);
  }

  static equals(a: OraclePricePair | PlainMessage<OraclePricePair> | undefined, b: OraclePricePair | PlainMessage<OraclePricePair> | undefined): boolean {
    return proto3.util.equals(OraclePricePair, a, b);
  }
}

