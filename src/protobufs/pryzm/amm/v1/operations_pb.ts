// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file pryzm/amm/v1/operations.proto (package pryzm.amm.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { TokenAmount } from "./pool_token_pb.js";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * @generated from enum pryzm.amm.v1.SwapType
 */
export enum SwapType {
  /**
   * @generated from enum value: SWAP_TYPE_GIVEN_IN = 0;
   */
  GIVEN_IN = 0,

  /**
   * @generated from enum value: SWAP_TYPE_GIVEN_OUT = 1;
   */
  GIVEN_OUT = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(SwapType)
proto3.util.setEnumType(SwapType, "pryzm.amm.v1.SwapType", [
  { no: 0, name: "SWAP_TYPE_GIVEN_IN" },
  { no: 1, name: "SWAP_TYPE_GIVEN_OUT" },
]);

/**
 * @generated from enum pryzm.amm.v1.JoinType
 */
export enum JoinType {
  /**
   * @generated from enum value: JOIN_TYPE_GIVEN_TOKENS_IN = 0;
   */
  GIVEN_TOKENS_IN = 0,

  /**
   * @generated from enum value: JOIN_TYPE_TOKEN_GIVEN_LPT_OUT = 1;
   */
  TOKEN_GIVEN_LPT_OUT = 1,

  /**
   * @generated from enum value: JOIN_TYPE_ALL_TOKENS_GIVEN_LPT_OUT = 2;
   */
  ALL_TOKENS_GIVEN_LPT_OUT = 2,

  /**
   * @generated from enum value: JOIN_TYPE_INITIALIZE_POOL = 3;
   */
  INITIALIZE_POOL = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(JoinType)
proto3.util.setEnumType(JoinType, "pryzm.amm.v1.JoinType", [
  { no: 0, name: "JOIN_TYPE_GIVEN_TOKENS_IN" },
  { no: 1, name: "JOIN_TYPE_TOKEN_GIVEN_LPT_OUT" },
  { no: 2, name: "JOIN_TYPE_ALL_TOKENS_GIVEN_LPT_OUT" },
  { no: 3, name: "JOIN_TYPE_INITIALIZE_POOL" },
]);

/**
 * @generated from enum pryzm.amm.v1.ExitType
 */
export enum ExitType {
  /**
   * @generated from enum value: EXIT_TYPE_GIVEN_TOKENS_IN = 0;
   */
  GIVEN_TOKENS_IN = 0,

  /**
   * @generated from enum value: EXIT_TYPE_TOKEN_GIVEN_LPT_OUT = 1;
   */
  TOKEN_GIVEN_LPT_OUT = 1,

  /**
   * @generated from enum value: EXIT_TYPE_ALL_TOKENS_GIVEN_LPT_OUT = 2;
   */
  ALL_TOKENS_GIVEN_LPT_OUT = 2,

  /**
   * @generated from enum value: EXIT_TYPE_ALL_TOKENS_RECOVERY_MODE = 3;
   */
  ALL_TOKENS_RECOVERY_MODE = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(ExitType)
proto3.util.setEnumType(ExitType, "pryzm.amm.v1.ExitType", [
  { no: 0, name: "EXIT_TYPE_GIVEN_TOKENS_IN" },
  { no: 1, name: "EXIT_TYPE_TOKEN_GIVEN_LPT_OUT" },
  { no: 2, name: "EXIT_TYPE_ALL_TOKENS_GIVEN_LPT_OUT" },
  { no: 3, name: "EXIT_TYPE_ALL_TOKENS_RECOVERY_MODE" },
]);

/**
 * @generated from message pryzm.amm.v1.Swap
 */
export class Swap extends Message<Swap> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: string amount = 2;
   */
  amount = "";

  /**
   * @generated from field: pryzm.amm.v1.SwapType swap_type = 3;
   */
  swapType = SwapType.GIVEN_IN;

  /**
   * @generated from field: string token_in = 4;
   */
  tokenIn = "";

  /**
   * @generated from field: string token_out = 5;
   */
  tokenOut = "";

  constructor(data?: PartialMessage<Swap>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.Swap";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "swap_type", kind: "enum", T: proto3.getEnumType(SwapType) },
    { no: 4, name: "token_in", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "token_out", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Swap {
    return new Swap().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Swap {
    return new Swap().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Swap {
    return new Swap().fromJsonString(jsonString, options);
  }

  static equals(a: Swap | PlainMessage<Swap> | undefined, b: Swap | PlainMessage<Swap> | undefined): boolean {
    return proto3.util.equals(Swap, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.SwapStep
 */
export class SwapStep extends Message<SwapStep> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: string amount = 2;
   */
  amount = "";

  /**
   * @generated from field: string token_in = 4;
   */
  tokenIn = "";

  /**
   * @generated from field: string token_out = 5;
   */
  tokenOut = "";

  constructor(data?: PartialMessage<SwapStep>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.SwapStep";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "token_in", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "token_out", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SwapStep {
    return new SwapStep().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SwapStep {
    return new SwapStep().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SwapStep {
    return new SwapStep().fromJsonString(jsonString, options);
  }

  static equals(a: SwapStep | PlainMessage<SwapStep> | undefined, b: SwapStep | PlainMessage<SwapStep> | undefined): boolean {
    return proto3.util.equals(SwapStep, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.SwapSummary
 */
export class SwapSummary extends Message<SwapSummary> {
  /**
   * @generated from field: pryzm.amm.v1.TokenAmount token_in = 1;
   */
  tokenIn?: TokenAmount;

  /**
   * @generated from field: pryzm.amm.v1.TokenAmount token_out = 2;
   */
  tokenOut?: TokenAmount;

  /**
   * @generated from field: pryzm.amm.v1.SwapType swap_type = 3;
   */
  swapType = SwapType.GIVEN_IN;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin protocol_fee = 4;
   */
  protocolFee?: Coin;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin swap_fee = 5;
   */
  swapFee?: Coin;

  constructor(data?: PartialMessage<SwapSummary>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.SwapSummary";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token_in", kind: "message", T: TokenAmount },
    { no: 2, name: "token_out", kind: "message", T: TokenAmount },
    { no: 3, name: "swap_type", kind: "enum", T: proto3.getEnumType(SwapType) },
    { no: 4, name: "protocol_fee", kind: "message", T: Coin },
    { no: 5, name: "swap_fee", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SwapSummary {
    return new SwapSummary().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SwapSummary {
    return new SwapSummary().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SwapSummary {
    return new SwapSummary().fromJsonString(jsonString, options);
  }

  static equals(a: SwapSummary | PlainMessage<SwapSummary> | undefined, b: SwapSummary | PlainMessage<SwapSummary> | undefined): boolean {
    return proto3.util.equals(SwapSummary, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.JoinSummary
 */
export class JoinSummary extends Message<JoinSummary> {
  /**
   * @generated from field: pryzm.amm.v1.TokenAmount lp_token = 1;
   */
  lpToken?: TokenAmount;

  /**
   * @generated from field: repeated pryzm.amm.v1.TokenAmount tokens_in = 2;
   */
  tokensIn: TokenAmount[] = [];

  /**
   * @generated from field: pryzm.amm.v1.JoinType join_type = 3;
   */
  joinType = JoinType.GIVEN_TOKENS_IN;

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin protocol_fee = 4;
   */
  protocolFee: Coin[] = [];

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin swap_fee = 5;
   */
  swapFee: Coin[] = [];

  constructor(data?: PartialMessage<JoinSummary>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.JoinSummary";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lp_token", kind: "message", T: TokenAmount },
    { no: 2, name: "tokens_in", kind: "message", T: TokenAmount, repeated: true },
    { no: 3, name: "join_type", kind: "enum", T: proto3.getEnumType(JoinType) },
    { no: 4, name: "protocol_fee", kind: "message", T: Coin, repeated: true },
    { no: 5, name: "swap_fee", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JoinSummary {
    return new JoinSummary().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JoinSummary {
    return new JoinSummary().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JoinSummary {
    return new JoinSummary().fromJsonString(jsonString, options);
  }

  static equals(a: JoinSummary | PlainMessage<JoinSummary> | undefined, b: JoinSummary | PlainMessage<JoinSummary> | undefined): boolean {
    return proto3.util.equals(JoinSummary, a, b);
  }
}

/**
 * @generated from message pryzm.amm.v1.ExitSummary
 */
export class ExitSummary extends Message<ExitSummary> {
  /**
   * @generated from field: pryzm.amm.v1.TokenAmount lp_token = 1;
   */
  lpToken?: TokenAmount;

  /**
   * @generated from field: repeated pryzm.amm.v1.TokenAmount tokens_out = 2;
   */
  tokensOut: TokenAmount[] = [];

  /**
   * @generated from field: pryzm.amm.v1.ExitType exit_type = 3;
   */
  exitType = ExitType.GIVEN_TOKENS_IN;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin protocol_fee = 4;
   */
  protocolFee?: Coin;

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin swap_fee = 5;
   */
  swapFee: Coin[] = [];

  constructor(data?: PartialMessage<ExitSummary>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.amm.v1.ExitSummary";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lp_token", kind: "message", T: TokenAmount },
    { no: 2, name: "tokens_out", kind: "message", T: TokenAmount, repeated: true },
    { no: 3, name: "exit_type", kind: "enum", T: proto3.getEnumType(ExitType) },
    { no: 4, name: "protocol_fee", kind: "message", T: Coin },
    { no: 5, name: "swap_fee", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExitSummary {
    return new ExitSummary().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExitSummary {
    return new ExitSummary().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExitSummary {
    return new ExitSummary().fromJsonString(jsonString, options);
  }

  static equals(a: ExitSummary | PlainMessage<ExitSummary> | undefined, b: ExitSummary | PlainMessage<ExitSummary> | undefined): boolean {
    return proto3.util.equals(ExitSummary, a, b);
  }
}

