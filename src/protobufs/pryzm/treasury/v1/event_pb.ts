// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file pryzm/treasury/v1/event.proto (package pryzm.treasury.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { Action, ActionType } from "./action_pb.js";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
import { FlowTrade } from "./flow_trade_pb.js";

/**
 * @generated from message pryzm.treasury.v1.EventSetParams
 */
export class EventSetParams extends Message<EventSetParams> {
  /**
   * @generated from field: pryzm.treasury.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<EventSetParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.treasury.v1.EventSetParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSetParams {
    return new EventSetParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSetParams {
    return new EventSetParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSetParams {
    return new EventSetParams().fromJsonString(jsonString, options);
  }

  static equals(a: EventSetParams | PlainMessage<EventSetParams> | undefined, b: EventSetParams | PlainMessage<EventSetParams> | undefined): boolean {
    return proto3.util.equals(EventSetParams, a, b);
  }
}

/**
 * @generated from message pryzm.treasury.v1.EventTreasuryCollectFee
 */
export class EventTreasuryCollectFee extends Message<EventTreasuryCollectFee> {
  /**
   * @generated from field: string fee_type = 1;
   */
  feeType = "";

  /**
   * @generated from field: string amount = 2;
   */
  amount = "";

  /**
   * @generated from field: string from = 3;
   */
  from = "";

  constructor(data?: PartialMessage<EventTreasuryCollectFee>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.treasury.v1.EventTreasuryCollectFee";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fee_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventTreasuryCollectFee {
    return new EventTreasuryCollectFee().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventTreasuryCollectFee {
    return new EventTreasuryCollectFee().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventTreasuryCollectFee {
    return new EventTreasuryCollectFee().fromJsonString(jsonString, options);
  }

  static equals(a: EventTreasuryCollectFee | PlainMessage<EventTreasuryCollectFee> | undefined, b: EventTreasuryCollectFee | PlainMessage<EventTreasuryCollectFee> | undefined): boolean {
    return proto3.util.equals(EventTreasuryCollectFee, a, b);
  }
}

/**
 * @generated from message pryzm.treasury.v1.EventCreateFlowForAmount
 */
export class EventCreateFlowForAmount extends Message<EventCreateFlowForAmount> {
  /**
   * @generated from field: uint64 flow_id = 1;
   */
  flowId = protoInt64.zero;

  /**
   * @generated from field: pryzm.treasury.v1.ActionType action_type = 2;
   */
  actionType = ActionType.HOLD;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 3;
   */
  amount?: Coin;

  constructor(data?: PartialMessage<EventCreateFlowForAmount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.treasury.v1.EventCreateFlowForAmount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "flow_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "action_type", kind: "enum", T: proto3.getEnumType(ActionType) },
    { no: 3, name: "amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventCreateFlowForAmount {
    return new EventCreateFlowForAmount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventCreateFlowForAmount {
    return new EventCreateFlowForAmount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventCreateFlowForAmount {
    return new EventCreateFlowForAmount().fromJsonString(jsonString, options);
  }

  static equals(a: EventCreateFlowForAmount | PlainMessage<EventCreateFlowForAmount> | undefined, b: EventCreateFlowForAmount | PlainMessage<EventCreateFlowForAmount> | undefined): boolean {
    return proto3.util.equals(EventCreateFlowForAmount, a, b);
  }
}

/**
 * @generated from message pryzm.treasury.v1.EventExecuteActionForAmount
 */
export class EventExecuteActionForAmount extends Message<EventExecuteActionForAmount> {
  /**
   * @generated from field: pryzm.treasury.v1.ActionType action_type = 1;
   */
  actionType = ActionType.HOLD;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 2;
   */
  amount?: Coin;

  constructor(data?: PartialMessage<EventExecuteActionForAmount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.treasury.v1.EventExecuteActionForAmount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "action_type", kind: "enum", T: proto3.getEnumType(ActionType) },
    { no: 2, name: "amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventExecuteActionForAmount {
    return new EventExecuteActionForAmount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventExecuteActionForAmount {
    return new EventExecuteActionForAmount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventExecuteActionForAmount {
    return new EventExecuteActionForAmount().fromJsonString(jsonString, options);
  }

  static equals(a: EventExecuteActionForAmount | PlainMessage<EventExecuteActionForAmount> | undefined, b: EventExecuteActionForAmount | PlainMessage<EventExecuteActionForAmount> | undefined): boolean {
    return proto3.util.equals(EventExecuteActionForAmount, a, b);
  }
}

/**
 * @generated from message pryzm.treasury.v1.EventSetAction
 */
export class EventSetAction extends Message<EventSetAction> {
  /**
   * @generated from field: pryzm.treasury.v1.Action action = 1;
   */
  action?: Action;

  constructor(data?: PartialMessage<EventSetAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.treasury.v1.EventSetAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "action", kind: "message", T: Action },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSetAction {
    return new EventSetAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSetAction {
    return new EventSetAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSetAction {
    return new EventSetAction().fromJsonString(jsonString, options);
  }

  static equals(a: EventSetAction | PlainMessage<EventSetAction> | undefined, b: EventSetAction | PlainMessage<EventSetAction> | undefined): boolean {
    return proto3.util.equals(EventSetAction, a, b);
  }
}

/**
 * @generated from message pryzm.treasury.v1.EventSetFlowTrade
 */
export class EventSetFlowTrade extends Message<EventSetFlowTrade> {
  /**
   * @generated from field: pryzm.treasury.v1.FlowTrade flow_trade = 1;
   */
  flowTrade?: FlowTrade;

  constructor(data?: PartialMessage<EventSetFlowTrade>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.treasury.v1.EventSetFlowTrade";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "flow_trade", kind: "message", T: FlowTrade },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSetFlowTrade {
    return new EventSetFlowTrade().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSetFlowTrade {
    return new EventSetFlowTrade().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSetFlowTrade {
    return new EventSetFlowTrade().fromJsonString(jsonString, options);
  }

  static equals(a: EventSetFlowTrade | PlainMessage<EventSetFlowTrade> | undefined, b: EventSetFlowTrade | PlainMessage<EventSetFlowTrade> | undefined): boolean {
    return proto3.util.equals(EventSetFlowTrade, a, b);
  }
}

/**
 * @generated from message pryzm.treasury.v1.EventRemoveFlowTrade
 */
export class EventRemoveFlowTrade extends Message<EventRemoveFlowTrade> {
  /**
   * @generated from field: google.protobuf.Timestamp end_time = 1;
   */
  endTime?: Timestamp;

  /**
   * @generated from field: uint64 flow_id = 2;
   */
  flowId = protoInt64.zero;

  constructor(data?: PartialMessage<EventRemoveFlowTrade>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.treasury.v1.EventRemoveFlowTrade";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "end_time", kind: "message", T: Timestamp },
    { no: 2, name: "flow_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventRemoveFlowTrade {
    return new EventRemoveFlowTrade().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventRemoveFlowTrade {
    return new EventRemoveFlowTrade().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventRemoveFlowTrade {
    return new EventRemoveFlowTrade().fromJsonString(jsonString, options);
  }

  static equals(a: EventRemoveFlowTrade | PlainMessage<EventRemoveFlowTrade> | undefined, b: EventRemoveFlowTrade | PlainMessage<EventRemoveFlowTrade> | undefined): boolean {
    return proto3.util.equals(EventRemoveFlowTrade, a, b);
  }
}

