// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file pryzm/treasury/v1/action.proto (package pryzm.treasury.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * FeeType enumerates the valid types for feeType.
 *
 * @generated from enum pryzm.treasury.v1.ActionType
 */
export enum ActionType {
  /**
   * @generated from enum value: ACTION_TYPE_HOLD = 0;
   */
  HOLD = 0,

  /**
   * @generated from enum value: ACTION_TYPE_BURN = 1;
   */
  BURN = 1,

  /**
   * @generated from enum value: ACTION_TYPE_DISTRIBUTE_TO_STAKERS = 2;
   */
  DISTRIBUTE_TO_STAKERS = 2,

  /**
   * @generated from enum value: ACTION_TYPE_DISTRIBUTE_TO_COMMUNITY_POOL = 3;
   */
  DISTRIBUTE_TO_COMMUNITY_POOL = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(ActionType)
proto3.util.setEnumType(ActionType, "pryzm.treasury.v1.ActionType", [
  { no: 0, name: "ACTION_TYPE_HOLD" },
  { no: 1, name: "ACTION_TYPE_BURN" },
  { no: 2, name: "ACTION_TYPE_DISTRIBUTE_TO_STAKERS" },
  { no: 3, name: "ACTION_TYPE_DISTRIBUTE_TO_COMMUNITY_POOL" },
]);

/**
 * @generated from message pryzm.treasury.v1.ActionFlowTradeSettings
 */
export class ActionFlowTradeSettings extends Message<ActionFlowTradeSettings> {
  /**
   * given the occurrence of an action, this is used to compute the start of the flow
   * NOTE: the flowtrade library has a parameter for minimum start delay
   *
   * @generated from field: google.protobuf.Duration start_delay = 1;
   */
  startDelay?: Duration;

  /**
   * given the start of the flow, this is used to compute the end of the flow
   *
   * @generated from field: google.protobuf.Duration duration = 2;
   */
  duration?: Duration;

  /**
   * the interval in which the distribution index is updated and hence tokens are swapped
   * if dist_interval is 0, the flow is updated every time in or out tokens are increased or decreased
   * if dist_interval is equal to the duration of flow, it means that all of the tokens are swapped once after the flow ends
   *
   * @generated from field: google.protobuf.Duration dist_interval = 3;
   */
  distInterval?: Duration;

  /**
   * the minimum price for the token-out in terms of token-in.
   * in each swap interval, if the calculated price is less than this limit, the swap doesn't happen in that turn
   *
   * @generated from field: string limit_price = 4;
   */
  limitPrice = "";

  /**
   * the duration of the exit window before swap interval, in which users can only exit the flow and joining is not permitted
   * this duration is used to protect joiners from buying the token-out with a higher price when someone joins with a huge amount of token-in
   *
   * @generated from field: google.protobuf.Duration exit_window_duration = 5;
   */
  exitWindowDuration?: Duration;

  constructor(data?: PartialMessage<ActionFlowTradeSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.treasury.v1.ActionFlowTradeSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start_delay", kind: "message", T: Duration },
    { no: 2, name: "duration", kind: "message", T: Duration },
    { no: 3, name: "dist_interval", kind: "message", T: Duration },
    { no: 4, name: "limit_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "exit_window_duration", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActionFlowTradeSettings {
    return new ActionFlowTradeSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActionFlowTradeSettings {
    return new ActionFlowTradeSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActionFlowTradeSettings {
    return new ActionFlowTradeSettings().fromJsonString(jsonString, options);
  }

  static equals(a: ActionFlowTradeSettings | PlainMessage<ActionFlowTradeSettings> | undefined, b: ActionFlowTradeSettings | PlainMessage<ActionFlowTradeSettings> | undefined): boolean {
    return proto3.util.equals(ActionFlowTradeSettings, a, b);
  }
}

/**
 * @generated from message pryzm.treasury.v1.Action
 */
export class Action extends Message<Action> {
  /**
   * @generated from field: pryzm.treasury.v1.ActionType action_type = 1;
   */
  actionType = ActionType.HOLD;

  /**
   * @generated from field: google.protobuf.Timestamp occurrence = 2;
   */
  occurrence?: Timestamp;

  /**
   * if expiration is not set, then the action will never expire and is executed forever unless gov decides to set another action.
   *
   * @generated from field: google.protobuf.Timestamp expiration = 3;
   */
  expiration?: Timestamp;

  /**
   * if period is nil, then the action is only executed at the first occurrence and then replaced with a HOLD/NOOP action.
   *
   * @generated from field: google.protobuf.Duration period = 4;
   */
  period?: Duration;

  /**
   * this is nil if the action is of type HOLD
   *
   * @generated from field: pryzm.treasury.v1.ActionFlowTradeSettings flow_trade_settings = 5;
   */
  flowTradeSettings?: ActionFlowTradeSettings;

  /**
   * denoms in this list will not be affected by the action
   *
   * @generated from field: repeated string excluded_denoms = 6;
   */
  excludedDenoms: string[] = [];

  constructor(data?: PartialMessage<Action>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.treasury.v1.Action";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "action_type", kind: "enum", T: proto3.getEnumType(ActionType) },
    { no: 2, name: "occurrence", kind: "message", T: Timestamp },
    { no: 3, name: "expiration", kind: "message", T: Timestamp },
    { no: 4, name: "period", kind: "message", T: Duration },
    { no: 5, name: "flow_trade_settings", kind: "message", T: ActionFlowTradeSettings },
    { no: 6, name: "excluded_denoms", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Action {
    return new Action().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Action {
    return new Action().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Action {
    return new Action().fromJsonString(jsonString, options);
  }

  static equals(a: Action | PlainMessage<Action> | undefined, b: Action | PlainMessage<Action> | undefined): boolean {
    return proto3.util.equals(Action, a, b);
  }
}

