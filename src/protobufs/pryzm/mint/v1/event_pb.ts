// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file pryzm/mint/v1/event.proto (package pryzm.mint.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Minter } from "./minter_pb.js";
import { DistributionProportions, Params } from "./params_pb.js";

/**
 * @generated from message pryzm.mint.v1.EventMint
 */
export class EventMint extends Message<EventMint> {
  /**
   * @generated from field: pryzm.mint.v1.Minter minter = 1;
   */
  minter?: Minter;

  /**
   * @generated from field: string bonded_ratio = 2;
   */
  bondedRatio = "";

  /**
   * @generated from field: string total_minted = 3;
   */
  totalMinted = "";

  /**
   * @generated from field: pryzm.mint.v1.DistributionProportions distributed_amounts = 4;
   */
  distributedAmounts?: DistributionProportions;

  /**
   * @generated from field: int64 epoch_number = 5;
   */
  epochNumber = protoInt64.zero;

  constructor(data?: PartialMessage<EventMint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.mint.v1.EventMint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "minter", kind: "message", T: Minter },
    { no: 2, name: "bonded_ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "total_minted", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "distributed_amounts", kind: "message", T: DistributionProportions },
    { no: 5, name: "epoch_number", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventMint {
    return new EventMint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventMint {
    return new EventMint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventMint {
    return new EventMint().fromJsonString(jsonString, options);
  }

  static equals(a: EventMint | PlainMessage<EventMint> | undefined, b: EventMint | PlainMessage<EventMint> | undefined): boolean {
    return proto3.util.equals(EventMint, a, b);
  }
}

/**
 * @generated from message pryzm.mint.v1.EventSetParams
 */
export class EventSetParams extends Message<EventSetParams> {
  /**
   * @generated from field: pryzm.mint.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<EventSetParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.mint.v1.EventSetParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSetParams {
    return new EventSetParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSetParams {
    return new EventSetParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSetParams {
    return new EventSetParams().fromJsonString(jsonString, options);
  }

  static equals(a: EventSetParams | PlainMessage<EventSetParams> | undefined, b: EventSetParams | PlainMessage<EventSetParams> | undefined): boolean {
    return proto3.util.equals(EventSetParams, a, b);
  }
}

