// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file pryzm/mint/v1/minter.proto (package pryzm.mint.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Minter represents the minting state.
 *
 * @generated from message pryzm.mint.v1.Minter
 */
export class Minter extends Message<Minter> {
  /**
   * @generated from field: string inflation = 1;
   */
  inflation = "";

  /**
   * current annual expected provisions
   *
   * @generated from field: string annual_provisions = 2;
   */
  annualProvisions = "";

  constructor(data?: PartialMessage<Minter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.mint.v1.Minter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "inflation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "annual_provisions", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Minter {
    return new Minter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Minter {
    return new Minter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Minter {
    return new Minter().fromJsonString(jsonString, options);
  }

  static equals(a: Minter | PlainMessage<Minter> | undefined, b: Minter | PlainMessage<Minter> | undefined): boolean {
    return proto3.util.equals(Minter, a, b);
  }
}

