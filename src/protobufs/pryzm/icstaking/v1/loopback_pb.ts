// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file pryzm/icstaking/v1/loopback.proto (package pryzm.icstaking.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * @generated from message pryzm.icstaking.v1.LoopBackPacket
 */
export class LoopBackPacket extends Message<LoopBackPacket> {
  /**
   * the identifier of the packet, also used to make sure that the messages are executed with proper ordering
   *
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from oneof pryzm.icstaking.v1.LoopBackPacket.data
   */
  data: {
    /**
     * @generated from field: pryzm.icstaking.v1.LoopBackTransfer transfer = 2;
     */
    value: LoopBackTransfer;
    case: "transfer";
  } | {
    /**
     * @generated from field: pryzm.icstaking.v1.LoopBackMsgs msgs = 3;
     */
    value: LoopBackMsgs;
    case: "msgs";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<LoopBackPacket>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.LoopBackPacket";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "transfer", kind: "message", T: LoopBackTransfer, oneof: "data" },
    { no: 3, name: "msgs", kind: "message", T: LoopBackMsgs, oneof: "data" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoopBackPacket {
    return new LoopBackPacket().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoopBackPacket {
    return new LoopBackPacket().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoopBackPacket {
    return new LoopBackPacket().fromJsonString(jsonString, options);
  }

  static equals(a: LoopBackPacket | PlainMessage<LoopBackPacket> | undefined, b: LoopBackPacket | PlainMessage<LoopBackPacket> | undefined): boolean {
    return proto3.util.equals(LoopBackPacket, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.LoopBackMsgs
 */
export class LoopBackMsgs extends Message<LoopBackMsgs> {
  /**
   * messages that must be executed on the host chain
   *
   * @generated from field: repeated google.protobuf.Any messages = 1;
   */
  messages: Any[] = [];

  constructor(data?: PartialMessage<LoopBackMsgs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.LoopBackMsgs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "messages", kind: "message", T: Any, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoopBackMsgs {
    return new LoopBackMsgs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoopBackMsgs {
    return new LoopBackMsgs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoopBackMsgs {
    return new LoopBackMsgs().fromJsonString(jsonString, options);
  }

  static equals(a: LoopBackMsgs | PlainMessage<LoopBackMsgs> | undefined, b: LoopBackMsgs | PlainMessage<LoopBackMsgs> | undefined): boolean {
    return proto3.util.equals(LoopBackMsgs, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.LoopBackTransfer
 */
export class LoopBackTransfer extends Message<LoopBackTransfer> {
  /**
   * messages that must be executed on the host chain
   *
   * @generated from field: string from = 1;
   */
  from = "";

  /**
   * @generated from field: string to = 2;
   */
  to = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 3;
   */
  amount?: Coin;

  /**
   * @generated from field: string memo = 4;
   */
  memo = "";

  constructor(data?: PartialMessage<LoopBackTransfer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.LoopBackTransfer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "to", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "message", T: Coin },
    { no: 4, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoopBackTransfer {
    return new LoopBackTransfer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoopBackTransfer {
    return new LoopBackTransfer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoopBackTransfer {
    return new LoopBackTransfer().fromJsonString(jsonString, options);
  }

  static equals(a: LoopBackTransfer | PlainMessage<LoopBackTransfer> | undefined, b: LoopBackTransfer | PlainMessage<LoopBackTransfer> | undefined): boolean {
    return proto3.util.equals(LoopBackTransfer, a, b);
  }
}

