// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file pryzm/icstaking/v1/reply.proto (package pryzm.icstaking.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
import { RedeemableLsm } from "./lsm_pb.js";

/**
 * the stored data for handling the reply of a sent ibc packet
 *
 * @generated from message pryzm.icstaking.v1.ReplyData
 */
export class ReplyData extends Message<ReplyData> {
  /**
   * the identifier of the bridge
   *
   * @generated from field: string bridge_id = 1;
   */
  bridgeId = "";

  /**
   * this was the identifier of the sent packet and the key for ReplyData, but from icstaking v3 this field is converted to key string
   *
   * @generated from field: pryzm.icstaking.v1.PacketId packet_id = 2 [deprecated = true];
   * @deprecated
   */
  packetId?: PacketId;

  /**
   * @generated from field: string host_chain_id = 3;
   */
  hostChainId = "";

  /**
   * serialized data shared when handling the packet result
   *
   * @generated from field: bytes data = 4;
   */
  data = new Uint8Array(0);

  /**
   * the identifier of the reply data
   *
   * @generated from field: string key = 5;
   */
  key = "";

  constructor(data?: PartialMessage<ReplyData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.ReplyData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bridge_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "packet_id", kind: "message", T: PacketId },
    { no: 3, name: "host_chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReplyData {
    return new ReplyData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReplyData {
    return new ReplyData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReplyData {
    return new ReplyData().fromJsonString(jsonString, options);
  }

  static equals(a: ReplyData | PlainMessage<ReplyData> | undefined, b: ReplyData | PlainMessage<ReplyData> | undefined): boolean {
    return proto3.util.equals(ReplyData, a, b);
  }
}

/**
 * the id for a sent ibc packet
 *
 * @generated from message pryzm.icstaking.v1.PacketId
 * @deprecated
 */
export class PacketId extends Message<PacketId> {
  /**
   * @generated from field: string port_id = 1;
   */
  portId = "";

  /**
   * @generated from field: string channel_id = 2;
   */
  channelId = "";

  /**
   * @generated from field: uint64 sequence = 3;
   */
  sequence = protoInt64.zero;

  constructor(data?: PartialMessage<PacketId>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.PacketId";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PacketId {
    return new PacketId().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PacketId {
    return new PacketId().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PacketId {
    return new PacketId().fromJsonString(jsonString, options);
  }

  static equals(a: PacketId | PlainMessage<PacketId> | undefined, b: PacketId | PlainMessage<PacketId> | undefined): boolean {
    return proto3.util.equals(PacketId, a, b);
  }
}

/**
 * The reply data for DelegateTransferBridge
 *
 * @generated from message pryzm.icstaking.v1.DelegateTransferReplyData
 */
export class DelegateTransferReplyData extends Message<DelegateTransferReplyData> {
  /**
   * the identifier of the transfer session
   *
   * @generated from field: string transfer_session = 1;
   */
  transferSession = "";

  /**
   * the amount being transferred
   *
   * @generated from field: cosmos.base.v1beta1.Coin amount = 2;
   */
  amount?: Coin;

  constructor(data?: PartialMessage<DelegateTransferReplyData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.DelegateTransferReplyData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transfer_session", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DelegateTransferReplyData {
    return new DelegateTransferReplyData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DelegateTransferReplyData {
    return new DelegateTransferReplyData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DelegateTransferReplyData {
    return new DelegateTransferReplyData().fromJsonString(jsonString, options);
  }

  static equals(a: DelegateTransferReplyData | PlainMessage<DelegateTransferReplyData> | undefined, b: DelegateTransferReplyData | PlainMessage<DelegateTransferReplyData> | undefined): boolean {
    return proto3.util.equals(DelegateTransferReplyData, a, b);
  }
}

/**
 * A session of token transfer to a host chain from multiple channels, used in DelegateTransferBridge
 *
 * @generated from message pryzm.icstaking.v1.DelegateTransferSession
 */
export class DelegateTransferSession extends Message<DelegateTransferSession> {
  /**
   * a generated id for the session
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * a list of packet states, determining whether the packet is finalized (either succeeded or failed)
   *
   * @generated from field: repeated pryzm.icstaking.v1.TransferPacketState packet_states = 2;
   */
  packetStates: TransferPacketState[] = [];

  constructor(data?: PartialMessage<DelegateTransferSession>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.DelegateTransferSession";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "packet_states", kind: "message", T: TransferPacketState, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DelegateTransferSession {
    return new DelegateTransferSession().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DelegateTransferSession {
    return new DelegateTransferSession().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DelegateTransferSession {
    return new DelegateTransferSession().fromJsonString(jsonString, options);
  }

  static equals(a: DelegateTransferSession | PlainMessage<DelegateTransferSession> | undefined, b: DelegateTransferSession | PlainMessage<DelegateTransferSession> | undefined): boolean {
    return proto3.util.equals(DelegateTransferSession, a, b);
  }
}

/**
 * The state of a delegation transfer
 *
 * @generated from message pryzm.icstaking.v1.TransferPacketState
 */
export class TransferPacketState extends Message<TransferPacketState> {
  /**
   * packet identifier
   *
   * @generated from field: string packet_key = 1;
   */
  packetKey = "";

  /**
   * whether the transfer is finalized (either succeeded or failed)
   *
   * @generated from field: bool finalized = 2;
   */
  finalized = false;

  constructor(data?: PartialMessage<TransferPacketState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.TransferPacketState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "packet_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "finalized", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransferPacketState {
    return new TransferPacketState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransferPacketState {
    return new TransferPacketState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransferPacketState {
    return new TransferPacketState().fromJsonString(jsonString, options);
  }

  static equals(a: TransferPacketState | PlainMessage<TransferPacketState> | undefined, b: TransferPacketState | PlainMessage<TransferPacketState> | undefined): boolean {
    return proto3.util.equals(TransferPacketState, a, b);
  }
}

/**
 * The reply data for DelegateBridge
 *
 * @generated from message pryzm.icstaking.v1.DelegateReplyData
 */
export class DelegateReplyData extends Message<DelegateReplyData> {
  /**
   * a list of delegations to different validators
   *
   * @generated from field: repeated pryzm.icstaking.v1.DelegationEntry delegations = 1;
   */
  delegations: DelegationEntry[] = [];

  constructor(data?: PartialMessage<DelegateReplyData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.DelegateReplyData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegations", kind: "message", T: DelegationEntry, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DelegateReplyData {
    return new DelegateReplyData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DelegateReplyData {
    return new DelegateReplyData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DelegateReplyData {
    return new DelegateReplyData().fromJsonString(jsonString, options);
  }

  static equals(a: DelegateReplyData | PlainMessage<DelegateReplyData> | undefined, b: DelegateReplyData | PlainMessage<DelegateReplyData> | undefined): boolean {
    return proto3.util.equals(DelegateReplyData, a, b);
  }
}

/**
 * Contains info about delegating an amount of assets to a validator
 *
 * @generated from message pryzm.icstaking.v1.DelegationEntry
 */
export class DelegationEntry extends Message<DelegationEntry> {
  /**
   * @generated from field: string validator = 1;
   */
  validator = "";

  /**
   * @generated from field: string amount = 2;
   */
  amount = "";

  constructor(data?: PartialMessage<DelegationEntry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.DelegationEntry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DelegationEntry {
    return new DelegationEntry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DelegationEntry {
    return new DelegationEntry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DelegationEntry {
    return new DelegationEntry().fromJsonString(jsonString, options);
  }

  static equals(a: DelegationEntry | PlainMessage<DelegationEntry> | undefined, b: DelegationEntry | PlainMessage<DelegationEntry> | undefined): boolean {
    return proto3.util.equals(DelegationEntry, a, b);
  }
}

/**
 * The reply data for UndelegateBridge
 *
 * @generated from message pryzm.icstaking.v1.UndelegateReplyData
 */
export class UndelegateReplyData extends Message<UndelegateReplyData> {
  /**
   * @generated from field: string total_c_amount = 1;
   */
  totalCAmount = "";

  /**
   * @generated from field: repeated pryzm.icstaking.v1.UndelegationEntry undelegations = 2;
   */
  undelegations: UndelegationEntry[] = [];

  /**
   * @generated from field: repeated uint64 epochs = 3;
   */
  epochs: bigint[] = [];

  constructor(data?: PartialMessage<UndelegateReplyData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.UndelegateReplyData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total_c_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "undelegations", kind: "message", T: UndelegationEntry, repeated: true },
    { no: 3, name: "epochs", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UndelegateReplyData {
    return new UndelegateReplyData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UndelegateReplyData {
    return new UndelegateReplyData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UndelegateReplyData {
    return new UndelegateReplyData().fromJsonString(jsonString, options);
  }

  static equals(a: UndelegateReplyData | PlainMessage<UndelegateReplyData> | undefined, b: UndelegateReplyData | PlainMessage<UndelegateReplyData> | undefined): boolean {
    return proto3.util.equals(UndelegateReplyData, a, b);
  }
}

/**
 * Contains info about undelegating an amount of assets from a validator
 *
 * @generated from message pryzm.icstaking.v1.UndelegationEntry
 */
export class UndelegationEntry extends Message<UndelegationEntry> {
  /**
   * @generated from field: string validator = 1;
   */
  validator = "";

  /**
   * @generated from field: string amount = 2;
   */
  amount = "";

  constructor(data?: PartialMessage<UndelegationEntry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.UndelegationEntry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UndelegationEntry {
    return new UndelegationEntry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UndelegationEntry {
    return new UndelegationEntry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UndelegationEntry {
    return new UndelegationEntry().fromJsonString(jsonString, options);
  }

  static equals(a: UndelegationEntry | PlainMessage<UndelegationEntry> | undefined, b: UndelegationEntry | PlainMessage<UndelegationEntry> | undefined): boolean {
    return proto3.util.equals(UndelegationEntry, a, b);
  }
}

/**
 * The reply data for RedelegateBridge
 *
 * @generated from message pryzm.icstaking.v1.RedelegateReplyData
 */
export class RedelegateReplyData extends Message<RedelegateReplyData> {
  /**
   * @generated from field: repeated pryzm.icstaking.v1.RedelegationEntry redelegations = 1;
   */
  redelegations: RedelegationEntry[] = [];

  constructor(data?: PartialMessage<RedelegateReplyData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.RedelegateReplyData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "redelegations", kind: "message", T: RedelegationEntry, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RedelegateReplyData {
    return new RedelegateReplyData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RedelegateReplyData {
    return new RedelegateReplyData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RedelegateReplyData {
    return new RedelegateReplyData().fromJsonString(jsonString, options);
  }

  static equals(a: RedelegateReplyData | PlainMessage<RedelegateReplyData> | undefined, b: RedelegateReplyData | PlainMessage<RedelegateReplyData> | undefined): boolean {
    return proto3.util.equals(RedelegateReplyData, a, b);
  }
}

/**
 * Contains info about redelegating an amount of assets from a validator to another validator
 *
 * @generated from message pryzm.icstaking.v1.RedelegationEntry
 */
export class RedelegationEntry extends Message<RedelegationEntry> {
  /**
   * @generated from field: string src_validator = 1;
   */
  srcValidator = "";

  /**
   * @generated from field: string dst_validator = 2;
   */
  dstValidator = "";

  /**
   * @generated from field: string amount = 3;
   */
  amount = "";

  constructor(data?: PartialMessage<RedelegationEntry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.RedelegationEntry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "src_validator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "dst_validator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RedelegationEntry {
    return new RedelegationEntry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RedelegationEntry {
    return new RedelegationEntry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RedelegationEntry {
    return new RedelegationEntry().fromJsonString(jsonString, options);
  }

  static equals(a: RedelegationEntry | PlainMessage<RedelegationEntry> | undefined, b: RedelegationEntry | PlainMessage<RedelegationEntry> | undefined): boolean {
    return proto3.util.equals(RedelegationEntry, a, b);
  }
}

/**
 * The reply data used in CompoundBridge
 *
 * @generated from message pryzm.icstaking.v1.CompoundData
 */
export class CompoundData extends Message<CompoundData> {
  /**
   * @generated from field: string fee_amount = 1;
   */
  feeAmount = "";

  /**
   * @generated from field: string compound_amount = 2;
   */
  compoundAmount = "";

  constructor(data?: PartialMessage<CompoundData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.CompoundData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fee_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "compound_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CompoundData {
    return new CompoundData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CompoundData {
    return new CompoundData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CompoundData {
    return new CompoundData().fromJsonString(jsonString, options);
  }

  static equals(a: CompoundData | PlainMessage<CompoundData> | undefined, b: CompoundData | PlainMessage<CompoundData> | undefined): boolean {
    return proto3.util.equals(CompoundData, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.CollectUndelegatedReplyData
 */
export class CollectUndelegatedReplyData extends Message<CollectUndelegatedReplyData> {
  /**
   * @generated from field: string undelegated_amount = 1;
   */
  undelegatedAmount = "";

  constructor(data?: PartialMessage<CollectUndelegatedReplyData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.CollectUndelegatedReplyData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "undelegated_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CollectUndelegatedReplyData {
    return new CollectUndelegatedReplyData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CollectUndelegatedReplyData {
    return new CollectUndelegatedReplyData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CollectUndelegatedReplyData {
    return new CollectUndelegatedReplyData().fromJsonString(jsonString, options);
  }

  static equals(a: CollectUndelegatedReplyData | PlainMessage<CollectUndelegatedReplyData> | undefined, b: CollectUndelegatedReplyData | PlainMessage<CollectUndelegatedReplyData> | undefined): boolean {
    return proto3.util.equals(CollectUndelegatedReplyData, a, b);
  }
}

/**
 * The reply data used in SweepBridge
 *
 * @generated from message pryzm.icstaking.v1.SweepData
 */
export class SweepData extends Message<SweepData> {
  /**
   * a list containing info about the sweep operation through different channel channel
   *
   * @generated from field: repeated pryzm.icstaking.v1.ChannelSweep channel_sweeps = 1;
   */
  channelSweeps: ChannelSweep[] = [];

  /**
   * @generated from field: pryzm.icstaking.v1.ChannelSweep fee_sweep = 2;
   */
  feeSweep?: ChannelSweep;

  constructor(data?: PartialMessage<SweepData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.SweepData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "channel_sweeps", kind: "message", T: ChannelSweep, repeated: true },
    { no: 2, name: "fee_sweep", kind: "message", T: ChannelSweep },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SweepData {
    return new SweepData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SweepData {
    return new SweepData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SweepData {
    return new SweepData().fromJsonString(jsonString, options);
  }

  static equals(a: SweepData | PlainMessage<SweepData> | undefined, b: SweepData | PlainMessage<SweepData> | undefined): boolean {
    return proto3.util.equals(SweepData, a, b);
  }
}

/**
 * Contains info about the sweep operation through a channel
 *
 * @generated from message pryzm.icstaking.v1.ChannelSweep
 */
export class ChannelSweep extends Message<ChannelSweep> {
  /**
   * @generated from field: string channel = 1;
   */
  channel = "";

  /**
   * a list of epochs that the sweep is related to
   *
   * @generated from field: repeated uint64 epochs = 2;
   */
  epochs: bigint[] = [];

  /**
   * the amount being swept from the host chain
   *
   * @generated from field: string amount = 3;
   */
  amount = "";

  /**
   * the timeout timestamp set on the ibc transfer
   *
   * @generated from field: uint64 timeout = 4;
   */
  timeout = protoInt64.zero;

  constructor(data?: PartialMessage<ChannelSweep>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.ChannelSweep";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "channel", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "epochs", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
    { no: 3, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "timeout", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChannelSweep {
    return new ChannelSweep().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChannelSweep {
    return new ChannelSweep().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChannelSweep {
    return new ChannelSweep().fromJsonString(jsonString, options);
  }

  static equals(a: ChannelSweep | PlainMessage<ChannelSweep> | undefined, b: ChannelSweep | PlainMessage<ChannelSweep> | undefined): boolean {
    return proto3.util.equals(ChannelSweep, a, b);
  }
}

/**
 * Contains info about a single LSM share transfer
 *
 * @generated from message pryzm.icstaking.v1.LsmTransferData
 */
export class LsmTransferData extends Message<LsmTransferData> {
  /**
   * which channel is being used to transfer
   *
   * @generated from field: string channel = 1;
   */
  channel = "";

  /**
   * the actual denom of the lsm token
   *
   * @generated from field: string denom = 2;
   */
  denom = "";

  /**
   * the amount being transferred
   *
   * @generated from field: string amount = 3;
   */
  amount = "";

  /**
   * the value of the lsm amount in the terms of host chain's bond token
   *
   * @generated from field: string value = 4;
   */
  value = "";

  constructor(data?: PartialMessage<LsmTransferData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.LsmTransferData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "channel", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LsmTransferData {
    return new LsmTransferData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LsmTransferData {
    return new LsmTransferData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LsmTransferData {
    return new LsmTransferData().fromJsonString(jsonString, options);
  }

  static equals(a: LsmTransferData | PlainMessage<LsmTransferData> | undefined, b: LsmTransferData | PlainMessage<LsmTransferData> | undefined): boolean {
    return proto3.util.equals(LsmTransferData, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.LsmReplyData
 */
export class LsmReplyData extends Message<LsmReplyData> {
  /**
   * @generated from field: repeated pryzm.icstaking.v1.RedeemableLsm redeemable_lsm_list = 1;
   */
  redeemableLsmList: RedeemableLsm[] = [];

  constructor(data?: PartialMessage<LsmReplyData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.LsmReplyData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "redeemable_lsm_list", kind: "message", T: RedeemableLsm, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LsmReplyData {
    return new LsmReplyData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LsmReplyData {
    return new LsmReplyData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LsmReplyData {
    return new LsmReplyData().fromJsonString(jsonString, options);
  }

  static equals(a: LsmReplyData | PlainMessage<LsmReplyData> | undefined, b: LsmReplyData | PlainMessage<LsmReplyData> | undefined): boolean {
    return proto3.util.equals(LsmReplyData, a, b);
  }
}

