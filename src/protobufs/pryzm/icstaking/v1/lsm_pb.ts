// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file pryzm/icstaking/v1/lsm.proto (package pryzm.icstaking.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message pryzm.icstaking.v1.RedeemableLsm
 */
export class RedeemableLsm extends Message<RedeemableLsm> {
  /**
   * the host chain identifier
   *
   * @generated from field: string host_chain = 1;
   */
  hostChain = "";

  /**
   * the denomination of the LSM tokens
   *
   * @generated from field: string lsm_denom = 2;
   */
  lsmDenom = "";

  /**
   * the amount of tokens in the delegation ICA waiting to be redeemed
   *
   * @generated from field: string lsm_amount = 3;
   */
  lsmAmount = "";

  /**
   * the value of the LSM tokens in terms of the base asset, based on the amount of cAssets minted for the user
   *
   * @generated from field: string lsm_value = 4;
   */
  lsmValue = "";

  constructor(data?: PartialMessage<RedeemableLsm>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.RedeemableLsm";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host_chain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "lsm_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "lsm_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "lsm_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RedeemableLsm {
    return new RedeemableLsm().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RedeemableLsm {
    return new RedeemableLsm().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RedeemableLsm {
    return new RedeemableLsm().fromJsonString(jsonString, options);
  }

  static equals(a: RedeemableLsm | PlainMessage<RedeemableLsm> | undefined, b: RedeemableLsm | PlainMessage<RedeemableLsm> | undefined): boolean {
    return proto3.util.equals(RedeemableLsm, a, b);
  }
}

/**
 * this is used to store the transfer messages with failed execution on the host chain
 *
 * @generated from message pryzm.icstaking.v1.FailedLsmTransfer
 */
export class FailedLsmTransfer extends Message<FailedLsmTransfer> {
  /**
   * the host chain identifier
   *
   * @generated from field: string host_chain = 1;
   */
  hostChain = "";

  /**
   * the transfer channel being used
   *
   * @generated from field: string channel = 2;
   */
  channel = "";

  /**
   * the denomination of the LSM tokens
   *
   * @generated from field: string denom = 3;
   */
  denom = "";

  /**
   * the amount of tokens to be transferred
   *
   * @generated from field: string lsm_amount = 4;
   */
  lsmAmount = "";

  /**
   * the value of the lsm_amount in terms of the base asset, based on the amount of cAssets minted for the user
   *
   * @generated from field: string lsm_value = 5;
   */
  lsmValue = "";

  constructor(data?: PartialMessage<FailedLsmTransfer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.FailedLsmTransfer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host_chain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "lsm_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "lsm_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FailedLsmTransfer {
    return new FailedLsmTransfer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FailedLsmTransfer {
    return new FailedLsmTransfer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FailedLsmTransfer {
    return new FailedLsmTransfer().fromJsonString(jsonString, options);
  }

  static equals(a: FailedLsmTransfer | PlainMessage<FailedLsmTransfer> | undefined, b: FailedLsmTransfer | PlainMessage<FailedLsmTransfer> | undefined): boolean {
    return proto3.util.equals(FailedLsmTransfer, a, b);
  }
}

