// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file pryzm/icstaking/v1/tx.proto (package pryzm.icstaking.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { BoolValue, Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params, StakingParams } from "./params_pb.js";
import { HostChain, Validator } from "./host_chain_pb.js";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
import { RedelegationEntry } from "./reply_pb.js";
import { Acknowledgement } from "./multisig_pb.js";
import { Height } from "../../../ibc/core/client/v1/client_pb.js";

/**
 * @generated from enum pryzm.icstaking.v1.ICARegistrationType
 */
export enum ICARegistrationType {
  /**
   * register delegation interchain account
   *
   * @generated from enum value: DELEGATION = 0;
   */
  DELEGATION = 0,

  /**
   * register reward interchain account
   *
   * @generated from enum value: REWARD = 1;
   */
  REWARD = 1,

  /**
   * register sweep interchain account
   *
   * @generated from enum value: SWEEP = 2;
   */
  SWEEP = 2,

  /**
   * registration of reward account as the withdraw address on the host chain
   *
   * @generated from enum value: REWARD_CLAIMING = 3;
   */
  REWARD_CLAIMING = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(ICARegistrationType)
proto3.util.setEnumType(ICARegistrationType, "pryzm.icstaking.v1.ICARegistrationType", [
  { no: 0, name: "DELEGATION" },
  { no: 1, name: "REWARD" },
  { no: 2, name: "SWEEP" },
  { no: 3, name: "REWARD_CLAIMING" },
]);

/**
 * @generated from message pryzm.icstaking.v1.MsgUpdateParams
 */
export class MsgUpdateParams extends Message<MsgUpdateParams> {
  /**
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * @generated from field: pryzm.icstaking.v1.Params params = 2;
   */
  params?: Params;

  constructor(data?: PartialMessage<MsgUpdateParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.MsgUpdateParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined, b: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParams, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.MsgUpdateParamsResponse
 */
export class MsgUpdateParamsResponse extends Message<MsgUpdateParamsResponse> {
  constructor(data?: PartialMessage<MsgUpdateParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.MsgUpdateParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined, b: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParamsResponse, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.MsgRegisterHostChain
 */
export class MsgRegisterHostChain extends Message<MsgRegisterHostChain> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: pryzm.icstaking.v1.HostChain host_chain = 2;
   */
  hostChain?: HostChain;

  constructor(data?: PartialMessage<MsgRegisterHostChain>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.MsgRegisterHostChain";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "host_chain", kind: "message", T: HostChain },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRegisterHostChain {
    return new MsgRegisterHostChain().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRegisterHostChain {
    return new MsgRegisterHostChain().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRegisterHostChain {
    return new MsgRegisterHostChain().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRegisterHostChain | PlainMessage<MsgRegisterHostChain> | undefined, b: MsgRegisterHostChain | PlainMessage<MsgRegisterHostChain> | undefined): boolean {
    return proto3.util.equals(MsgRegisterHostChain, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.MsgRegisterHostChainResponse
 */
export class MsgRegisterHostChainResponse extends Message<MsgRegisterHostChainResponse> {
  constructor(data?: PartialMessage<MsgRegisterHostChainResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.MsgRegisterHostChainResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRegisterHostChainResponse {
    return new MsgRegisterHostChainResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRegisterHostChainResponse {
    return new MsgRegisterHostChainResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRegisterHostChainResponse {
    return new MsgRegisterHostChainResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRegisterHostChainResponse | PlainMessage<MsgRegisterHostChainResponse> | undefined, b: MsgRegisterHostChainResponse | PlainMessage<MsgRegisterHostChainResponse> | undefined): boolean {
    return proto3.util.equals(MsgRegisterHostChainResponse, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.MsgUpdateHostChain
 */
export class MsgUpdateHostChain extends Message<MsgUpdateHostChain> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string host_chain_id = 2;
   */
  hostChainId = "";

  /**
   * @generated from field: repeated pryzm.icstaking.v1.Validator validators = 3;
   */
  validators: Validator[] = [];

  /**
   * @generated from field: pryzm.icstaking.v1.StakingParams params = 4;
   */
  params?: StakingParams;

  /**
   * @generated from field: google.protobuf.BoolValue allow_lsm_shares = 5;
   */
  allowLsmShares?: boolean;

  constructor(data?: PartialMessage<MsgUpdateHostChain>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.MsgUpdateHostChain";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "host_chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "validators", kind: "message", T: Validator, repeated: true },
    { no: 4, name: "params", kind: "message", T: StakingParams },
    { no: 5, name: "allow_lsm_shares", kind: "message", T: BoolValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateHostChain {
    return new MsgUpdateHostChain().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateHostChain {
    return new MsgUpdateHostChain().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateHostChain {
    return new MsgUpdateHostChain().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateHostChain | PlainMessage<MsgUpdateHostChain> | undefined, b: MsgUpdateHostChain | PlainMessage<MsgUpdateHostChain> | undefined): boolean {
    return proto3.util.equals(MsgUpdateHostChain, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.MsgUpdateHostChainResponse
 */
export class MsgUpdateHostChainResponse extends Message<MsgUpdateHostChainResponse> {
  constructor(data?: PartialMessage<MsgUpdateHostChainResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.MsgUpdateHostChainResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateHostChainResponse {
    return new MsgUpdateHostChainResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateHostChainResponse {
    return new MsgUpdateHostChainResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateHostChainResponse {
    return new MsgUpdateHostChainResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateHostChainResponse | PlainMessage<MsgUpdateHostChainResponse> | undefined, b: MsgUpdateHostChainResponse | PlainMessage<MsgUpdateHostChainResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateHostChainResponse, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.MsgStake
 */
export class MsgStake extends Message<MsgStake> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string host_chain = 2;
   */
  hostChain = "";

  /**
   * @generated from field: string transfer_channel = 3;
   */
  transferChannel = "";

  /**
   * @generated from field: string amount = 4;
   */
  amount = "";

  constructor(data?: PartialMessage<MsgStake>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.MsgStake";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "host_chain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "transfer_channel", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgStake {
    return new MsgStake().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgStake {
    return new MsgStake().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgStake {
    return new MsgStake().fromJsonString(jsonString, options);
  }

  static equals(a: MsgStake | PlainMessage<MsgStake> | undefined, b: MsgStake | PlainMessage<MsgStake> | undefined): boolean {
    return proto3.util.equals(MsgStake, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.MsgStakeResponse
 */
export class MsgStakeResponse extends Message<MsgStakeResponse> {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin c_amount = 1;
   */
  cAmount?: Coin;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin fee = 2;
   */
  fee?: Coin;

  constructor(data?: PartialMessage<MsgStakeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.MsgStakeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "c_amount", kind: "message", T: Coin },
    { no: 2, name: "fee", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgStakeResponse {
    return new MsgStakeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgStakeResponse {
    return new MsgStakeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgStakeResponse {
    return new MsgStakeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgStakeResponse | PlainMessage<MsgStakeResponse> | undefined, b: MsgStakeResponse | PlainMessage<MsgStakeResponse> | undefined): boolean {
    return proto3.util.equals(MsgStakeResponse, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.MsgStakeLsmShares
 */
export class MsgStakeLsmShares extends Message<MsgStakeLsmShares> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string host_chain = 2;
   */
  hostChain = "";

  /**
   * @generated from field: string transfer_channel = 3;
   */
  transferChannel = "";

  /**
   * @generated from field: string lsm_denom = 4;
   */
  lsmDenom = "";

  /**
   * @generated from field: string amount = 5;
   */
  amount = "";

  constructor(data?: PartialMessage<MsgStakeLsmShares>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.MsgStakeLsmShares";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "host_chain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "transfer_channel", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "lsm_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgStakeLsmShares {
    return new MsgStakeLsmShares().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgStakeLsmShares {
    return new MsgStakeLsmShares().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgStakeLsmShares {
    return new MsgStakeLsmShares().fromJsonString(jsonString, options);
  }

  static equals(a: MsgStakeLsmShares | PlainMessage<MsgStakeLsmShares> | undefined, b: MsgStakeLsmShares | PlainMessage<MsgStakeLsmShares> | undefined): boolean {
    return proto3.util.equals(MsgStakeLsmShares, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.MsgStakeLsmSharesResponse
 */
export class MsgStakeLsmSharesResponse extends Message<MsgStakeLsmSharesResponse> {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin c_amount = 1;
   */
  cAmount?: Coin;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin fee = 2;
   */
  fee?: Coin;

  constructor(data?: PartialMessage<MsgStakeLsmSharesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.MsgStakeLsmSharesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "c_amount", kind: "message", T: Coin },
    { no: 2, name: "fee", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgStakeLsmSharesResponse {
    return new MsgStakeLsmSharesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgStakeLsmSharesResponse {
    return new MsgStakeLsmSharesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgStakeLsmSharesResponse {
    return new MsgStakeLsmSharesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgStakeLsmSharesResponse | PlainMessage<MsgStakeLsmSharesResponse> | undefined, b: MsgStakeLsmSharesResponse | PlainMessage<MsgStakeLsmSharesResponse> | undefined): boolean {
    return proto3.util.equals(MsgStakeLsmSharesResponse, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.MsgUnstake
 */
export class MsgUnstake extends Message<MsgUnstake> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string host_chain = 2;
   */
  hostChain = "";

  /**
   * @generated from field: string transfer_channel = 3;
   */
  transferChannel = "";

  /**
   * @generated from field: string c_amount = 4;
   */
  cAmount = "";

  constructor(data?: PartialMessage<MsgUnstake>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.MsgUnstake";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "host_chain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "transfer_channel", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "c_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUnstake {
    return new MsgUnstake().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUnstake {
    return new MsgUnstake().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUnstake {
    return new MsgUnstake().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUnstake | PlainMessage<MsgUnstake> | undefined, b: MsgUnstake | PlainMessage<MsgUnstake> | undefined): boolean {
    return proto3.util.equals(MsgUnstake, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.MsgUnstakeResponse
 */
export class MsgUnstakeResponse extends Message<MsgUnstakeResponse> {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin u_amount = 1;
   */
  uAmount?: Coin;

  constructor(data?: PartialMessage<MsgUnstakeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.MsgUnstakeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "u_amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUnstakeResponse {
    return new MsgUnstakeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUnstakeResponse {
    return new MsgUnstakeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUnstakeResponse {
    return new MsgUnstakeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUnstakeResponse | PlainMessage<MsgUnstakeResponse> | undefined, b: MsgUnstakeResponse | PlainMessage<MsgUnstakeResponse> | undefined): boolean {
    return proto3.util.equals(MsgUnstakeResponse, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.MsgRedeemUnstaked
 */
export class MsgRedeemUnstaked extends Message<MsgRedeemUnstaked> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string host_chain = 2;
   */
  hostChain = "";

  /**
   * @generated from field: string transfer_channel = 3;
   */
  transferChannel = "";

  /**
   * @generated from field: string u_amount = 4;
   */
  uAmount = "";

  /**
   * @generated from field: uint64 epoch = 5;
   */
  epoch = protoInt64.zero;

  constructor(data?: PartialMessage<MsgRedeemUnstaked>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.MsgRedeemUnstaked";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "host_chain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "transfer_channel", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "u_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "epoch", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRedeemUnstaked {
    return new MsgRedeemUnstaked().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRedeemUnstaked {
    return new MsgRedeemUnstaked().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRedeemUnstaked {
    return new MsgRedeemUnstaked().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRedeemUnstaked | PlainMessage<MsgRedeemUnstaked> | undefined, b: MsgRedeemUnstaked | PlainMessage<MsgRedeemUnstaked> | undefined): boolean {
    return proto3.util.equals(MsgRedeemUnstaked, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.MsgRedeemUnstakedResponse
 */
export class MsgRedeemUnstakedResponse extends Message<MsgRedeemUnstakedResponse> {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 1;
   */
  amount?: Coin;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin fee = 2;
   */
  fee?: Coin;

  constructor(data?: PartialMessage<MsgRedeemUnstakedResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.MsgRedeemUnstakedResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "message", T: Coin },
    { no: 2, name: "fee", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRedeemUnstakedResponse {
    return new MsgRedeemUnstakedResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRedeemUnstakedResponse {
    return new MsgRedeemUnstakedResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRedeemUnstakedResponse {
    return new MsgRedeemUnstakedResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRedeemUnstakedResponse | PlainMessage<MsgRedeemUnstakedResponse> | undefined, b: MsgRedeemUnstakedResponse | PlainMessage<MsgRedeemUnstakedResponse> | undefined): boolean {
    return proto3.util.equals(MsgRedeemUnstakedResponse, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.MsgInstantUnstake
 */
export class MsgInstantUnstake extends Message<MsgInstantUnstake> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string host_chain = 2;
   */
  hostChain = "";

  /**
   * @generated from field: string transfer_channel = 3;
   */
  transferChannel = "";

  /**
   * @generated from field: string min_c_amount = 4;
   */
  minCAmount = "";

  /**
   * @generated from field: string max_c_amount = 5;
   */
  maxCAmount = "";

  constructor(data?: PartialMessage<MsgInstantUnstake>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.MsgInstantUnstake";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "host_chain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "transfer_channel", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "min_c_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "max_c_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgInstantUnstake {
    return new MsgInstantUnstake().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgInstantUnstake {
    return new MsgInstantUnstake().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgInstantUnstake {
    return new MsgInstantUnstake().fromJsonString(jsonString, options);
  }

  static equals(a: MsgInstantUnstake | PlainMessage<MsgInstantUnstake> | undefined, b: MsgInstantUnstake | PlainMessage<MsgInstantUnstake> | undefined): boolean {
    return proto3.util.equals(MsgInstantUnstake, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.MsgInstantUnstakeResponse
 */
export class MsgInstantUnstakeResponse extends Message<MsgInstantUnstakeResponse> {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 1;
   */
  amount?: Coin;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin fee = 2;
   */
  fee?: Coin;

  constructor(data?: PartialMessage<MsgInstantUnstakeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.MsgInstantUnstakeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "message", T: Coin },
    { no: 2, name: "fee", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgInstantUnstakeResponse {
    return new MsgInstantUnstakeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgInstantUnstakeResponse {
    return new MsgInstantUnstakeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgInstantUnstakeResponse {
    return new MsgInstantUnstakeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgInstantUnstakeResponse | PlainMessage<MsgInstantUnstakeResponse> | undefined, b: MsgInstantUnstakeResponse | PlainMessage<MsgInstantUnstakeResponse> | undefined): boolean {
    return proto3.util.equals(MsgInstantUnstakeResponse, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.MsgRebalanceDelegations
 */
export class MsgRebalanceDelegations extends Message<MsgRebalanceDelegations> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string host_chain = 2;
   */
  hostChain = "";

  constructor(data?: PartialMessage<MsgRebalanceDelegations>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.MsgRebalanceDelegations";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "host_chain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRebalanceDelegations {
    return new MsgRebalanceDelegations().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRebalanceDelegations {
    return new MsgRebalanceDelegations().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRebalanceDelegations {
    return new MsgRebalanceDelegations().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRebalanceDelegations | PlainMessage<MsgRebalanceDelegations> | undefined, b: MsgRebalanceDelegations | PlainMessage<MsgRebalanceDelegations> | undefined): boolean {
    return proto3.util.equals(MsgRebalanceDelegations, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.MsgRebalanceDelegationsResponse
 */
export class MsgRebalanceDelegationsResponse extends Message<MsgRebalanceDelegationsResponse> {
  constructor(data?: PartialMessage<MsgRebalanceDelegationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.MsgRebalanceDelegationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRebalanceDelegationsResponse {
    return new MsgRebalanceDelegationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRebalanceDelegationsResponse {
    return new MsgRebalanceDelegationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRebalanceDelegationsResponse {
    return new MsgRebalanceDelegationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRebalanceDelegationsResponse | PlainMessage<MsgRebalanceDelegationsResponse> | undefined, b: MsgRebalanceDelegationsResponse | PlainMessage<MsgRebalanceDelegationsResponse> | undefined): boolean {
    return proto3.util.equals(MsgRebalanceDelegationsResponse, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.MsgRedelegate
 */
export class MsgRedelegate extends Message<MsgRedelegate> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string host_chain = 2;
   */
  hostChain = "";

  /**
   * @generated from field: repeated pryzm.icstaking.v1.RedelegationEntry redelegations = 3;
   */
  redelegations: RedelegationEntry[] = [];

  constructor(data?: PartialMessage<MsgRedelegate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.MsgRedelegate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "host_chain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "redelegations", kind: "message", T: RedelegationEntry, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRedelegate {
    return new MsgRedelegate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRedelegate {
    return new MsgRedelegate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRedelegate {
    return new MsgRedelegate().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRedelegate | PlainMessage<MsgRedelegate> | undefined, b: MsgRedelegate | PlainMessage<MsgRedelegate> | undefined): boolean {
    return proto3.util.equals(MsgRedelegate, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.MsgRedelegateResponse
 */
export class MsgRedelegateResponse extends Message<MsgRedelegateResponse> {
  constructor(data?: PartialMessage<MsgRedelegateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.MsgRedelegateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRedelegateResponse {
    return new MsgRedelegateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRedelegateResponse {
    return new MsgRedelegateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRedelegateResponse {
    return new MsgRedelegateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRedelegateResponse | PlainMessage<MsgRedelegateResponse> | undefined, b: MsgRedelegateResponse | PlainMessage<MsgRedelegateResponse> | undefined): boolean {
    return proto3.util.equals(MsgRedelegateResponse, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.MsgRegisterInterchainAccount
 */
export class MsgRegisterInterchainAccount extends Message<MsgRegisterInterchainAccount> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string host_chain = 2;
   */
  hostChain = "";

  /**
   * @generated from field: pryzm.icstaking.v1.ICARegistrationType registration_type = 3;
   */
  registrationType = ICARegistrationType.DELEGATION;

  constructor(data?: PartialMessage<MsgRegisterInterchainAccount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.MsgRegisterInterchainAccount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "host_chain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "registration_type", kind: "enum", T: proto3.getEnumType(ICARegistrationType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRegisterInterchainAccount {
    return new MsgRegisterInterchainAccount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRegisterInterchainAccount {
    return new MsgRegisterInterchainAccount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRegisterInterchainAccount {
    return new MsgRegisterInterchainAccount().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRegisterInterchainAccount | PlainMessage<MsgRegisterInterchainAccount> | undefined, b: MsgRegisterInterchainAccount | PlainMessage<MsgRegisterInterchainAccount> | undefined): boolean {
    return proto3.util.equals(MsgRegisterInterchainAccount, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.MsgRegisterInterchainAccountResponse
 */
export class MsgRegisterInterchainAccountResponse extends Message<MsgRegisterInterchainAccountResponse> {
  constructor(data?: PartialMessage<MsgRegisterInterchainAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.MsgRegisterInterchainAccountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRegisterInterchainAccountResponse {
    return new MsgRegisterInterchainAccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRegisterInterchainAccountResponse {
    return new MsgRegisterInterchainAccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRegisterInterchainAccountResponse {
    return new MsgRegisterInterchainAccountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRegisterInterchainAccountResponse | PlainMessage<MsgRegisterInterchainAccountResponse> | undefined, b: MsgRegisterInterchainAccountResponse | PlainMessage<MsgRegisterInterchainAccountResponse> | undefined): boolean {
    return proto3.util.equals(MsgRegisterInterchainAccountResponse, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.MsgCreateMultiSigConnection
 */
export class MsgCreateMultiSigConnection extends Message<MsgCreateMultiSigConnection> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * @generated from field: string operator = 3;
   */
  operator = "";

  constructor(data?: PartialMessage<MsgCreateMultiSigConnection>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.MsgCreateMultiSigConnection";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "operator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateMultiSigConnection {
    return new MsgCreateMultiSigConnection().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateMultiSigConnection {
    return new MsgCreateMultiSigConnection().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateMultiSigConnection {
    return new MsgCreateMultiSigConnection().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateMultiSigConnection | PlainMessage<MsgCreateMultiSigConnection> | undefined, b: MsgCreateMultiSigConnection | PlainMessage<MsgCreateMultiSigConnection> | undefined): boolean {
    return proto3.util.equals(MsgCreateMultiSigConnection, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.MsgCreateMultiSigConnectionResponse
 */
export class MsgCreateMultiSigConnectionResponse extends Message<MsgCreateMultiSigConnectionResponse> {
  constructor(data?: PartialMessage<MsgCreateMultiSigConnectionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.MsgCreateMultiSigConnectionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateMultiSigConnectionResponse {
    return new MsgCreateMultiSigConnectionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateMultiSigConnectionResponse {
    return new MsgCreateMultiSigConnectionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateMultiSigConnectionResponse {
    return new MsgCreateMultiSigConnectionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateMultiSigConnectionResponse | PlainMessage<MsgCreateMultiSigConnectionResponse> | undefined, b: MsgCreateMultiSigConnectionResponse | PlainMessage<MsgCreateMultiSigConnectionResponse> | undefined): boolean {
    return proto3.util.equals(MsgCreateMultiSigConnectionResponse, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.MsgUpdateMultiSigConnection
 */
export class MsgUpdateMultiSigConnection extends Message<MsgUpdateMultiSigConnection> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * @generated from field: string operator = 3;
   */
  operator = "";

  constructor(data?: PartialMessage<MsgUpdateMultiSigConnection>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.MsgUpdateMultiSigConnection";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "operator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateMultiSigConnection {
    return new MsgUpdateMultiSigConnection().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateMultiSigConnection {
    return new MsgUpdateMultiSigConnection().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateMultiSigConnection {
    return new MsgUpdateMultiSigConnection().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateMultiSigConnection | PlainMessage<MsgUpdateMultiSigConnection> | undefined, b: MsgUpdateMultiSigConnection | PlainMessage<MsgUpdateMultiSigConnection> | undefined): boolean {
    return proto3.util.equals(MsgUpdateMultiSigConnection, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.MsgUpdateMultiSigConnectionResponse
 */
export class MsgUpdateMultiSigConnectionResponse extends Message<MsgUpdateMultiSigConnectionResponse> {
  constructor(data?: PartialMessage<MsgUpdateMultiSigConnectionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.MsgUpdateMultiSigConnectionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateMultiSigConnectionResponse {
    return new MsgUpdateMultiSigConnectionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateMultiSigConnectionResponse {
    return new MsgUpdateMultiSigConnectionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateMultiSigConnectionResponse {
    return new MsgUpdateMultiSigConnectionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateMultiSigConnectionResponse | PlainMessage<MsgUpdateMultiSigConnectionResponse> | undefined, b: MsgUpdateMultiSigConnectionResponse | PlainMessage<MsgUpdateMultiSigConnectionResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateMultiSigConnectionResponse, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.MsgAcknowledgeMultiSigPacket
 */
export class MsgAcknowledgeMultiSigPacket extends Message<MsgAcknowledgeMultiSigPacket> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string connection_id = 2;
   */
  connectionId = "";

  /**
   * @generated from field: uint64 sequence = 3;
   */
  sequence = protoInt64.zero;

  /**
   * @generated from field: pryzm.icstaking.v1.Acknowledgement ack = 4;
   */
  ack?: Acknowledgement;

  /**
   * @generated from field: ibc.core.client.v1.Height height = 5;
   */
  height?: Height;

  /**
   * @generated from field: string tx_hash = 6;
   */
  txHash = "";

  constructor(data?: PartialMessage<MsgAcknowledgeMultiSigPacket>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.MsgAcknowledgeMultiSigPacket";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "connection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "ack", kind: "message", T: Acknowledgement },
    { no: 5, name: "height", kind: "message", T: Height },
    { no: 6, name: "tx_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgAcknowledgeMultiSigPacket {
    return new MsgAcknowledgeMultiSigPacket().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgAcknowledgeMultiSigPacket {
    return new MsgAcknowledgeMultiSigPacket().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgAcknowledgeMultiSigPacket {
    return new MsgAcknowledgeMultiSigPacket().fromJsonString(jsonString, options);
  }

  static equals(a: MsgAcknowledgeMultiSigPacket | PlainMessage<MsgAcknowledgeMultiSigPacket> | undefined, b: MsgAcknowledgeMultiSigPacket | PlainMessage<MsgAcknowledgeMultiSigPacket> | undefined): boolean {
    return proto3.util.equals(MsgAcknowledgeMultiSigPacket, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.MsgAcknowledgeMultiSigPacketResponse
 */
export class MsgAcknowledgeMultiSigPacketResponse extends Message<MsgAcknowledgeMultiSigPacketResponse> {
  constructor(data?: PartialMessage<MsgAcknowledgeMultiSigPacketResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.MsgAcknowledgeMultiSigPacketResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgAcknowledgeMultiSigPacketResponse {
    return new MsgAcknowledgeMultiSigPacketResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgAcknowledgeMultiSigPacketResponse {
    return new MsgAcknowledgeMultiSigPacketResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgAcknowledgeMultiSigPacketResponse {
    return new MsgAcknowledgeMultiSigPacketResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgAcknowledgeMultiSigPacketResponse | PlainMessage<MsgAcknowledgeMultiSigPacketResponse> | undefined, b: MsgAcknowledgeMultiSigPacketResponse | PlainMessage<MsgAcknowledgeMultiSigPacketResponse> | undefined): boolean {
    return proto3.util.equals(MsgAcknowledgeMultiSigPacketResponse, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.MsgRegisterHostAccounts
 */
export class MsgRegisterHostAccounts extends Message<MsgRegisterHostAccounts> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string host_chain = 2;
   */
  hostChain = "";

  /**
   * @generated from field: string delegation_address = 3;
   */
  delegationAddress = "";

  /**
   * @generated from field: string reward_address = 4;
   */
  rewardAddress = "";

  /**
   * @generated from field: string sweep_address = 5;
   */
  sweepAddress = "";

  constructor(data?: PartialMessage<MsgRegisterHostAccounts>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.MsgRegisterHostAccounts";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "host_chain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "delegation_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "reward_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "sweep_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRegisterHostAccounts {
    return new MsgRegisterHostAccounts().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRegisterHostAccounts {
    return new MsgRegisterHostAccounts().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRegisterHostAccounts {
    return new MsgRegisterHostAccounts().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRegisterHostAccounts | PlainMessage<MsgRegisterHostAccounts> | undefined, b: MsgRegisterHostAccounts | PlainMessage<MsgRegisterHostAccounts> | undefined): boolean {
    return proto3.util.equals(MsgRegisterHostAccounts, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.MsgRegisterHostAccountsResponse
 */
export class MsgRegisterHostAccountsResponse extends Message<MsgRegisterHostAccountsResponse> {
  constructor(data?: PartialMessage<MsgRegisterHostAccountsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.MsgRegisterHostAccountsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRegisterHostAccountsResponse {
    return new MsgRegisterHostAccountsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRegisterHostAccountsResponse {
    return new MsgRegisterHostAccountsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRegisterHostAccountsResponse {
    return new MsgRegisterHostAccountsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRegisterHostAccountsResponse | PlainMessage<MsgRegisterHostAccountsResponse> | undefined, b: MsgRegisterHostAccountsResponse | PlainMessage<MsgRegisterHostAccountsResponse> | undefined): boolean {
    return proto3.util.equals(MsgRegisterHostAccountsResponse, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.MsgRetryFailedLsmTransfer
 */
export class MsgRetryFailedLsmTransfer extends Message<MsgRetryFailedLsmTransfer> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string host_chain = 2;
   */
  hostChain = "";

  /**
   * @generated from field: string lsm_denom = 3;
   */
  lsmDenom = "";

  /**
   * @generated from field: string transfer_channel = 4;
   */
  transferChannel = "";

  constructor(data?: PartialMessage<MsgRetryFailedLsmTransfer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.MsgRetryFailedLsmTransfer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "host_chain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "lsm_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "transfer_channel", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRetryFailedLsmTransfer {
    return new MsgRetryFailedLsmTransfer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRetryFailedLsmTransfer {
    return new MsgRetryFailedLsmTransfer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRetryFailedLsmTransfer {
    return new MsgRetryFailedLsmTransfer().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRetryFailedLsmTransfer | PlainMessage<MsgRetryFailedLsmTransfer> | undefined, b: MsgRetryFailedLsmTransfer | PlainMessage<MsgRetryFailedLsmTransfer> | undefined): boolean {
    return proto3.util.equals(MsgRetryFailedLsmTransfer, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.MsgRetryFailedLsmTransferResponse
 */
export class MsgRetryFailedLsmTransferResponse extends Message<MsgRetryFailedLsmTransferResponse> {
  constructor(data?: PartialMessage<MsgRetryFailedLsmTransferResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.MsgRetryFailedLsmTransferResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRetryFailedLsmTransferResponse {
    return new MsgRetryFailedLsmTransferResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRetryFailedLsmTransferResponse {
    return new MsgRetryFailedLsmTransferResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRetryFailedLsmTransferResponse {
    return new MsgRetryFailedLsmTransferResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRetryFailedLsmTransferResponse | PlainMessage<MsgRetryFailedLsmTransferResponse> | undefined, b: MsgRetryFailedLsmTransferResponse | PlainMessage<MsgRetryFailedLsmTransferResponse> | undefined): boolean {
    return proto3.util.equals(MsgRetryFailedLsmTransferResponse, a, b);
  }
}

