// @generated by protoc-gen-cosmes v0.0.1 with parameter "target=ts"
// @generated from file pryzm/icstaking/v1/query.proto (package pryzm.icstaking.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { QueryAllChannelUndelegationRequest, QueryAllChannelUndelegationResponse, QueryAllFailedLsmTransferRequest, QueryAllFailedLsmTransferResponse, QueryAllHostChainRequest, QueryAllHostChainResponse, QueryAllHostChainStateRequest, QueryAllHostChainStateResponse, QueryAllMultiSigConnectionRequest, QueryAllMultiSigConnectionResponse, QueryAllMultiSigPacketRequest, QueryAllMultiSigPacketResponse, QueryAllRedeemableLsmRequest, QueryAllRedeemableLsmResponse, QueryAllReplyDataRequest, QueryAllReplyDataResponse, QueryAllSweepTransferRequest, QueryAllSweepTransferResponse, QueryAllUndelegationRequest, QueryAllUndelegationResponse, QueryDelegationQueueBalanceRequest, QueryDelegationQueueBalanceResponse, QueryEpochInfoRequest, QueryEpochInfoResponse, QueryGetChannelUndelegationRequest, QueryGetChannelUndelegationResponse, QueryGetHostChainRequest, QueryGetHostChainResponse, QueryGetHostChainStateRequest, QueryGetHostChainStateResponse, QueryGetMultiSigConnectionRequest, QueryGetMultiSigConnectionResponse, QueryGetMultiSigPacketRequest, QueryGetMultiSigPacketResponse, QueryGetUndelegationRequest, QueryGetUndelegationResponse, QueryIncompleteUndelegationRequest, QueryIncompleteUndelegationResponse, QueryParamsRequest, QueryParamsResponse, QuerySimulateStakeRequest, QuerySimulateStakeResponse } from "./query_pb.js";

const TYPE_NAME = "pryzm.icstaking.v1.Query";

/**
 * Parameters queries the parameters of the module.
 *
 * @generated from rpc pryzm.icstaking.v1.Query.Params
 */
export const QueryParamsService = {
  typeName: TYPE_NAME,
  method: "Params",
  Request: QueryParamsRequest,
  Response: QueryParamsResponse,
} as const;

/**
 * Queries a HostChain by index.
 *
 * @generated from rpc pryzm.icstaking.v1.Query.HostChain
 */
export const QueryHostChainService = {
  typeName: TYPE_NAME,
  method: "HostChain",
  Request: QueryGetHostChainRequest,
  Response: QueryGetHostChainResponse,
} as const;

/**
 * Queries a list of HostChain items.
 *
 * @generated from rpc pryzm.icstaking.v1.Query.HostChainAll
 */
export const QueryHostChainAllService = {
  typeName: TYPE_NAME,
  method: "HostChainAll",
  Request: QueryAllHostChainRequest,
  Response: QueryAllHostChainResponse,
} as const;

/**
 * Queries a HostChainState by index.
 *
 * @generated from rpc pryzm.icstaking.v1.Query.HostChainState
 */
export const QueryHostChainStateService = {
  typeName: TYPE_NAME,
  method: "HostChainState",
  Request: QueryGetHostChainStateRequest,
  Response: QueryGetHostChainStateResponse,
} as const;

/**
 * Queries a list of HostChainState items.
 *
 * @generated from rpc pryzm.icstaking.v1.Query.HostChainStateAll
 */
export const QueryHostChainStateAllService = {
  typeName: TYPE_NAME,
  method: "HostChainStateAll",
  Request: QueryAllHostChainStateRequest,
  Response: QueryAllHostChainStateResponse,
} as const;

/**
 * Queries a Undelegation by index.
 *
 * @generated from rpc pryzm.icstaking.v1.Query.Undelegation
 */
export const QueryUndelegationService = {
  typeName: TYPE_NAME,
  method: "Undelegation",
  Request: QueryGetUndelegationRequest,
  Response: QueryGetUndelegationResponse,
} as const;

/**
 * Queries a list of Undelegation items.
 *
 * @generated from rpc pryzm.icstaking.v1.Query.UndelegationAll
 */
export const QueryUndelegationAllService = {
  typeName: TYPE_NAME,
  method: "UndelegationAll",
  Request: QueryAllUndelegationRequest,
  Response: QueryAllUndelegationResponse,
} as const;

/**
 * Queries a list of incomplete undelegations sorted by completion time.
 *
 * @generated from rpc pryzm.icstaking.v1.Query.IncompleteUndelegationAll
 */
export const QueryIncompleteUndelegationAllService = {
  typeName: TYPE_NAME,
  method: "IncompleteUndelegationAll",
  Request: QueryIncompleteUndelegationRequest,
  Response: QueryIncompleteUndelegationResponse,
} as const;

/**
 * Queries a ChannelUndelegation by index.
 *
 * @generated from rpc pryzm.icstaking.v1.Query.ChannelUndelegation
 */
export const QueryChannelUndelegationService = {
  typeName: TYPE_NAME,
  method: "ChannelUndelegation",
  Request: QueryGetChannelUndelegationRequest,
  Response: QueryGetChannelUndelegationResponse,
} as const;

/**
 * Queries a list of ChannelUndelegation items.
 *
 * @generated from rpc pryzm.icstaking.v1.Query.ChannelUndelegationAll
 */
export const QueryChannelUndelegationAllService = {
  typeName: TYPE_NAME,
  method: "ChannelUndelegationAll",
  Request: QueryAllChannelUndelegationRequest,
  Response: QueryAllChannelUndelegationResponse,
} as const;

/**
 * Queries the balance of the delegation queue.
 *
 * @generated from rpc pryzm.icstaking.v1.Query.DelegationQueueBalance
 */
export const QueryDelegationQueueBalanceService = {
  typeName: TYPE_NAME,
  method: "DelegationQueueBalance",
  Request: QueryDelegationQueueBalanceRequest,
  Response: QueryDelegationQueueBalanceResponse,
} as const;

/**
 * Queries the information about last delegation and undelegation times
 *
 * @generated from rpc pryzm.icstaking.v1.Query.EpochInfo
 */
export const QueryEpochInfoService = {
  typeName: TYPE_NAME,
  method: "EpochInfo",
  Request: QueryEpochInfoRequest,
  Response: QueryEpochInfoResponse,
} as const;

/**
 * Queries the list of reply data
 *
 * @generated from rpc pryzm.icstaking.v1.Query.ReplyDataAll
 */
export const QueryReplyDataAllService = {
  typeName: TYPE_NAME,
  method: "ReplyDataAll",
  Request: QueryAllReplyDataRequest,
  Response: QueryAllReplyDataResponse,
} as const;

/**
 * Queries a list of FailedLsmTransfer items.
 *
 * @generated from rpc pryzm.icstaking.v1.Query.RedeemableLsmAll
 */
export const QueryRedeemableLsmAllService = {
  typeName: TYPE_NAME,
  method: "RedeemableLsmAll",
  Request: QueryAllRedeemableLsmRequest,
  Response: QueryAllRedeemableLsmResponse,
} as const;

/**
 * Queries a list of FailedLsmTransfer items.
 *
 * @generated from rpc pryzm.icstaking.v1.Query.FailedLsmTransferAll
 */
export const QueryFailedLsmTransferAllService = {
  typeName: TYPE_NAME,
  method: "FailedLsmTransferAll",
  Request: QueryAllFailedLsmTransferRequest,
  Response: QueryAllFailedLsmTransferResponse,
} as const;

/**
 * Queries a MultiSigConnection by index.
 *
 * @generated from rpc pryzm.icstaking.v1.Query.MultiSigConnection
 */
export const QueryMultiSigConnectionService = {
  typeName: TYPE_NAME,
  method: "MultiSigConnection",
  Request: QueryGetMultiSigConnectionRequest,
  Response: QueryGetMultiSigConnectionResponse,
} as const;

/**
 * Queries a list of MultiSigConnection items.
 *
 * @generated from rpc pryzm.icstaking.v1.Query.MultiSigConnectionAll
 */
export const QueryMultiSigConnectionAllService = {
  typeName: TYPE_NAME,
  method: "MultiSigConnectionAll",
  Request: QueryAllMultiSigConnectionRequest,
  Response: QueryAllMultiSigConnectionResponse,
} as const;

/**
 * Queries a MultiSigPacket by index.
 *
 * @generated from rpc pryzm.icstaking.v1.Query.MultiSigPacket
 */
export const QueryMultiSigPacketService = {
  typeName: TYPE_NAME,
  method: "MultiSigPacket",
  Request: QueryGetMultiSigPacketRequest,
  Response: QueryGetMultiSigPacketResponse,
} as const;

/**
 * Queries a list of MultiSigPacket items.
 *
 * @generated from rpc pryzm.icstaking.v1.Query.MultiSigPacketAll
 */
export const QueryMultiSigPacketAllService = {
  typeName: TYPE_NAME,
  method: "MultiSigPacketAll",
  Request: QueryAllMultiSigPacketRequest,
  Response: QueryAllMultiSigPacketResponse,
} as const;

/**
 * Queries the list of sweep transfer
 *
 * @generated from rpc pryzm.icstaking.v1.Query.SweepTransferAll
 */
export const QuerySweepTransferAllService = {
  typeName: TYPE_NAME,
  method: "SweepTransferAll",
  Request: QueryAllSweepTransferRequest,
  Response: QueryAllSweepTransferResponse,
} as const;

/**
 * Simulates the stake message
 *
 * @generated from rpc pryzm.icstaking.v1.Query.SimulateStake
 */
export const QuerySimulateStakeService = {
  typeName: TYPE_NAME,
  method: "SimulateStake",
  Request: QuerySimulateStakeRequest,
  Response: QuerySimulateStakeResponse,
} as const;

