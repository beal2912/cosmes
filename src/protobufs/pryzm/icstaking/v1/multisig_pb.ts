// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file pryzm/icstaking/v1/multisig.proto (package pryzm.icstaking.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Height } from "../../../ibc/core/client/v1/client_pb.js";

/**
 * @generated from message pryzm.icstaking.v1.MultiSigConnection
 */
export class MultiSigConnection extends Message<MultiSigConnection> {
  /**
   * identifier for a multi-sig connection
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * the operator address of the multi-sig connection on Pryzm, allowed to acknowledge packets
   * this address must be a multi-sig to be secure
   *
   * @generated from field: string operator = 2;
   */
  operator = "";

  /**
   * the last packet sequence sent on this connection
   *
   * @generated from field: uint64 last_sequence = 3;
   */
  lastSequence = protoInt64.zero;

  /**
   * the latest height of host chain known on Pryzm
   * this is the host chain block when the last packet is executed and Pryzm have got the acknowledgment
   *
   * @generated from field: ibc.core.client.v1.Height latest_host_height = 4;
   */
  latestHostHeight?: Height;

  constructor(data?: PartialMessage<MultiSigConnection>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.MultiSigConnection";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "operator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "last_sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "latest_host_height", kind: "message", T: Height },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiSigConnection {
    return new MultiSigConnection().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiSigConnection {
    return new MultiSigConnection().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiSigConnection {
    return new MultiSigConnection().fromJsonString(jsonString, options);
  }

  static equals(a: MultiSigConnection | PlainMessage<MultiSigConnection> | undefined, b: MultiSigConnection | PlainMessage<MultiSigConnection> | undefined): boolean {
    return proto3.util.equals(MultiSigConnection, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.MultiSigPacket
 */
export class MultiSigPacket extends Message<MultiSigPacket> {
  /**
   * @generated from field: string connection_id = 1;
   */
  connectionId = "";

  /**
   * the sequence number of the packet, used to make sure that the messages are executed with proper ordering
   *
   * @generated from field: uint64 sequence = 2;
   */
  sequence = protoInt64.zero;

  /**
   * messages that must be executed on the host chain
   *
   * @generated from field: repeated google.protobuf.Any messages = 3;
   */
  messages: Any[] = [];

  constructor(data?: PartialMessage<MultiSigPacket>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.MultiSigPacket";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "connection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "messages", kind: "message", T: Any, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiSigPacket {
    return new MultiSigPacket().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiSigPacket {
    return new MultiSigPacket().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiSigPacket {
    return new MultiSigPacket().fromJsonString(jsonString, options);
  }

  static equals(a: MultiSigPacket | PlainMessage<MultiSigPacket> | undefined, b: MultiSigPacket | PlainMessage<MultiSigPacket> | undefined): boolean {
    return proto3.util.equals(MultiSigPacket, a, b);
  }
}

/**
 * This is copied from ibc-go
 *
 * @generated from message pryzm.icstaking.v1.Acknowledgement
 */
export class Acknowledgement extends Message<Acknowledgement> {
  /**
   * response contains either a result or an error and must be non-empty
   *
   * @generated from oneof pryzm.icstaking.v1.Acknowledgement.response
   */
  response: {
    /**
     * @generated from field: bytes result = 21;
     */
    value: Uint8Array;
    case: "result";
  } | {
    /**
     * @generated from field: string error = 22;
     */
    value: string;
    case: "error";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Acknowledgement>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.Acknowledgement";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 21, name: "result", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "response" },
    { no: 22, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "response" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Acknowledgement {
    return new Acknowledgement().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Acknowledgement {
    return new Acknowledgement().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Acknowledgement {
    return new Acknowledgement().fromJsonString(jsonString, options);
  }

  static equals(a: Acknowledgement | PlainMessage<Acknowledgement> | undefined, b: Acknowledgement | PlainMessage<Acknowledgement> | undefined): boolean {
    return proto3.util.equals(Acknowledgement, a, b);
  }
}

