// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file pryzm/icstaking/v1/query.proto (package pryzm.icstaking.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { HostChain, HostChainState } from "./host_chain_pb.js";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination_pb.js";
import { ChannelUndelegation, Undelegation } from "./undelegation_pb.js";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
import { ReplyData } from "./reply_pb.js";
import { MultiSigConnection, MultiSigPacket } from "./multisig_pb.js";
import { FailedLsmTransfer, RedeemableLsm } from "./lsm_pb.js";
import { SweepTransfer } from "./sweep_pb.js";

/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from message pryzm.icstaking.v1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from message pryzm.icstaking.v1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: pryzm.icstaking.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.QueryGetHostChainRequest
 */
export class QueryGetHostChainRequest extends Message<QueryGetHostChainRequest> {
  /**
   * @generated from field: string host_chain_id = 1;
   */
  hostChainId = "";

  constructor(data?: PartialMessage<QueryGetHostChainRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.QueryGetHostChainRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host_chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetHostChainRequest {
    return new QueryGetHostChainRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetHostChainRequest {
    return new QueryGetHostChainRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetHostChainRequest {
    return new QueryGetHostChainRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetHostChainRequest | PlainMessage<QueryGetHostChainRequest> | undefined, b: QueryGetHostChainRequest | PlainMessage<QueryGetHostChainRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetHostChainRequest, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.QueryGetHostChainResponse
 */
export class QueryGetHostChainResponse extends Message<QueryGetHostChainResponse> {
  /**
   * @generated from field: pryzm.icstaking.v1.HostChain host_chain = 1;
   */
  hostChain?: HostChain;

  constructor(data?: PartialMessage<QueryGetHostChainResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.QueryGetHostChainResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host_chain", kind: "message", T: HostChain },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetHostChainResponse {
    return new QueryGetHostChainResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetHostChainResponse {
    return new QueryGetHostChainResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetHostChainResponse {
    return new QueryGetHostChainResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetHostChainResponse | PlainMessage<QueryGetHostChainResponse> | undefined, b: QueryGetHostChainResponse | PlainMessage<QueryGetHostChainResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetHostChainResponse, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.QueryAllHostChainRequest
 */
export class QueryAllHostChainRequest extends Message<QueryAllHostChainRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryAllHostChainRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.QueryAllHostChainRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllHostChainRequest {
    return new QueryAllHostChainRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllHostChainRequest {
    return new QueryAllHostChainRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllHostChainRequest {
    return new QueryAllHostChainRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllHostChainRequest | PlainMessage<QueryAllHostChainRequest> | undefined, b: QueryAllHostChainRequest | PlainMessage<QueryAllHostChainRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllHostChainRequest, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.QueryAllHostChainResponse
 */
export class QueryAllHostChainResponse extends Message<QueryAllHostChainResponse> {
  /**
   * @generated from field: repeated pryzm.icstaking.v1.HostChain host_chain = 1;
   */
  hostChain: HostChain[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryAllHostChainResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.QueryAllHostChainResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host_chain", kind: "message", T: HostChain, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllHostChainResponse {
    return new QueryAllHostChainResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllHostChainResponse {
    return new QueryAllHostChainResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllHostChainResponse {
    return new QueryAllHostChainResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllHostChainResponse | PlainMessage<QueryAllHostChainResponse> | undefined, b: QueryAllHostChainResponse | PlainMessage<QueryAllHostChainResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllHostChainResponse, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.QueryGetHostChainStateRequest
 */
export class QueryGetHostChainStateRequest extends Message<QueryGetHostChainStateRequest> {
  /**
   * @generated from field: string host_chain_id = 1;
   */
  hostChainId = "";

  constructor(data?: PartialMessage<QueryGetHostChainStateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.QueryGetHostChainStateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host_chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetHostChainStateRequest {
    return new QueryGetHostChainStateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetHostChainStateRequest {
    return new QueryGetHostChainStateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetHostChainStateRequest {
    return new QueryGetHostChainStateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetHostChainStateRequest | PlainMessage<QueryGetHostChainStateRequest> | undefined, b: QueryGetHostChainStateRequest | PlainMessage<QueryGetHostChainStateRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetHostChainStateRequest, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.QueryGetHostChainStateResponse
 */
export class QueryGetHostChainStateResponse extends Message<QueryGetHostChainStateResponse> {
  /**
   * @generated from field: pryzm.icstaking.v1.HostChainState host_chain_state = 1;
   */
  hostChainState?: HostChainState;

  constructor(data?: PartialMessage<QueryGetHostChainStateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.QueryGetHostChainStateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host_chain_state", kind: "message", T: HostChainState },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetHostChainStateResponse {
    return new QueryGetHostChainStateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetHostChainStateResponse {
    return new QueryGetHostChainStateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetHostChainStateResponse {
    return new QueryGetHostChainStateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetHostChainStateResponse | PlainMessage<QueryGetHostChainStateResponse> | undefined, b: QueryGetHostChainStateResponse | PlainMessage<QueryGetHostChainStateResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetHostChainStateResponse, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.QueryAllHostChainStateRequest
 */
export class QueryAllHostChainStateRequest extends Message<QueryAllHostChainStateRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryAllHostChainStateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.QueryAllHostChainStateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllHostChainStateRequest {
    return new QueryAllHostChainStateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllHostChainStateRequest {
    return new QueryAllHostChainStateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllHostChainStateRequest {
    return new QueryAllHostChainStateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllHostChainStateRequest | PlainMessage<QueryAllHostChainStateRequest> | undefined, b: QueryAllHostChainStateRequest | PlainMessage<QueryAllHostChainStateRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllHostChainStateRequest, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.QueryAllHostChainStateResponse
 */
export class QueryAllHostChainStateResponse extends Message<QueryAllHostChainStateResponse> {
  /**
   * @generated from field: repeated pryzm.icstaking.v1.HostChainState host_chain_state = 1;
   */
  hostChainState: HostChainState[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryAllHostChainStateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.QueryAllHostChainStateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host_chain_state", kind: "message", T: HostChainState, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllHostChainStateResponse {
    return new QueryAllHostChainStateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllHostChainStateResponse {
    return new QueryAllHostChainStateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllHostChainStateResponse {
    return new QueryAllHostChainStateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllHostChainStateResponse | PlainMessage<QueryAllHostChainStateResponse> | undefined, b: QueryAllHostChainStateResponse | PlainMessage<QueryAllHostChainStateResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllHostChainStateResponse, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.QueryGetUndelegationRequest
 */
export class QueryGetUndelegationRequest extends Message<QueryGetUndelegationRequest> {
  /**
   * @generated from field: string host_chain = 1;
   */
  hostChain = "";

  /**
   * @generated from field: uint64 epoch = 2;
   */
  epoch = protoInt64.zero;

  constructor(data?: PartialMessage<QueryGetUndelegationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.QueryGetUndelegationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host_chain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "epoch", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetUndelegationRequest {
    return new QueryGetUndelegationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetUndelegationRequest {
    return new QueryGetUndelegationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetUndelegationRequest {
    return new QueryGetUndelegationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetUndelegationRequest | PlainMessage<QueryGetUndelegationRequest> | undefined, b: QueryGetUndelegationRequest | PlainMessage<QueryGetUndelegationRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetUndelegationRequest, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.QueryGetUndelegationResponse
 */
export class QueryGetUndelegationResponse extends Message<QueryGetUndelegationResponse> {
  /**
   * @generated from field: pryzm.icstaking.v1.Undelegation undelegation = 1;
   */
  undelegation?: Undelegation;

  constructor(data?: PartialMessage<QueryGetUndelegationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.QueryGetUndelegationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "undelegation", kind: "message", T: Undelegation },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetUndelegationResponse {
    return new QueryGetUndelegationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetUndelegationResponse {
    return new QueryGetUndelegationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetUndelegationResponse {
    return new QueryGetUndelegationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetUndelegationResponse | PlainMessage<QueryGetUndelegationResponse> | undefined, b: QueryGetUndelegationResponse | PlainMessage<QueryGetUndelegationResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetUndelegationResponse, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.QueryAllUndelegationRequest
 */
export class QueryAllUndelegationRequest extends Message<QueryAllUndelegationRequest> {
  /**
   * @generated from field: string host_chain = 1;
   */
  hostChain = "";

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryAllUndelegationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.QueryAllUndelegationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host_chain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllUndelegationRequest {
    return new QueryAllUndelegationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllUndelegationRequest {
    return new QueryAllUndelegationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllUndelegationRequest {
    return new QueryAllUndelegationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllUndelegationRequest | PlainMessage<QueryAllUndelegationRequest> | undefined, b: QueryAllUndelegationRequest | PlainMessage<QueryAllUndelegationRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllUndelegationRequest, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.QueryAllUndelegationResponse
 */
export class QueryAllUndelegationResponse extends Message<QueryAllUndelegationResponse> {
  /**
   * @generated from field: repeated pryzm.icstaking.v1.Undelegation undelegation = 1;
   */
  undelegation: Undelegation[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryAllUndelegationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.QueryAllUndelegationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "undelegation", kind: "message", T: Undelegation, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllUndelegationResponse {
    return new QueryAllUndelegationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllUndelegationResponse {
    return new QueryAllUndelegationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllUndelegationResponse {
    return new QueryAllUndelegationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllUndelegationResponse | PlainMessage<QueryAllUndelegationResponse> | undefined, b: QueryAllUndelegationResponse | PlainMessage<QueryAllUndelegationResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllUndelegationResponse, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.QueryIncompleteUndelegationRequest
 */
export class QueryIncompleteUndelegationRequest extends Message<QueryIncompleteUndelegationRequest> {
  /**
   * @generated from field: string host_chain = 1;
   */
  hostChain = "";

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryIncompleteUndelegationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.QueryIncompleteUndelegationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host_chain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryIncompleteUndelegationRequest {
    return new QueryIncompleteUndelegationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryIncompleteUndelegationRequest {
    return new QueryIncompleteUndelegationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryIncompleteUndelegationRequest {
    return new QueryIncompleteUndelegationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryIncompleteUndelegationRequest | PlainMessage<QueryIncompleteUndelegationRequest> | undefined, b: QueryIncompleteUndelegationRequest | PlainMessage<QueryIncompleteUndelegationRequest> | undefined): boolean {
    return proto3.util.equals(QueryIncompleteUndelegationRequest, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.QueryIncompleteUndelegationResponse
 */
export class QueryIncompleteUndelegationResponse extends Message<QueryIncompleteUndelegationResponse> {
  /**
   * @generated from field: repeated pryzm.icstaking.v1.Undelegation undelegation = 1;
   */
  undelegation: Undelegation[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryIncompleteUndelegationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.QueryIncompleteUndelegationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "undelegation", kind: "message", T: Undelegation, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryIncompleteUndelegationResponse {
    return new QueryIncompleteUndelegationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryIncompleteUndelegationResponse {
    return new QueryIncompleteUndelegationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryIncompleteUndelegationResponse {
    return new QueryIncompleteUndelegationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryIncompleteUndelegationResponse | PlainMessage<QueryIncompleteUndelegationResponse> | undefined, b: QueryIncompleteUndelegationResponse | PlainMessage<QueryIncompleteUndelegationResponse> | undefined): boolean {
    return proto3.util.equals(QueryIncompleteUndelegationResponse, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.QueryGetChannelUndelegationRequest
 */
export class QueryGetChannelUndelegationRequest extends Message<QueryGetChannelUndelegationRequest> {
  /**
   * @generated from field: string host_chain = 1;
   */
  hostChain = "";

  /**
   * @generated from field: uint64 epoch = 2;
   */
  epoch = protoInt64.zero;

  /**
   * @generated from field: string transfer_channel = 3;
   */
  transferChannel = "";

  constructor(data?: PartialMessage<QueryGetChannelUndelegationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.QueryGetChannelUndelegationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host_chain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "epoch", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "transfer_channel", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetChannelUndelegationRequest {
    return new QueryGetChannelUndelegationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetChannelUndelegationRequest {
    return new QueryGetChannelUndelegationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetChannelUndelegationRequest {
    return new QueryGetChannelUndelegationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetChannelUndelegationRequest | PlainMessage<QueryGetChannelUndelegationRequest> | undefined, b: QueryGetChannelUndelegationRequest | PlainMessage<QueryGetChannelUndelegationRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetChannelUndelegationRequest, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.QueryGetChannelUndelegationResponse
 */
export class QueryGetChannelUndelegationResponse extends Message<QueryGetChannelUndelegationResponse> {
  /**
   * @generated from field: pryzm.icstaking.v1.ChannelUndelegation channel_undelegation = 1;
   */
  channelUndelegation?: ChannelUndelegation;

  constructor(data?: PartialMessage<QueryGetChannelUndelegationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.QueryGetChannelUndelegationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "channel_undelegation", kind: "message", T: ChannelUndelegation },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetChannelUndelegationResponse {
    return new QueryGetChannelUndelegationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetChannelUndelegationResponse {
    return new QueryGetChannelUndelegationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetChannelUndelegationResponse {
    return new QueryGetChannelUndelegationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetChannelUndelegationResponse | PlainMessage<QueryGetChannelUndelegationResponse> | undefined, b: QueryGetChannelUndelegationResponse | PlainMessage<QueryGetChannelUndelegationResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetChannelUndelegationResponse, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.QueryAllChannelUndelegationRequest
 */
export class QueryAllChannelUndelegationRequest extends Message<QueryAllChannelUndelegationRequest> {
  /**
   * @generated from field: string host_chain = 1;
   */
  hostChain = "";

  /**
   * @generated from field: uint64 epoch = 2;
   */
  epoch = protoInt64.zero;

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 3;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryAllChannelUndelegationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.QueryAllChannelUndelegationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host_chain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "epoch", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllChannelUndelegationRequest {
    return new QueryAllChannelUndelegationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllChannelUndelegationRequest {
    return new QueryAllChannelUndelegationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllChannelUndelegationRequest {
    return new QueryAllChannelUndelegationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllChannelUndelegationRequest | PlainMessage<QueryAllChannelUndelegationRequest> | undefined, b: QueryAllChannelUndelegationRequest | PlainMessage<QueryAllChannelUndelegationRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllChannelUndelegationRequest, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.QueryAllChannelUndelegationResponse
 */
export class QueryAllChannelUndelegationResponse extends Message<QueryAllChannelUndelegationResponse> {
  /**
   * @generated from field: repeated pryzm.icstaking.v1.ChannelUndelegation channel_undelegation = 1;
   */
  channelUndelegation: ChannelUndelegation[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryAllChannelUndelegationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.QueryAllChannelUndelegationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "channel_undelegation", kind: "message", T: ChannelUndelegation, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllChannelUndelegationResponse {
    return new QueryAllChannelUndelegationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllChannelUndelegationResponse {
    return new QueryAllChannelUndelegationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllChannelUndelegationResponse {
    return new QueryAllChannelUndelegationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllChannelUndelegationResponse | PlainMessage<QueryAllChannelUndelegationResponse> | undefined, b: QueryAllChannelUndelegationResponse | PlainMessage<QueryAllChannelUndelegationResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllChannelUndelegationResponse, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.QueryDelegationQueueBalanceRequest
 */
export class QueryDelegationQueueBalanceRequest extends Message<QueryDelegationQueueBalanceRequest> {
  /**
   * @generated from field: string host_chain = 1;
   */
  hostChain = "";

  /**
   * @generated from field: string transfer_channel = 2;
   */
  transferChannel = "";

  constructor(data?: PartialMessage<QueryDelegationQueueBalanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.QueryDelegationQueueBalanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host_chain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "transfer_channel", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDelegationQueueBalanceRequest {
    return new QueryDelegationQueueBalanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDelegationQueueBalanceRequest {
    return new QueryDelegationQueueBalanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDelegationQueueBalanceRequest {
    return new QueryDelegationQueueBalanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDelegationQueueBalanceRequest | PlainMessage<QueryDelegationQueueBalanceRequest> | undefined, b: QueryDelegationQueueBalanceRequest | PlainMessage<QueryDelegationQueueBalanceRequest> | undefined): boolean {
    return proto3.util.equals(QueryDelegationQueueBalanceRequest, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.QueryDelegationQueueBalanceResponse
 */
export class QueryDelegationQueueBalanceResponse extends Message<QueryDelegationQueueBalanceResponse> {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin balance = 1;
   */
  balance?: Coin;

  constructor(data?: PartialMessage<QueryDelegationQueueBalanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.QueryDelegationQueueBalanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "balance", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDelegationQueueBalanceResponse {
    return new QueryDelegationQueueBalanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDelegationQueueBalanceResponse {
    return new QueryDelegationQueueBalanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDelegationQueueBalanceResponse {
    return new QueryDelegationQueueBalanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDelegationQueueBalanceResponse | PlainMessage<QueryDelegationQueueBalanceResponse> | undefined, b: QueryDelegationQueueBalanceResponse | PlainMessage<QueryDelegationQueueBalanceResponse> | undefined): boolean {
    return proto3.util.equals(QueryDelegationQueueBalanceResponse, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.QueryEpochInfoRequest
 */
export class QueryEpochInfoRequest extends Message<QueryEpochInfoRequest> {
  /**
   * @generated from field: string host_chain = 1;
   */
  hostChain = "";

  constructor(data?: PartialMessage<QueryEpochInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.QueryEpochInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host_chain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEpochInfoRequest {
    return new QueryEpochInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEpochInfoRequest {
    return new QueryEpochInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEpochInfoRequest {
    return new QueryEpochInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEpochInfoRequest | PlainMessage<QueryEpochInfoRequest> | undefined, b: QueryEpochInfoRequest | PlainMessage<QueryEpochInfoRequest> | undefined): boolean {
    return proto3.util.equals(QueryEpochInfoRequest, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.QueryEpochInfoResponse
 */
export class QueryEpochInfoResponse extends Message<QueryEpochInfoResponse> {
  /**
   * @generated from field: google.protobuf.Timestamp last_delegation_time = 1;
   */
  lastDelegationTime?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp last_redelegation_time = 2;
   */
  lastRedelegationTime?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp last_lsm_redeem_time = 3;
   */
  lastLsmRedeemTime?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp last_undelegation_time = 4;
   */
  lastUndelegationTime?: Timestamp;

  /**
   * @generated from field: uint64 current_undelegation_epoch = 5;
   */
  currentUndelegationEpoch = protoInt64.zero;

  constructor(data?: PartialMessage<QueryEpochInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.QueryEpochInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "last_delegation_time", kind: "message", T: Timestamp },
    { no: 2, name: "last_redelegation_time", kind: "message", T: Timestamp },
    { no: 3, name: "last_lsm_redeem_time", kind: "message", T: Timestamp },
    { no: 4, name: "last_undelegation_time", kind: "message", T: Timestamp },
    { no: 5, name: "current_undelegation_epoch", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEpochInfoResponse {
    return new QueryEpochInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEpochInfoResponse {
    return new QueryEpochInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEpochInfoResponse {
    return new QueryEpochInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEpochInfoResponse | PlainMessage<QueryEpochInfoResponse> | undefined, b: QueryEpochInfoResponse | PlainMessage<QueryEpochInfoResponse> | undefined): boolean {
    return proto3.util.equals(QueryEpochInfoResponse, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.QueryAllReplyDataRequest
 */
export class QueryAllReplyDataRequest extends Message<QueryAllReplyDataRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryAllReplyDataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.QueryAllReplyDataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllReplyDataRequest {
    return new QueryAllReplyDataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllReplyDataRequest {
    return new QueryAllReplyDataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllReplyDataRequest {
    return new QueryAllReplyDataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllReplyDataRequest | PlainMessage<QueryAllReplyDataRequest> | undefined, b: QueryAllReplyDataRequest | PlainMessage<QueryAllReplyDataRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllReplyDataRequest, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.QueryAllReplyDataResponse
 */
export class QueryAllReplyDataResponse extends Message<QueryAllReplyDataResponse> {
  /**
   * @generated from field: repeated pryzm.icstaking.v1.ReplyData reply_data = 1;
   */
  replyData: ReplyData[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryAllReplyDataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.QueryAllReplyDataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reply_data", kind: "message", T: ReplyData, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllReplyDataResponse {
    return new QueryAllReplyDataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllReplyDataResponse {
    return new QueryAllReplyDataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllReplyDataResponse {
    return new QueryAllReplyDataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllReplyDataResponse | PlainMessage<QueryAllReplyDataResponse> | undefined, b: QueryAllReplyDataResponse | PlainMessage<QueryAllReplyDataResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllReplyDataResponse, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.QueryGetMultiSigConnectionRequest
 */
export class QueryGetMultiSigConnectionRequest extends Message<QueryGetMultiSigConnectionRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<QueryGetMultiSigConnectionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.QueryGetMultiSigConnectionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetMultiSigConnectionRequest {
    return new QueryGetMultiSigConnectionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetMultiSigConnectionRequest {
    return new QueryGetMultiSigConnectionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetMultiSigConnectionRequest {
    return new QueryGetMultiSigConnectionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetMultiSigConnectionRequest | PlainMessage<QueryGetMultiSigConnectionRequest> | undefined, b: QueryGetMultiSigConnectionRequest | PlainMessage<QueryGetMultiSigConnectionRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetMultiSigConnectionRequest, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.QueryGetMultiSigConnectionResponse
 */
export class QueryGetMultiSigConnectionResponse extends Message<QueryGetMultiSigConnectionResponse> {
  /**
   * @generated from field: pryzm.icstaking.v1.MultiSigConnection multi_sig_connection = 1;
   */
  multiSigConnection?: MultiSigConnection;

  constructor(data?: PartialMessage<QueryGetMultiSigConnectionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.QueryGetMultiSigConnectionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "multi_sig_connection", kind: "message", T: MultiSigConnection },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetMultiSigConnectionResponse {
    return new QueryGetMultiSigConnectionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetMultiSigConnectionResponse {
    return new QueryGetMultiSigConnectionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetMultiSigConnectionResponse {
    return new QueryGetMultiSigConnectionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetMultiSigConnectionResponse | PlainMessage<QueryGetMultiSigConnectionResponse> | undefined, b: QueryGetMultiSigConnectionResponse | PlainMessage<QueryGetMultiSigConnectionResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetMultiSigConnectionResponse, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.QueryAllMultiSigConnectionRequest
 */
export class QueryAllMultiSigConnectionRequest extends Message<QueryAllMultiSigConnectionRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryAllMultiSigConnectionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.QueryAllMultiSigConnectionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllMultiSigConnectionRequest {
    return new QueryAllMultiSigConnectionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllMultiSigConnectionRequest {
    return new QueryAllMultiSigConnectionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllMultiSigConnectionRequest {
    return new QueryAllMultiSigConnectionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllMultiSigConnectionRequest | PlainMessage<QueryAllMultiSigConnectionRequest> | undefined, b: QueryAllMultiSigConnectionRequest | PlainMessage<QueryAllMultiSigConnectionRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllMultiSigConnectionRequest, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.QueryAllMultiSigConnectionResponse
 */
export class QueryAllMultiSigConnectionResponse extends Message<QueryAllMultiSigConnectionResponse> {
  /**
   * @generated from field: repeated pryzm.icstaking.v1.MultiSigConnection multi_sig_connection = 1;
   */
  multiSigConnection: MultiSigConnection[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryAllMultiSigConnectionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.QueryAllMultiSigConnectionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "multi_sig_connection", kind: "message", T: MultiSigConnection, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllMultiSigConnectionResponse {
    return new QueryAllMultiSigConnectionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllMultiSigConnectionResponse {
    return new QueryAllMultiSigConnectionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllMultiSigConnectionResponse {
    return new QueryAllMultiSigConnectionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllMultiSigConnectionResponse | PlainMessage<QueryAllMultiSigConnectionResponse> | undefined, b: QueryAllMultiSigConnectionResponse | PlainMessage<QueryAllMultiSigConnectionResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllMultiSigConnectionResponse, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.QueryGetMultiSigPacketRequest
 */
export class QueryGetMultiSigPacketRequest extends Message<QueryGetMultiSigPacketRequest> {
  /**
   * @generated from field: string connection_id = 1;
   */
  connectionId = "";

  /**
   * @generated from field: uint64 sequence = 2;
   */
  sequence = protoInt64.zero;

  constructor(data?: PartialMessage<QueryGetMultiSigPacketRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.QueryGetMultiSigPacketRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "connection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetMultiSigPacketRequest {
    return new QueryGetMultiSigPacketRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetMultiSigPacketRequest {
    return new QueryGetMultiSigPacketRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetMultiSigPacketRequest {
    return new QueryGetMultiSigPacketRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetMultiSigPacketRequest | PlainMessage<QueryGetMultiSigPacketRequest> | undefined, b: QueryGetMultiSigPacketRequest | PlainMessage<QueryGetMultiSigPacketRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetMultiSigPacketRequest, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.QueryGetMultiSigPacketResponse
 */
export class QueryGetMultiSigPacketResponse extends Message<QueryGetMultiSigPacketResponse> {
  /**
   * @generated from field: pryzm.icstaking.v1.MultiSigPacket multi_sig_packet = 1;
   */
  multiSigPacket?: MultiSigPacket;

  constructor(data?: PartialMessage<QueryGetMultiSigPacketResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.QueryGetMultiSigPacketResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "multi_sig_packet", kind: "message", T: MultiSigPacket },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetMultiSigPacketResponse {
    return new QueryGetMultiSigPacketResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetMultiSigPacketResponse {
    return new QueryGetMultiSigPacketResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetMultiSigPacketResponse {
    return new QueryGetMultiSigPacketResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetMultiSigPacketResponse | PlainMessage<QueryGetMultiSigPacketResponse> | undefined, b: QueryGetMultiSigPacketResponse | PlainMessage<QueryGetMultiSigPacketResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetMultiSigPacketResponse, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.QueryAllMultiSigPacketRequest
 */
export class QueryAllMultiSigPacketRequest extends Message<QueryAllMultiSigPacketRequest> {
  /**
   * @generated from field: string connection_id = 1;
   */
  connectionId = "";

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryAllMultiSigPacketRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.QueryAllMultiSigPacketRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "connection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllMultiSigPacketRequest {
    return new QueryAllMultiSigPacketRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllMultiSigPacketRequest {
    return new QueryAllMultiSigPacketRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllMultiSigPacketRequest {
    return new QueryAllMultiSigPacketRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllMultiSigPacketRequest | PlainMessage<QueryAllMultiSigPacketRequest> | undefined, b: QueryAllMultiSigPacketRequest | PlainMessage<QueryAllMultiSigPacketRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllMultiSigPacketRequest, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.QueryAllMultiSigPacketResponse
 */
export class QueryAllMultiSigPacketResponse extends Message<QueryAllMultiSigPacketResponse> {
  /**
   * @generated from field: repeated pryzm.icstaking.v1.MultiSigPacket multi_sig_packet = 1;
   */
  multiSigPacket: MultiSigPacket[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryAllMultiSigPacketResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.QueryAllMultiSigPacketResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "multi_sig_packet", kind: "message", T: MultiSigPacket, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllMultiSigPacketResponse {
    return new QueryAllMultiSigPacketResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllMultiSigPacketResponse {
    return new QueryAllMultiSigPacketResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllMultiSigPacketResponse {
    return new QueryAllMultiSigPacketResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllMultiSigPacketResponse | PlainMessage<QueryAllMultiSigPacketResponse> | undefined, b: QueryAllMultiSigPacketResponse | PlainMessage<QueryAllMultiSigPacketResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllMultiSigPacketResponse, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.QueryAllFailedLsmTransferRequest
 */
export class QueryAllFailedLsmTransferRequest extends Message<QueryAllFailedLsmTransferRequest> {
  /**
   * @generated from field: string host_chain = 1;
   */
  hostChain = "";

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryAllFailedLsmTransferRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.QueryAllFailedLsmTransferRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host_chain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllFailedLsmTransferRequest {
    return new QueryAllFailedLsmTransferRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllFailedLsmTransferRequest {
    return new QueryAllFailedLsmTransferRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllFailedLsmTransferRequest {
    return new QueryAllFailedLsmTransferRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllFailedLsmTransferRequest | PlainMessage<QueryAllFailedLsmTransferRequest> | undefined, b: QueryAllFailedLsmTransferRequest | PlainMessage<QueryAllFailedLsmTransferRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllFailedLsmTransferRequest, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.QueryAllFailedLsmTransferResponse
 */
export class QueryAllFailedLsmTransferResponse extends Message<QueryAllFailedLsmTransferResponse> {
  /**
   * @generated from field: repeated pryzm.icstaking.v1.FailedLsmTransfer failed_lsm_transfer = 1;
   */
  failedLsmTransfer: FailedLsmTransfer[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryAllFailedLsmTransferResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.QueryAllFailedLsmTransferResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "failed_lsm_transfer", kind: "message", T: FailedLsmTransfer, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllFailedLsmTransferResponse {
    return new QueryAllFailedLsmTransferResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllFailedLsmTransferResponse {
    return new QueryAllFailedLsmTransferResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllFailedLsmTransferResponse {
    return new QueryAllFailedLsmTransferResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllFailedLsmTransferResponse | PlainMessage<QueryAllFailedLsmTransferResponse> | undefined, b: QueryAllFailedLsmTransferResponse | PlainMessage<QueryAllFailedLsmTransferResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllFailedLsmTransferResponse, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.QueryAllRedeemableLsmRequest
 */
export class QueryAllRedeemableLsmRequest extends Message<QueryAllRedeemableLsmRequest> {
  /**
   * @generated from field: string host_chain = 1;
   */
  hostChain = "";

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryAllRedeemableLsmRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.QueryAllRedeemableLsmRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host_chain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllRedeemableLsmRequest {
    return new QueryAllRedeemableLsmRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllRedeemableLsmRequest {
    return new QueryAllRedeemableLsmRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllRedeemableLsmRequest {
    return new QueryAllRedeemableLsmRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllRedeemableLsmRequest | PlainMessage<QueryAllRedeemableLsmRequest> | undefined, b: QueryAllRedeemableLsmRequest | PlainMessage<QueryAllRedeemableLsmRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllRedeemableLsmRequest, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.QueryAllRedeemableLsmResponse
 */
export class QueryAllRedeemableLsmResponse extends Message<QueryAllRedeemableLsmResponse> {
  /**
   * @generated from field: repeated pryzm.icstaking.v1.RedeemableLsm redeemable_lsm = 1;
   */
  redeemableLsm: RedeemableLsm[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryAllRedeemableLsmResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.QueryAllRedeemableLsmResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "redeemable_lsm", kind: "message", T: RedeemableLsm, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllRedeemableLsmResponse {
    return new QueryAllRedeemableLsmResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllRedeemableLsmResponse {
    return new QueryAllRedeemableLsmResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllRedeemableLsmResponse {
    return new QueryAllRedeemableLsmResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllRedeemableLsmResponse | PlainMessage<QueryAllRedeemableLsmResponse> | undefined, b: QueryAllRedeemableLsmResponse | PlainMessage<QueryAllRedeemableLsmResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllRedeemableLsmResponse, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.QueryAllSweepTransferRequest
 */
export class QueryAllSweepTransferRequest extends Message<QueryAllSweepTransferRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryAllSweepTransferRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.QueryAllSweepTransferRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllSweepTransferRequest {
    return new QueryAllSweepTransferRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllSweepTransferRequest {
    return new QueryAllSweepTransferRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllSweepTransferRequest {
    return new QueryAllSweepTransferRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllSweepTransferRequest | PlainMessage<QueryAllSweepTransferRequest> | undefined, b: QueryAllSweepTransferRequest | PlainMessage<QueryAllSweepTransferRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllSweepTransferRequest, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.QueryAllSweepTransferResponse
 */
export class QueryAllSweepTransferResponse extends Message<QueryAllSweepTransferResponse> {
  /**
   * @generated from field: repeated pryzm.icstaking.v1.SweepTransfer sweep_transfer = 1;
   */
  sweepTransfer: SweepTransfer[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryAllSweepTransferResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.QueryAllSweepTransferResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sweep_transfer", kind: "message", T: SweepTransfer, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllSweepTransferResponse {
    return new QueryAllSweepTransferResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllSweepTransferResponse {
    return new QueryAllSweepTransferResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllSweepTransferResponse {
    return new QueryAllSweepTransferResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllSweepTransferResponse | PlainMessage<QueryAllSweepTransferResponse> | undefined, b: QueryAllSweepTransferResponse | PlainMessage<QueryAllSweepTransferResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllSweepTransferResponse, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.QuerySimulateStakeRequest
 */
export class QuerySimulateStakeRequest extends Message<QuerySimulateStakeRequest> {
  /**
   * @generated from field: string host_chain = 1;
   */
  hostChain = "";

  /**
   * @generated from field: string transfer_channel = 2;
   */
  transferChannel = "";

  /**
   * amount_in is the amount of tokens to stake. if this field is set, amount_out must be nil
   *
   * @generated from field: string amount_in = 3;
   */
  amountIn = "";

  /**
   * amount_out is the amount of cAsset tokens to receive. if this field is set, amount_in must be nil
   *
   * @generated from field: string amount_out = 4;
   */
  amountOut = "";

  constructor(data?: PartialMessage<QuerySimulateStakeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.QuerySimulateStakeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host_chain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "transfer_channel", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount_in", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "amount_out", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuerySimulateStakeRequest {
    return new QuerySimulateStakeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuerySimulateStakeRequest {
    return new QuerySimulateStakeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuerySimulateStakeRequest {
    return new QuerySimulateStakeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QuerySimulateStakeRequest | PlainMessage<QuerySimulateStakeRequest> | undefined, b: QuerySimulateStakeRequest | PlainMessage<QuerySimulateStakeRequest> | undefined): boolean {
    return proto3.util.equals(QuerySimulateStakeRequest, a, b);
  }
}

/**
 * @generated from message pryzm.icstaking.v1.QuerySimulateStakeResponse
 */
export class QuerySimulateStakeResponse extends Message<QuerySimulateStakeResponse> {
  /**
   * the amount of tokens being staked
   *
   * @generated from field: cosmos.base.v1beta1.Coin amount_in = 1;
   */
  amountIn?: Coin;

  /**
   * the amount of cAssets tokens being received
   *
   * @generated from field: cosmos.base.v1beta1.Coin amount_out = 2;
   */
  amountOut?: Coin;

  /**
   * the amount of fee deducted from the amount_in before stake
   *
   * @generated from field: cosmos.base.v1beta1.Coin fee_amount = 3;
   */
  feeAmount?: Coin;

  constructor(data?: PartialMessage<QuerySimulateStakeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.icstaking.v1.QuerySimulateStakeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount_in", kind: "message", T: Coin },
    { no: 2, name: "amount_out", kind: "message", T: Coin },
    { no: 3, name: "fee_amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuerySimulateStakeResponse {
    return new QuerySimulateStakeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuerySimulateStakeResponse {
    return new QuerySimulateStakeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuerySimulateStakeResponse {
    return new QuerySimulateStakeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QuerySimulateStakeResponse | PlainMessage<QuerySimulateStakeResponse> | undefined, b: QuerySimulateStakeResponse | PlainMessage<QuerySimulateStakeResponse> | undefined): boolean {
    return proto3.util.equals(QuerySimulateStakeResponse, a, b);
  }
}

