// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file pryzm/pgov/v1/reply.proto (package pryzm.pgov.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * the reply data used in the VoteBridge
 *
 * @generated from message pryzm.pgov.v1.VoteReplyData
 */
export class VoteReplyData extends Message<VoteReplyData> {
  /**
   * the id of proposal on the host chain
   *
   * @generated from field: uint64 proposal_id = 1;
   */
  proposalId = protoInt64.zero;

  /**
   * the asset ID
   *
   * @generated from field: string asset = 2;
   */
  asset = "";

  constructor(data?: PartialMessage<VoteReplyData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.pgov.v1.VoteReplyData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "proposal_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VoteReplyData {
    return new VoteReplyData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VoteReplyData {
    return new VoteReplyData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VoteReplyData {
    return new VoteReplyData().fromJsonString(jsonString, options);
  }

  static equals(a: VoteReplyData | PlainMessage<VoteReplyData> | undefined, b: VoteReplyData | PlainMessage<VoteReplyData> | undefined): boolean {
    return proto3.util.equals(VoteReplyData, a, b);
  }
}

