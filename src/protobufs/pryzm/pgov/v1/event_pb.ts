// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file pryzm/pgov/v1/event.proto (package pryzm.pgov.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { Proposal } from "./proposal_pb.js";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
import { Vote } from "./vote_pb.js";

/**
 * @generated from message pryzm.pgov.v1.EventSetParams
 */
export class EventSetParams extends Message<EventSetParams> {
  /**
   * @generated from field: pryzm.pgov.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<EventSetParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.pgov.v1.EventSetParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSetParams {
    return new EventSetParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSetParams {
    return new EventSetParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSetParams {
    return new EventSetParams().fromJsonString(jsonString, options);
  }

  static equals(a: EventSetParams | PlainMessage<EventSetParams> | undefined, b: EventSetParams | PlainMessage<EventSetParams> | undefined): boolean {
    return proto3.util.equals(EventSetParams, a, b);
  }
}

/**
 * @generated from message pryzm.pgov.v1.EventSetProposal
 */
export class EventSetProposal extends Message<EventSetProposal> {
  /**
   * @generated from field: pryzm.pgov.v1.Proposal proposal = 1;
   */
  proposal?: Proposal;

  constructor(data?: PartialMessage<EventSetProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.pgov.v1.EventSetProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "proposal", kind: "message", T: Proposal },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSetProposal {
    return new EventSetProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSetProposal {
    return new EventSetProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSetProposal {
    return new EventSetProposal().fromJsonString(jsonString, options);
  }

  static equals(a: EventSetProposal | PlainMessage<EventSetProposal> | undefined, b: EventSetProposal | PlainMessage<EventSetProposal> | undefined): boolean {
    return proto3.util.equals(EventSetProposal, a, b);
  }
}

/**
 * @generated from message pryzm.pgov.v1.EventPAssetStake
 */
export class EventPAssetStake extends Message<EventPAssetStake> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: string asset = 2;
   */
  asset = "";

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 3;
   */
  amount: Coin[] = [];

  /**
   * @generated from field: string total_staked_p_asset = 4;
   */
  totalStakedPAsset = "";

  constructor(data?: PartialMessage<EventPAssetStake>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.pgov.v1.EventPAssetStake";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "message", T: Coin, repeated: true },
    { no: 4, name: "total_staked_p_asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventPAssetStake {
    return new EventPAssetStake().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventPAssetStake {
    return new EventPAssetStake().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventPAssetStake {
    return new EventPAssetStake().fromJsonString(jsonString, options);
  }

  static equals(a: EventPAssetStake | PlainMessage<EventPAssetStake> | undefined, b: EventPAssetStake | PlainMessage<EventPAssetStake> | undefined): boolean {
    return proto3.util.equals(EventPAssetStake, a, b);
  }
}

/**
 * @generated from message pryzm.pgov.v1.EventPAssetUnstake
 */
export class EventPAssetUnstake extends Message<EventPAssetUnstake> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: string asset = 2;
   */
  asset = "";

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 3;
   */
  amount: Coin[] = [];

  /**
   * @generated from field: string total_staked_p_asset = 4;
   */
  totalStakedPAsset = "";

  constructor(data?: PartialMessage<EventPAssetUnstake>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.pgov.v1.EventPAssetUnstake";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "message", T: Coin, repeated: true },
    { no: 4, name: "total_staked_p_asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventPAssetUnstake {
    return new EventPAssetUnstake().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventPAssetUnstake {
    return new EventPAssetUnstake().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventPAssetUnstake {
    return new EventPAssetUnstake().fromJsonString(jsonString, options);
  }

  static equals(a: EventPAssetUnstake | PlainMessage<EventPAssetUnstake> | undefined, b: EventPAssetUnstake | PlainMessage<EventPAssetUnstake> | undefined): boolean {
    return proto3.util.equals(EventPAssetUnstake, a, b);
  }
}

/**
 * @generated from message pryzm.pgov.v1.EventVoteSubmit
 */
export class EventVoteSubmit extends Message<EventVoteSubmit> {
  /**
   * @generated from field: pryzm.pgov.v1.Vote vote = 1;
   */
  vote?: Vote;

  constructor(data?: PartialMessage<EventVoteSubmit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.pgov.v1.EventVoteSubmit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vote", kind: "message", T: Vote },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventVoteSubmit {
    return new EventVoteSubmit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventVoteSubmit {
    return new EventVoteSubmit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventVoteSubmit {
    return new EventVoteSubmit().fromJsonString(jsonString, options);
  }

  static equals(a: EventVoteSubmit | PlainMessage<EventVoteSubmit> | undefined, b: EventVoteSubmit | PlainMessage<EventVoteSubmit> | undefined): boolean {
    return proto3.util.equals(EventVoteSubmit, a, b);
  }
}

/**
 * @generated from message pryzm.pgov.v1.EventProposalEnd
 */
export class EventProposalEnd extends Message<EventProposalEnd> {
  /**
   * @generated from field: pryzm.pgov.v1.Proposal proposal = 1;
   */
  proposal?: Proposal;

  constructor(data?: PartialMessage<EventProposalEnd>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.pgov.v1.EventProposalEnd";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "proposal", kind: "message", T: Proposal },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventProposalEnd {
    return new EventProposalEnd().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventProposalEnd {
    return new EventProposalEnd().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventProposalEnd {
    return new EventProposalEnd().fromJsonString(jsonString, options);
  }

  static equals(a: EventProposalEnd | PlainMessage<EventProposalEnd> | undefined, b: EventProposalEnd | PlainMessage<EventProposalEnd> | undefined): boolean {
    return proto3.util.equals(EventProposalEnd, a, b);
  }
}

/**
 * @generated from message pryzm.pgov.v1.EventVoteTransmit
 */
export class EventVoteTransmit extends Message<EventVoteTransmit> {
  /**
   * @generated from field: uint64 proposal_id = 1;
   */
  proposalId = protoInt64.zero;

  /**
   * @generated from field: string asset = 2;
   */
  asset = "";

  constructor(data?: PartialMessage<EventVoteTransmit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.pgov.v1.EventVoteTransmit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "proposal_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventVoteTransmit {
    return new EventVoteTransmit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventVoteTransmit {
    return new EventVoteTransmit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventVoteTransmit {
    return new EventVoteTransmit().fromJsonString(jsonString, options);
  }

  static equals(a: EventVoteTransmit | PlainMessage<EventVoteTransmit> | undefined, b: EventVoteTransmit | PlainMessage<EventVoteTransmit> | undefined): boolean {
    return proto3.util.equals(EventVoteTransmit, a, b);
  }
}

/**
 * @generated from message pryzm.pgov.v1.EventVoteTransmitFailure
 */
export class EventVoteTransmitFailure extends Message<EventVoteTransmitFailure> {
  /**
   * @generated from field: uint64 proposal_id = 1;
   */
  proposalId = protoInt64.zero;

  /**
   * @generated from field: string asset = 2;
   */
  asset = "";

  /**
   * @generated from field: string error = 3;
   */
  error = "";

  constructor(data?: PartialMessage<EventVoteTransmitFailure>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.pgov.v1.EventVoteTransmitFailure";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "proposal_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventVoteTransmitFailure {
    return new EventVoteTransmitFailure().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventVoteTransmitFailure {
    return new EventVoteTransmitFailure().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventVoteTransmitFailure {
    return new EventVoteTransmitFailure().fromJsonString(jsonString, options);
  }

  static equals(a: EventVoteTransmitFailure | PlainMessage<EventVoteTransmitFailure> | undefined, b: EventVoteTransmitFailure | PlainMessage<EventVoteTransmitFailure> | undefined): boolean {
    return proto3.util.equals(EventVoteTransmitFailure, a, b);
  }
}

/**
 * @generated from message pryzm.pgov.v1.EventVoteAckSuccess
 */
export class EventVoteAckSuccess extends Message<EventVoteAckSuccess> {
  /**
   * @generated from field: uint64 proposal_id = 1;
   */
  proposalId = protoInt64.zero;

  /**
   * @generated from field: string asset = 2;
   */
  asset = "";

  constructor(data?: PartialMessage<EventVoteAckSuccess>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.pgov.v1.EventVoteAckSuccess";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "proposal_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventVoteAckSuccess {
    return new EventVoteAckSuccess().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventVoteAckSuccess {
    return new EventVoteAckSuccess().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventVoteAckSuccess {
    return new EventVoteAckSuccess().fromJsonString(jsonString, options);
  }

  static equals(a: EventVoteAckSuccess | PlainMessage<EventVoteAckSuccess> | undefined, b: EventVoteAckSuccess | PlainMessage<EventVoteAckSuccess> | undefined): boolean {
    return proto3.util.equals(EventVoteAckSuccess, a, b);
  }
}

/**
 * @generated from message pryzm.pgov.v1.EventVoteAckFailure
 */
export class EventVoteAckFailure extends Message<EventVoteAckFailure> {
  /**
   * @generated from field: uint64 proposal_id = 1;
   */
  proposalId = protoInt64.zero;

  /**
   * @generated from field: string asset = 2;
   */
  asset = "";

  /**
   * @generated from field: string error = 3;
   */
  error = "";

  constructor(data?: PartialMessage<EventVoteAckFailure>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.pgov.v1.EventVoteAckFailure";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "proposal_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventVoteAckFailure {
    return new EventVoteAckFailure().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventVoteAckFailure {
    return new EventVoteAckFailure().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventVoteAckFailure {
    return new EventVoteAckFailure().fromJsonString(jsonString, options);
  }

  static equals(a: EventVoteAckFailure | PlainMessage<EventVoteAckFailure> | undefined, b: EventVoteAckFailure | PlainMessage<EventVoteAckFailure> | undefined): boolean {
    return proto3.util.equals(EventVoteAckFailure, a, b);
  }
}

/**
 * @generated from message pryzm.pgov.v1.EventVoteTimeout
 */
export class EventVoteTimeout extends Message<EventVoteTimeout> {
  /**
   * @generated from field: uint64 proposal_id = 1;
   */
  proposalId = protoInt64.zero;

  /**
   * @generated from field: string asset = 2;
   */
  asset = "";

  constructor(data?: PartialMessage<EventVoteTimeout>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.pgov.v1.EventVoteTimeout";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "proposal_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventVoteTimeout {
    return new EventVoteTimeout().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventVoteTimeout {
    return new EventVoteTimeout().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventVoteTimeout {
    return new EventVoteTimeout().fromJsonString(jsonString, options);
  }

  static equals(a: EventVoteTimeout | PlainMessage<EventVoteTimeout> | undefined, b: EventVoteTimeout | PlainMessage<EventVoteTimeout> | undefined): boolean {
    return proto3.util.equals(EventVoteTimeout, a, b);
  }
}

