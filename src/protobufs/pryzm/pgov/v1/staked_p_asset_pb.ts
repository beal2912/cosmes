// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file pryzm/pgov/v1/staked_p_asset.proto (package pryzm.pgov.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * StakedPAsset stores the amount of pAssets staked for an account
 *
 * @generated from message pryzm.pgov.v1.StakedPAsset
 */
export class StakedPAsset extends Message<StakedPAsset> {
  /**
   * the address of owner
   *
   * @generated from field: string account = 1;
   */
  account = "";

  /**
   * pAsset denom
   *
   * @generated from field: string p_asset = 2;
   */
  pAsset = "";

  /**
   * staked amount
   *
   * @generated from field: string amount = 3;
   */
  amount = "";

  constructor(data?: PartialMessage<StakedPAsset>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.pgov.v1.StakedPAsset";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "p_asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StakedPAsset {
    return new StakedPAsset().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StakedPAsset {
    return new StakedPAsset().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StakedPAsset {
    return new StakedPAsset().fromJsonString(jsonString, options);
  }

  static equals(a: StakedPAsset | PlainMessage<StakedPAsset> | undefined, b: StakedPAsset | PlainMessage<StakedPAsset> | undefined): boolean {
    return proto3.util.equals(StakedPAsset, a, b);
  }
}

/**
 * @generated from message pryzm.pgov.v1.TotalStakedPAsset
 */
export class TotalStakedPAsset extends Message<TotalStakedPAsset> {
  /**
   * the address of owner
   *
   * @generated from field: string account = 1;
   */
  account = "";

  /**
   * asset denom
   *
   * @generated from field: string asset = 2;
   */
  asset = "";

  /**
   * staked amount
   *
   * @generated from field: string amount = 3;
   */
  amount = "";

  constructor(data?: PartialMessage<TotalStakedPAsset>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.pgov.v1.TotalStakedPAsset";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TotalStakedPAsset {
    return new TotalStakedPAsset().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TotalStakedPAsset {
    return new TotalStakedPAsset().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TotalStakedPAsset {
    return new TotalStakedPAsset().fromJsonString(jsonString, options);
  }

  static equals(a: TotalStakedPAsset | PlainMessage<TotalStakedPAsset> | undefined, b: TotalStakedPAsset | PlainMessage<TotalStakedPAsset> | undefined): boolean {
    return proto3.util.equals(TotalStakedPAsset, a, b);
  }
}

