// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file pryzm/refractor/v1/asset_state.proto (package pryzm.refractor.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message pryzm.refractor.v1.AssetState
 */
export class AssetState extends Message<AssetState> {
  /**
   * @generated from field: string asset_id = 1;
   */
  assetId = "";

  /**
   * @generated from field: string total_p_amount = 2;
   */
  totalPAmount = "";

  /**
   * @generated from field: string last_seen_exchange_rate = 3;
   */
  lastSeenExchangeRate = "";

  constructor(data?: PartialMessage<AssetState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.refractor.v1.AssetState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "asset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "total_p_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "last_seen_exchange_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssetState {
    return new AssetState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssetState {
    return new AssetState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssetState {
    return new AssetState().fromJsonString(jsonString, options);
  }

  static equals(a: AssetState | PlainMessage<AssetState> | undefined, b: AssetState | PlainMessage<AssetState> | undefined): boolean {
    return proto3.util.equals(AssetState, a, b);
  }
}

