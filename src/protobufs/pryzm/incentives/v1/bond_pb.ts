// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file pryzm/incentives/v1/bond.proto (package pryzm.incentives.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * @generated from message pryzm.incentives.v1.BondRewardToken
 */
export class BondRewardToken extends Message<BondRewardToken> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * @generated from field: string pending_amount = 2;
   */
  pendingAmount = "";

  /**
   * @generated from field: string user_index = 3;
   */
  userIndex = "";

  constructor(data?: PartialMessage<BondRewardToken>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.incentives.v1.BondRewardToken";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pending_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_index", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BondRewardToken {
    return new BondRewardToken().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BondRewardToken {
    return new BondRewardToken().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BondRewardToken {
    return new BondRewardToken().fromJsonString(jsonString, options);
  }

  static equals(a: BondRewardToken | PlainMessage<BondRewardToken> | undefined, b: BondRewardToken | PlainMessage<BondRewardToken> | undefined): boolean {
    return proto3.util.equals(BondRewardToken, a, b);
  }
}

/**
 * @generated from message pryzm.incentives.v1.Bond
 */
export class Bond extends Message<Bond> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin token = 2;
   */
  token?: Coin;

  /**
   * @generated from field: repeated pryzm.incentives.v1.BondRewardToken rewards = 3;
   */
  rewards: BondRewardToken[] = [];

  constructor(data?: PartialMessage<Bond>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.incentives.v1.Bond";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "token", kind: "message", T: Coin },
    { no: 3, name: "rewards", kind: "message", T: BondRewardToken, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Bond {
    return new Bond().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Bond {
    return new Bond().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Bond {
    return new Bond().fromJsonString(jsonString, options);
  }

  static equals(a: Bond | PlainMessage<Bond> | undefined, b: Bond | PlainMessage<Bond> | undefined): boolean {
    return proto3.util.equals(Bond, a, b);
  }
}

