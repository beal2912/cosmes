// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file pryzm/incentives/v1/pool.proto (package pryzm.incentives.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * @generated from message pryzm.incentives.v1.PoolRewardToken
 */
export class PoolRewardToken extends Message<PoolRewardToken> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * @generated from field: string amount = 2;
   */
  amount = "";

  /**
   * @generated from field: string global_index = 3;
   */
  globalIndex = "";

  /**
   * @generated from field: string weight = 4;
   */
  weight = "";

  constructor(data?: PartialMessage<PoolRewardToken>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.incentives.v1.PoolRewardToken";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "global_index", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "weight", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolRewardToken {
    return new PoolRewardToken().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolRewardToken {
    return new PoolRewardToken().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolRewardToken {
    return new PoolRewardToken().fromJsonString(jsonString, options);
  }

  static equals(a: PoolRewardToken | PlainMessage<PoolRewardToken> | undefined, b: PoolRewardToken | PlainMessage<PoolRewardToken> | undefined): boolean {
    return proto3.util.equals(PoolRewardToken, a, b);
  }
}

/**
 * @generated from message pryzm.incentives.v1.Pool
 */
export class Pool extends Message<Pool> {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin bonded_token = 1;
   */
  bondedToken?: Coin;

  /**
   * @generated from field: repeated pryzm.incentives.v1.PoolRewardToken rewards = 2;
   */
  rewards: PoolRewardToken[] = [];

  constructor(data?: PartialMessage<Pool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pryzm.incentives.v1.Pool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bonded_token", kind: "message", T: Coin },
    { no: 2, name: "rewards", kind: "message", T: PoolRewardToken, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pool {
    return new Pool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pool {
    return new Pool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pool {
    return new Pool().fromJsonString(jsonString, options);
  }

  static equals(a: Pool | PlainMessage<Pool> | undefined, b: Pool | PlainMessage<Pool> | undefined): boolean {
    return proto3.util.equals(Pool, a, b);
  }
}

