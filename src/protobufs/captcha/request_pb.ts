// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file captcha/request.proto (package captcha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum captcha.CaptchaVersion
 */
export enum CaptchaVersion {
  /**
   * @generated from enum value: CaptchaVersionV2 = 0;
   */
  CaptchaVersionV2 = 0,

  /**
   * @generated from enum value: CaptchaVersionV3 = 1;
   */
  CaptchaVersionV3 = 1,

  /**
   * @generated from enum value: CaptchaVersionH = 2;
   */
  CaptchaVersionH = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(CaptchaVersion)
proto3.util.setEnumType(CaptchaVersion, "captcha.CaptchaVersion", [
  { no: 0, name: "CaptchaVersionV2" },
  { no: 1, name: "CaptchaVersionV3" },
  { no: 2, name: "CaptchaVersionH" },
]);

/**
 * @generated from message captcha.CaptchaRequest
 */
export class CaptchaRequest extends Message<CaptchaRequest> {
  /**
   * @generated from field: string response = 1;
   */
  response = "";

  /**
   * @generated from field: captcha.CaptchaVersion version = 2;
   */
  version = CaptchaVersion.CaptchaVersionV2;

  constructor(data?: PartialMessage<CaptchaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "captcha.CaptchaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version", kind: "enum", T: proto3.getEnumType(CaptchaVersion) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CaptchaRequest {
    return new CaptchaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CaptchaRequest {
    return new CaptchaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CaptchaRequest {
    return new CaptchaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CaptchaRequest | PlainMessage<CaptchaRequest> | undefined, b: CaptchaRequest | PlainMessage<CaptchaRequest> | undefined): boolean {
    return proto3.util.equals(CaptchaRequest, a, b);
  }
}

