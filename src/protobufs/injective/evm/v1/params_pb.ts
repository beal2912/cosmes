// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file injective/evm/v1/params.proto (package injective.evm.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ChainConfig } from "./chain_config_pb.js";

/**
 * Params defines the EVM module parameters
 *
 * @generated from message injective.evm.v1.Params
 */
export class Params extends Message<Params> {
  /**
   * evm_denom represents the token denomination used to run the EVM state
   * transitions.
   *
   * @generated from field: string evm_denom = 1;
   */
  evmDenom = "";

  /**
   * enable_create toggles state transitions that use the vm.Create function
   *
   * @generated from field: bool enable_create = 2;
   */
  enableCreate = false;

  /**
   * enable_call toggles state transitions that use the vm.Call function
   *
   * @generated from field: bool enable_call = 3;
   */
  enableCall = false;

  /**
   * extra_eips defines the additional EIPs for the vm.Config
   *
   * @generated from field: repeated int64 extra_eips = 4;
   */
  extraEips: bigint[] = [];

  /**
   * chain_config defines the EVM chain configuration parameters
   *
   * @generated from field: injective.evm.v1.ChainConfig chain_config = 5;
   */
  chainConfig?: ChainConfig;

  /**
   * allow_unprotected_txs defines if replay-protected (i.e non EIP155
   * signed) transactions can be executed on the state machine.
   *
   * @generated from field: bool allow_unprotected_txs = 6;
   */
  allowUnprotectedTxs = false;

  /**
   * list of ETH addresses that are allowed to deploy contracts. Only relevant
   * if permissioned is true.
   *
   * @generated from field: repeated string authorized_deployers = 7;
   */
  authorizedDeployers: string[] = [];

  /**
   * make contract deployment permissioned, such that only accounts listed in
   * authorized_deployers are allowed to deploy contracts.
   *
   * @generated from field: bool permissioned = 8;
   */
  permissioned = false;

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.evm.v1.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "evm_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "enable_create", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "enable_call", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "extra_eips", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
    { no: 5, name: "chain_config", kind: "message", T: ChainConfig },
    { no: 6, name: "allow_unprotected_txs", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "authorized_deployers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 8, name: "permissioned", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}

