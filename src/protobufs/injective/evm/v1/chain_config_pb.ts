// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file injective/evm/v1/chain_config.proto (package injective.evm.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * ChainConfig defines the Ethereum ChainConfig parameters using *sdkmath.Int
 * values instead of *big.Int.
 *
 * @generated from message injective.evm.v1.ChainConfig
 */
export class ChainConfig extends Message<ChainConfig> {
  /**
   * homestead_block switch (nil no fork, 0 = already homestead)
   *
   * @generated from field: string homestead_block = 1;
   */
  homesteadBlock = "";

  /**
   * dao_fork_block corresponds to TheDAO hard-fork switch block (nil no fork)
   *
   * @generated from field: string dao_fork_block = 2;
   */
  daoForkBlock = "";

  /**
   * dao_fork_support defines whether the nodes supports or opposes the DAO
   * hard-fork
   *
   * @generated from field: bool dao_fork_support = 3;
   */
  daoForkSupport = false;

  /**
   * eip150_block: EIP150 implements the Gas price changes
   * (https://github.com/ethereum/EIPs/issues/150) EIP150 HF block (nil no fork)
   *
   * @generated from field: string eip150_block = 4;
   */
  eip150Block = "";

  /**
   * eip150_hash: EIP150 HF hash (needed for header only clients as only gas
   * pricing changed)
   *
   * @generated from field: string eip150_hash = 5;
   */
  eip150Hash = "";

  /**
   * eip155_block: EIP155Block HF block
   *
   * @generated from field: string eip155_block = 6;
   */
  eip155Block = "";

  /**
   * eip158_block: EIP158 HF block
   *
   * @generated from field: string eip158_block = 7;
   */
  eip158Block = "";

  /**
   * byzantium_block: Byzantium switch block (nil no fork, 0 = already on
   * byzantium)
   *
   * @generated from field: string byzantium_block = 8;
   */
  byzantiumBlock = "";

  /**
   * constantinople_block: Constantinople switch block (nil no fork, 0 = already
   * activated)
   *
   * @generated from field: string constantinople_block = 9;
   */
  constantinopleBlock = "";

  /**
   * petersburg_block: Petersburg switch block (nil same as Constantinople)
   *
   * @generated from field: string petersburg_block = 10;
   */
  petersburgBlock = "";

  /**
   * istanbul_block: Istanbul switch block (nil no fork, 0 = already on
   * istanbul)
   *
   * @generated from field: string istanbul_block = 11;
   */
  istanbulBlock = "";

  /**
   * muir_glacier_block: Eip-2384 (bomb delay) switch block (nil no fork, 0 =
   * already activated)
   *
   * @generated from field: string muir_glacier_block = 12;
   */
  muirGlacierBlock = "";

  /**
   * berlin_block: Berlin switch block (nil = no fork, 0 = already on berlin)
   *
   * @generated from field: string berlin_block = 13;
   */
  berlinBlock = "";

  /**
   * london_block: London switch block (nil = no fork, 0 = already on london)
   *
   * @generated from field: string london_block = 17;
   */
  londonBlock = "";

  /**
   * arrow_glacier_block: Eip-4345 (bomb delay) switch block (nil = no fork, 0 =
   * already activated)
   *
   * @generated from field: string arrow_glacier_block = 18;
   */
  arrowGlacierBlock = "";

  /**
   * gray_glacier_block: EIP-5133 (bomb delay) switch block (nil = no fork, 0 =
   * already activated)
   *
   * @generated from field: string gray_glacier_block = 20;
   */
  grayGlacierBlock = "";

  /**
   * merge_netsplit_block: Virtual fork after The Merge to use as a network
   * splitter
   *
   * @generated from field: string merge_netsplit_block = 21;
   */
  mergeNetsplitBlock = "";

  /**
   * shanghai switch time (nil = no fork, 0 = already on shanghai)
   *
   * @generated from field: string shanghai_time = 22;
   */
  shanghaiTime = "";

  /**
   * cancun switch time (nil = no fork, 0 = already on cancun)
   *
   * @generated from field: string cancun_time = 23;
   */
  cancunTime = "";

  /**
   * prague switch time (nil = no fork, 0 = already on prague)
   *
   * @generated from field: string prague_time = 24;
   */
  pragueTime = "";

  /**
   * eip155_chain_id: identifies the chain and is used for replay protection
   *
   * @generated from field: string eip155_chain_id = 25;
   */
  eip155ChainId = "";

  /**
   * eip7840: per-fork schedule of max and target blob counts in client
   * configuration files
   *
   * @generated from field: injective.evm.v1.BlobScheduleConfig blob_schedule_config = 26;
   */
  blobScheduleConfig?: BlobScheduleConfig;

  constructor(data?: PartialMessage<ChainConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.evm.v1.ChainConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "homestead_block", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "dao_fork_block", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "dao_fork_support", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "eip150_block", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "eip150_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "eip155_block", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "eip158_block", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "byzantium_block", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "constantinople_block", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "petersburg_block", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "istanbul_block", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "muir_glacier_block", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "berlin_block", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 17, name: "london_block", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 18, name: "arrow_glacier_block", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "gray_glacier_block", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "merge_netsplit_block", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "shanghai_time", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 23, name: "cancun_time", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 24, name: "prague_time", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 25, name: "eip155_chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 26, name: "blob_schedule_config", kind: "message", T: BlobScheduleConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChainConfig {
    return new ChainConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChainConfig {
    return new ChainConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChainConfig {
    return new ChainConfig().fromJsonString(jsonString, options);
  }

  static equals(a: ChainConfig | PlainMessage<ChainConfig> | undefined, b: ChainConfig | PlainMessage<ChainConfig> | undefined): boolean {
    return proto3.util.equals(ChainConfig, a, b);
  }
}

/**
 * @generated from message injective.evm.v1.BlobScheduleConfig
 */
export class BlobScheduleConfig extends Message<BlobScheduleConfig> {
  /**
   * @generated from field: injective.evm.v1.BlobConfig cancun = 1;
   */
  cancun?: BlobConfig;

  /**
   * @generated from field: injective.evm.v1.BlobConfig prague = 2;
   */
  prague?: BlobConfig;

  /**
   * @generated from field: injective.evm.v1.BlobConfig osaka = 3;
   */
  osaka?: BlobConfig;

  /**
   * @generated from field: injective.evm.v1.BlobConfig verkle = 4;
   */
  verkle?: BlobConfig;

  constructor(data?: PartialMessage<BlobScheduleConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.evm.v1.BlobScheduleConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cancun", kind: "message", T: BlobConfig },
    { no: 2, name: "prague", kind: "message", T: BlobConfig },
    { no: 3, name: "osaka", kind: "message", T: BlobConfig },
    { no: 4, name: "verkle", kind: "message", T: BlobConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlobScheduleConfig {
    return new BlobScheduleConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlobScheduleConfig {
    return new BlobScheduleConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlobScheduleConfig {
    return new BlobScheduleConfig().fromJsonString(jsonString, options);
  }

  static equals(a: BlobScheduleConfig | PlainMessage<BlobScheduleConfig> | undefined, b: BlobScheduleConfig | PlainMessage<BlobScheduleConfig> | undefined): boolean {
    return proto3.util.equals(BlobScheduleConfig, a, b);
  }
}

/**
 * @generated from message injective.evm.v1.BlobConfig
 */
export class BlobConfig extends Message<BlobConfig> {
  /**
   * @generated from field: uint64 target = 1;
   */
  target = protoInt64.zero;

  /**
   * @generated from field: uint64 max = 2;
   */
  max = protoInt64.zero;

  /**
   * @generated from field: uint64 base_fee_update_fraction = 3;
   */
  baseFeeUpdateFraction = protoInt64.zero;

  constructor(data?: PartialMessage<BlobConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.evm.v1.BlobConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "target", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "max", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "base_fee_update_fraction", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlobConfig {
    return new BlobConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlobConfig {
    return new BlobConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlobConfig {
    return new BlobConfig().fromJsonString(jsonString, options);
  }

  static equals(a: BlobConfig | PlainMessage<BlobConfig> | undefined, b: BlobConfig | PlainMessage<BlobConfig> | undefined): boolean {
    return proto3.util.equals(BlobConfig, a, b);
  }
}

