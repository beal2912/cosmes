// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file injective/evm/v1/transaction_logs.proto (package injective.evm.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Log } from "./log_pb.js";

/**
 * TransactionLogs define the logs generated from a transaction execution
 * with a given hash. It it used for import/export data as transactions are not
 * persisted on blockchain state after an upgrade.
 *
 * @generated from message injective.evm.v1.TransactionLogs
 */
export class TransactionLogs extends Message<TransactionLogs> {
  /**
   * hash of the transaction
   *
   * @generated from field: string hash = 1;
   */
  hash = "";

  /**
   * logs is an array of Logs for the given transaction hash
   *
   * @generated from field: repeated injective.evm.v1.Log logs = 2;
   */
  logs: Log[] = [];

  constructor(data?: PartialMessage<TransactionLogs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.evm.v1.TransactionLogs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "logs", kind: "message", T: Log, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransactionLogs {
    return new TransactionLogs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransactionLogs {
    return new TransactionLogs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransactionLogs {
    return new TransactionLogs().fromJsonString(jsonString, options);
  }

  static equals(a: TransactionLogs | PlainMessage<TransactionLogs> | undefined, b: TransactionLogs | PlainMessage<TransactionLogs> | undefined): boolean {
    return proto3.util.equals(TransactionLogs, a, b);
  }
}

