// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file injective/permissions/v1beta1/tx.proto (package injective.permissions.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { Namespace, PolicyManagerCapability, PolicyStatus, Role, RoleActors, RoleManager } from "./permissions_pb.js";

/**
 * @generated from message injective.permissions.v1beta1.MsgUpdateParams
 */
export class MsgUpdateParams extends Message<MsgUpdateParams> {
  /**
   * authority is the address of the governance account.
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * params defines the permissions parameters to update.
   *
   * NOTE: All parameters must be supplied.
   *
   * @generated from field: injective.permissions.v1beta1.Params params = 2;
   */
  params?: Params;

  constructor(data?: PartialMessage<MsgUpdateParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.permissions.v1beta1.MsgUpdateParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined, b: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParams, a, b);
  }
}

/**
 * @generated from message injective.permissions.v1beta1.MsgUpdateParamsResponse
 */
export class MsgUpdateParamsResponse extends Message<MsgUpdateParamsResponse> {
  constructor(data?: PartialMessage<MsgUpdateParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.permissions.v1beta1.MsgUpdateParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined, b: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParamsResponse, a, b);
  }
}

/**
 * @generated from message injective.permissions.v1beta1.MsgCreateNamespace
 */
export class MsgCreateNamespace extends Message<MsgCreateNamespace> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: injective.permissions.v1beta1.Namespace namespace = 2;
   */
  namespace?: Namespace;

  constructor(data?: PartialMessage<MsgCreateNamespace>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.permissions.v1beta1.MsgCreateNamespace";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "message", T: Namespace },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateNamespace {
    return new MsgCreateNamespace().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateNamespace {
    return new MsgCreateNamespace().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateNamespace {
    return new MsgCreateNamespace().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateNamespace | PlainMessage<MsgCreateNamespace> | undefined, b: MsgCreateNamespace | PlainMessage<MsgCreateNamespace> | undefined): boolean {
    return proto3.util.equals(MsgCreateNamespace, a, b);
  }
}

/**
 * @generated from message injective.permissions.v1beta1.MsgCreateNamespaceResponse
 */
export class MsgCreateNamespaceResponse extends Message<MsgCreateNamespaceResponse> {
  constructor(data?: PartialMessage<MsgCreateNamespaceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.permissions.v1beta1.MsgCreateNamespaceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateNamespaceResponse {
    return new MsgCreateNamespaceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateNamespaceResponse {
    return new MsgCreateNamespaceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateNamespaceResponse {
    return new MsgCreateNamespaceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateNamespaceResponse | PlainMessage<MsgCreateNamespaceResponse> | undefined, b: MsgCreateNamespaceResponse | PlainMessage<MsgCreateNamespaceResponse> | undefined): boolean {
    return proto3.util.equals(MsgCreateNamespaceResponse, a, b);
  }
}

/**
 * @generated from message injective.permissions.v1beta1.MsgUpdateNamespace
 */
export class MsgUpdateNamespace extends Message<MsgUpdateNamespace> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * denom whose namespace updates are to be applied
   *
   * @generated from field: string denom = 2;
   */
  denom = "";

  /**
   * address of smart contract to apply code-based restrictions
   *
   * @generated from field: injective.permissions.v1beta1.MsgUpdateNamespace.SetContractHook contract_hook = 3;
   */
  contractHook?: MsgUpdateNamespace_SetContractHook;

  /**
   * role permissions to update
   *
   * @generated from field: repeated injective.permissions.v1beta1.Role role_permissions = 4;
   */
  rolePermissions: Role[] = [];

  /**
   *  role managers to update
   *
   * @generated from field: repeated injective.permissions.v1beta1.RoleManager role_managers = 5;
   */
  roleManagers: RoleManager[] = [];

  /**
   * policy statuses to update
   *
   * @generated from field: repeated injective.permissions.v1beta1.PolicyStatus policy_statuses = 6;
   */
  policyStatuses: PolicyStatus[] = [];

  /**
   * policy manager capabilities to update
   *
   * @generated from field: repeated injective.permissions.v1beta1.PolicyManagerCapability policy_manager_capabilities = 7;
   */
  policyManagerCapabilities: PolicyManagerCapability[] = [];

  constructor(data?: PartialMessage<MsgUpdateNamespace>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.permissions.v1beta1.MsgUpdateNamespace";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "contract_hook", kind: "message", T: MsgUpdateNamespace_SetContractHook },
    { no: 4, name: "role_permissions", kind: "message", T: Role, repeated: true },
    { no: 5, name: "role_managers", kind: "message", T: RoleManager, repeated: true },
    { no: 6, name: "policy_statuses", kind: "message", T: PolicyStatus, repeated: true },
    { no: 7, name: "policy_manager_capabilities", kind: "message", T: PolicyManagerCapability, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateNamespace {
    return new MsgUpdateNamespace().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateNamespace {
    return new MsgUpdateNamespace().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateNamespace {
    return new MsgUpdateNamespace().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateNamespace | PlainMessage<MsgUpdateNamespace> | undefined, b: MsgUpdateNamespace | PlainMessage<MsgUpdateNamespace> | undefined): boolean {
    return proto3.util.equals(MsgUpdateNamespace, a, b);
  }
}

/**
 * @generated from message injective.permissions.v1beta1.MsgUpdateNamespace.SetContractHook
 */
export class MsgUpdateNamespace_SetContractHook extends Message<MsgUpdateNamespace_SetContractHook> {
  /**
   * @generated from field: string new_value = 1;
   */
  newValue = "";

  constructor(data?: PartialMessage<MsgUpdateNamespace_SetContractHook>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.permissions.v1beta1.MsgUpdateNamespace.SetContractHook";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "new_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateNamespace_SetContractHook {
    return new MsgUpdateNamespace_SetContractHook().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateNamespace_SetContractHook {
    return new MsgUpdateNamespace_SetContractHook().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateNamespace_SetContractHook {
    return new MsgUpdateNamespace_SetContractHook().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateNamespace_SetContractHook | PlainMessage<MsgUpdateNamespace_SetContractHook> | undefined, b: MsgUpdateNamespace_SetContractHook | PlainMessage<MsgUpdateNamespace_SetContractHook> | undefined): boolean {
    return proto3.util.equals(MsgUpdateNamespace_SetContractHook, a, b);
  }
}

/**
 * @generated from message injective.permissions.v1beta1.MsgUpdateNamespaceResponse
 */
export class MsgUpdateNamespaceResponse extends Message<MsgUpdateNamespaceResponse> {
  constructor(data?: PartialMessage<MsgUpdateNamespaceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.permissions.v1beta1.MsgUpdateNamespaceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateNamespaceResponse {
    return new MsgUpdateNamespaceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateNamespaceResponse {
    return new MsgUpdateNamespaceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateNamespaceResponse {
    return new MsgUpdateNamespaceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateNamespaceResponse | PlainMessage<MsgUpdateNamespaceResponse> | undefined, b: MsgUpdateNamespaceResponse | PlainMessage<MsgUpdateNamespaceResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateNamespaceResponse, a, b);
  }
}

/**
 * @generated from message injective.permissions.v1beta1.MsgUpdateActorRoles
 */
export class MsgUpdateActorRoles extends Message<MsgUpdateActorRoles> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * namespace denom to which this updates are applied
   *
   * @generated from field: string denom = 2;
   */
  denom = "";

  /**
   * roles to add for given actors
   *
   * @generated from field: repeated injective.permissions.v1beta1.RoleActors role_actors_to_add = 3;
   */
  roleActorsToAdd: RoleActors[] = [];

  /**
   * roles to revoke from given actors
   *
   * @generated from field: repeated injective.permissions.v1beta1.RoleActors role_actors_to_revoke = 5;
   */
  roleActorsToRevoke: RoleActors[] = [];

  constructor(data?: PartialMessage<MsgUpdateActorRoles>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.permissions.v1beta1.MsgUpdateActorRoles";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "role_actors_to_add", kind: "message", T: RoleActors, repeated: true },
    { no: 5, name: "role_actors_to_revoke", kind: "message", T: RoleActors, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateActorRoles {
    return new MsgUpdateActorRoles().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateActorRoles {
    return new MsgUpdateActorRoles().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateActorRoles {
    return new MsgUpdateActorRoles().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateActorRoles | PlainMessage<MsgUpdateActorRoles> | undefined, b: MsgUpdateActorRoles | PlainMessage<MsgUpdateActorRoles> | undefined): boolean {
    return proto3.util.equals(MsgUpdateActorRoles, a, b);
  }
}

/**
 * @generated from message injective.permissions.v1beta1.MsgUpdateActorRolesResponse
 */
export class MsgUpdateActorRolesResponse extends Message<MsgUpdateActorRolesResponse> {
  constructor(data?: PartialMessage<MsgUpdateActorRolesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.permissions.v1beta1.MsgUpdateActorRolesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateActorRolesResponse {
    return new MsgUpdateActorRolesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateActorRolesResponse {
    return new MsgUpdateActorRolesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateActorRolesResponse {
    return new MsgUpdateActorRolesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateActorRolesResponse | PlainMessage<MsgUpdateActorRolesResponse> | undefined, b: MsgUpdateActorRolesResponse | PlainMessage<MsgUpdateActorRolesResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateActorRolesResponse, a, b);
  }
}

/**
 * @generated from message injective.permissions.v1beta1.MsgClaimVoucher
 */
export class MsgClaimVoucher extends Message<MsgClaimVoucher> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string denom = 2;
   */
  denom = "";

  constructor(data?: PartialMessage<MsgClaimVoucher>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.permissions.v1beta1.MsgClaimVoucher";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgClaimVoucher {
    return new MsgClaimVoucher().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgClaimVoucher {
    return new MsgClaimVoucher().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgClaimVoucher {
    return new MsgClaimVoucher().fromJsonString(jsonString, options);
  }

  static equals(a: MsgClaimVoucher | PlainMessage<MsgClaimVoucher> | undefined, b: MsgClaimVoucher | PlainMessage<MsgClaimVoucher> | undefined): boolean {
    return proto3.util.equals(MsgClaimVoucher, a, b);
  }
}

/**
 * @generated from message injective.permissions.v1beta1.MsgClaimVoucherResponse
 */
export class MsgClaimVoucherResponse extends Message<MsgClaimVoucherResponse> {
  constructor(data?: PartialMessage<MsgClaimVoucherResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.permissions.v1beta1.MsgClaimVoucherResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgClaimVoucherResponse {
    return new MsgClaimVoucherResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgClaimVoucherResponse {
    return new MsgClaimVoucherResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgClaimVoucherResponse {
    return new MsgClaimVoucherResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgClaimVoucherResponse | PlainMessage<MsgClaimVoucherResponse> | undefined, b: MsgClaimVoucherResponse | PlainMessage<MsgClaimVoucherResponse> | undefined): boolean {
    return proto3.util.equals(MsgClaimVoucherResponse, a, b);
  }
}

