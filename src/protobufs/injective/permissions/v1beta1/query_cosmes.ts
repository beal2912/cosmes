// @generated by protoc-gen-cosmes v0.0.1 with parameter "target=ts"
// @generated from file injective/permissions/v1beta1/query.proto (package injective.permissions.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { QueryActorsByRoleRequest, QueryActorsByRoleResponse, QueryModuleStateRequest, QueryModuleStateResponse, QueryNamespaceDenomsRequest, QueryNamespaceDenomsResponse, QueryNamespaceRequest, QueryNamespaceResponse, QueryNamespacesRequest, QueryNamespacesResponse, QueryParamsRequest, QueryParamsResponse, QueryPolicyManagerCapabilitiesRequest, QueryPolicyManagerCapabilitiesResponse, QueryPolicyStatusesRequest, QueryPolicyStatusesResponse, QueryRoleManagerRequest, QueryRoleManagerResponse, QueryRoleManagersRequest, QueryRoleManagersResponse, QueryRolesByActorRequest, QueryRolesByActorResponse, QueryVoucherRequest, QueryVoucherResponse, QueryVouchersRequest, QueryVouchersResponse } from "./query_pb.js";

const TYPE_NAME = "injective.permissions.v1beta1.Query";

/**
 * Params defines a gRPC query method that returns the permissions module's
 * parameters.
 *
 * @generated from rpc injective.permissions.v1beta1.Query.Params
 */
export const QueryParamsService = {
  typeName: TYPE_NAME,
  method: "Params",
  Request: QueryParamsRequest,
  Response: QueryParamsResponse,
} as const;

/**
 * NamespaceDenoms defines a gRPC query method that returns the denoms for
 * which a namespace exists
 *
 * @generated from rpc injective.permissions.v1beta1.Query.NamespaceDenoms
 */
export const QueryNamespaceDenomsService = {
  typeName: TYPE_NAME,
  method: "NamespaceDenoms",
  Request: QueryNamespaceDenomsRequest,
  Response: QueryNamespaceDenomsResponse,
} as const;

/**
 * Namespaces defines a gRPC query method that returns the permissions
 * module's created namespaces.
 *
 * @generated from rpc injective.permissions.v1beta1.Query.Namespaces
 */
export const QueryNamespacesService = {
  typeName: TYPE_NAME,
  method: "Namespaces",
  Request: QueryNamespacesRequest,
  Response: QueryNamespacesResponse,
} as const;

/**
 * Namespace defines a gRPC query method that returns the permissions
 * module's namespace associated with the provided denom.
 *
 * @generated from rpc injective.permissions.v1beta1.Query.Namespace
 */
export const QueryNamespaceService = {
  typeName: TYPE_NAME,
  method: "Namespace",
  Request: QueryNamespaceRequest,
  Response: QueryNamespaceResponse,
} as const;

/**
 * RolesByActor defines a gRPC query method that returns roles for the actor
 * in the namespace
 *
 * @generated from rpc injective.permissions.v1beta1.Query.RolesByActor
 */
export const QueryRolesByActorService = {
  typeName: TYPE_NAME,
  method: "RolesByActor",
  Request: QueryRolesByActorRequest,
  Response: QueryRolesByActorResponse,
} as const;

/**
 * ActorsByRole defines a gRPC query method that returns a namespace's roles
 * associated with the provided actor.
 *
 * @generated from rpc injective.permissions.v1beta1.Query.ActorsByRole
 */
export const QueryActorsByRoleService = {
  typeName: TYPE_NAME,
  method: "ActorsByRole",
  Request: QueryActorsByRoleRequest,
  Response: QueryActorsByRoleResponse,
} as const;

/**
 * RoleManagers defines a gRPC query method that returns a namespace's role
 * managers
 *
 * @generated from rpc injective.permissions.v1beta1.Query.RoleManagers
 */
export const QueryRoleManagersService = {
  typeName: TYPE_NAME,
  method: "RoleManagers",
  Request: QueryRoleManagersRequest,
  Response: QueryRoleManagersResponse,
} as const;

/**
 * RoleManager defines a gRPC query method that returns the roles a given role
 * manager manages for a given namespace
 *
 * @generated from rpc injective.permissions.v1beta1.Query.RoleManager
 */
export const QueryRoleManagerService = {
  typeName: TYPE_NAME,
  method: "RoleManager",
  Request: QueryRoleManagerRequest,
  Response: QueryRoleManagerResponse,
} as const;

/**
 * PolicyStatuses defines a gRPC query method that returns a namespace's
 * policy statuses
 *
 * @generated from rpc injective.permissions.v1beta1.Query.PolicyStatuses
 */
export const QueryPolicyStatusesService = {
  typeName: TYPE_NAME,
  method: "PolicyStatuses",
  Request: QueryPolicyStatusesRequest,
  Response: QueryPolicyStatusesResponse,
} as const;

/**
 * PolicyManagerCapabilities defines a gRPC query method that returns a
 * namespace's policy manager capabilities
 *
 * @generated from rpc injective.permissions.v1beta1.Query.PolicyManagerCapabilities
 */
export const QueryPolicyManagerCapabilitiesService = {
  typeName: TYPE_NAME,
  method: "PolicyManagerCapabilities",
  Request: QueryPolicyManagerCapabilitiesRequest,
  Response: QueryPolicyManagerCapabilitiesResponse,
} as const;

/**
 * Vouchers defines a gRPC query method for the vouchers for a given denom
 *
 * @generated from rpc injective.permissions.v1beta1.Query.Vouchers
 */
export const QueryVouchersService = {
  typeName: TYPE_NAME,
  method: "Vouchers",
  Request: QueryVouchersRequest,
  Response: QueryVouchersResponse,
} as const;

/**
 * Voucher defines a gRPC query method for the vouchers for a given denom and
 * address
 *
 * @generated from rpc injective.permissions.v1beta1.Query.Voucher
 */
export const QueryVoucherService = {
  typeName: TYPE_NAME,
  method: "Voucher",
  Request: QueryVoucherRequest,
  Response: QueryVoucherResponse,
} as const;

/**
 * Retrieves the entire permissions module's state
 *
 * @generated from rpc injective.permissions.v1beta1.Query.PermissionsModuleState
 */
export const QueryPermissionsModuleStateService = {
  typeName: TYPE_NAME,
  method: "PermissionsModuleState",
  Request: QueryModuleStateRequest,
  Response: QueryModuleStateResponse,
} as const;

