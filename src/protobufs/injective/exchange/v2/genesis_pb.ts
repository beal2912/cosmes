// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file injective/exchange/v2/genesis.proto (package injective.exchange.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { ActiveGrant, AggregateSubaccountVolumeRecord, Balance, CampaignRewardPool, DenomDecimals, DenomMinNotional, DerivativePosition, FeeDiscountSchedule, FeeDiscountTierTTL, GrantAuthorization, Params, SubaccountTradeNonce, TradeRecords, TradingRewardCampaignInfo } from "./exchange_pb.js";
import { BinaryOptionsMarket, DerivativeMarket, DerivativeMarketSettlementInfo, ExpiryFuturesMarketInfoState, MarketFeeMultiplier, MarketVolume, PerpetualMarketFundingState, PerpetualMarketInfo, SpotMarket } from "./market_pb.js";
import { ConditionalDerivativeOrderBook, DerivativeOrderBook, SpotOrderBook } from "./orderbook_pb.js";

/**
 * GenesisState defines the exchange module's genesis state.
 *
 * @generated from message injective.exchange.v2.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * params defines all the parameters of related to exchange.
   *
   * @generated from field: injective.exchange.v2.Params params = 1;
   */
  params?: Params;

  /**
   * spot_markets is an array containing the genesis trade pairs
   *
   * @generated from field: repeated injective.exchange.v2.SpotMarket spot_markets = 2;
   */
  spotMarkets: SpotMarket[] = [];

  /**
   * derivative_markets is an array containing the genesis derivative markets
   *
   * @generated from field: repeated injective.exchange.v2.DerivativeMarket derivative_markets = 3;
   */
  derivativeMarkets: DerivativeMarket[] = [];

  /**
   * spot_orderbook defines the spot exchange limit orderbook active at genesis.
   *
   * @generated from field: repeated injective.exchange.v2.SpotOrderBook spot_orderbook = 4;
   */
  spotOrderbook: SpotOrderBook[] = [];

  /**
   * derivative_orderbook defines the derivative exchange limit orderbook active
   * at genesis.
   *
   * @generated from field: repeated injective.exchange.v2.DerivativeOrderBook derivative_orderbook = 5;
   */
  derivativeOrderbook: DerivativeOrderBook[] = [];

  /**
   * balances defines the exchange users balances active at genesis.
   *
   * @generated from field: repeated injective.exchange.v2.Balance balances = 6;
   */
  balances: Balance[] = [];

  /**
   * positions defines the exchange derivative positions at genesis
   *
   * @generated from field: repeated injective.exchange.v2.DerivativePosition positions = 7;
   */
  positions: DerivativePosition[] = [];

  /**
   * subaccount_trade_nonces defines the subaccount trade nonces for the
   * subaccounts at genesis
   *
   * @generated from field: repeated injective.exchange.v2.SubaccountNonce subaccount_trade_nonces = 8;
   */
  subaccountTradeNonces: SubaccountNonce[] = [];

  /**
   * expiry_futures_market_info defines the market info for the expiry futures
   * markets at genesis
   *
   * @generated from field: repeated injective.exchange.v2.ExpiryFuturesMarketInfoState expiry_futures_market_info_state = 9;
   */
  expiryFuturesMarketInfoState: ExpiryFuturesMarketInfoState[] = [];

  /**
   * perpetual_market_info defines the market info for the perpetual derivative
   * markets at genesis
   *
   * @generated from field: repeated injective.exchange.v2.PerpetualMarketInfo perpetual_market_info = 10;
   */
  perpetualMarketInfo: PerpetualMarketInfo[] = [];

  /**
   * perpetual_market_funding_state defines the funding state for the perpetual
   * derivative markets at genesis
   *
   * @generated from field: repeated injective.exchange.v2.PerpetualMarketFundingState perpetual_market_funding_state = 11;
   */
  perpetualMarketFundingState: PerpetualMarketFundingState[] = [];

  /**
   * derivative_market_settlement_scheduled defines the scheduled markets for
   * settlement at genesis
   *
   * @generated from field: repeated injective.exchange.v2.DerivativeMarketSettlementInfo derivative_market_settlement_scheduled = 12;
   */
  derivativeMarketSettlementScheduled: DerivativeMarketSettlementInfo[] = [];

  /**
   * sets spot markets as enabled
   *
   * @generated from field: bool is_spot_exchange_enabled = 13;
   */
  isSpotExchangeEnabled = false;

  /**
   * sets derivative markets as enabled
   *
   * @generated from field: bool is_derivatives_exchange_enabled = 14;
   */
  isDerivativesExchangeEnabled = false;

  /**
   * the current trading reward campaign info
   *
   * @generated from field: injective.exchange.v2.TradingRewardCampaignInfo trading_reward_campaign_info = 15;
   */
  tradingRewardCampaignInfo?: TradingRewardCampaignInfo;

  /**
   * the current and upcoming trading reward campaign pools
   *
   * @generated from field: repeated injective.exchange.v2.CampaignRewardPool trading_reward_pool_campaign_schedule = 16;
   */
  tradingRewardPoolCampaignSchedule: CampaignRewardPool[] = [];

  /**
   * the current trading reward account points
   *
   * @generated from field: repeated injective.exchange.v2.TradingRewardCampaignAccountPoints trading_reward_campaign_account_points = 17;
   */
  tradingRewardCampaignAccountPoints: TradingRewardCampaignAccountPoints[] = [];

  /**
   * the fee discount schedule
   *
   * @generated from field: injective.exchange.v2.FeeDiscountSchedule fee_discount_schedule = 18;
   */
  feeDiscountSchedule?: FeeDiscountSchedule;

  /**
   * the cached fee discount account tiers with TTL
   *
   * @generated from field: repeated injective.exchange.v2.FeeDiscountAccountTierTTL fee_discount_account_tier_ttl = 19;
   */
  feeDiscountAccountTierTtl: FeeDiscountAccountTierTTL[] = [];

  /**
   * the fee discount paid by accounts in all buckets
   *
   * @generated from field: repeated injective.exchange.v2.FeeDiscountBucketVolumeAccounts fee_discount_bucket_volume_accounts = 20;
   */
  feeDiscountBucketVolumeAccounts: FeeDiscountBucketVolumeAccounts[] = [];

  /**
   * sets the first fee cycle as finished
   *
   * @generated from field: bool is_first_fee_cycle_finished = 21;
   */
  isFirstFeeCycleFinished = false;

  /**
   * the current and upcoming trading reward campaign pending pools
   *
   * @generated from field: repeated injective.exchange.v2.CampaignRewardPool pending_trading_reward_pool_campaign_schedule = 22;
   */
  pendingTradingRewardPoolCampaignSchedule: CampaignRewardPool[] = [];

  /**
   * the pending trading reward account points
   *
   * @generated from field: repeated injective.exchange.v2.TradingRewardCampaignAccountPendingPoints pending_trading_reward_campaign_account_points = 23;
   */
  pendingTradingRewardCampaignAccountPoints: TradingRewardCampaignAccountPendingPoints[] = [];

  /**
   * the addresses opting out of trading rewards
   *
   * @generated from field: repeated string rewards_opt_out_addresses = 24;
   */
  rewardsOptOutAddresses: string[] = [];

  /**
   * @generated from field: repeated injective.exchange.v2.TradeRecords historical_trade_records = 25;
   */
  historicalTradeRecords: TradeRecords[] = [];

  /**
   * binary_options_markets is an array containing the genesis binary options
   * markets
   *
   * @generated from field: repeated injective.exchange.v2.BinaryOptionsMarket binary_options_markets = 26;
   */
  binaryOptionsMarkets: BinaryOptionsMarket[] = [];

  /**
   * binary_options_markets_scheduled_for_settlement contains the marketIDs of
   * binary options markets scheduled for next-block settlement
   *
   * @generated from field: repeated string binary_options_market_ids_scheduled_for_settlement = 27;
   */
  binaryOptionsMarketIdsScheduledForSettlement: string[] = [];

  /**
   * spot_market_ids_scheduled_to_force_close defines the scheduled markets for
   * forced closings at genesis
   *
   * @generated from field: repeated string spot_market_ids_scheduled_to_force_close = 28;
   */
  spotMarketIdsScheduledToForceClose: string[] = [];

  /**
   * denom_decimals defines the denom decimals for the exchange.
   *
   * @generated from field: repeated injective.exchange.v2.DenomDecimals denom_decimals = 29;
   */
  denomDecimals: DenomDecimals[] = [];

  /**
   * conditional_derivative_orderbook contains conditional orderbooks for all
   * markets (both lmit and market conditional orders)
   *
   * @generated from field: repeated injective.exchange.v2.ConditionalDerivativeOrderBook conditional_derivative_orderbooks = 30;
   */
  conditionalDerivativeOrderbooks: ConditionalDerivativeOrderBook[] = [];

  /**
   * market_fee_multipliers contains any non-default atomic order fee
   * multipliers
   *
   * @generated from field: repeated injective.exchange.v2.MarketFeeMultiplier market_fee_multipliers = 31;
   */
  marketFeeMultipliers: MarketFeeMultiplier[] = [];

  /**
   * @generated from field: repeated injective.exchange.v2.OrderbookSequence orderbook_sequences = 32;
   */
  orderbookSequences: OrderbookSequence[] = [];

  /**
   * @generated from field: repeated injective.exchange.v2.AggregateSubaccountVolumeRecord subaccount_volumes = 33;
   */
  subaccountVolumes: AggregateSubaccountVolumeRecord[] = [];

  /**
   * @generated from field: repeated injective.exchange.v2.MarketVolume market_volumes = 34;
   */
  marketVolumes: MarketVolume[] = [];

  /**
   * @generated from field: repeated injective.exchange.v2.FullGrantAuthorizations grant_authorizations = 35;
   */
  grantAuthorizations: FullGrantAuthorizations[] = [];

  /**
   * @generated from field: repeated injective.exchange.v2.FullActiveGrant active_grants = 36;
   */
  activeGrants: FullActiveGrant[] = [];

  /**
   * @generated from field: repeated injective.exchange.v2.DenomMinNotional denom_min_notionals = 37;
   */
  denomMinNotionals: DenomMinNotional[] = [];

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v2.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
    { no: 2, name: "spot_markets", kind: "message", T: SpotMarket, repeated: true },
    { no: 3, name: "derivative_markets", kind: "message", T: DerivativeMarket, repeated: true },
    { no: 4, name: "spot_orderbook", kind: "message", T: SpotOrderBook, repeated: true },
    { no: 5, name: "derivative_orderbook", kind: "message", T: DerivativeOrderBook, repeated: true },
    { no: 6, name: "balances", kind: "message", T: Balance, repeated: true },
    { no: 7, name: "positions", kind: "message", T: DerivativePosition, repeated: true },
    { no: 8, name: "subaccount_trade_nonces", kind: "message", T: SubaccountNonce, repeated: true },
    { no: 9, name: "expiry_futures_market_info_state", kind: "message", T: ExpiryFuturesMarketInfoState, repeated: true },
    { no: 10, name: "perpetual_market_info", kind: "message", T: PerpetualMarketInfo, repeated: true },
    { no: 11, name: "perpetual_market_funding_state", kind: "message", T: PerpetualMarketFundingState, repeated: true },
    { no: 12, name: "derivative_market_settlement_scheduled", kind: "message", T: DerivativeMarketSettlementInfo, repeated: true },
    { no: 13, name: "is_spot_exchange_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 14, name: "is_derivatives_exchange_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 15, name: "trading_reward_campaign_info", kind: "message", T: TradingRewardCampaignInfo },
    { no: 16, name: "trading_reward_pool_campaign_schedule", kind: "message", T: CampaignRewardPool, repeated: true },
    { no: 17, name: "trading_reward_campaign_account_points", kind: "message", T: TradingRewardCampaignAccountPoints, repeated: true },
    { no: 18, name: "fee_discount_schedule", kind: "message", T: FeeDiscountSchedule },
    { no: 19, name: "fee_discount_account_tier_ttl", kind: "message", T: FeeDiscountAccountTierTTL, repeated: true },
    { no: 20, name: "fee_discount_bucket_volume_accounts", kind: "message", T: FeeDiscountBucketVolumeAccounts, repeated: true },
    { no: 21, name: "is_first_fee_cycle_finished", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 22, name: "pending_trading_reward_pool_campaign_schedule", kind: "message", T: CampaignRewardPool, repeated: true },
    { no: 23, name: "pending_trading_reward_campaign_account_points", kind: "message", T: TradingRewardCampaignAccountPendingPoints, repeated: true },
    { no: 24, name: "rewards_opt_out_addresses", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 25, name: "historical_trade_records", kind: "message", T: TradeRecords, repeated: true },
    { no: 26, name: "binary_options_markets", kind: "message", T: BinaryOptionsMarket, repeated: true },
    { no: 27, name: "binary_options_market_ids_scheduled_for_settlement", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 28, name: "spot_market_ids_scheduled_to_force_close", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 29, name: "denom_decimals", kind: "message", T: DenomDecimals, repeated: true },
    { no: 30, name: "conditional_derivative_orderbooks", kind: "message", T: ConditionalDerivativeOrderBook, repeated: true },
    { no: 31, name: "market_fee_multipliers", kind: "message", T: MarketFeeMultiplier, repeated: true },
    { no: 32, name: "orderbook_sequences", kind: "message", T: OrderbookSequence, repeated: true },
    { no: 33, name: "subaccount_volumes", kind: "message", T: AggregateSubaccountVolumeRecord, repeated: true },
    { no: 34, name: "market_volumes", kind: "message", T: MarketVolume, repeated: true },
    { no: 35, name: "grant_authorizations", kind: "message", T: FullGrantAuthorizations, repeated: true },
    { no: 36, name: "active_grants", kind: "message", T: FullActiveGrant, repeated: true },
    { no: 37, name: "denom_min_notionals", kind: "message", T: DenomMinNotional, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

/**
 * @generated from message injective.exchange.v2.OrderbookSequence
 */
export class OrderbookSequence extends Message<OrderbookSequence> {
  /**
   * @generated from field: uint64 sequence = 1;
   */
  sequence = protoInt64.zero;

  /**
   * @generated from field: string market_id = 2;
   */
  marketId = "";

  constructor(data?: PartialMessage<OrderbookSequence>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v2.OrderbookSequence";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrderbookSequence {
    return new OrderbookSequence().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrderbookSequence {
    return new OrderbookSequence().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrderbookSequence {
    return new OrderbookSequence().fromJsonString(jsonString, options);
  }

  static equals(a: OrderbookSequence | PlainMessage<OrderbookSequence> | undefined, b: OrderbookSequence | PlainMessage<OrderbookSequence> | undefined): boolean {
    return proto3.util.equals(OrderbookSequence, a, b);
  }
}

/**
 * @generated from message injective.exchange.v2.FeeDiscountAccountTierTTL
 */
export class FeeDiscountAccountTierTTL extends Message<FeeDiscountAccountTierTTL> {
  /**
   * @generated from field: string account = 1;
   */
  account = "";

  /**
   * @generated from field: injective.exchange.v2.FeeDiscountTierTTL tier_ttl = 2;
   */
  tierTtl?: FeeDiscountTierTTL;

  constructor(data?: PartialMessage<FeeDiscountAccountTierTTL>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v2.FeeDiscountAccountTierTTL";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tier_ttl", kind: "message", T: FeeDiscountTierTTL },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FeeDiscountAccountTierTTL {
    return new FeeDiscountAccountTierTTL().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FeeDiscountAccountTierTTL {
    return new FeeDiscountAccountTierTTL().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FeeDiscountAccountTierTTL {
    return new FeeDiscountAccountTierTTL().fromJsonString(jsonString, options);
  }

  static equals(a: FeeDiscountAccountTierTTL | PlainMessage<FeeDiscountAccountTierTTL> | undefined, b: FeeDiscountAccountTierTTL | PlainMessage<FeeDiscountAccountTierTTL> | undefined): boolean {
    return proto3.util.equals(FeeDiscountAccountTierTTL, a, b);
  }
}

/**
 * @generated from message injective.exchange.v2.FeeDiscountBucketVolumeAccounts
 */
export class FeeDiscountBucketVolumeAccounts extends Message<FeeDiscountBucketVolumeAccounts> {
  /**
   * @generated from field: int64 bucket_start_timestamp = 1;
   */
  bucketStartTimestamp = protoInt64.zero;

  /**
   * @generated from field: repeated injective.exchange.v2.AccountVolume account_volume = 2;
   */
  accountVolume: AccountVolume[] = [];

  constructor(data?: PartialMessage<FeeDiscountBucketVolumeAccounts>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v2.FeeDiscountBucketVolumeAccounts";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bucket_start_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "account_volume", kind: "message", T: AccountVolume, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FeeDiscountBucketVolumeAccounts {
    return new FeeDiscountBucketVolumeAccounts().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FeeDiscountBucketVolumeAccounts {
    return new FeeDiscountBucketVolumeAccounts().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FeeDiscountBucketVolumeAccounts {
    return new FeeDiscountBucketVolumeAccounts().fromJsonString(jsonString, options);
  }

  static equals(a: FeeDiscountBucketVolumeAccounts | PlainMessage<FeeDiscountBucketVolumeAccounts> | undefined, b: FeeDiscountBucketVolumeAccounts | PlainMessage<FeeDiscountBucketVolumeAccounts> | undefined): boolean {
    return proto3.util.equals(FeeDiscountBucketVolumeAccounts, a, b);
  }
}

/**
 * @generated from message injective.exchange.v2.AccountVolume
 */
export class AccountVolume extends Message<AccountVolume> {
  /**
   * @generated from field: string account = 1;
   */
  account = "";

  /**
   * @generated from field: string volume = 2;
   */
  volume = "";

  constructor(data?: PartialMessage<AccountVolume>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v2.AccountVolume";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "volume", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountVolume {
    return new AccountVolume().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountVolume {
    return new AccountVolume().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountVolume {
    return new AccountVolume().fromJsonString(jsonString, options);
  }

  static equals(a: AccountVolume | PlainMessage<AccountVolume> | undefined, b: AccountVolume | PlainMessage<AccountVolume> | undefined): boolean {
    return proto3.util.equals(AccountVolume, a, b);
  }
}

/**
 * @generated from message injective.exchange.v2.TradingRewardCampaignAccountPoints
 */
export class TradingRewardCampaignAccountPoints extends Message<TradingRewardCampaignAccountPoints> {
  /**
   * @generated from field: string account = 1;
   */
  account = "";

  /**
   * @generated from field: string points = 2;
   */
  points = "";

  constructor(data?: PartialMessage<TradingRewardCampaignAccountPoints>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v2.TradingRewardCampaignAccountPoints";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "points", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TradingRewardCampaignAccountPoints {
    return new TradingRewardCampaignAccountPoints().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TradingRewardCampaignAccountPoints {
    return new TradingRewardCampaignAccountPoints().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TradingRewardCampaignAccountPoints {
    return new TradingRewardCampaignAccountPoints().fromJsonString(jsonString, options);
  }

  static equals(a: TradingRewardCampaignAccountPoints | PlainMessage<TradingRewardCampaignAccountPoints> | undefined, b: TradingRewardCampaignAccountPoints | PlainMessage<TradingRewardCampaignAccountPoints> | undefined): boolean {
    return proto3.util.equals(TradingRewardCampaignAccountPoints, a, b);
  }
}

/**
 * @generated from message injective.exchange.v2.TradingRewardCampaignAccountPendingPoints
 */
export class TradingRewardCampaignAccountPendingPoints extends Message<TradingRewardCampaignAccountPendingPoints> {
  /**
   * @generated from field: int64 reward_pool_start_timestamp = 1;
   */
  rewardPoolStartTimestamp = protoInt64.zero;

  /**
   * @generated from field: repeated injective.exchange.v2.TradingRewardCampaignAccountPoints account_points = 2;
   */
  accountPoints: TradingRewardCampaignAccountPoints[] = [];

  constructor(data?: PartialMessage<TradingRewardCampaignAccountPendingPoints>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v2.TradingRewardCampaignAccountPendingPoints";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reward_pool_start_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "account_points", kind: "message", T: TradingRewardCampaignAccountPoints, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TradingRewardCampaignAccountPendingPoints {
    return new TradingRewardCampaignAccountPendingPoints().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TradingRewardCampaignAccountPendingPoints {
    return new TradingRewardCampaignAccountPendingPoints().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TradingRewardCampaignAccountPendingPoints {
    return new TradingRewardCampaignAccountPendingPoints().fromJsonString(jsonString, options);
  }

  static equals(a: TradingRewardCampaignAccountPendingPoints | PlainMessage<TradingRewardCampaignAccountPendingPoints> | undefined, b: TradingRewardCampaignAccountPendingPoints | PlainMessage<TradingRewardCampaignAccountPendingPoints> | undefined): boolean {
    return proto3.util.equals(TradingRewardCampaignAccountPendingPoints, a, b);
  }
}

/**
 * @generated from message injective.exchange.v2.SubaccountNonce
 */
export class SubaccountNonce extends Message<SubaccountNonce> {
  /**
   * the subaccount ID
   *
   * @generated from field: string subaccount_id = 1;
   */
  subaccountId = "";

  /**
   * the subaccount trade nonce
   *
   * @generated from field: injective.exchange.v2.SubaccountTradeNonce subaccount_trade_nonce = 2;
   */
  subaccountTradeNonce?: SubaccountTradeNonce;

  constructor(data?: PartialMessage<SubaccountNonce>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v2.SubaccountNonce";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subaccount_trade_nonce", kind: "message", T: SubaccountTradeNonce },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubaccountNonce {
    return new SubaccountNonce().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubaccountNonce {
    return new SubaccountNonce().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubaccountNonce {
    return new SubaccountNonce().fromJsonString(jsonString, options);
  }

  static equals(a: SubaccountNonce | PlainMessage<SubaccountNonce> | undefined, b: SubaccountNonce | PlainMessage<SubaccountNonce> | undefined): boolean {
    return proto3.util.equals(SubaccountNonce, a, b);
  }
}

/**
 * @generated from message injective.exchange.v2.FullGrantAuthorizations
 */
export class FullGrantAuthorizations extends Message<FullGrantAuthorizations> {
  /**
   * @generated from field: string granter = 1;
   */
  granter = "";

  /**
   * @generated from field: string total_grant_amount = 2;
   */
  totalGrantAmount = "";

  /**
   * @generated from field: int64 last_delegations_checked_time = 3;
   */
  lastDelegationsCheckedTime = protoInt64.zero;

  /**
   * @generated from field: repeated injective.exchange.v2.GrantAuthorization grants = 4;
   */
  grants: GrantAuthorization[] = [];

  constructor(data?: PartialMessage<FullGrantAuthorizations>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v2.FullGrantAuthorizations";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "granter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "total_grant_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "last_delegations_checked_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "grants", kind: "message", T: GrantAuthorization, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FullGrantAuthorizations {
    return new FullGrantAuthorizations().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FullGrantAuthorizations {
    return new FullGrantAuthorizations().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FullGrantAuthorizations {
    return new FullGrantAuthorizations().fromJsonString(jsonString, options);
  }

  static equals(a: FullGrantAuthorizations | PlainMessage<FullGrantAuthorizations> | undefined, b: FullGrantAuthorizations | PlainMessage<FullGrantAuthorizations> | undefined): boolean {
    return proto3.util.equals(FullGrantAuthorizations, a, b);
  }
}

/**
 * @generated from message injective.exchange.v2.FullActiveGrant
 */
export class FullActiveGrant extends Message<FullActiveGrant> {
  /**
   * @generated from field: string grantee = 1;
   */
  grantee = "";

  /**
   * @generated from field: injective.exchange.v2.ActiveGrant active_grant = 2;
   */
  activeGrant?: ActiveGrant;

  constructor(data?: PartialMessage<FullActiveGrant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v2.FullActiveGrant";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "grantee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "active_grant", kind: "message", T: ActiveGrant },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FullActiveGrant {
    return new FullActiveGrant().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FullActiveGrant {
    return new FullActiveGrant().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FullActiveGrant {
    return new FullActiveGrant().fromJsonString(jsonString, options);
  }

  static equals(a: FullActiveGrant | PlainMessage<FullActiveGrant> | undefined, b: FullActiveGrant | PlainMessage<FullActiveGrant> | undefined): boolean {
    return proto3.util.equals(FullActiveGrant, a, b);
  }
}

