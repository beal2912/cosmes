// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file injective/exchange/v2/orderbook.proto (package injective.exchange.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { DerivativeLimitOrder, DerivativeMarketOrder, SpotLimitOrder } from "./order_pb.js";

/**
 * Spot Exchange Limit Orderbook
 *
 * @generated from message injective.exchange.v2.SpotOrderBook
 */
export class SpotOrderBook extends Message<SpotOrderBook> {
  /**
   * @generated from field: string market_id = 1;
   */
  marketId = "";

  /**
   * @generated from field: bool isBuySide = 2;
   */
  isBuySide = false;

  /**
   * @generated from field: repeated injective.exchange.v2.SpotLimitOrder orders = 3;
   */
  orders: SpotLimitOrder[] = [];

  constructor(data?: PartialMessage<SpotOrderBook>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v2.SpotOrderBook";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "isBuySide", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "orders", kind: "message", T: SpotLimitOrder, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpotOrderBook {
    return new SpotOrderBook().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpotOrderBook {
    return new SpotOrderBook().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpotOrderBook {
    return new SpotOrderBook().fromJsonString(jsonString, options);
  }

  static equals(a: SpotOrderBook | PlainMessage<SpotOrderBook> | undefined, b: SpotOrderBook | PlainMessage<SpotOrderBook> | undefined): boolean {
    return proto3.util.equals(SpotOrderBook, a, b);
  }
}

/**
 * Derivative Exchange Limit Orderbook
 *
 * @generated from message injective.exchange.v2.DerivativeOrderBook
 */
export class DerivativeOrderBook extends Message<DerivativeOrderBook> {
  /**
   * @generated from field: string market_id = 1;
   */
  marketId = "";

  /**
   * @generated from field: bool isBuySide = 2;
   */
  isBuySide = false;

  /**
   * @generated from field: repeated injective.exchange.v2.DerivativeLimitOrder orders = 3;
   */
  orders: DerivativeLimitOrder[] = [];

  constructor(data?: PartialMessage<DerivativeOrderBook>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v2.DerivativeOrderBook";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "isBuySide", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "orders", kind: "message", T: DerivativeLimitOrder, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DerivativeOrderBook {
    return new DerivativeOrderBook().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DerivativeOrderBook {
    return new DerivativeOrderBook().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DerivativeOrderBook {
    return new DerivativeOrderBook().fromJsonString(jsonString, options);
  }

  static equals(a: DerivativeOrderBook | PlainMessage<DerivativeOrderBook> | undefined, b: DerivativeOrderBook | PlainMessage<DerivativeOrderBook> | undefined): boolean {
    return proto3.util.equals(DerivativeOrderBook, a, b);
  }
}

/**
 * Orderbook containing limit & market conditional orders
 *
 * @generated from message injective.exchange.v2.ConditionalDerivativeOrderBook
 */
export class ConditionalDerivativeOrderBook extends Message<ConditionalDerivativeOrderBook> {
  /**
   * @generated from field: string market_id = 1;
   */
  marketId = "";

  /**
   * @generated from field: repeated injective.exchange.v2.DerivativeLimitOrder limit_buy_orders = 2;
   */
  limitBuyOrders: DerivativeLimitOrder[] = [];

  /**
   * @generated from field: repeated injective.exchange.v2.DerivativeMarketOrder market_buy_orders = 3;
   */
  marketBuyOrders: DerivativeMarketOrder[] = [];

  /**
   * @generated from field: repeated injective.exchange.v2.DerivativeLimitOrder limit_sell_orders = 4;
   */
  limitSellOrders: DerivativeLimitOrder[] = [];

  /**
   * @generated from field: repeated injective.exchange.v2.DerivativeMarketOrder market_sell_orders = 5;
   */
  marketSellOrders: DerivativeMarketOrder[] = [];

  constructor(data?: PartialMessage<ConditionalDerivativeOrderBook>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v2.ConditionalDerivativeOrderBook";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit_buy_orders", kind: "message", T: DerivativeLimitOrder, repeated: true },
    { no: 3, name: "market_buy_orders", kind: "message", T: DerivativeMarketOrder, repeated: true },
    { no: 4, name: "limit_sell_orders", kind: "message", T: DerivativeLimitOrder, repeated: true },
    { no: 5, name: "market_sell_orders", kind: "message", T: DerivativeMarketOrder, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConditionalDerivativeOrderBook {
    return new ConditionalDerivativeOrderBook().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConditionalDerivativeOrderBook {
    return new ConditionalDerivativeOrderBook().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConditionalDerivativeOrderBook {
    return new ConditionalDerivativeOrderBook().fromJsonString(jsonString, options);
  }

  static equals(a: ConditionalDerivativeOrderBook | PlainMessage<ConditionalDerivativeOrderBook> | undefined, b: ConditionalDerivativeOrderBook | PlainMessage<ConditionalDerivativeOrderBook> | undefined): boolean {
    return proto3.util.equals(ConditionalDerivativeOrderBook, a, b);
  }
}

/**
 * @generated from message injective.exchange.v2.SubaccountOrderbookMetadata
 */
export class SubaccountOrderbookMetadata extends Message<SubaccountOrderbookMetadata> {
  /**
   * The number of vanilla limit orders
   *
   * @generated from field: uint32 vanilla_limit_order_count = 1;
   */
  vanillaLimitOrderCount = 0;

  /**
   * The number of reduce-only limit orders
   *
   * @generated from field: uint32 reduce_only_limit_order_count = 2;
   */
  reduceOnlyLimitOrderCount = 0;

  /**
   * The aggregate quantity of the subaccount's reduce-only limit orders (in
   * human readable format)
   *
   * @generated from field: string aggregate_reduce_only_quantity = 3;
   */
  aggregateReduceOnlyQuantity = "";

  /**
   * The aggregate quantity of the subaccount's vanilla limit orders (in human
   * readable format)
   *
   * @generated from field: string aggregate_vanilla_quantity = 4;
   */
  aggregateVanillaQuantity = "";

  /**
   * The number of vanilla conditional orders
   *
   * @generated from field: uint32 vanilla_conditional_order_count = 5;
   */
  vanillaConditionalOrderCount = 0;

  /**
   * The number of reduce-only conditional orders
   *
   * @generated from field: uint32 reduce_only_conditional_order_count = 6;
   */
  reduceOnlyConditionalOrderCount = 0;

  constructor(data?: PartialMessage<SubaccountOrderbookMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.exchange.v2.SubaccountOrderbookMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vanilla_limit_order_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "reduce_only_limit_order_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "aggregate_reduce_only_quantity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "aggregate_vanilla_quantity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "vanilla_conditional_order_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 6, name: "reduce_only_conditional_order_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubaccountOrderbookMetadata {
    return new SubaccountOrderbookMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubaccountOrderbookMetadata {
    return new SubaccountOrderbookMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubaccountOrderbookMetadata {
    return new SubaccountOrderbookMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: SubaccountOrderbookMetadata | PlainMessage<SubaccountOrderbookMetadata> | undefined, b: SubaccountOrderbookMetadata | PlainMessage<SubaccountOrderbookMetadata> | undefined): boolean {
    return proto3.util.equals(SubaccountOrderbookMetadata, a, b);
  }
}

