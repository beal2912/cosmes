// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file injective/erc20/v1beta1/erc20.proto (package injective.erc20.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * TokenPair defines an association of bank denom <-> EVM token (erc20 contract
 * address)
 *
 * @generated from message injective.erc20.v1beta1.TokenPair
 */
export class TokenPair extends Message<TokenPair> {
  /**
   * bank denom
   *
   * @generated from field: string bank_denom = 1;
   */
  bankDenom = "";

  /**
   * address of erc20 smart contract that is backed by
   *
   * @generated from field: string erc20_address = 2;
   */
  erc20Address = "";

  constructor(data?: PartialMessage<TokenPair>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.erc20.v1beta1.TokenPair";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bank_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "erc20_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TokenPair {
    return new TokenPair().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TokenPair {
    return new TokenPair().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TokenPair {
    return new TokenPair().fromJsonString(jsonString, options);
  }

  static equals(a: TokenPair | PlainMessage<TokenPair> | undefined, b: TokenPair | PlainMessage<TokenPair> | undefined): boolean {
    return proto3.util.equals(TokenPair, a, b);
  }
}

