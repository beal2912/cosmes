// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file injective/erc20/v1beta1/query.proto (package injective.erc20.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination_pb.js";
import { TokenPair } from "./erc20_pb.js";

/**
 * QueryParamsRequest is the request type for the Query/Params RPC method.
 *
 * @generated from message injective.erc20.v1beta1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.erc20.v1beta1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 *
 * @generated from message injective.erc20.v1beta1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params defines the parameters of the module.
   *
   * @generated from field: injective.erc20.v1beta1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.erc20.v1beta1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * QueryAllTokenPairsRequest is the request type for the Query/AllTokenPairs RPC
 * method.
 *
 * @generated from message injective.erc20.v1beta1.QueryAllTokenPairsRequest
 */
export class QueryAllTokenPairsRequest extends Message<QueryAllTokenPairsRequest> {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryAllTokenPairsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.erc20.v1beta1.QueryAllTokenPairsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllTokenPairsRequest {
    return new QueryAllTokenPairsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllTokenPairsRequest {
    return new QueryAllTokenPairsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllTokenPairsRequest {
    return new QueryAllTokenPairsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllTokenPairsRequest | PlainMessage<QueryAllTokenPairsRequest> | undefined, b: QueryAllTokenPairsRequest | PlainMessage<QueryAllTokenPairsRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllTokenPairsRequest, a, b);
  }
}

/**
 * QueryAllTokenPairsResponse is the response type for the Query/AllTokenPairs
 * RPC method.
 *
 * @generated from message injective.erc20.v1beta1.QueryAllTokenPairsResponse
 */
export class QueryAllTokenPairsResponse extends Message<QueryAllTokenPairsResponse> {
  /**
   * @generated from field: repeated injective.erc20.v1beta1.TokenPair token_pairs = 1;
   */
  tokenPairs: TokenPair[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryAllTokenPairsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.erc20.v1beta1.QueryAllTokenPairsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token_pairs", kind: "message", T: TokenPair, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllTokenPairsResponse {
    return new QueryAllTokenPairsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllTokenPairsResponse {
    return new QueryAllTokenPairsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllTokenPairsResponse {
    return new QueryAllTokenPairsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllTokenPairsResponse | PlainMessage<QueryAllTokenPairsResponse> | undefined, b: QueryAllTokenPairsResponse | PlainMessage<QueryAllTokenPairsResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllTokenPairsResponse, a, b);
  }
}

/**
 * QueryTokenPairByDenomRequest is the request type for the
 * Query/TokenPairByDenom RPC method.
 *
 * @generated from message injective.erc20.v1beta1.QueryTokenPairByDenomRequest
 */
export class QueryTokenPairByDenomRequest extends Message<QueryTokenPairByDenomRequest> {
  /**
   * @generated from field: string bank_denom = 1;
   */
  bankDenom = "";

  constructor(data?: PartialMessage<QueryTokenPairByDenomRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.erc20.v1beta1.QueryTokenPairByDenomRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bank_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTokenPairByDenomRequest {
    return new QueryTokenPairByDenomRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTokenPairByDenomRequest {
    return new QueryTokenPairByDenomRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTokenPairByDenomRequest {
    return new QueryTokenPairByDenomRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTokenPairByDenomRequest | PlainMessage<QueryTokenPairByDenomRequest> | undefined, b: QueryTokenPairByDenomRequest | PlainMessage<QueryTokenPairByDenomRequest> | undefined): boolean {
    return proto3.util.equals(QueryTokenPairByDenomRequest, a, b);
  }
}

/**
 * QueryTokenPairByDenomResponse is the response type for the
 * Query/TokenPairByDenom RPC method.
 *
 * @generated from message injective.erc20.v1beta1.QueryTokenPairByDenomResponse
 */
export class QueryTokenPairByDenomResponse extends Message<QueryTokenPairByDenomResponse> {
  /**
   * @generated from field: injective.erc20.v1beta1.TokenPair token_pair = 1;
   */
  tokenPair?: TokenPair;

  constructor(data?: PartialMessage<QueryTokenPairByDenomResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.erc20.v1beta1.QueryTokenPairByDenomResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token_pair", kind: "message", T: TokenPair },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTokenPairByDenomResponse {
    return new QueryTokenPairByDenomResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTokenPairByDenomResponse {
    return new QueryTokenPairByDenomResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTokenPairByDenomResponse {
    return new QueryTokenPairByDenomResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTokenPairByDenomResponse | PlainMessage<QueryTokenPairByDenomResponse> | undefined, b: QueryTokenPairByDenomResponse | PlainMessage<QueryTokenPairByDenomResponse> | undefined): boolean {
    return proto3.util.equals(QueryTokenPairByDenomResponse, a, b);
  }
}

/**
 * @generated from message injective.erc20.v1beta1.QueryTokenPairByERC20AddressRequest
 */
export class QueryTokenPairByERC20AddressRequest extends Message<QueryTokenPairByERC20AddressRequest> {
  /**
   * @generated from field: string erc20_address = 1;
   */
  erc20Address = "";

  constructor(data?: PartialMessage<QueryTokenPairByERC20AddressRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.erc20.v1beta1.QueryTokenPairByERC20AddressRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "erc20_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTokenPairByERC20AddressRequest {
    return new QueryTokenPairByERC20AddressRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTokenPairByERC20AddressRequest {
    return new QueryTokenPairByERC20AddressRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTokenPairByERC20AddressRequest {
    return new QueryTokenPairByERC20AddressRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTokenPairByERC20AddressRequest | PlainMessage<QueryTokenPairByERC20AddressRequest> | undefined, b: QueryTokenPairByERC20AddressRequest | PlainMessage<QueryTokenPairByERC20AddressRequest> | undefined): boolean {
    return proto3.util.equals(QueryTokenPairByERC20AddressRequest, a, b);
  }
}

/**
 * @generated from message injective.erc20.v1beta1.QueryTokenPairByERC20AddressResponse
 */
export class QueryTokenPairByERC20AddressResponse extends Message<QueryTokenPairByERC20AddressResponse> {
  /**
   * @generated from field: injective.erc20.v1beta1.TokenPair token_pair = 1;
   */
  tokenPair?: TokenPair;

  constructor(data?: PartialMessage<QueryTokenPairByERC20AddressResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "injective.erc20.v1beta1.QueryTokenPairByERC20AddressResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token_pair", kind: "message", T: TokenPair },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTokenPairByERC20AddressResponse {
    return new QueryTokenPairByERC20AddressResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTokenPairByERC20AddressResponse {
    return new QueryTokenPairByERC20AddressResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTokenPairByERC20AddressResponse {
    return new QueryTokenPairByERC20AddressResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTokenPairByERC20AddressResponse | PlainMessage<QueryTokenPairByERC20AddressResponse> | undefined, b: QueryTokenPairByERC20AddressResponse | PlainMessage<QueryTokenPairByERC20AddressResponse> | undefined): boolean {
    return proto3.util.equals(QueryTokenPairByERC20AddressResponse, a, b);
  }
}

