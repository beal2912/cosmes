// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file refractedlabs/oracle/v1/event.proto (package refractedlabs.oracle.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { OracleVote } from "./oracle_vote_pb.js";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
import { Params } from "./params_pb.js";

/**
 * @generated from enum refractedlabs.oracle.v1.VoteType
 */
export enum VoteType {
  /**
   * @generated from enum value: VOTE_TYPE_ABSTAIN_VOTE = 0;
   */
  ABSTAIN_VOTE = 0,

  /**
   * @generated from enum value: VOTE_TYPE_NO_VOTE = 1;
   */
  NO_VOTE = 1,

  /**
   * @generated from enum value: VOTE_TYPE_VALID_VOTE = 2;
   */
  VALID_VOTE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(VoteType)
proto3.util.setEnumType(VoteType, "refractedlabs.oracle.v1.VoteType", [
  { no: 0, name: "VOTE_TYPE_ABSTAIN_VOTE" },
  { no: 1, name: "VOTE_TYPE_NO_VOTE" },
  { no: 2, name: "VOTE_TYPE_VALID_VOTE" },
]);

/**
 * @generated from message refractedlabs.oracle.v1.EventDelegateFeedConsent
 */
export class EventDelegateFeedConsent extends Message<EventDelegateFeedConsent> {
  /**
   * @generated from field: string validator = 1;
   */
  validator = "";

  /**
   * @generated from field: string feeder = 2;
   */
  feeder = "";

  constructor(data?: PartialMessage<EventDelegateFeedConsent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "refractedlabs.oracle.v1.EventDelegateFeedConsent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "feeder", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventDelegateFeedConsent {
    return new EventDelegateFeedConsent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventDelegateFeedConsent {
    return new EventDelegateFeedConsent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventDelegateFeedConsent {
    return new EventDelegateFeedConsent().fromJsonString(jsonString, options);
  }

  static equals(a: EventDelegateFeedConsent | PlainMessage<EventDelegateFeedConsent> | undefined, b: EventDelegateFeedConsent | PlainMessage<EventDelegateFeedConsent> | undefined): boolean {
    return proto3.util.equals(EventDelegateFeedConsent, a, b);
  }
}

/**
 * @generated from message refractedlabs.oracle.v1.EventOraclePreVote
 */
export class EventOraclePreVote extends Message<EventOraclePreVote> {
  /**
   * @generated from field: string validator = 1;
   */
  validator = "";

  /**
   * @generated from field: string feeder = 2;
   */
  feeder = "";

  constructor(data?: PartialMessage<EventOraclePreVote>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "refractedlabs.oracle.v1.EventOraclePreVote";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "feeder", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventOraclePreVote {
    return new EventOraclePreVote().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventOraclePreVote {
    return new EventOraclePreVote().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventOraclePreVote {
    return new EventOraclePreVote().fromJsonString(jsonString, options);
  }

  static equals(a: EventOraclePreVote | PlainMessage<EventOraclePreVote> | undefined, b: EventOraclePreVote | PlainMessage<EventOraclePreVote> | undefined): boolean {
    return proto3.util.equals(EventOraclePreVote, a, b);
  }
}

/**
 * @generated from message refractedlabs.oracle.v1.EventOracleVote
 */
export class EventOracleVote extends Message<EventOracleVote> {
  /**
   * @generated from field: string feeder = 1;
   */
  feeder = "";

  /**
   * @generated from field: refractedlabs.oracle.v1.OracleVote oracle_vote = 2;
   */
  oracleVote?: OracleVote;

  constructor(data?: PartialMessage<EventOracleVote>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "refractedlabs.oracle.v1.EventOracleVote";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "feeder", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "oracle_vote", kind: "message", T: OracleVote },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventOracleVote {
    return new EventOracleVote().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventOracleVote {
    return new EventOracleVote().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventOracleVote {
    return new EventOracleVote().fromJsonString(jsonString, options);
  }

  static equals(a: EventOracleVote | PlainMessage<EventOracleVote> | undefined, b: EventOracleVote | PlainMessage<EventOracleVote> | undefined): boolean {
    return proto3.util.equals(EventOracleVote, a, b);
  }
}

/**
 * @generated from message refractedlabs.oracle.v1.BallotVoteResult
 */
export class BallotVoteResult extends Message<BallotVoteResult> {
  /**
   * @generated from field: string namespace = 1;
   */
  namespace = "";

  /**
   * @generated from field: string module = 2;
   */
  module = "";

  /**
   * @generated from field: bool quorum_reached = 3;
   */
  quorumReached = false;

  /**
   * @generated from field: int64 ballot_power = 4;
   */
  ballotPower = protoInt64.zero;

  /**
   * @generated from field: bool majority_achieved = 5;
   */
  majorityAchieved = false;

  /**
   * @generated from field: refractedlabs.oracle.v1.VoteType majority_vote_type = 6;
   */
  majorityVoteType = VoteType.ABSTAIN_VOTE;

  /**
   * @generated from field: string majority_vote_payload = 7;
   */
  majorityVotePayload = "";

  /**
   * error returned by a call to the corresponding module's OnMajorityVote callback method
   *
   * @generated from field: string callback_error = 8;
   */
  callbackError = "";

  constructor(data?: PartialMessage<BallotVoteResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "refractedlabs.oracle.v1.BallotVoteResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "module", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "quorum_reached", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "ballot_power", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "majority_achieved", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "majority_vote_type", kind: "enum", T: proto3.getEnumType(VoteType) },
    { no: 7, name: "majority_vote_payload", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "callback_error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BallotVoteResult {
    return new BallotVoteResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BallotVoteResult {
    return new BallotVoteResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BallotVoteResult {
    return new BallotVoteResult().fromJsonString(jsonString, options);
  }

  static equals(a: BallotVoteResult | PlainMessage<BallotVoteResult> | undefined, b: BallotVoteResult | PlainMessage<BallotVoteResult> | undefined): boolean {
    return proto3.util.equals(BallotVoteResult, a, b);
  }
}

/**
 * @generated from message refractedlabs.oracle.v1.ValidatorVoteIntervalSummary
 */
export class ValidatorVoteIntervalSummary extends Message<ValidatorVoteIntervalSummary> {
  /**
   * @generated from field: string validator = 1;
   */
  validator = "";

  /**
   * @generated from field: int64 validator_power = 2;
   */
  validatorPower = protoInt64.zero;

  /**
   * @generated from field: bool voted = 3;
   */
  voted = false;

  /**
   * @generated from field: int64 vote_interval_miss_counter = 4;
   */
  voteIntervalMissCounter = protoInt64.zero;

  /**
   * @generated from field: int64 slash_window_miss_counter = 5;
   */
  slashWindowMissCounter = protoInt64.zero;

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin rewards = 6;
   */
  rewards: Coin[] = [];

  constructor(data?: PartialMessage<ValidatorVoteIntervalSummary>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "refractedlabs.oracle.v1.ValidatorVoteIntervalSummary";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "validator_power", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "voted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "vote_interval_miss_counter", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "slash_window_miss_counter", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "rewards", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidatorVoteIntervalSummary {
    return new ValidatorVoteIntervalSummary().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidatorVoteIntervalSummary {
    return new ValidatorVoteIntervalSummary().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidatorVoteIntervalSummary {
    return new ValidatorVoteIntervalSummary().fromJsonString(jsonString, options);
  }

  static equals(a: ValidatorVoteIntervalSummary | PlainMessage<ValidatorVoteIntervalSummary> | undefined, b: ValidatorVoteIntervalSummary | PlainMessage<ValidatorVoteIntervalSummary> | undefined): boolean {
    return proto3.util.equals(ValidatorVoteIntervalSummary, a, b);
  }
}

/**
 * @generated from message refractedlabs.oracle.v1.EventVoteIntervalEnds
 */
export class EventVoteIntervalEnds extends Message<EventVoteIntervalEnds> {
  /**
   * @generated from field: int64 time_millis = 1;
   */
  timeMillis = protoInt64.zero;

  /**
   * @generated from field: int64 block_height = 2;
   */
  blockHeight = protoInt64.zero;

  /**
   * @generated from field: int64 vote_period = 3;
   */
  votePeriod = protoInt64.zero;

  /**
   * @generated from field: repeated refractedlabs.oracle.v1.ValidatorVoteIntervalSummary validator_summaries = 4;
   */
  validatorSummaries: ValidatorVoteIntervalSummary[] = [];

  /**
   * @generated from field: int64 previous_vote_interval_end_time_millis = 5;
   */
  previousVoteIntervalEndTimeMillis = protoInt64.zero;

  /**
   * @generated from field: repeated refractedlabs.oracle.v1.BallotVoteResult ballot_vote_results = 6;
   */
  ballotVoteResults: BallotVoteResult[] = [];

  constructor(data?: PartialMessage<EventVoteIntervalEnds>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "refractedlabs.oracle.v1.EventVoteIntervalEnds";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time_millis", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "block_height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "vote_period", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "validator_summaries", kind: "message", T: ValidatorVoteIntervalSummary, repeated: true },
    { no: 5, name: "previous_vote_interval_end_time_millis", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "ballot_vote_results", kind: "message", T: BallotVoteResult, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventVoteIntervalEnds {
    return new EventVoteIntervalEnds().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventVoteIntervalEnds {
    return new EventVoteIntervalEnds().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventVoteIntervalEnds {
    return new EventVoteIntervalEnds().fromJsonString(jsonString, options);
  }

  static equals(a: EventVoteIntervalEnds | PlainMessage<EventVoteIntervalEnds> | undefined, b: EventVoteIntervalEnds | PlainMessage<EventVoteIntervalEnds> | undefined): boolean {
    return proto3.util.equals(EventVoteIntervalEnds, a, b);
  }
}

/**
 * @generated from message refractedlabs.oracle.v1.ValidatorSlashWindowSummary
 */
export class ValidatorSlashWindowSummary extends Message<ValidatorSlashWindowSummary> {
  /**
   * @generated from field: string validator = 1;
   */
  validator = "";

  /**
   * @generated from field: int64 validator_power = 2;
   */
  validatorPower = protoInt64.zero;

  /**
   * @generated from field: int64 miss_counter = 3;
   */
  missCounter = protoInt64.zero;

  /**
   * @generated from field: bool jailed = 4;
   */
  jailed = false;

  /**
   * @generated from field: string slash_amount = 5;
   */
  slashAmount = "";

  constructor(data?: PartialMessage<ValidatorSlashWindowSummary>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "refractedlabs.oracle.v1.ValidatorSlashWindowSummary";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "validator_power", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "miss_counter", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "jailed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "slash_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidatorSlashWindowSummary {
    return new ValidatorSlashWindowSummary().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidatorSlashWindowSummary {
    return new ValidatorSlashWindowSummary().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidatorSlashWindowSummary {
    return new ValidatorSlashWindowSummary().fromJsonString(jsonString, options);
  }

  static equals(a: ValidatorSlashWindowSummary | PlainMessage<ValidatorSlashWindowSummary> | undefined, b: ValidatorSlashWindowSummary | PlainMessage<ValidatorSlashWindowSummary> | undefined): boolean {
    return proto3.util.equals(ValidatorSlashWindowSummary, a, b);
  }
}

/**
 * @generated from message refractedlabs.oracle.v1.EventSlashWindowEnds
 */
export class EventSlashWindowEnds extends Message<EventSlashWindowEnds> {
  /**
   * @generated from field: int64 slash_window = 1;
   */
  slashWindow = protoInt64.zero;

  /**
   * @generated from field: repeated refractedlabs.oracle.v1.ValidatorSlashWindowSummary validator_summaries = 2;
   */
  validatorSummaries: ValidatorSlashWindowSummary[] = [];

  constructor(data?: PartialMessage<EventSlashWindowEnds>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "refractedlabs.oracle.v1.EventSlashWindowEnds";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slash_window", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "validator_summaries", kind: "message", T: ValidatorSlashWindowSummary, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSlashWindowEnds {
    return new EventSlashWindowEnds().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSlashWindowEnds {
    return new EventSlashWindowEnds().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSlashWindowEnds {
    return new EventSlashWindowEnds().fromJsonString(jsonString, options);
  }

  static equals(a: EventSlashWindowEnds | PlainMessage<EventSlashWindowEnds> | undefined, b: EventSlashWindowEnds | PlainMessage<EventSlashWindowEnds> | undefined): boolean {
    return proto3.util.equals(EventSlashWindowEnds, a, b);
  }
}

/**
 * @generated from message refractedlabs.oracle.v1.EventSetParams
 */
export class EventSetParams extends Message<EventSetParams> {
  /**
   * @generated from field: refractedlabs.oracle.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<EventSetParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "refractedlabs.oracle.v1.EventSetParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSetParams {
    return new EventSetParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSetParams {
    return new EventSetParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSetParams {
    return new EventSetParams().fromJsonString(jsonString, options);
  }

  static equals(a: EventSetParams | PlainMessage<EventSetParams> | undefined, b: EventSetParams | PlainMessage<EventSetParams> | undefined): boolean {
    return proto3.util.equals(EventSetParams, a, b);
  }
}

