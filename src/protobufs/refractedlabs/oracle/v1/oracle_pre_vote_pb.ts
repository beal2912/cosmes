// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file refractedlabs/oracle/v1/oracle_pre_vote.proto (package refractedlabs.oracle.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message refractedlabs.oracle.v1.OraclePreVote
 */
export class OraclePreVote extends Message<OraclePreVote> {
  /**
   * @generated from field: string validator = 1;
   */
  validator = "";

  /**
   * @generated from field: string hash = 2;
   */
  hash = "";

  /**
   * @generated from field: int64 submit_block = 3;
   */
  submitBlock = protoInt64.zero;

  constructor(data?: PartialMessage<OraclePreVote>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "refractedlabs.oracle.v1.OraclePreVote";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "submit_block", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OraclePreVote {
    return new OraclePreVote().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OraclePreVote {
    return new OraclePreVote().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OraclePreVote {
    return new OraclePreVote().fromJsonString(jsonString, options);
  }

  static equals(a: OraclePreVote | PlainMessage<OraclePreVote> | undefined, b: OraclePreVote | PlainMessage<OraclePreVote> | undefined): boolean {
    return proto3.util.equals(OraclePreVote, a, b);
  }
}

