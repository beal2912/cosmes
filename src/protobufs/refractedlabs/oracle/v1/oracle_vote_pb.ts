// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file refractedlabs/oracle/v1/oracle_vote.proto (package refractedlabs.oracle.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message refractedlabs.oracle.v1.NamespaceVote
 */
export class NamespaceVote extends Message<NamespaceVote> {
  /**
   * @generated from field: string namespace = 1;
   */
  namespace = "";

  /**
   * @generated from field: string payload = 2;
   */
  payload = "";

  constructor(data?: PartialMessage<NamespaceVote>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "refractedlabs.oracle.v1.NamespaceVote";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "payload", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NamespaceVote {
    return new NamespaceVote().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NamespaceVote {
    return new NamespaceVote().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NamespaceVote {
    return new NamespaceVote().fromJsonString(jsonString, options);
  }

  static equals(a: NamespaceVote | PlainMessage<NamespaceVote> | undefined, b: NamespaceVote | PlainMessage<NamespaceVote> | undefined): boolean {
    return proto3.util.equals(NamespaceVote, a, b);
  }
}

/**
 * @generated from message refractedlabs.oracle.v1.ModuleVote
 */
export class ModuleVote extends Message<ModuleVote> {
  /**
   * @generated from field: string module = 1;
   */
  module = "";

  /**
   * @generated from field: repeated refractedlabs.oracle.v1.NamespaceVote namespace_votes = 2 [json_name = "namespace_votes"];
   */
  namespaceVotes: NamespaceVote[] = [];

  constructor(data?: PartialMessage<ModuleVote>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "refractedlabs.oracle.v1.ModuleVote";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "module", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace_votes", jsonName: "namespace_votes", kind: "message", T: NamespaceVote, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModuleVote {
    return new ModuleVote().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModuleVote {
    return new ModuleVote().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModuleVote {
    return new ModuleVote().fromJsonString(jsonString, options);
  }

  static equals(a: ModuleVote | PlainMessage<ModuleVote> | undefined, b: ModuleVote | PlainMessage<ModuleVote> | undefined): boolean {
    return proto3.util.equals(ModuleVote, a, b);
  }
}

/**
 * @generated from message refractedlabs.oracle.v1.OracleVote
 */
export class OracleVote extends Message<OracleVote> {
  /**
   * @generated from field: string validator = 1;
   */
  validator = "";

  /**
   * @generated from field: repeated refractedlabs.oracle.v1.ModuleVote module_votes = 2 [json_name = "module_votes"];
   */
  moduleVotes: ModuleVote[] = [];

  constructor(data?: PartialMessage<OracleVote>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "refractedlabs.oracle.v1.OracleVote";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "module_votes", jsonName: "module_votes", kind: "message", T: ModuleVote, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OracleVote {
    return new OracleVote().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OracleVote {
    return new OracleVote().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OracleVote {
    return new OracleVote().fromJsonString(jsonString, options);
  }

  static equals(a: OracleVote | PlainMessage<OracleVote> | undefined, b: OracleVote | PlainMessage<OracleVote> | undefined): boolean {
    return proto3.util.equals(OracleVote, a, b);
  }
}

