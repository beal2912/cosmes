// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file refractedlabs/flowtrade/v1/params.proto (package refractedlabs.flowtrade.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * Params defines the parameters for the module.
 *
 * @generated from message refractedlabs.flowtrade.v1.Params
 */
export class Params extends Message<Params> {
  /**
   * The deposit amount taken from flow creator and transferred back after the flow ends
   *
   * @generated from field: cosmos.base.v1beta1.Coin flow_creation_deposit = 1;
   */
  flowCreationDeposit?: Coin;

  /**
   * The minimum possible duration a flow can have
   *
   * @generated from field: google.protobuf.Duration min_flow_duration = 2;
   */
  minFlowDuration?: Duration;

  /**
   * The minimum possible duration from the flow creation time to its start time
   *
   * @generated from field: google.protobuf.Duration min_duration_to_flow_start = 3;
   */
  minDurationToFlowStart?: Duration;

  /**
   * the protocol fee ratio taken from token-out
   *
   * @generated from field: string token_out_fee_ratio = 4;
   */
  tokenOutFeeRatio = "";

  /**
   * the protocol fee ratio taken from token-in
   *
   * @generated from field: string token_in_fee_ratio = 5;
   */
  tokenInFeeRatio = "";

  /**
   * @generated from field: refractedlabs.flowtrade.v1.GasParameters gas_parameters = 6;
   */
  gasParameters?: GasParameters;

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "refractedlabs.flowtrade.v1.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "flow_creation_deposit", kind: "message", T: Coin },
    { no: 2, name: "min_flow_duration", kind: "message", T: Duration },
    { no: 3, name: "min_duration_to_flow_start", kind: "message", T: Duration },
    { no: 4, name: "token_out_fee_ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "token_in_fee_ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "gas_parameters", kind: "message", T: GasParameters },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}

/**
 * Parameters for consuming gas on certain operations
 *
 * @generated from message refractedlabs.flowtrade.v1.GasParameters
 */
export class GasParameters extends Message<GasParameters> {
  /**
   * gas for creating a new flow
   *
   * @generated from field: uint64 flow_create = 1;
   */
  flowCreate = protoInt64.zero;

  /**
   * gas for stopping a flow
   *
   * @generated from field: uint64 flow_stop = 2;
   */
  flowStop = protoInt64.zero;

  constructor(data?: PartialMessage<GasParameters>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "refractedlabs.flowtrade.v1.GasParameters";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "flow_create", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "flow_stop", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GasParameters {
    return new GasParameters().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GasParameters {
    return new GasParameters().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GasParameters {
    return new GasParameters().fromJsonString(jsonString, options);
  }

  static equals(a: GasParameters | PlainMessage<GasParameters> | undefined, b: GasParameters | PlainMessage<GasParameters> | undefined): boolean {
    return proto3.util.equals(GasParameters, a, b);
  }
}

