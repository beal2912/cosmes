// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file refractedlabs/flowtrade/v1/position.proto (package refractedlabs.flowtrade.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message refractedlabs.flowtrade.v1.Position
 */
export class Position extends Message<Position> {
  /**
   * the flow for which this position is created
   *
   * @generated from field: uint64 flow = 1;
   */
  flow = protoInt64.zero;

  /**
   * the address of the position's owner
   *
   * @generated from field: string owner = 2;
   */
  owner = "";

  /**
   * the address that the owner has delegated position management to.
   * the operator is allowed to manage the position
   *
   * @generated from field: string operator = 3;
   */
  operator = "";

  /**
   * an index for the amount of purchase that has already been applied
   *
   * @generated from field: string dist_index = 4;
   */
  distIndex = "";

  /**
   * the current amount of token-in provided to buy token-out
   *
   * @generated from field: string token_in_balance = 5;
   */
  tokenInBalance = "";

  /**
   * the amount of already spent in tokens
   *
   * @generated from field: string spent_token_in = 6;
   */
  spentTokenIn = "";

  /**
   * the shares of this position from the flow
   *
   * @generated from field: string shares = 7;
   */
  shares = "";

  /**
   * the amount of out tokens that has purchased by user
   *
   * @generated from field: string purchased_token_out = 8;
   */
  purchasedTokenOut = "";

  /**
   * the amount of purchased token that are paid for, but not calculated in purchased_token_out because of rounding errors
   *
   * @generated from field: string pending_purchase = 9;
   */
  pendingPurchase = "";

  /**
   * the amount of purchase that has been claimed by user and already transferred to their account
   *
   * @generated from field: string claimed_amount = 10;
   */
  claimedAmount = "";

  constructor(data?: PartialMessage<Position>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "refractedlabs.flowtrade.v1.Position";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "flow", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "operator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "dist_index", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "token_in_balance", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "spent_token_in", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "shares", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "purchased_token_out", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "pending_purchase", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "claimed_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Position {
    return new Position().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Position {
    return new Position().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Position {
    return new Position().fromJsonString(jsonString, options);
  }

  static equals(a: Position | PlainMessage<Position> | undefined, b: Position | PlainMessage<Position> | undefined): boolean {
    return proto3.util.equals(Position, a, b);
  }
}

